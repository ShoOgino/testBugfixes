{"path":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedNumeric() throws Exception {\n    assumeTrue(\"codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedNumeric() throws Exception {\n    assumeTrue(\"codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    assumeTrue(\"codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    assumeTrue(\"codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    assumeTrue(\"codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    assumeTrue(\"codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046","date":1417033646,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        if (i > single.docID()) {\n          assertEquals(single.nextDoc(), multi.nextDoc());\n        }\n        if (i == single.docID()) {\n          assertEquals(single.docValueCount(), multi.docValueCount());\n          for (int j = 0; j < single.docValueCount(); j++) {\n            assertEquals(single.nextValue(), multi.nextValue());\n          }\n        }\n      }\n    }\n    testRandomAdvance(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        if (i > single.docID()) {\n          assertEquals(single.nextDoc(), multi.nextDoc());\n        }\n        if (i == single.docID()) {\n          assertEquals(single.docValueCount(), multi.docValueCount());\n          for (int j = 0; j < single.docValueCount(); j++) {\n            assertEquals(single.nextValue(), multi.nextValue());\n          }\n        }\n      }\n    }\n    testRandomAdvance(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        if (i > single.docID()) {\n          assertEquals(single.nextDoc(), multi.nextDoc());\n        }\n        if (i == single.docID()) {\n          assertEquals(single.docValueCount(), multi.docValueCount());\n          for (int j = 0; j < single.docValueCount(); j++) {\n            assertEquals(single.nextValue(), multi.nextValue());\n          }\n        }\n      }\n    }\n    testRandomAdvance(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        single.setDocument(i);\n        ArrayList<Long> expectedList = new ArrayList<>();\n        for (int j = 0; j < single.count(); j++) {\n          expectedList.add(single.valueAt(j));\n        }\n        \n        multi.setDocument(i);\n        assertEquals(expectedList.size(), multi.count());\n        for (int j = 0; j < single.count(); j++) {\n          assertEquals(expectedList.get(j).longValue(), multi.valueAt(j));\n        }\n      }\n    }\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b133bc4d7193efff507eb88f86fcc07c4e8b50","date":1477907694,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        if (i > single.docID()) {\n          assertEquals(single.nextDoc(), multi.nextDoc());\n        }\n        if (i == single.docID()) {\n          assertEquals(single.docValueCount(), multi.docValueCount());\n          for (int j = 0; j < single.docValueCount(); j++) {\n            assertEquals(single.nextValue(), multi.nextValue());\n          }\n        }\n      }\n    }\n    testRandomAdvance(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"));\n    testRandomAdvanceExact(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"), merged.maxDoc());\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        if (i > single.docID()) {\n          assertEquals(single.nextDoc(), multi.nextDoc());\n        }\n        if (i == single.docID()) {\n          assertEquals(single.docValueCount(), multi.docValueCount());\n          for (int j = 0; j < single.docValueCount(); j++) {\n            assertEquals(single.nextValue(), multi.nextValue());\n          }\n        }\n      }\n    }\n    testRandomAdvance(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSortedNumeric().mjava","sourceNew":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        if (i > single.docID()) {\n          assertEquals(single.nextDoc(), multi.nextDoc());\n        }\n        if (i == single.docID()) {\n          assertEquals(single.docValueCount(), multi.docValueCount());\n          for (int j = 0; j < single.docValueCount(); j++) {\n            assertEquals(single.nextValue(), multi.nextValue());\n          }\n        }\n      }\n    }\n    testRandomAdvance(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"));\n    testRandomAdvanceExact(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"), merged.maxDoc());\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumeric() throws Exception {\n    Directory dir = newDirectory();\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      int numValues = random().nextInt(5);\n      for (int j = 0; j < numValues; j++) {\n        doc.add(new SortedNumericDocValuesField(\"nums\", TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedNumericDocValues multi = MultiDocValues.getSortedNumericValues(ir, \"nums\");\n    SortedNumericDocValues single = merged.getSortedNumericDocValues(\"nums\");\n    if (multi == null) {\n      assertNull(single);\n    } else {\n      // check values\n      for (int i = 0; i < numDocs; i++) {\n        if (i > single.docID()) {\n          assertEquals(single.nextDoc(), multi.nextDoc());\n        }\n        if (i == single.docID()) {\n          assertEquals(single.docValueCount(), multi.docValueCount());\n          for (int j = 0; j < single.docValueCount(); j++) {\n            assertEquals(single.nextValue(), multi.nextValue());\n          }\n        }\n      }\n    }\n    testRandomAdvance(merged.getSortedNumericDocValues(\"nums\"), MultiDocValues.getSortedNumericValues(ir, \"nums\"));\n    \n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d0ef034a4f10871667ae75181537775ddcf8ade4","ad2a673349939e48652bf304cccf673c3412198f"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"14b133bc4d7193efff507eb88f86fcc07c4e8b50":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ad2a673349939e48652bf304cccf673c3412198f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"320888923ec13b91f53082558f01f4c9960dd226":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","ad2a673349939e48652bf304cccf673c3412198f"],"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"14b133bc4d7193efff507eb88f86fcc07c4e8b50":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}