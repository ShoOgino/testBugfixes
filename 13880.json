{"path":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","commits":[{"id":"6a2b7a4c3442f9d6e937213f4661f316485108c8","date":1304351258,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"/dev/null","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"/dev/null","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"/dev/null","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = (TEST_NIGHTLY ? 500 : 50) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = (TEST_NIGHTLY ? 500 : 50) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = (TEST_NIGHTLY ? 500 : 50) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = (TEST_NIGHTLY ? 500 : 50) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["6a2b7a4c3442f9d6e937213f4661f316485108c8"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a2b7a4c3442f9d6e937213f4661f316485108c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","f83af14a2a8131b14d7aee6274c740334e0363d3"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a2b7a4c3442f9d6e937213f4661f316485108c8"],"6a2b7a4c3442f9d6e937213f4661f316485108c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","6a2b7a4c3442f9d6e937213f4661f316485108c8"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"6a2b7a4c3442f9d6e937213f4661f316485108c8":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}