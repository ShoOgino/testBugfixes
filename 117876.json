{"path":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.experimental */\n  public AggValueSource parseAgg(int flags) throws SyntaxError {\n    String id = sp.getId();\n    AggValueSource vs = null;\n    boolean hasParen = false;\n\n    if (\"agg\".equals(id)) {\n      hasParen = sp.opt(\"(\");\n      vs = parseAgg(flags | FLAG_IS_AGG);\n    } else {\n      // parse as an aggregation...\n      if (!id.startsWith(\"agg_\")) {\n        id = \"agg_\" + id;\n      }\n\n      hasParen = sp.opt(\"(\");\n\n      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n      argParser = req.getCore().getValueSourceParser(id);\n      if (argParser == null) {\n        throw new SyntaxError(\"Unknown aggregation \" + id + \" in (\" + sp + \")\");\n      }\n\n      ValueSource vv = argParser.parse(this);\n      if (!(vv instanceof AggValueSource)) {\n        if (argParser == null) {\n          throw new SyntaxError(\"Expected aggregation from \" + id + \" but got (\" + vv + \") in (\" + sp + \")\");\n        }\n      }\n      vs = (AggValueSource) vv;\n    }\n\n    if (hasParen) {\n      sp.expect(\")\");\n    }\n\n    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {\n      consumeArgumentDelimiter();\n    }\n\n    return vs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["efff98a8632f3c2f5b05f961e22a67f122db81e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.experimental */\n  public AggValueSource parseAgg(int flags) throws SyntaxError {\n    String id = sp.getId();\n    AggValueSource vs = null;\n    boolean hasParen = false;\n\n    if (\"agg\".equals(id)) {\n      hasParen = sp.opt(\"(\");\n      vs = parseAgg(flags | FLAG_IS_AGG);\n    } else {\n      // parse as an aggregation...\n      if (!id.startsWith(\"agg_\")) {\n        id = \"agg_\" + id;\n      }\n\n      hasParen = sp.opt(\"(\");\n\n      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n      argParser = req.getCore().getValueSourceParser(id);\n      if (argParser == null) {\n        throw new SyntaxError(\"Unknown aggregation \" + id + \" in (\" + sp + \")\");\n      }\n\n      ValueSource vv = argParser.parse(this);\n      if (!(vv instanceof AggValueSource)) {\n        if (argParser == null) {\n          throw new SyntaxError(\"Expected aggregation from \" + id + \" but got (\" + vv + \") in (\" + sp + \")\");\n        }\n      }\n      vs = (AggValueSource) vv;\n    }\n\n    if (hasParen) {\n      sp.expect(\")\");\n    }\n\n    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {\n      consumeArgumentDelimiter();\n    }\n\n    return vs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efff98a8632f3c2f5b05f961e22a67f122db81e0","date":1550955355,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","sourceNew":"  /** @lucene.experimental */\n  public AggValueSource parseAgg(int flags) throws SyntaxError {\n    String id = sp.getId();\n    AggValueSource vs = null;\n    boolean hasParen = false;\n\n    if (\"agg\".equals(id)) {\n      hasParen = sp.opt(\"(\");\n      vs = parseAgg(flags | FLAG_IS_AGG);\n    } else {\n      // parse as an aggregation...\n      if (!id.startsWith(\"agg_\")) {\n        id = \"agg_\" + id;\n      }\n\n      hasParen = sp.opt(\"(\");\n\n      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n      if (argParser == null) {\n        throw new SyntaxError(\"Unknown aggregation \" + id + \" in (\" + sp + \")\");\n      }\n\n      ValueSource vv = argParser.parse(this);\n      if (!(vv instanceof AggValueSource)) {\n        if (argParser == null) { // why this??\n          throw new SyntaxError(\"Expected aggregation from \" + id + \" but got (\" + vv + \") in (\" + sp + \")\");\n        }\n      }\n      vs = (AggValueSource) vv;\n    }\n\n    if (hasParen) {\n      sp.expect(\")\");\n    }\n\n    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {\n      consumeArgumentDelimiter();\n    }\n\n    return vs;\n  }\n\n","sourceOld":"  /** @lucene.experimental */\n  public AggValueSource parseAgg(int flags) throws SyntaxError {\n    String id = sp.getId();\n    AggValueSource vs = null;\n    boolean hasParen = false;\n\n    if (\"agg\".equals(id)) {\n      hasParen = sp.opt(\"(\");\n      vs = parseAgg(flags | FLAG_IS_AGG);\n    } else {\n      // parse as an aggregation...\n      if (!id.startsWith(\"agg_\")) {\n        id = \"agg_\" + id;\n      }\n\n      hasParen = sp.opt(\"(\");\n\n      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n      argParser = req.getCore().getValueSourceParser(id);\n      if (argParser == null) {\n        throw new SyntaxError(\"Unknown aggregation \" + id + \" in (\" + sp + \")\");\n      }\n\n      ValueSource vv = argParser.parse(this);\n      if (!(vv instanceof AggValueSource)) {\n        if (argParser == null) {\n          throw new SyntaxError(\"Expected aggregation from \" + id + \" but got (\" + vv + \") in (\" + sp + \")\");\n        }\n      }\n      vs = (AggValueSource) vv;\n    }\n\n    if (hasParen) {\n      sp.expect(\")\");\n    }\n\n    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {\n      consumeArgumentDelimiter();\n    }\n\n    return vs;\n  }\n\n","bugFix":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","sourceNew":"  /** @lucene.experimental */\n  public AggValueSource parseAgg(int flags) throws SyntaxError {\n    String id = sp.getId();\n    AggValueSource vs = null;\n    boolean hasParen = false;\n\n    if (\"agg\".equals(id)) {\n      hasParen = sp.opt(\"(\");\n      vs = parseAgg(flags | FLAG_IS_AGG);\n    } else {\n      // parse as an aggregation...\n      if (!id.startsWith(\"agg_\")) {\n        id = \"agg_\" + id;\n      }\n\n      hasParen = sp.opt(\"(\");\n\n      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n      if (argParser == null) {\n        throw new SyntaxError(\"Unknown aggregation \" + id + \" in (\" + sp + \")\");\n      }\n\n      ValueSource vv = argParser.parse(this);\n      if (!(vv instanceof AggValueSource)) {\n        if (argParser == null) { // why this??\n          throw new SyntaxError(\"Expected aggregation from \" + id + \" but got (\" + vv + \") in (\" + sp + \")\");\n        }\n      }\n      vs = (AggValueSource) vv;\n    }\n\n    if (hasParen) {\n      sp.expect(\")\");\n    }\n\n    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {\n      consumeArgumentDelimiter();\n    }\n\n    return vs;\n  }\n\n","sourceOld":"  /** @lucene.experimental */\n  public AggValueSource parseAgg(int flags) throws SyntaxError {\n    String id = sp.getId();\n    AggValueSource vs = null;\n    boolean hasParen = false;\n\n    if (\"agg\".equals(id)) {\n      hasParen = sp.opt(\"(\");\n      vs = parseAgg(flags | FLAG_IS_AGG);\n    } else {\n      // parse as an aggregation...\n      if (!id.startsWith(\"agg_\")) {\n        id = \"agg_\" + id;\n      }\n\n      hasParen = sp.opt(\"(\");\n\n      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n      argParser = req.getCore().getValueSourceParser(id);\n      if (argParser == null) {\n        throw new SyntaxError(\"Unknown aggregation \" + id + \" in (\" + sp + \")\");\n      }\n\n      ValueSource vv = argParser.parse(this);\n      if (!(vv instanceof AggValueSource)) {\n        if (argParser == null) {\n          throw new SyntaxError(\"Expected aggregation from \" + id + \" but got (\" + vv + \") in (\" + sp + \")\");\n        }\n      }\n      vs = (AggValueSource) vv;\n    }\n\n    if (hasParen) {\n      sp.expect(\")\");\n    }\n\n    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {\n      consumeArgumentDelimiter();\n    }\n\n    return vs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43043880eedeac03eab1ed83c32efc3866ae0c6b","date":1584508617,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parseAgg(int).mjava","sourceNew":"  /** @lucene.experimental */\n  public AggValueSource parseAgg(int flags) throws SyntaxError {\n    String origId = sp.getId();\n    AggValueSource vs = null;\n    boolean hasParen;\n\n    if (\"agg\".equals(origId)) {\n      hasParen = sp.opt(\"(\");\n      vs = parseAgg(flags | FLAG_IS_AGG);\n    } else {\n      // parse as an aggregation...\n      String id = origId.startsWith(\"agg_\")? origId: \"agg_\" + origId;\n      hasParen = sp.opt(\"(\");\n\n      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n      if (argParser == null) {\n        argParser = req.getCore().getValueSourceParser(origId);\n        if (argParser == null) {\n          throw new SyntaxError(\"Unknown aggregation '\" + origId + \"' in input (\" + sp + \")\");\n        } else {\n          throw new SyntaxError(\"Expected multi-doc aggregation from '\" +  origId +\n              \"' but got per-doc function in input (\" + sp + \")\");\n        }\n      }\n\n      ValueSource vv = argParser.parse(this);\n      if (!(vv instanceof AggValueSource)) {\n        throw new SyntaxError(\"Expected multi-doc aggregation from '\" + origId +\n            \"' but got (\" + vv + \") in (\" + sp + \")\");\n      }\n      vs = (AggValueSource) vv;\n    }\n\n    if (hasParen) {\n      sp.expect(\")\");\n    }\n\n    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {\n      consumeArgumentDelimiter();\n    }\n\n    return vs;\n  }\n\n","sourceOld":"  /** @lucene.experimental */\n  public AggValueSource parseAgg(int flags) throws SyntaxError {\n    String id = sp.getId();\n    AggValueSource vs = null;\n    boolean hasParen = false;\n\n    if (\"agg\".equals(id)) {\n      hasParen = sp.opt(\"(\");\n      vs = parseAgg(flags | FLAG_IS_AGG);\n    } else {\n      // parse as an aggregation...\n      if (!id.startsWith(\"agg_\")) {\n        id = \"agg_\" + id;\n      }\n\n      hasParen = sp.opt(\"(\");\n\n      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n      if (argParser == null) {\n        throw new SyntaxError(\"Unknown aggregation \" + id + \" in (\" + sp + \")\");\n      }\n\n      ValueSource vv = argParser.parse(this);\n      if (!(vv instanceof AggValueSource)) {\n        if (argParser == null) { // why this??\n          throw new SyntaxError(\"Expected aggregation from \" + id + \" but got (\" + vv + \") in (\" + sp + \")\");\n        }\n      }\n      vs = (AggValueSource) vv;\n    }\n\n    if (hasParen) {\n      sp.expect(\")\");\n    }\n\n    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {\n      consumeArgumentDelimiter();\n    }\n\n    return vs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43043880eedeac03eab1ed83c32efc3866ae0c6b":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efff98a8632f3c2f5b05f961e22a67f122db81e0":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","efff98a8632f3c2f5b05f961e22a67f122db81e0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43043880eedeac03eab1ed83c32efc3866ae0c6b"]},"commit2Childs":{"43043880eedeac03eab1ed83c32efc3866ae0c6b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","efff98a8632f3c2f5b05f961e22a67f122db81e0","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"efff98a8632f3c2f5b05f961e22a67f122db81e0":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["43043880eedeac03eab1ed83c32efc3866ae0c6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}