{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int,int).mjava","commits":[{"id":"59d4661023aa9541b0a759e4d2e11dcf83b923a0","date":1420124226,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat#CompressingTermVectorsFormat(String,String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param blockSize the number of chunks to store in an index block.\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize, int blockSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    if (blockSize < 1) {\n      throw new IllegalArgumentException(\"blockSize must be >= 1\");\n    }\n    this.blockSize = blockSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingTermVectorsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkIndexHeader codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingTermVectorsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param segmentSuffix a suffix to append to files created by this format\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingTermVectorsFormat(String formatName, String segmentSuffix,\n      CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.segmentSuffix = segmentSuffix;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"]},"commit2Childs":{"59d4661023aa9541b0a759e4d2e11dcf83b923a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d4661023aa9541b0a759e4d2e11dcf83b923a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}