{"path":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","commits":[{"id":"a0b5db1c20d7a379233ae3955449a9e42caef007","date":1394048511,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n                            String hostContext, String host, int leaderVoteWait, boolean genericCoreNodeNames) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n                            String hostContext, String host, int leaderVoteWait, boolean genericCoreNodeNames) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":["d2c1938c9f5c1c27e65b3a92640108988277ee9b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2c1938c9f5c1c27e65b3a92640108988277ee9b","date":1418411102,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String solrHostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == solrHostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, solrHostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, solrHostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":["c83f985d9828d30801541f1eed26aa3169646baf","92a4da96826f502cf1a56a096929b37ce73e523a","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String solrHostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == solrHostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, solrHostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, solrHostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String solrHostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == solrHostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, solrHostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, solrHostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String solrHostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == solrHostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, solrHostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, solrHostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String solrHostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == solrHostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, solrHostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, solrHostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,CloudConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, CloudConfig config) {\n\n    ZkController zkController = null;\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun != null && config == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Cannot start Solr in cloud mode - no cloud config provided\");\n    \n    if (config == null)\n        return;  // not in zk mode\n\n    String zookeeperHost = config.getZkHost();\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(config.getZkHost()), zkDataHome, zkConfHome, config.getSolrHostPort());\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientConnectTimeout, config,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String solrHostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == solrHostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, solrHostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, solrHostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String solrHostPort,\n        String hostContext, String host, int leaderVoteWait, int leaderConflictResolveWait, boolean genericCoreNodeNames) {\n\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == solrHostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(stripChroot(zkRun), stripChroot(zookeeperHost), zkDataHome, zkConfHome, solrHostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 30000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf || zkRunOnly)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \" + zookeeperHost);\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, solrHostPort, hostContext,\n            leaderVoteWait, leaderConflictResolveWait, genericCoreNodeNames,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          Path configPath = Paths.get(confDir);\n          if (!Files.isDirectory(configPath))\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          ZkConfigManager configManager = new ZkConfigManager(zkController.getZkClient());\n          configManager.uploadConfigDir(configPath, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException | KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n\n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["d2c1938c9f5c1c27e65b3a92640108988277ee9b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0b5db1c20d7a379233ae3955449a9e42caef007"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c8a2521797f14d1d697a17a0069f5619cd211a6","e15199583d3635cb940942caed05132dd6c4c7c6"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0b5db1c20d7a379233ae3955449a9e42caef007"],"d2c1938c9f5c1c27e65b3a92640108988277ee9b":["c83f985d9828d30801541f1eed26aa3169646baf"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0b5db1c20d7a379233ae3955449a9e42caef007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83f985d9828d30801541f1eed26aa3169646baf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e15199583d3635cb940942caed05132dd6c4c7c6"],"e15199583d3635cb940942caed05132dd6c4c7c6":["6c8a2521797f14d1d697a17a0069f5619cd211a6"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c83f985d9828d30801541f1eed26aa3169646baf"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"d2c1938c9f5c1c27e65b3a92640108988277ee9b":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e15199583d3635cb940942caed05132dd6c4c7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","a0b5db1c20d7a379233ae3955449a9e42caef007"],"a0b5db1c20d7a379233ae3955449a9e42caef007":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"c83f985d9828d30801541f1eed26aa3169646baf":["d2c1938c9f5c1c27e65b3a92640108988277ee9b"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}