{"path":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || (queue.top()).current != top[0].current) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","sourceNew":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || !(queue.top()).current.equals(top[0].current)) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","sourceOld":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || (queue.top()).current != top[0].current) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","sourceNew":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || !(queue.top()).current.equals(top[0].current)) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","sourceOld":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || (queue.top()).current != top[0].current) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","sourceNew":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || !(queue.top()).current.equals(top[0].current)) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","sourceOld":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || (queue.top()).current != top[0].current) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#next().mjava","sourceNew":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || !(queue.top()).current.equals(top[0].current)) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","sourceOld":"  @Override\n  public String next() throws IOException {\n\n    // restore queue\n    for(int i=0;i<numTop;i++) {\n      top[i].current = top[i].fields.next();\n      if (top[i].current != null) {\n        queue.add(top[i]);\n      } else {\n        // no more fields in this sub-reader\n      }\n    }\n\n    numTop = 0;\n\n    // gather equal top fields\n    if (queue.size() > 0) {\n      while(true) {\n        top[numTop++] = queue.pop();\n        if (queue.size() == 0 || !(queue.top()).current.equals(top[0].current)) {\n          break;\n        }\n      }\n      currentField = top[0].current;\n    } else {\n      currentField = null;\n    }\n\n    return currentField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}