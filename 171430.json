{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/NodeVariable#getSuggestions(Suggestion.Ctx).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/NodeVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null || ctx.violation.replicaCountDelta == 0) return;\n    if (ctx.violation.replicaCountDelta > 0) {//there are more replicas than necessary\n      for (int i = 0; i < Math.abs(ctx.violation.replicaCountDelta); i++) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, ctx.violation.node)\n            .hint(ctx.violation.shard.equals(ANY) ? Suggester.Hint.COLL : Suggester.Hint.COLL_SHARD,\n                ctx.violation.shard.equals(ANY) ? ctx.violation.coll : new Pair<>(ctx.violation.coll, ctx.violation.shard));\n        ctx.addSuggestion(suggester);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/NodeVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/NodeVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null || ctx.violation.replicaCountDelta == 0) return;\n    if (ctx.violation.replicaCountDelta > 0) {//there are more replicas than necessary\n      for (int i = 0; i < Math.abs(ctx.violation.replicaCountDelta); i++) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .forceOperation(true)\n            .hint(Suggester.Hint.SRC_NODE, ctx.violation.node)\n            .hint(ctx.violation.shard.equals(ANY) ? Suggester.Hint.COLL : Suggester.Hint.COLL_SHARD,\n                ctx.violation.shard.equals(ANY) ? ctx.violation.coll : new Pair<>(ctx.violation.coll, ctx.violation.shard));\n        if(ctx.addSuggestion(suggester) == null) break;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null || ctx.violation.replicaCountDelta == 0) return;\n    if (ctx.violation.replicaCountDelta > 0) {//there are more replicas than necessary\n      for (int i = 0; i < Math.abs(ctx.violation.replicaCountDelta); i++) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .hint(Suggester.Hint.SRC_NODE, ctx.violation.node)\n            .hint(ctx.violation.shard.equals(ANY) ? Suggester.Hint.COLL : Suggester.Hint.COLL_SHARD,\n                ctx.violation.shard.equals(ANY) ? ctx.violation.coll : new Pair<>(ctx.violation.coll, ctx.violation.shard));\n        ctx.addSuggestion(suggester);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/NodeVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null || ctx.violation.replicaCountDelta == 0) return;\n    if (ctx.violation.replicaCountDelta > 0) {//there are more replicas than necessary\n      for (int i = 0; i < Math.abs(ctx.violation.replicaCountDelta); i++) {\n        Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n            .forceOperation(true)\n            .hint(Suggester.Hint.SRC_NODE, ctx.violation.node)\n            .hint(ctx.violation.shard.equals(ANY) ? Suggester.Hint.COLL : Suggester.Hint.COLL_SHARD,\n                ctx.violation.shard.equals(ANY) ? ctx.violation.coll : new Pair<>(ctx.violation.coll, ctx.violation.shard));\n        if(ctx.addSuggestion(suggester) == null) break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["16a22f8085bb46850c91784e94f7714345011404"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["427edb17549d4bb82462a16eec4ee0533d12d5b7"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["16a22f8085bb46850c91784e94f7714345011404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"16a22f8085bb46850c91784e94f7714345011404":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}