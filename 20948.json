{"path":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","commits":[{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","pathOld":"/dev/null","sourceNew":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n      GraphQuery expectedGraphQuery = new GraphQuery(syn1, syn2);\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(expectedGraphQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d5f9da379ac10a8ebcbf30e00314c561652932b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4408f3223cc4586cae91dc945fefb692e411d6d","date":1487771345,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","sourceNew":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n      BooleanQuery expectedGraphQuery = new BooleanQuery.Builder()\n          .add(syn1, BooleanClause.Occur.SHOULD)\n          .add(syn2, BooleanClause.Occur.SHOULD)\n          .build();\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(expectedGraphQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","sourceOld":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n      GraphQuery expectedGraphQuery = new GraphQuery(syn1, syn2);\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(expectedGraphQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","bugFix":null,"bugIntro":["8d5f9da379ac10a8ebcbf30e00314c561652932b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d5f9da379ac10a8ebcbf30e00314c561652932b","date":1497616966,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","sourceNew":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n\n      BooleanQuery synQuery = new BooleanQuery.Builder()\n          .add(syn1, BooleanClause.Occur.SHOULD)\n          .add(syn2, BooleanClause.Occur.SHOULD)\n          .build();\n      BooleanQuery expectedGraphQuery = new BooleanQuery.Builder()\n          .add(synQuery, occur)\n          .build();\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(synQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","sourceOld":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n      BooleanQuery expectedGraphQuery = new BooleanQuery.Builder()\n          .add(syn1, BooleanClause.Occur.SHOULD)\n          .add(syn2, BooleanClause.Occur.SHOULD)\n          .build();\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(expectedGraphQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","bugFix":["b4408f3223cc4586cae91dc945fefb692e411d6d","7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","sourceNew":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n\n      BooleanQuery synQuery = new BooleanQuery.Builder()\n          .add(syn1, BooleanClause.Occur.SHOULD)\n          .add(syn2, BooleanClause.Occur.SHOULD)\n          .build();\n      BooleanQuery expectedGraphQuery = new BooleanQuery.Builder()\n          .add(synQuery, occur)\n          .build();\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(synQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","sourceOld":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n      BooleanQuery expectedGraphQuery = new BooleanQuery.Builder()\n          .add(syn1, BooleanClause.Occur.SHOULD)\n          .add(syn2, BooleanClause.Occur.SHOULD)\n          .build();\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(expectedGraphQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestQueryBuilder#testMultiWordPhraseSynonymsBoolean().mjava","sourceNew":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n\n      BooleanQuery synQuery = new BooleanQuery.Builder()\n          .add(syn1, BooleanClause.Occur.SHOULD)\n          .add(syn2, BooleanClause.Occur.SHOULD)\n          .build();\n      BooleanQuery expectedGraphQuery = new BooleanQuery.Builder()\n          .add(synQuery, occur)\n          .build();\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(synQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(synQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","sourceOld":"  /** forms graph query */\n  public void testMultiWordPhraseSynonymsBoolean() throws Exception {\n    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {\n      Query syn1 = new PhraseQuery.Builder()\n          .add(new Term(\"field\", \"guinea\"))\n          .add(new Term(\"field\", \"pig\"))\n          .build();\n      Query syn2 = new TermQuery(new Term(\"field\", \"cavy\"));\n      BooleanQuery expectedGraphQuery = new BooleanQuery.Builder()\n          .add(syn1, BooleanClause.Occur.SHOULD)\n          .add(syn2, BooleanClause.Occur.SHOULD)\n          .build();\n      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());\n      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);\n      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig\", occur));\n\n      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story\", occur));\n\n      expectedBooleanQuery = new BooleanQuery.Builder()\n          .add(new TermQuery(new Term(\"field\", \"the\")), occur)\n          .add(expectedGraphQuery, occur)\n          .add(new TermQuery(new Term(\"field\", \"story\")), occur)\n          .add(expectedGraphQuery, occur)\n          .build();\n      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery(\"field\", \"the guinea pig story guinea pig\", occur));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d5f9da379ac10a8ebcbf30e00314c561652932b":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4408f3223cc4586cae91dc945fefb692e411d6d":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"28288370235ed02234a64753cdbf0c6ec096304a":["b4408f3223cc4586cae91dc945fefb692e411d6d","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b4408f3223cc4586cae91dc945fefb692e411d6d","8d5f9da379ac10a8ebcbf30e00314c561652932b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8d5f9da379ac10a8ebcbf30e00314c561652932b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"b4408f3223cc4586cae91dc945fefb692e411d6d":["8d5f9da379ac10a8ebcbf30e00314c561652932b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["b4408f3223cc4586cae91dc945fefb692e411d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}