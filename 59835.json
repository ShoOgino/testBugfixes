{"path":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingIntBlockAllocator#testAllocateAndFree().mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingIntBlockAllocator#testAllocateAndFree().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingIntBlockAllocator allocator = newAllocator();\n    HashSet<int[]> allocated = new HashSet<int[]>();\n    int freeButAllocated = 0;\n    int[] block = allocator.getIntBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random().nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getIntBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(\"\" + (4 * size * (allocated.size() + allocator.numBufferedBlocks()) - allocator.bytesUsed()), 4 * size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      int[][] array = allocated.toArray(new int[0][]);\n      int begin = random().nextInt(array.length);\n      int end = begin + random().nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        int[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleIntBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random().nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingIntBlockAllocator#testAllocateAndFree().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRecyclingIntBlockAllocator#testAllocateAndFree().mjava","sourceNew":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingIntBlockAllocator allocator = newAllocator();\n    HashSet<int[]> allocated = new HashSet<>();\n    int freeButAllocated = 0;\n    int[] block = allocator.getIntBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random().nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getIntBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(\"\" + (4 * size * (allocated.size() + allocator.numBufferedBlocks()) - allocator.bytesUsed()), 4 * size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      int[][] array = allocated.toArray(new int[0][]);\n      int begin = random().nextInt(array.length);\n      int end = begin + random().nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        int[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleIntBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random().nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllocateAndFree() {\n    RecyclingIntBlockAllocator allocator = newAllocator();\n    HashSet<int[]> allocated = new HashSet<int[]>();\n    int freeButAllocated = 0;\n    int[] block = allocator.getIntBlock();\n    allocated.add(block);\n    assertNotNull(block);\n    final int size = block.length;\n\n    int numIters = atLeast(97);\n    for (int i = 0; i < numIters; i++) {\n      int num = 1 + random().nextInt(39);\n      for (int j = 0; j < num; j++) {\n        block = allocator.getIntBlock();\n        freeButAllocated = Math.max(0, freeButAllocated - 1);\n        assertNotNull(block);\n        assertEquals(size, block.length);\n        assertTrue(\"block is returned twice\", allocated.add(block));\n        assertEquals(\"\" + (4 * size * (allocated.size() + allocator.numBufferedBlocks()) - allocator.bytesUsed()), 4 * size * (allocated.size() + allocator.numBufferedBlocks()),\n            allocator.bytesUsed());\n      }\n\n      int[][] array = allocated.toArray(new int[0][]);\n      int begin = random().nextInt(array.length);\n      int end = begin + random().nextInt(array.length - begin);\n      for (int j = begin; j < end; j++) {\n        int[] b = array[j];\n        assertTrue(allocated.remove(b));\n      }\n      allocator.recycleIntBlocks(array, begin, end);\n      for (int j = begin; j < end; j++) {\n        assertNull(array[j]);\n      }\n      // randomly free blocks\n      int numFreeBlocks = allocator.numBufferedBlocks();\n      int freeBlocks = allocator.freeBlocks(random().nextInt(7 + allocator\n          .maxBufferedBlocks()));\n      assertEquals(allocator.numBufferedBlocks(), numFreeBlocks - freeBlocks);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}