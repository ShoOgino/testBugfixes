{"path":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","commits":[{"id":"abba29aa88f170f3d51899c885b760337dd1c47c","date":1317196921,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#get().mjava","sourceNew":"  /** Obtain the current IndexSearcher.  You must match\n   *  every call to get with one call to {@link #release};\n   *  it's best to do so in a finally clause. */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }    \n\n","sourceOld":"  /** Obtain the current IndexSearcher.  You must match\n   *  every call to get with one call to {@link #release};\n   *  it's best to do so in a finally clause. */\n  public synchronized IndexSearcher get() {\n    if (currentSearcher == null) {\n      throw new AlreadyClosedException(\"this SearcherManager is closed\");\n    }\n    currentSearcher.getIndexReader().incRef();\n    return currentSearcher;\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18ce749d9192570523b915293cc3cae5d8062a60","date":1317197367,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","sourceNew":"  /** Obtain the current IndexSearcher.  You must match\n   *  every call to acquire with one call to {@link #release};\n   *  it's best to do so in a finally clause. */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }    \n\n","sourceOld":"  /** Obtain the current IndexSearcher.  You must match\n   *  every call to get with one call to {@link #release};\n   *  it's best to do so in a finally clause. */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","sourceNew":"  /**\n   * Obtain the current IndexSearcher. You must match every call to acquire with\n   * one call to {@link #release}; it's best to do so in a finally clause.\n   */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }\n\n","sourceOld":"  /** Obtain the current IndexSearcher.  You must match\n   *  every call to acquire with one call to {@link #release};\n   *  it's best to do so in a finally clause. */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/search/SearcherManager#acquire().mjava","sourceNew":"  /**\n   * Obtain the current IndexSearcher. You must match every call to acquire with\n   * one call to {@link #release}; it's best to do so in a finally clause.\n   */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }\n\n","sourceOld":"  /**\n   * Obtain the current IndexSearcher. You must match every call to acquire with\n   * one call to {@link #release}; it's best to do so in a finally clause.\n   */\n  public IndexSearcher acquire() {\n    IndexSearcher searcher;\n    do {\n      if ((searcher = currentSearcher) == null) {\n        throw new AlreadyClosedException(\"this SearcherManager is closed\");\n      }\n    } while (!searcher.getIndexReader().tryIncRef());\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18ce749d9192570523b915293cc3cae5d8062a60":["abba29aa88f170f3d51899c885b760337dd1c47c"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["606baff722a317c76a92b111d183b54b6e6e5741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606baff722a317c76a92b111d183b54b6e6e5741":["18ce749d9192570523b915293cc3cae5d8062a60"],"abba29aa88f170f3d51899c885b760337dd1c47c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"18ce749d9192570523b915293cc3cae5d8062a60":["606baff722a317c76a92b111d183b54b6e6e5741"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abba29aa88f170f3d51899c885b760337dd1c47c"],"606baff722a317c76a92b111d183b54b6e6e5741":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"abba29aa88f170f3d51899c885b760337dd1c47c":["18ce749d9192570523b915293cc3cae5d8062a60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}