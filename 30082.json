{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","commits":[{"id":"f0a4eeff354e8081247783f424a8e5a0fe106633","date":1355250757,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","pathOld":"/dev/null","sourceNew":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<SubmitCapture>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","pathOld":"/dev/null","sourceNew":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<SubmitCapture>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe999fc2d95d6fea71f960bf9556858387ba21f5","date":1363294860,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","sourceNew":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<SubmitCapture>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      shardResponseWithoutException.setSolrResponse(new QueryResponse());\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","sourceOld":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<SubmitCapture>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","sourceNew":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      shardResponseWithoutException.setSolrResponse(new QueryResponse());\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","sourceOld":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<SubmitCapture>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      shardResponseWithoutException.setSolrResponse(new QueryResponse());\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#mockShardHandlerForCreateJob(Integer,Integer).mjava","sourceNew":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      shardResponseWithoutException.setSolrResponse(new QueryResponse());\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","sourceOld":"  protected List<SubmitCapture> mockShardHandlerForCreateJob(\n      Integer numberOfSlices, Integer numberOfReplica) {\n    List<SubmitCapture> submitCaptures = new ArrayList<>();\n    for (int i = 0; i < (numberOfSlices * numberOfReplica); i++) {\n      SubmitCapture submitCapture = new SubmitCapture();\n      shardHandlerMock.submit(capture(submitCapture.shardRequestCapture),\n          capture(submitCapture.nodeUrlsWithoutProtocolPartCapture),\n          capture(submitCapture.params));\n      expectLastCall();\n      submitCaptures.add(submitCapture);\n      ShardResponse shardResponseWithoutException = new ShardResponse();\n      shardResponseWithoutException.setSolrResponse(new QueryResponse());\n      expect(shardHandlerMock.takeCompletedOrError()).andReturn(\n          shardResponseWithoutException);\n    }\n    expect(shardHandlerMock.takeCompletedOrError()).andReturn(null);\n    return submitCaptures;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0a4eeff354e8081247783f424a8e5a0fe106633"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["f0a4eeff354e8081247783f424a8e5a0fe106633"],"f0a4eeff354e8081247783f424a8e5a0fe106633":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f0a4eeff354e8081247783f424a8e5a0fe106633":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe999fc2d95d6fea71f960bf9556858387ba21f5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f0a4eeff354e8081247783f424a8e5a0fe106633"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}