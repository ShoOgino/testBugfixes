{"path":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"/dev/null","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof DocList) {\n        writeDocList((DocList) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof SolrDocument) {\n        SolrDocument solrDocument = (SolrDocument) o;\n        codec.writeSolrDocument(solrDocument, returnFields);\n        return null;\n      }\n      if (o instanceof Document) {\n        return getDoc((Document) o);\n      }\n\n      return o;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":null,"sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof DocList) {\n        writeDocList((DocList) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof SolrDocument) {\n        SolrDocument solrDocument = (SolrDocument) o;\n        codec.writeSolrDocument(solrDocument, returnFields);\n        return null;\n      }\n      if (o instanceof Document) {\n        return getDoc((Document) o);\n      }\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof DocList) {\n        writeDocList((DocList) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof SolrDocument) {\n        SolrDocument solrDocument = (SolrDocument) o;\n        codec.writeSolrDocument(solrDocument, returnFields);\n        return null;\n      }\n      if (o instanceof Document) {\n        return getDoc((Document) o);\n      }\n\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof DocList) {\n        writeDocList((DocList) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof SolrDocument) {\n        SolrDocument solrDocument = (SolrDocument) o;\n        codec.writeSolrDocument(solrDocument, returnFields);\n        return null;\n      }\n      if (o instanceof Document) {\n        return getDoc((Document) o);\n      }\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"/dev/null","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof DocList) {\n        writeDocList((DocList) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof SolrDocument) {\n        SolrDocument solrDocument = (SolrDocument) o;\n        codec.writeSolrDocument(solrDocument, returnFields);\n        return null;\n      }\n      if (o instanceof Document) {\n        return getDoc((Document) o);\n      }\n\n      return o;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.contains( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof DocList) {\n        writeDocList((DocList) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof SolrDocument) {\n        SolrDocument solrDocument = (SolrDocument) o;\n        codec.writeSolrDocument(solrDocument, returnFields);\n        return null;\n      }\n      if (o instanceof Document) {\n        return getDoc((Document) o);\n      }\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":["e5e0fe26a7a1290b0745e3cde32af3b14c36b61c","e5e0fe26a7a1290b0745e3cde32af3b14c36b61c","e5e0fe26a7a1290b0745e3cde32af3b14c36b61c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.contains( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":["e5e0fe26a7a1290b0745e3cde32af3b14c36b61c","e5e0fe26a7a1290b0745e3cde32af3b14c36b61c","e5e0fe26a7a1290b0745e3cde32af3b14c36b61c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof DocList) {\n        writeDocList((DocList) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof SolrDocument) {\n        SolrDocument solrDocument = (SolrDocument) o;\n        codec.writeSolrDocument(solrDocument, returnFields);\n        return null;\n      }\n      if (o instanceof Document) {\n        return getDoc((Document) o);\n      }\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof DocList) {\n        writeDocList((DocList) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof SolrDocument) {\n        SolrDocument solrDocument = (SolrDocument) o;\n        codec.writeSolrDocument(solrDocument, returnFields);\n        return null;\n      }\n      if (o instanceof Document) {\n        return getDoc((Document) o);\n      }\n\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}