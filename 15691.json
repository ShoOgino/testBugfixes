{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n    \n    cz.close();\n  }\n\n","sourceOld":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testFeminineNouns().mjava","sourceNew":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n    \n    cz.close();\n  }\n\n","sourceOld":"  /**\n   * Test showing how feminine noun forms conflate\n   */\n  public void testFeminineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* ending with hard consonant */\n    assertAnalyzesTo(cz, \"kost\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kosti\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostí\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostem\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostech\", new String[] { \"kost\" });\n    assertAnalyzesTo(cz, \"kostmi\", new String[] { \"kost\" });\n    \n    /* ending with a soft consonant */\n    // note: in this example sing nom. and sing acc. don't conflate w/ the rest\n    assertAnalyzesTo(cz, \"píseň\", new String[] { \"písň\" });\n    assertAnalyzesTo(cz, \"písně\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písni\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písněmi\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písních\", new String[] { \"písn\" });\n    assertAnalyzesTo(cz, \"písním\", new String[] { \"písn\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"růže\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růží\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžím\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžích\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růžemi\", new String[] { \"růh\" });\n    assertAnalyzesTo(cz, \"růži\", new String[] { \"růh\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"žena\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženy\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"žen\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženě\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženám\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženu\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženo\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženách\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženou\", new String[] { \"žn\" });\n    assertAnalyzesTo(cz, \"ženami\", new String[] { \"žn\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}