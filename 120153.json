{"path":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader,boolean).mjava","commits":[{"id":"a3f89986d299512248eedcbdc3530fbbbb5235e3","date":1435447038,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader,boolean).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader).mjava","sourceNew":"  private static void assertSorted(LeafReader reader, boolean reverse) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      final int lhs = (!reverse ? i-1 : i);\n      final int rhs = (!reverse ? i : i-1);\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i)+\",reverse=\"+reverse, ndv.get(lhs) <= ndv.get(rhs));\n    }\n  }\n\n","sourceOld":"  private static void assertSorted(LeafReader reader) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i), ndv.get(i-1) <= ndv.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader,boolean).mjava","sourceNew":null,"sourceOld":"  private static void assertSorted(LeafReader reader, boolean reverse) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      final int lhs = (!reverse ? i-1 : i);\n      final int rhs = (!reverse ? i : i-1);\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i)+\",reverse=\"+reverse, ndv.get(lhs) <= ndv.get(rhs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader,boolean).mjava","sourceNew":null,"sourceOld":"  private static void assertSorted(LeafReader reader, boolean reverse) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      final int lhs = (!reverse ? i-1 : i);\n      final int rhs = (!reverse ? i : i-1);\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i)+\",reverse=\"+reverse, ndv.get(lhs) <= ndv.get(rhs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader,boolean).mjava","sourceNew":null,"sourceOld":"  private static void assertSorted(LeafReader reader, boolean reverse) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      final int lhs = (!reverse ? i-1 : i);\n      final int rhs = (!reverse ? i : i-1);\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i)+\",reverse=\"+reverse, ndv.get(lhs) <= ndv.get(rhs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader,boolean).mjava","sourceNew":null,"sourceOld":"  private static void assertSorted(LeafReader reader, boolean reverse) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      final int lhs = (!reverse ? i-1 : i);\n      final int rhs = (!reverse ? i : i-1);\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i)+\",reverse=\"+reverse, ndv.get(lhs) <= ndv.get(rhs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#assertSorted(LeafReader,boolean).mjava","sourceNew":null,"sourceOld":"  private static void assertSorted(LeafReader reader, boolean reverse) throws IOException {\n    final NumericDocValues ndv = reader.getNumericDocValues(\"ndv\");\n    for (int i = 1; i < reader.maxDoc(); ++i) {\n      final int lhs = (!reverse ? i-1 : i);\n      final int rhs = (!reverse ? i : i-1);\n      assertTrue(\"ndv(\" + (i-1) + \")=\" + ndv.get(i-1) + \",ndv(\" + i + \")=\" + ndv.get(i)+\",reverse=\"+reverse, ndv.get(lhs) <= ndv.get(rhs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3f89986d299512248eedcbdc3530fbbbb5235e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a3f89986d299512248eedcbdc3530fbbbb5235e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a3f89986d299512248eedcbdc3530fbbbb5235e3","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a3f89986d299512248eedcbdc3530fbbbb5235e3","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a3f89986d299512248eedcbdc3530fbbbb5235e3","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a3f89986d299512248eedcbdc3530fbbbb5235e3","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"a3f89986d299512248eedcbdc3530fbbbb5235e3":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3f89986d299512248eedcbdc3530fbbbb5235e3"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}