{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q = new BoostQuery(q, boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q.setBoost(boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q = new BoostQuery(q, boost.floatValue());\n            }\n          }\n          clauses.add(q);\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getMultiFieldQuery(clauses);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<BooleanClause> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q = new BoostQuery(q, boost.floatValue());\n            }\n          }\n          clauses.add(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getBooleanQuery(clauses, true);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      Query[] fieldQueries = new Query[fields.length];\n      int maxTerms = 0;\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          if (q instanceof TermQuery) {\n            maxTerms = Math.max(1, maxTerms);\n          } else if (q instanceof BooleanQuery) {\n            maxTerms = Math.max(maxTerms, ((BooleanQuery)q).clauses().size());\n          }\n          fieldQueries[i] = q;\n        }\n      }\n      for (int termNum = 0; termNum < maxTerms; termNum++) {\n        List<Query> termClauses = new ArrayList<>();\n        for (int i = 0; i < fields.length; i++) {\n          if (fieldQueries[i] != null) {\n            Query q = null;\n            if (fieldQueries[i] instanceof BooleanQuery) {\n              List<BooleanClause> nestedClauses = ((BooleanQuery)fieldQueries[i]).clauses();\n              if (termNum < nestedClauses.size()) {\n                q = nestedClauses.get(termNum).getQuery();\n              }\n            } else if (termNum == 0) { // e.g. TermQuery-s\n              q = fieldQueries[i];\n            }\n            if (q != null) {\n              if (boosts != null) {\n                //Get the boost from the map and apply them\n                Float boost = boosts.get(fields[i]);\n                if (boost != null) {\n                  q = new BoostQuery(q, boost);\n                }\n              }\n              termClauses.add(q);\n            }\n          }\n        }\n        if (maxTerms > 1) {\n          if (termClauses.size() > 0) {\n            BooleanQuery.Builder builder = newBooleanQuery();\n            for (Query termClause : termClauses) {\n              builder.add(termClause, BooleanClause.Occur.SHOULD);\n            }\n            clauses.add(builder.build());\n          }\n        } else {\n          clauses.addAll(termClauses);\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getMultiFieldQuery(clauses);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q = new BoostQuery(q, boost.floatValue());\n            }\n          }\n          clauses.add(q);\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getMultiFieldQuery(clauses);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":["818fd0a17e6c7f072aba351a575916e3063ca51b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"818fd0a17e6c7f072aba351a575916e3063ca51b","date":1475592660,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      Query[] fieldQueries = new Query[fields.length];\n      int maxTerms = 0;\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          if (q instanceof BooleanQuery) {\n            maxTerms = Math.max(maxTerms, ((BooleanQuery)q).clauses().size());\n          } else {\n            maxTerms = Math.max(1, maxTerms);\n          }\n          fieldQueries[i] = q;\n        }\n      }\n      for (int termNum = 0; termNum < maxTerms; termNum++) {\n        List<Query> termClauses = new ArrayList<>();\n        for (int i = 0; i < fields.length; i++) {\n          if (fieldQueries[i] != null) {\n            Query q = null;\n            if (fieldQueries[i] instanceof BooleanQuery) {\n              List<BooleanClause> nestedClauses = ((BooleanQuery)fieldQueries[i]).clauses();\n              if (termNum < nestedClauses.size()) {\n                q = nestedClauses.get(termNum).getQuery();\n              }\n            } else if (termNum == 0) { // e.g. TermQuery-s\n              q = fieldQueries[i];\n            }\n            if (q != null) {\n              if (boosts != null) {\n                //Get the boost from the map and apply them\n                Float boost = boosts.get(fields[i]);\n                if (boost != null) {\n                  q = new BoostQuery(q, boost);\n                }\n              }\n              termClauses.add(q);\n            }\n          }\n        }\n        if (maxTerms > 1) {\n          if (termClauses.size() > 0) {\n            BooleanQuery.Builder builder = newBooleanQuery();\n            for (Query termClause : termClauses) {\n              builder.add(termClause, BooleanClause.Occur.SHOULD);\n            }\n            clauses.add(builder.build());\n          }\n        } else {\n          clauses.addAll(termClauses);\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getMultiFieldQuery(clauses);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      Query[] fieldQueries = new Query[fields.length];\n      int maxTerms = 0;\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          if (q instanceof TermQuery) {\n            maxTerms = Math.max(1, maxTerms);\n          } else if (q instanceof BooleanQuery) {\n            maxTerms = Math.max(maxTerms, ((BooleanQuery)q).clauses().size());\n          }\n          fieldQueries[i] = q;\n        }\n      }\n      for (int termNum = 0; termNum < maxTerms; termNum++) {\n        List<Query> termClauses = new ArrayList<>();\n        for (int i = 0; i < fields.length; i++) {\n          if (fieldQueries[i] != null) {\n            Query q = null;\n            if (fieldQueries[i] instanceof BooleanQuery) {\n              List<BooleanClause> nestedClauses = ((BooleanQuery)fieldQueries[i]).clauses();\n              if (termNum < nestedClauses.size()) {\n                q = nestedClauses.get(termNum).getQuery();\n              }\n            } else if (termNum == 0) { // e.g. TermQuery-s\n              q = fieldQueries[i];\n            }\n            if (q != null) {\n              if (boosts != null) {\n                //Get the boost from the map and apply them\n                Float boost = boosts.get(fields[i]);\n                if (boost != null) {\n                  q = new BoostQuery(q, boost);\n                }\n              }\n              termClauses.add(q);\n            }\n          }\n        }\n        if (maxTerms > 1) {\n          if (termClauses.size() > 0) {\n            BooleanQuery.Builder builder = newBooleanQuery();\n            for (Query termClause : termClauses) {\n              builder.add(termClause, BooleanClause.Occur.SHOULD);\n            }\n            clauses.add(builder.build());\n          }\n        } else {\n          clauses.addAll(termClauses);\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getMultiFieldQuery(clauses);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/MultiFieldQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      Query[] fieldQueries = new Query[fields.length];\n      int maxTerms = 0;\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          if (q instanceof BooleanQuery) {\n            maxTerms = Math.max(maxTerms, ((BooleanQuery)q).clauses().size());\n          } else {\n            maxTerms = Math.max(1, maxTerms);\n          }\n          fieldQueries[i] = q;\n        }\n      }\n      for (int termNum = 0; termNum < maxTerms; termNum++) {\n        List<Query> termClauses = new ArrayList<>();\n        for (int i = 0; i < fields.length; i++) {\n          if (fieldQueries[i] != null) {\n            Query q = null;\n            if (fieldQueries[i] instanceof BooleanQuery) {\n              List<BooleanClause> nestedClauses = ((BooleanQuery)fieldQueries[i]).clauses();\n              if (termNum < nestedClauses.size()) {\n                q = nestedClauses.get(termNum).getQuery();\n              }\n            } else if (termNum == 0) { // e.g. TermQuery-s\n              q = fieldQueries[i];\n            }\n            if (q != null) {\n              if (boosts != null) {\n                //Get the boost from the map and apply them\n                Float boost = boosts.get(fields[i]);\n                if (boost != null) {\n                  q = new BoostQuery(q, boost);\n                }\n              }\n              termClauses.add(q);\n            }\n          }\n        }\n        if (maxTerms > 1) {\n          if (termClauses.size() > 0) {\n            BooleanQuery.Builder builder = newBooleanQuery();\n            for (Query termClause : termClauses) {\n              builder.add(termClause, BooleanClause.Occur.SHOULD);\n            }\n            clauses.add(builder.build());\n          }\n        } else {\n          clauses.addAll(termClauses);\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getMultiFieldQuery(clauses);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    if (field == null) {\n      List<Query> clauses = new ArrayList<>();\n      for (int i = 0; i < fields.length; i++) {\n        Query q = super.getFieldQuery(fields[i], queryText, quoted);\n        if (q != null) {\n          //If the user passes a map of boosts\n          if (boosts != null) {\n            //Get the boost from the map and apply them\n            Float boost = boosts.get(fields[i]);\n            if (boost != null) {\n              q = new BoostQuery(q, boost.floatValue());\n            }\n          }\n          clauses.add(q);\n        }\n      }\n      if (clauses.size() == 0)  // happens for stopwords\n        return null;\n      return getMultiFieldQuery(clauses);\n    }\n    Query q = super.getFieldQuery(field, queryText, quoted);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","818fd0a17e6c7f072aba351a575916e3063ca51b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["818fd0a17e6c7f072aba351a575916e3063ca51b"],"818fd0a17e6c7f072aba351a575916e3063ca51b":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["818fd0a17e6c7f072aba351a575916e3063ca51b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"818fd0a17e6c7f072aba351a575916e3063ca51b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}