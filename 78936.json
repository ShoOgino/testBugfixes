{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws CorruptIndexException,\n      IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n      return ((DirectoryReader) r).isCurrent();\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      return r instanceof DirectoryReader ?\n        ((DirectoryReader ) r).isCurrent() :\n        true;\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#isSearcherCurrent().mjava","sourceNew":"  /**\n   * Returns <code>true</code> if no changes have occurred since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n      return ((DirectoryReader) r).isCurrent();\n    } finally {\n      release(searcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> if no changes have occured since this searcher\n   * ie. reader was opened, otherwise <code>false</code>.\n   * @see DirectoryReader#isCurrent() \n   */\n  public boolean isSearcherCurrent() throws IOException {\n    final IndexSearcher searcher = acquire();\n    try {\n      final IndexReader r = searcher.getIndexReader();\n      assert r instanceof DirectoryReader: \"searcher's IndexReader should be a DirectoryReader, but got \" + r;\n      return ((DirectoryReader) r).isCurrent();\n    } finally {\n      release(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["c380c22ff3b659b2d7412a3335f853d354d17568"],"c380c22ff3b659b2d7412a3335f853d354d17568":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"]},"commit2Childs":{"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c380c22ff3b659b2d7412a3335f853d354d17568":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}