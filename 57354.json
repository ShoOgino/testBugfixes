{"path":"lucene/src/test/org/apache/lucene/index/TestForceMergeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestForceMergeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOptimizeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.maxNumSegments != -1 && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: maxNumSegments merge\");\n        }\n        mergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.optimize && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: optimized merge\");\n        }\n        optimizeMergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestForceMergeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestForceMergeForever.MyIndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.maxNumSegments != -1 && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: maxNumSegments merge\");\n        }\n        mergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergePolicy.OneMerge merge) throws CorruptIndexException, IOException {\n      if (merge.maxNumSegments != -1 && (first || merge.segments.size() == 1)) {\n        first = false;\n        if (VERBOSE) {\n          System.out.println(\"TEST: maxNumSegments merge\");\n        }\n        mergeCount.incrementAndGet();\n      }\n      super.merge(merge);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}