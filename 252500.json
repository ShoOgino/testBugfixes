{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestDirectBits(int,float).mjava","commits":[{"id":"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3","date":1401710950,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestDirectBits(int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to find the number of bits per value that would\n   * read from disk the fastest reader whose overhead is less than\n   * <code>acceptableOverheadRatio</code>.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter makes sense for\n   * random-access {@link Reader}s. In case you only plan to perform\n   * sequential access on this stream later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   * </p><p>\n   */\n  public static int fastestDirectBits(int bitsPerValue, float acceptableOverheadRatio) {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    // first see if we can upgrade to byte\n    int byteAlign = (bitsPerValue + 7) & 0xF8;\n    if (byteAlign <= maxBitsPerValue) {\n      return byteAlign;\n    }\n      \n    // otherwise try to upgrade to a nibble boundary (for numbers < 32)\n    int nibbleAlign = (bitsPerValue + 3) & 0xFC;\n    if (bitsPerValue < 32 && nibbleAlign <= maxBitsPerValue) {\n      return nibbleAlign;\n    }\n      \n    return bitsPerValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#fastestDirectBits(int,float).mjava","sourceNew":null,"sourceOld":"  /**\n   * Try to find the number of bits per value that would\n   * read from disk the fastest reader whose overhead is less than\n   * <code>acceptableOverheadRatio</code>.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter makes sense for\n   * random-access {@link Reader}s. In case you only plan to perform\n   * sequential access on this stream later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   * </p><p>\n   */\n  public static int fastestDirectBits(int bitsPerValue, float acceptableOverheadRatio) {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    // first see if we can upgrade to byte\n    int byteAlign = (bitsPerValue + 7) & 0xF8;\n    if (byteAlign <= maxBitsPerValue) {\n      return byteAlign;\n    }\n      \n    // otherwise try to upgrade to a nibble boundary (for numbers < 32)\n    int nibbleAlign = (bitsPerValue + 3) & 0xFC;\n    if (bitsPerValue < 32 && nibbleAlign <= maxBitsPerValue) {\n      return nibbleAlign;\n    }\n      \n    return bitsPerValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"]},"commit2Childs":{"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}