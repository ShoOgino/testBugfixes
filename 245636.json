{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","commits":[{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed && !fi.omitNorms) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed && !fi.omitNorms) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed && !fi.omitNorms) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_PREFLEX_RW);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY) {\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        } else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n          bits |= OMIT_POSITIONS;\n        }\n        output.writeString(fi.name);\n        /*\n         * we need to write the field number since IW tries\n         * to stabelize the field numbers across segments so the\n         * FI ordinal is not necessarily equivalent to the field number \n         */\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n        if (fi.isIndexed && !fi.omitNorms) {\n          // to allow null norm types we need to indicate if norms are written \n          // only in RW case\n          output.writeByte((byte) (fi.getNormType() == null ? 0 : 1));\n        }\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e92a321a2612261e1010a4038c8586e30b081552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92a321a2612261e1010a4038c8586e30b081552":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e92a321a2612261e1010a4038c8586e30b081552"],"e92a321a2612261e1010a4038c8586e30b081552":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}