{"path":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    // nocommit - randomize IOContext here?\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, context));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    // nocommit - randomize IOContext here?\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    // nocommit - randomize IOContext here?\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, context));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e248526ae3a33286a678d7833da022fd95695f2d","date":1309450587,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    // nocommit - randomize IOContext here?\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, true);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#openInput(String,IOContext).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String name, IOContext context) throws IOException {\n    maybeYield();\n    if (!delegate.fileExists(name))\n      throw new FileNotFoundException(name);\n\n    // cannot open a file for input if it's still open for\n    // output, except for segments.gen and segments_N\n    if (openFilesForWrite.contains(name) && !name.startsWith(\"segments\")) {\n      throw fillOpenTrace(new IOException(\"MockDirectoryWrapper: file \\\"\" + name + \"\\\" is still open for writing\"), name, false);\n    }\n\n    IndexInput ii = new MockIndexInputWrapper(this, name, delegate.openInput(name, LuceneTestCase.newIOContext(randomState)));\n    addFileHandle(ii, name, Handle.Input);\n    return ii;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["67aadace85f701c87a4e0721eedcda25d8415a70"],"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e248526ae3a33286a678d7833da022fd95695f2d":["b6f9be74ca7baaef11857ad002cad40419979516"],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e248526ae3a33286a678d7833da022fd95695f2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67aadace85f701c87a4e0721eedcda25d8415a70":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"e248526ae3a33286a678d7833da022fd95695f2d":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"b6f9be74ca7baaef11857ad002cad40419979516":["e248526ae3a33286a678d7833da022fd95695f2d"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}