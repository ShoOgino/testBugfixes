{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","pathOld":"/dev/null","sourceNew":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle) == false) {\n            result.clear(docID);\n            cost[0]--;\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue));\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5e8251ad51618827e557dd369f16921a666914b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","sourceNew":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle) == false) {\n            result.clear(docID);\n            cost[0]--;\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue));\n        }\n      };\n    }\n\n","sourceOld":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle) == false) {\n            result.clear(docID);\n            cost[0]--;\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["5e8251ad51618827e557dd369f16921a666914b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e8251ad51618827e557dd369f16921a666914b5","date":1548082828,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","sourceNew":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            result.clear(docID);\n            cost[0]--;\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","sourceOld":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle) == false) {\n            result.clear(docID);\n            cost[0]--;\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue));\n        }\n      };\n    }\n\n","bugFix":["97f74f84954e9fefbac4cb38b9bf339e1757600d","2aeefba8262036d422d639e48c49d51316bea138"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","sourceNew":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            result.clear(docID);\n            cost[0]--;\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","sourceOld":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle) == false) {\n            result.clear(docID);\n            cost[0]--;\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"646cad9a0473e40f431299c5d1567d1f4d32f689","date":1562050301,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","sourceNew":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            visit(docID);\n          }\n        }\n\n        @Override\n        public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n          if (query.queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              visit(docID);\n            }\n          }\n        }\n\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","sourceOld":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            result.clear(docID);\n            cost[0]--;\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(ShapeQuery,FixedBitSet,int[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeQuery.RelationScorerSupplier#getInverseIntersectVisitor(LatLonShapeQuery,FixedBitSet,int[]).mjava","sourceNew":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(ShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            visit(docID);\n          }\n        }\n\n        @Override\n        public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n          if (query.queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              visit(docID);\n            }\n          }\n        }\n\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","sourceOld":"    /** create a visitor that clears documents that do NOT match the polygon query; used with INTERSECTS */\n    private IntersectVisitor getInverseIntersectVisitor(LatLonShapeQuery query, FixedBitSet result, int[] cost) {\n      return new IntersectVisitor() {\n        int[] scratchTriangle = new int[6];\n        @Override\n        public void visit(int docID) {\n          result.clear(docID);\n          cost[0]--;\n        }\n\n        @Override\n        public void visit(int docID, byte[] packedTriangle) {\n          if (query.queryMatches(packedTriangle, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            visit(docID);\n          }\n        }\n\n        @Override\n        public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n          if (query.queryMatches(t, scratchTriangle, QueryRelation.INTERSECTS) == false) {\n            int docID;\n            while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              visit(docID);\n            }\n          }\n        }\n\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return transposeRelation(query.relateRangeToQuery(minPackedValue, maxPackedValue, QueryRelation.INTERSECTS));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2aeefba8262036d422d639e48c49d51316bea138":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["646cad9a0473e40f431299c5d1567d1f4d32f689"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["5e8251ad51618827e557dd369f16921a666914b5"],"5e8251ad51618827e557dd369f16921a666914b5":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["2aeefba8262036d422d639e48c49d51316bea138","5e8251ad51618827e557dd369f16921a666914b5"]},"commit2Childs":{"2aeefba8262036d422d639e48c49d51316bea138":["5e8251ad51618827e557dd369f16921a666914b5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["2aeefba8262036d422d639e48c49d51316bea138"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"5e8251ad51618827e557dd369f16921a666914b5":["646cad9a0473e40f431299c5d1567d1f4d32f689","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}