{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/ShardTerms#increaseTerms(String,Set[String]).mjava","commits":[{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/ShardTerms#increaseTerms(String,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a new {@link ShardTerms} in which term of {@code leader} is higher than {@code replicasNeedingRecovery}\n   * @param leader coreNodeName of leader\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\n   * @return null if term of {@code leader} is already higher than {@code replicasNeedingRecovery}\n   */\n  public ShardTerms increaseTerms(String leader, Set<String> replicasNeedingRecovery) {\n    if (!values.containsKey(leader)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Can not find leader's term \" + leader);\n    }\n\n    boolean changed = false;\n    boolean foundReplicasInLowerTerms = false;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    long leaderTerm = newValues.get(leader);\n    for (Map.Entry<String, Long> entry : newValues.entrySet()) {\n      String key = entry.getKey();\n      if (replicasNeedingRecovery.contains(key)) foundReplicasInLowerTerms = true;\n      if (Objects.equals(entry.getValue(), leaderTerm)) {\n        if(skipIncreaseTermOf(key, replicasNeedingRecovery)) {\n          changed = true;\n        } else {\n          newValues.put(key, leaderTerm+1);\n        }\n      }\n    }\n\n    // We should skip the optimization if there are no replicasNeedingRecovery present in local terms,\n    // this may indicate that the current value is stale\n    if (!changed && foundReplicasInLowerTerms) return null;\n    return new ShardTerms(newValues, version);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/ShardTerms#increaseTerms(String,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return a new {@link ShardTerms} in which term of {@code leader} is higher than {@code replicasNeedingRecovery}\n   * @param leader coreNodeName of leader\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\n   * @return null if term of {@code leader} is already higher than {@code replicasNeedingRecovery}\n   */\n  public ShardTerms increaseTerms(String leader, Set<String> replicasNeedingRecovery) {\n    if (!values.containsKey(leader)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Can not find leader's term \" + leader);\n    }\n\n    boolean changed = false;\n    boolean foundReplicasInLowerTerms = false;\n\n    HashMap<String, Long> newValues = new HashMap<>(values);\n    long leaderTerm = newValues.get(leader);\n    for (Map.Entry<String, Long> entry : newValues.entrySet()) {\n      String key = entry.getKey();\n      if (replicasNeedingRecovery.contains(key)) foundReplicasInLowerTerms = true;\n      if (Objects.equals(entry.getValue(), leaderTerm)) {\n        if(skipIncreaseTermOf(key, replicasNeedingRecovery)) {\n          changed = true;\n        } else {\n          newValues.put(key, leaderTerm+1);\n        }\n      }\n    }\n\n    // We should skip the optimization if there are no replicasNeedingRecovery present in local terms,\n    // this may indicate that the current value is stale\n    if (!changed && foundReplicasInLowerTerms) return null;\n    return new ShardTerms(newValues, version);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}