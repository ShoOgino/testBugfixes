{"path":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#MultiTermEnum(IndexReader[],int[],Term).mjava","commits":[{"id":"9ad07cf326135fbb108f766a0798c8ee00b17dcb","date":1077215339,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#MultiTermEnum(IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#SegmentsTermEnum(SegmentReader[],int[],Term).mjava","sourceNew":"  public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n    throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      IndexReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","sourceOld":"  SegmentsTermEnum(SegmentReader[] readers, int[] starts, Term t)\n       throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      SegmentReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbe196f6406e5d96f401c346389b069dc7fd0e1","date":1084538986,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#MultiTermEnum(IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#MultiTermEnum(IndexReader[],int[],Term).mjava","sourceNew":"  public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n    throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      IndexReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n        termEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n        termEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n        queue.put(smi);          // initialize queue\n      else\n        smi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","sourceOld":"  public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n    throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      IndexReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n\ttermEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n\ttermEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n\tqueue.put(smi);\t\t\t\t  // initialize queue\n      else\n\tsmi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df62d5b7e9166e1200a7084d6606338eb549db99","date":1084798607,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#MultiTermEnum(IndexReader[],int[],Term).mjava","pathOld":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#MultiTermEnum(IndexReader[],int[],Term).mjava","sourceNew":"  public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n    throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      IndexReader reader = readers[i];\n      TermEnum termEnum;\n\n      if (t != null) {\n        termEnum = reader.terms(t);\n      } else\n        termEnum = reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n        queue.put(smi);          // initialize queue\n      else\n        smi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","sourceOld":"  public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n    throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      IndexReader reader = readers[i];\n      SegmentTermEnum termEnum;\n\n      if (t != null) {\n        termEnum = (SegmentTermEnum)reader.terms(t);\n      } else\n        termEnum = (SegmentTermEnum)reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n        queue.put(smi);          // initialize queue\n      else\n        smi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#MultiTermEnum(IndexReader[],int[],Term).mjava","sourceNew":null,"sourceOld":"  public MultiTermEnum(IndexReader[] readers, int[] starts, Term t)\n    throws IOException {\n    queue = new SegmentMergeQueue(readers.length);\n    for (int i = 0; i < readers.length; i++) {\n      IndexReader reader = readers[i];\n      TermEnum termEnum;\n\n      if (t != null) {\n        termEnum = reader.terms(t);\n      } else\n        termEnum = reader.terms();\n\n      SegmentMergeInfo smi = new SegmentMergeInfo(starts[i], termEnum, reader);\n      if (t == null ? smi.next() : termEnum.term() != null)\n        queue.put(smi);          // initialize queue\n      else\n        smi.close();\n    }\n\n    if (t != null && queue.size() > 0) {\n      next();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ddbe196f6406e5d96f401c346389b069dc7fd0e1":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df62d5b7e9166e1200a7084d6606338eb549db99":["ddbe196f6406e5d96f401c346389b069dc7fd0e1"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["df62d5b7e9166e1200a7084d6606338eb549db99"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"]},"commit2Childs":{"ddbe196f6406e5d96f401c346389b069dc7fd0e1":["df62d5b7e9166e1200a7084d6606338eb549db99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"df62d5b7e9166e1200a7084d6606338eb549db99":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["ddbe196f6406e5d96f401c346389b069dc7fd0e1"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}