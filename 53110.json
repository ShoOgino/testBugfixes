{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"/dev/null","sourceNew":"  private void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        tlogFile.delete();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"/dev/null","sourceNew":"  private void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        tlogFile.delete();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"/dev/null","sourceNew":"  private void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        tlogFile.delete();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","sourceNew":"  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        tlogFile.delete();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        tlogFile.delete();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","sourceNew":"  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        tlogFile.delete();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        tlogFile.delete();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","sourceNew":"  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        tlogFile.delete();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ed97e9132b34af23573a6b39c34ec0574e5c67e","date":1420913354,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","sourceNew":"  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","sourceOld":"  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536b47681314488eb94706248be6047a3f142841","date":1450372090,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","sourceNew":"  public void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","sourceOld":"  protected void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog#close().mjava","sourceNew":"  public void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog {}\", this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","sourceOld":"  public void close() {\n    try {\n      if (debug) {\n        log.debug(\"Closing tlog\" + this);\n      }\n\n      synchronized (this) {\n        fos.flush();\n        fos.close();\n      }\n\n      if (deleteOnClose) {\n        try {\n          Files.deleteIfExists(tlogFile.toPath());\n        } catch (IOException e) {\n          // TODO: should this class care if a file couldnt be deleted?\n          // this just emulates previous behavior, where only SecurityException would be handled.\n        }\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } finally {\n      assert ObjectReleaseTracker.release(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["536b47681314488eb94706248be6047a3f142841"],"536b47681314488eb94706248be6047a3f142841":["7ed97e9132b34af23573a6b39c34ec0574e5c67e"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ed97e9132b34af23573a6b39c34ec0574e5c67e":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cbc3688252d4a8045d69a164236b2cf87b721f17","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536b47681314488eb94706248be6047a3f142841":["740d649f013f07efbeb73ca854f106c60166e7c0"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["7ed97e9132b34af23573a6b39c34ec0574e5c67e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["849494cf2f3a96af5c8c84995108ddd8456fcd04","0d22ac6a4146774c1bc8400160fc0b6150294e92","37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"7ed97e9132b34af23573a6b39c34ec0574e5c67e":["536b47681314488eb94706248be6047a3f142841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}