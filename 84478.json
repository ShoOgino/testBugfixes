{"path":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    DateTimeZone defaultTimeZone = DateTimeZone.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = DateTimeZone.forID(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = oneOrMany(args, FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        formats.put(value, DateTimeFormat.forPattern(value).withZone(defaultTimeZone).withLocale(locale));\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    DateTimeZone defaultTimeZone = DateTimeZone.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = DateTimeZone.forID(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = oneOrMany(args, FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        formats.put(value, DateTimeFormat.forPattern(value).withZone(defaultTimeZone).withLocale(locale));\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    DateTimeZone defaultTimeZone = DateTimeZone.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = DateTimeZone.forID(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        formats.put(value, DateTimeFormat.forPattern(value).withZone(defaultTimeZone).withLocale(locale));\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    DateTimeZone defaultTimeZone = DateTimeZone.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = DateTimeZone.forID(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = oneOrMany(args, FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        formats.put(value, DateTimeFormat.forPattern(value).withZone(defaultTimeZone).withLocale(locale));\n      }\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141","date":1533657076,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    DateTimeZone defaultTimeZone = DateTimeZone.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = DateTimeZone.forID(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        formats.put(value, DateTimeFormat.forPattern(value).withZone(defaultTimeZone).withLocale(locale));\n      }\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859b2291aebaa8cffe0ab3f919fc27e980c23999","date":1534305849,"type":3,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d6383c8f942fbf6f463c167383e952d927aca0","date":1534307117,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9fa5ae65c9b6a63d49f8b2bfca43056fc288645","date":1535637223,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = LocaleUtils.toLocale(\"en_US\"); // because well-known patterns assume this\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale = Locale.ROOT;\n    \n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ac6494315d04f68950d2f00f5436b4861bcd467","date":1553125039,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; // because well-known patterns assume this\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = LocaleUtils.toLocale(\"en_US\"); // because well-known patterns assume this\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ParseDateFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; // because well-known patterns assume this\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","sourceOld":"  @Override\n  public void init(NamedList args) {\n    \n    Locale locale;\n    String localeParam = (String)args.remove(LOCALE_PARAM);\n    if (null != localeParam) {\n      locale = LocaleUtils.toLocale(localeParam);\n    } else {\n      locale = Locale.US; // because well-known patterns assume this\n    }\n\n    Object defaultTimeZoneParam = args.remove(DEFAULT_TIME_ZONE_PARAM);\n    ZoneId defaultTimeZone = ZoneOffset.UTC;\n    if (null != defaultTimeZoneParam) {\n      defaultTimeZone = ZoneId.of(defaultTimeZoneParam.toString());\n    }\n\n    Collection<String> formatsParam = args.removeConfigArgs(FORMATS_PARAM);\n    if (null != formatsParam) {\n      for (String value : formatsParam) {\n        DateTimeFormatter formatter = new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive()\n            .appendPattern(value).toFormatter(locale)\n            .withResolverStyle(ResolverStyle.LENIENT).withZone(defaultTimeZone);\n        validateFormatter(formatter);\n        formats.put(value, formatter);\n      }\n    }\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859b2291aebaa8cffe0ab3f919fc27e980c23999":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["0ac6494315d04f68950d2f00f5436b4861bcd467"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"0ac6494315d04f68950d2f00f5436b4861bcd467":["a9fa5ae65c9b6a63d49f8b2bfca43056fc288645"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11d6383c8f942fbf6f463c167383e952d927aca0":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141","859b2291aebaa8cffe0ab3f919fc27e980c23999"],"a9fa5ae65c9b6a63d49f8b2bfca43056fc288645":["11d6383c8f942fbf6f463c167383e952d927aca0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"]},"commit2Childs":{"859b2291aebaa8cffe0ab3f919fc27e980c23999":["11d6383c8f942fbf6f463c167383e952d927aca0"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"0ac6494315d04f68950d2f00f5436b4861bcd467":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["859b2291aebaa8cffe0ab3f919fc27e980c23999","11d6383c8f942fbf6f463c167383e952d927aca0"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"11d6383c8f942fbf6f463c167383e952d927aca0":["a9fa5ae65c9b6a63d49f8b2bfca43056fc288645"],"a9fa5ae65c9b6a63d49f8b2bfca43056fc288645":["0ac6494315d04f68950d2f00f5436b4861bcd467"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}