{"path":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,long,int).mjava","commits":[{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":1,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,long,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetContext,long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg#createSlotAcc(FacetRequest.FacetContext,long,int).mjava","sourceNew":"  @Override\n  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","sourceOld":"  @Override\n  public SlotAcc createSlotAcc(FacetRequest.FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    ValueSource vs = getArg();\n\n    SchemaField sf = null;\n\n    if (vs instanceof FieldNameValueSource) {\n      String field = ((FieldNameValueSource)vs).getFieldName();\n      sf = fcontext.qcontext.searcher().getSchema().getField(field);\n\n      if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n        if (sf.hasDocValues()) {\n          if (sf.getType().isPointField()) {\n            FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n            vs = sf.getType().getSingleValueSource(choice, sf, null);\n          } else {\n            NumberType numberType = sf.getType().getNumberType();\n            if (numberType != null && numberType != NumberType.DATE) {\n              // TrieDate doesn't support selection of single value\n              FieldType.MultiValueSelector choice = minmax == 1 ? FieldType.MultiValueSelector.MIN : FieldType.MultiValueSelector.MAX;\n              vs = sf.getType().getSingleValueSource(choice, sf, null);\n            } else {\n              return new MinMaxSortedSetDVAcc(fcontext, sf, numSlots);\n            }\n          }\n        } else {\n          if (sf.getType().isPointField()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"min/max aggregations can't be used on PointField w/o DocValues\");\n          }\n          return new MinMaxUnInvertedFieldAcc(fcontext, sf, numSlots);\n        }\n      } else {\n        vs = sf.getType().getValueSource(sf, null);\n      }\n    }\n\n    if (vs instanceof StrFieldSource) {\n      return new SingleValuedOrdAcc(fcontext, sf, numSlots);\n    }\n\n    // Since functions don't currently have types, we rely on the type of the field\n    if (sf != null && sf.getType().getNumberType() != null) {\n      switch (sf.getType().getNumberType()) {\n        case FLOAT:\n        case DOUBLE:\n          return new DFuncAcc(vs, fcontext, numSlots);\n        case INTEGER:\n        case LONG:\n          return new LFuncAcc(vs, fcontext, numSlots);\n        case DATE:\n          return new DateFuncAcc(vs, fcontext, numSlots);\n      }\n    }\n\n    // numeric functions\n    return new DFuncAcc(vs, fcontext, numSlots);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c841e27891873cab110ebeb89f124a8ec470176"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}