{"path":"lucene/core/src/java/org/apache/lucene/search/TopDocs#tieBreakLessThan(ShardRef,ScoreDoc,ShardRef,ScoreDoc).mjava","commits":[{"id":"500a89755c0c3953ca1886b5abb653b8cef8e299","date":1487933004,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#tieBreakLessThan(ShardRef,ScoreDoc,ShardRef,ScoreDoc).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * if we need to tie-break since score / sort value are the same we first compare shard index (lower shard wins)\n   * and then iff shard index is the same we use the hit index.\n   */\n  static boolean tieBreakLessThan(ShardRef first, ScoreDoc firstDoc, ShardRef second, ScoreDoc secondDoc) {\n    final int firstShardIndex = first.getShardIndex(firstDoc);\n    final int secondShardIndex = second.getShardIndex(secondDoc);\n    // Tie break: earlier shard wins\n    if (firstShardIndex< secondShardIndex) {\n      return true;\n    } else if (firstShardIndex > secondShardIndex) {\n      return false;\n    } else {\n      // Tie break in same shard: resolve however the\n      // shard had resolved it:\n      assert first.hitIndex != second.hitIndex;\n      return first.hitIndex < second.hitIndex;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36510a8e3c1ec60d366b45f8f716e9dc47589661","date":1561989412,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#tieBreakLessThan(ShardRef,ScoreDoc,ShardRef,ScoreDoc,Comparator[ScoreDoc]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#tieBreakLessThan(ShardRef,ScoreDoc,ShardRef,ScoreDoc).mjava","sourceNew":"  /**\n   * Use the tie breaker if provided. If tie breaker returns 0 signifying equal values, we use hit indices\n   * to tie break intra shard ties\n   */\n  static boolean tieBreakLessThan(ShardRef first, ScoreDoc firstDoc, ShardRef second, ScoreDoc secondDoc,\n                                  Comparator<ScoreDoc> tieBreaker) {\n    assert tieBreaker != null;\n    int value = tieBreaker.compare(firstDoc, secondDoc);\n\n    if (value == 0) {\n      // Equal Values\n      // Tie break in same shard: resolve however the\n      // shard had resolved it:\n      assert first.hitIndex != second.hitIndex;\n      return first.hitIndex < second.hitIndex;\n    }\n\n    return value < 0;\n  }\n\n","sourceOld":"  /**\n   * if we need to tie-break since score / sort value are the same we first compare shard index (lower shard wins)\n   * and then iff shard index is the same we use the hit index.\n   */\n  static boolean tieBreakLessThan(ShardRef first, ScoreDoc firstDoc, ShardRef second, ScoreDoc secondDoc) {\n    final int firstShardIndex = first.getShardIndex(firstDoc);\n    final int secondShardIndex = second.getShardIndex(secondDoc);\n    // Tie break: earlier shard wins\n    if (firstShardIndex< secondShardIndex) {\n      return true;\n    } else if (firstShardIndex > secondShardIndex) {\n      return false;\n    } else {\n      // Tie break in same shard: resolve however the\n      // shard had resolved it:\n      assert first.hitIndex != second.hitIndex;\n      return first.hitIndex < second.hitIndex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4f6b0fb6f08ac48f438f03002a283a63cb9992","date":1561992803,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#tieBreakLessThan(ShardRef,ScoreDoc,ShardRef,ScoreDoc).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#tieBreakLessThan(ShardRef,ScoreDoc,ShardRef,ScoreDoc,Comparator[ScoreDoc]).mjava","sourceNew":"  /**\n   * if we need to tie-break since score / sort value are the same we first compare shard index (lower shard wins)\n   * and then iff shard index is the same we use the hit index.\n   */\n  static boolean tieBreakLessThan(ShardRef first, ScoreDoc firstDoc, ShardRef second, ScoreDoc secondDoc) {\n    final int firstShardIndex = first.getShardIndex(firstDoc);\n    final int secondShardIndex = second.getShardIndex(secondDoc);\n    // Tie break: earlier shard wins\n    if (firstShardIndex< secondShardIndex) {\n      return true;\n    } else if (firstShardIndex > secondShardIndex) {\n      return false;\n    } else {\n      // Tie break in same shard: resolve however the\n      // shard had resolved it:\n      assert first.hitIndex != second.hitIndex;\n      return first.hitIndex < second.hitIndex;\n    }\n  }\n\n","sourceOld":"  /**\n   * Use the tie breaker if provided. If tie breaker returns 0 signifying equal values, we use hit indices\n   * to tie break intra shard ties\n   */\n  static boolean tieBreakLessThan(ShardRef first, ScoreDoc firstDoc, ShardRef second, ScoreDoc secondDoc,\n                                  Comparator<ScoreDoc> tieBreaker) {\n    assert tieBreaker != null;\n    int value = tieBreaker.compare(firstDoc, secondDoc);\n\n    if (value == 0) {\n      // Equal Values\n      // Tie break in same shard: resolve however the\n      // shard had resolved it:\n      assert first.hitIndex != second.hitIndex;\n      return first.hitIndex < second.hitIndex;\n    }\n\n    return value < 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fccd4a691aac1aff06ab8110d8693514a34160c3","date":1562092518,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs#tieBreakLessThan(ShardRef,ScoreDoc,ShardRef,ScoreDoc,Comparator[ScoreDoc]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs#tieBreakLessThan(ShardRef,ScoreDoc,ShardRef,ScoreDoc).mjava","sourceNew":"  /**\n   * Use the tie breaker if provided. If tie breaker returns 0 signifying equal values, we use hit indices\n   * to tie break intra shard ties\n   */\n  static boolean tieBreakLessThan(ShardRef first, ScoreDoc firstDoc, ShardRef second, ScoreDoc secondDoc,\n                                  Comparator<ScoreDoc> tieBreaker) {\n    assert tieBreaker != null;\n    int value = tieBreaker.compare(firstDoc, secondDoc);\n\n    if (value == 0) {\n      // Equal Values\n      // Tie break in same shard: resolve however the\n      // shard had resolved it:\n      assert first.hitIndex != second.hitIndex;\n      return first.hitIndex < second.hitIndex;\n    }\n\n    return value < 0;\n  }\n\n","sourceOld":"  /**\n   * if we need to tie-break since score / sort value are the same we first compare shard index (lower shard wins)\n   * and then iff shard index is the same we use the hit index.\n   */\n  static boolean tieBreakLessThan(ShardRef first, ScoreDoc firstDoc, ShardRef second, ScoreDoc secondDoc) {\n    final int firstShardIndex = first.getShardIndex(firstDoc);\n    final int secondShardIndex = second.getShardIndex(secondDoc);\n    // Tie break: earlier shard wins\n    if (firstShardIndex< secondShardIndex) {\n      return true;\n    } else if (firstShardIndex > secondShardIndex) {\n      return false;\n    } else {\n      // Tie break in same shard: resolve however the\n      // shard had resolved it:\n      assert first.hitIndex != second.hitIndex;\n      return first.hitIndex < second.hitIndex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["500a89755c0c3953ca1886b5abb653b8cef8e299"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["36510a8e3c1ec60d366b45f8f716e9dc47589661"]},"commit2Childs":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["36510a8e3c1ec60d366b45f8f716e9dc47589661"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["500a89755c0c3953ca1886b5abb653b8cef8e299"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}