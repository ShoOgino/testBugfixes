{"path":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","sourceNew":"  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","sourceOld":"  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19721aa3bad7ccd93aa898c543e98a67fff7958","date":1346108798,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","sourceNew":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   */\n  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","sourceOld":"  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d","date":1346337224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","sourceNew":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   * @param name field name\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null.\n   */\n  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","sourceOld":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   */\n  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","sourceNew":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   * @param name field name\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null.\n   */\n  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","sourceOld":"  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","sourceNew":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   * @param name field name\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null.\n   */\n  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    this.type = type;\n  }\n\n","sourceOld":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   * @param name field name\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null.\n   */\n  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name cannot be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type cannot be null\");\n    }\n    this.type = type;\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","sourceNew":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   * @param name field name\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null.\n   */\n  protected Field(String name, IndexableFieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    this.type = type;\n  }\n\n","sourceOld":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   * @param name field name\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null.\n   */\n  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,FieldType).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: creates a field with no initial value.\n   * Intended only for custom Field subclasses.\n   * @param name field name\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null.\n   */\n  protected Field(String name, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    this.name = name;\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d":["c19721aa3bad7ccd93aa898c543e98a67fff7958"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"c19721aa3bad7ccd93aa898c543e98a67fff7958":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["05a14b2611ead08655a2b2bdc61632eb31316e57","c19721aa3bad7ccd93aa898c543e98a67fff7958"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","05a14b2611ead08655a2b2bdc61632eb31316e57"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c19721aa3bad7ccd93aa898c543e98a67fff7958":["6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}