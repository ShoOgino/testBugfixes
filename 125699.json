{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","commits":[{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,SolrCore).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(zkClient, stateReader, id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, SolrCore firstCore) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(zkClient, stateReader, id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(zkClient, stateReader, id);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(stateReader, id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(zkClient, stateReader, id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(shardHandler, adminPath, stateReader, id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(stateReader, id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(shardHandler, adminPath, stateReader, id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(stateReader, id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938e4fd7b1e4b34da1650edba7471764bbfaefde","date":1344033248,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(shardHandler, adminPath, stateReader, id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(shardHandler, adminPath, stateReader, id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    new Overseer(shardHandler, adminPath, stateReader, id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException {\n    \n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    overseer.start(id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException {\n    \n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException, InterruptedException {\n    \n    final String id = leaderSeqPath.substring(leaderSeqPath.lastIndexOf(\"/\")+1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    try {\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    } catch (NodeExistsException e) {\n      // if a previous leader ephemeral still exists for some reason, try and\n      // remove it\n      zkClient.delete(leaderPath, -1, true);\n      zkClient.makePath(leaderPath,\n          ZkStateReader.toJSON(myProps),\n          CreateMode.EPHEMERAL, true);\n    }\n  \n    overseer.start(id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"702f9eb5f4d8ac6dea3945928de043b9d25fa87d","date":1391001447,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException {\n    \n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    \n    overseer.start(id);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dedd8b6e67b7ac7a77554562fddcf90e0031a95c","date":1391930936,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerElectionContext[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    if(pauseBeforeStart >0){\n      try {\n        Thread.sleep(pauseBeforeStart);\n      } catch (InterruptedException e) {\n        log.warn(\"Wait interrupted \", e);\n      }\n    }\n    \n    overseer.start(id);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException {\n    log.info(\"I am going to be the leader {}\", id);\n    final String id = leaderSeqPath\n        .substring(leaderSeqPath.lastIndexOf(\"/\") + 1);\n    ZkNodeProps myProps = new ZkNodeProps(\"id\", id);\n\n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps),\n        CreateMode.EPHEMERAL, true);\n    \n    overseer.start(id);\n  }\n\n","bugFix":null,"bugIntro":["f66e99782bf385dfe6c7da3e696f3120888aabbe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a5093a9e893633cc091cf2f729d7863671c2b715"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["938e4fd7b1e4b34da1650edba7471764bbfaefde"],"702f9eb5f4d8ac6dea3945928de043b9d25fa87d":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["33d0ed80b7b47e34ad3ff033a77544563aba3085","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"dedd8b6e67b7ac7a77554562fddcf90e0031a95c":["702f9eb5f4d8ac6dea3945928de043b9d25fa87d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dedd8b6e67b7ac7a77554562fddcf90e0031a95c"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["938e4fd7b1e4b34da1650edba7471764bbfaefde","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["8fd5be977c105554c6a7b68afcdbc511439723ab","6013b4c7388f1627659c8f96c44abd10a294d3a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","702f9eb5f4d8ac6dea3945928de043b9d25fa87d"],"702f9eb5f4d8ac6dea3945928de043b9d25fa87d":["dedd8b6e67b7ac7a77554562fddcf90e0031a95c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9813dd0748537c429b7c0a9b4723ea1ba496c047","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a5093a9e893633cc091cf2f729d7863671c2b715":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"dedd8b6e67b7ac7a77554562fddcf90e0031a95c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8fd5be977c105554c6a7b68afcdbc511439723ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}