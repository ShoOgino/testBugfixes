{"path":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","commits":[{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"/dev/null","sourceNew":"  /** various query sanity checks on a searcher */\r\n  public static void check(Query q1, Searcher s) {\r\n    try {\r\n      check(q1);\r\n      if (s!=null && s instanceof IndexSearcher) {\r\n        IndexSearcher is = (IndexSearcher)s;\r\n        checkSkipTo(q1,is);\r\n      }\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76349ae49451ab1e1e63e8eeb254f82684b1da25","date":1176847207,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** various query sanity checks on a searcher */\r\n  public static void check(Query q1, Searcher s) {\r\n// Disabled because this started failing after LUCENE-730 patch was applied\r\n//     try {\r\n      check(q1);\r\n/* disabled for use of BooleanScorer in BooleanScorer2.\r\n      if (s!=null && s instanceof IndexSearcher) {\r\n        IndexSearcher is = (IndexSearcher)s;\r\n//         checkSkipTo(q1,is);\r\n      }\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n */\r\n  }\r\n\n","sourceOld":"  /** various query sanity checks on a searcher */\r\n  public static void check(Query q1, Searcher s) {\r\n    try {\r\n      check(q1);\r\n      if (s!=null && s instanceof IndexSearcher) {\r\n        IndexSearcher is = (IndexSearcher)s;\r\n        checkSkipTo(q1,is);\r\n      }\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"492d71f81abcc186afa0074702472ecb6b7dc997","date":1177385598,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** various query sanity checks on a searcher */\n  public static void check(Query q1, Searcher s) {\n// Disabled because this started failing after LUCENE-730 patch was applied\n//     try {\n      check(q1);\n/* disabled for use of BooleanScorer in BooleanScorer2.\n      if (s!=null && s instanceof IndexSearcher) {\n        IndexSearcher is = (IndexSearcher)s;\n//         checkSkipTo(q1,is);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n */\n  }\n\n","sourceOld":"  /** various query sanity checks on a searcher */\r\n  public static void check(Query q1, Searcher s) {\r\n// Disabled because this started failing after LUCENE-730 patch was applied\r\n//     try {\r\n      check(q1);\r\n/* disabled for use of BooleanScorer in BooleanScorer2.\r\n      if (s!=null && s instanceof IndexSearcher) {\r\n        IndexSearcher is = (IndexSearcher)s;\r\n//         checkSkipTo(q1,is);\r\n      }\r\n    } catch (IOException e) {\r\n      throw new RuntimeException(e);\r\n    }\r\n */\r\n  }\r\n\n","bugFix":null,"bugIntro":["b3e493496c35fb4f17315b8827d1ba1ae1585554","0e60b4907a1867e066f425a450d96e4297dfa973"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e493496c35fb4f17315b8827d1ba1ae1585554","date":1177392767,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** various query sanity checks on a searcher */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null && s instanceof IndexSearcher) {\n        IndexSearcher is = (IndexSearcher)s;\n        checkSkipTo(q1,is);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** various query sanity checks on a searcher */\n  public static void check(Query q1, Searcher s) {\n// Disabled because this started failing after LUCENE-730 patch was applied\n//     try {\n      check(q1);\n/* disabled for use of BooleanScorer in BooleanScorer2.\n      if (s!=null && s instanceof IndexSearcher) {\n        IndexSearcher is = (IndexSearcher)s;\n//         checkSkipTo(q1,is);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n */\n  }\n\n","bugFix":["492d71f81abcc186afa0074702472ecb6b7dc997"],"bugIntro":["0e60b4907a1867e066f425a450d96e4297dfa973"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e60b4907a1867e066f425a450d96e4297dfa973","date":1180989666,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** \n   * various query sanity checks on a searcher, including explanation checks.\n   * @see #checkExplanations\n   * @see #checkSkipTo\n   * @see #check(Query)\n   */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkSkipTo(q1,is);\n        }\n        checkExplanations(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** various query sanity checks on a searcher */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null && s instanceof IndexSearcher) {\n        IndexSearcher is = (IndexSearcher)s;\n        checkSkipTo(q1,is);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["492d71f81abcc186afa0074702472ecb6b7dc997","b3e493496c35fb4f17315b8827d1ba1ae1585554"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"facd440f562ba04187b82c36465181d6ba7030fa","date":1181183679,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** \n   * various query sanity checks on a searcher, including explanation checks.\n   * @see #checkExplanations\n   * @see #checkSkipTo\n   * @see #check(Query)\n   */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n        }\n        checkExplanations(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** \n   * various query sanity checks on a searcher, including explanation checks.\n   * @see #checkExplanations\n   * @see #checkSkipTo\n   * @see #check(Query)\n   */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkSkipTo(q1,is);\n        }\n        checkExplanations(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"149f82651d1e396281d58808b8c03062649c54dd","date":1193047128,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** \n   * various query sanity checks on a searcher, including explanation checks.\n   * @see #checkExplanations\n   * @see #checkSkipTo\n   * @see #check(Query)\n   */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** \n   * various query sanity checks on a searcher, including explanation checks.\n   * @see #checkExplanations\n   * @see #checkSkipTo\n   * @see #check(Query)\n   */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n        }\n        checkExplanations(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63abe86fd96ea75e376f7fe73d65d9d15769f3dd","date":1241133493,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** \n   * various query sanity checks on a searcher, including explanation checks.\n   * @see #checkExplanations\n   * @see #checkSkipTo\n   * @see #check(Query)\n   */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** \n   * various query sanity checks on a searcher, including explanation checks.\n   * @see #checkExplanations\n   * @see #checkSkipTo\n   * @see #check(Query)\n   */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ffe619bf5bbe00453bab7103c36fd38c8417f6c","date":1250619947,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Query q1, Searcher s) {\n    check(q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * various query sanity checks on a searcher, including explanation checks.\n   * @see #checkExplanations\n   * @see #checkSkipTo\n   * @see #check(Query)\n   */\n  public static void check(Query q1, Searcher s) {\n    try {\n      check(q1);\n      if (s!=null) {\n        if (s instanceof IndexSearcher) {\n          IndexSearcher is = (IndexSearcher)s;\n          checkFirstSkipTo(q1,is);\n          checkSkipTo(q1,is);\n        }\n        checkExplanations(q1,s);\n        checkSerialization(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","pathOld":"src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Query q1, Searcher s) {\n    check(q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Query q1, Searcher s) {\n    check(q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ffe619bf5bbe00453bab7103c36fd38c8417f6c":["63abe86fd96ea75e376f7fe73d65d9d15769f3dd"],"facd440f562ba04187b82c36465181d6ba7030fa":["0e60b4907a1867e066f425a450d96e4297dfa973"],"b3e493496c35fb4f17315b8827d1ba1ae1585554":["492d71f81abcc186afa0074702472ecb6b7dc997"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"63abe86fd96ea75e376f7fe73d65d9d15769f3dd":["149f82651d1e396281d58808b8c03062649c54dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"149f82651d1e396281d58808b8c03062649c54dd":["facd440f562ba04187b82c36465181d6ba7030fa"],"0e60b4907a1867e066f425a450d96e4297dfa973":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c"],"492d71f81abcc186afa0074702472ecb6b7dc997":["76349ae49451ab1e1e63e8eeb254f82684b1da25"]},"commit2Childs":{"1ffe619bf5bbe00453bab7103c36fd38c8417f6c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"facd440f562ba04187b82c36465181d6ba7030fa":["149f82651d1e396281d58808b8c03062649c54dd"],"b3e493496c35fb4f17315b8827d1ba1ae1585554":["0e60b4907a1867e066f425a450d96e4297dfa973"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["492d71f81abcc186afa0074702472ecb6b7dc997"],"63abe86fd96ea75e376f7fe73d65d9d15769f3dd":["1ffe619bf5bbe00453bab7103c36fd38c8417f6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"0e60b4907a1867e066f425a450d96e4297dfa973":["facd440f562ba04187b82c36465181d6ba7030fa"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"149f82651d1e396281d58808b8c03062649c54dd":["63abe86fd96ea75e376f7fe73d65d9d15769f3dd"],"492d71f81abcc186afa0074702472ecb6b7dc997":["b3e493496c35fb4f17315b8827d1ba1ae1585554"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}