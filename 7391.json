{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testRollupValues().mjava","commits":[{"id":"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d","date":1383508626,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testRollupValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRollupValues() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    });\n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\", Integer.toString(i % 2), \"1\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new LongFieldSource(\"price\");\n    FacetSearchParams fsp = new FacetSearchParams(fip, new SumValueSourceFacetRequest(new CategoryPath(\"a\"), 10, valueSource, false));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (10)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testRollupValues().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testRollupValues().mjava","sourceNew":"  @Test\n  public void testRollupValues() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    });\n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"a\", Integer.toString(i % 2), \"1\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new LongFieldSource(\"price\");\n    FacetSearchParams fsp = new FacetSearchParams(fip, new SumValueSourceFacetRequest(new FacetLabel(\"a\"), 10, valueSource, false));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (10)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","sourceOld":"  @Test\n  public void testRollupValues() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    });\n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\", Integer.toString(i % 2), \"1\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new LongFieldSource(\"price\");\n    FacetSearchParams fsp = new FacetSearchParams(fip, new SumValueSourceFacetRequest(new CategoryPath(\"a\"), 10, valueSource, false));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (10)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testRollupValues().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRollupValues() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    });\n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new FacetLabel(\"a\", Integer.toString(i % 2), \"1\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new LongFieldSource(\"price\");\n    FacetSearchParams fsp = new FacetSearchParams(fip, new SumValueSourceFacetRequest(new FacetLabel(\"a\"), 10, valueSource, false));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (10)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestSumValueSourceFacetRequest#testRollupValues().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRollupValues() throws Exception {\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(taxoDir);\n    IndexWriter iw = new IndexWriter(indexDir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.NO_PARENTS;\n      }\n    });\n    FacetFields facetFields = new FacetFields(taxonomyWriter, fip);\n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"price\", (i+1)));\n      facetFields.addFields(doc, Collections.singletonList(new CategoryPath(\"a\", Integer.toString(i % 2), \"1\")));\n      iw.addDocument(doc);\n    }\n    \n    taxonomyWriter.close();\n    iw.close();\n    \n    DirectoryReader r = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n\n    ValueSource valueSource = new LongFieldSource(\"price\");\n    FacetSearchParams fsp = new FacetSearchParams(fip, new SumValueSourceFacetRequest(new CategoryPath(\"a\"), 10, valueSource, false));\n    FacetsCollector fc = FacetsCollector.create(fsp, r, taxo);\n    newSearcher(r).search(new MatchAllDocsQuery(), fc);\n    \n    List<FacetResult> res = fc.getFacetResults();\n    assertEquals(\"a (10)\\n  1 (6)\\n  0 (4)\\n\", FacetTestUtils.toSimpleString(res.get(0)));\n    \n    IOUtils.close(taxo, taxoDir, r, indexDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d","ae75def1e2525383b6e1397ed97c44387da9941c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae75def1e2525383b6e1397ed97c44387da9941c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d"]},"commit2Childs":{"1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b8829c66b19d8c6b7eedbb88f69c8ce1f53311d"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae75def1e2525383b6e1397ed97c44387da9941c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["ae75def1e2525383b6e1397ed97c44387da9941c"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}