{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#decorateRequest(Request,SolrRequest).mjava","commits":[{"id":"cbaf96cfda5422c42955ce34344f0e01839894ea","date":1559675051,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#decorateRequest(Request,SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#setListeners(SolrRequest,Request).mjava","sourceNew":"  private void decorateRequest(Request req, SolrRequest solrRequest) {\n    req.header(HttpHeader.ACCEPT_ENCODING, null);\n    if (solrRequest.getUserPrincipal() != null) {\n      req.attribute(REQ_PRINCIPAL_KEY, solrRequest.getUserPrincipal());\n    }\n\n    setBasicAuthHeader(solrRequest, req);\n    for (HttpListenerFactory factory : listenerFactory) {\n      HttpListenerFactory.RequestResponseListener listener = factory.get();\n      listener.onQueued(req);\n      req.onRequestBegin(listener);\n      req.onComplete(listener);\n    }\n\n    Map<String, String> headers = solrRequest.getHeaders();\n    if (headers != null) {\n      for (Map.Entry<String, String> entry : headers.entrySet()) {\n        req.header(entry.getKey(), entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  private void setListeners(SolrRequest solrRequest, Request req) {\n    setBasicAuthHeader(solrRequest, req);\n    for (HttpListenerFactory factory : listenerFactory) {\n      HttpListenerFactory.RequestResponseListener listener = factory.get();\n      listener.onQueued(req);\n      req.onRequestBegin(listener);\n      req.onComplete(listener);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#decorateRequest(Request,SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#decorateRequest(Request,SolrRequest).mjava","sourceNew":"  private void decorateRequest(Request req, @SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest) {\n    req.header(HttpHeader.ACCEPT_ENCODING, null);\n    if (solrRequest.getUserPrincipal() != null) {\n      req.attribute(REQ_PRINCIPAL_KEY, solrRequest.getUserPrincipal());\n    }\n\n    setBasicAuthHeader(solrRequest, req);\n    for (HttpListenerFactory factory : listenerFactory) {\n      HttpListenerFactory.RequestResponseListener listener = factory.get();\n      listener.onQueued(req);\n      req.onRequestBegin(listener);\n      req.onComplete(listener);\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> headers = solrRequest.getHeaders();\n    if (headers != null) {\n      for (Map.Entry<String, String> entry : headers.entrySet()) {\n        req.header(entry.getKey(), entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  private void decorateRequest(Request req, SolrRequest solrRequest) {\n    req.header(HttpHeader.ACCEPT_ENCODING, null);\n    if (solrRequest.getUserPrincipal() != null) {\n      req.attribute(REQ_PRINCIPAL_KEY, solrRequest.getUserPrincipal());\n    }\n\n    setBasicAuthHeader(solrRequest, req);\n    for (HttpListenerFactory factory : listenerFactory) {\n      HttpListenerFactory.RequestResponseListener listener = factory.get();\n      listener.onQueued(req);\n      req.onRequestBegin(listener);\n      req.onComplete(listener);\n    }\n\n    Map<String, String> headers = solrRequest.getHeaders();\n    if (headers != null) {\n      for (Map.Entry<String, String> entry : headers.entrySet()) {\n        req.header(entry.getKey(), entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#decorateRequest(Request,SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#decorateRequest(Request,SolrRequest).mjava","sourceNew":"  private void decorateRequest(Request req, @SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest) {\n    req.header(HttpHeader.ACCEPT_ENCODING, null);\n    req.timeout(idleTimeout, TimeUnit.MILLISECONDS);\n    if (solrRequest.getUserPrincipal() != null) {\n      req.attribute(REQ_PRINCIPAL_KEY, solrRequest.getUserPrincipal());\n    }\n\n    setBasicAuthHeader(solrRequest, req);\n    for (HttpListenerFactory factory : listenerFactory) {\n      HttpListenerFactory.RequestResponseListener listener = factory.get();\n      listener.onQueued(req);\n      req.onRequestBegin(listener);\n      req.onComplete(listener);\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> headers = solrRequest.getHeaders();\n    if (headers != null) {\n      for (Map.Entry<String, String> entry : headers.entrySet()) {\n        req.header(entry.getKey(), entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  private void decorateRequest(Request req, @SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest) {\n    req.header(HttpHeader.ACCEPT_ENCODING, null);\n    if (solrRequest.getUserPrincipal() != null) {\n      req.attribute(REQ_PRINCIPAL_KEY, solrRequest.getUserPrincipal());\n    }\n\n    setBasicAuthHeader(solrRequest, req);\n    for (HttpListenerFactory factory : listenerFactory) {\n      HttpListenerFactory.RequestResponseListener listener = factory.get();\n      listener.onQueued(req);\n      req.onRequestBegin(listener);\n      req.onComplete(listener);\n    }\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> headers = solrRequest.getHeaders();\n    if (headers != null) {\n      for (Map.Entry<String, String> entry : headers.entrySet()) {\n        req.header(entry.getKey(), entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"cbaf96cfda5422c42955ce34344f0e01839894ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"cbaf96cfda5422c42955ce34344f0e01839894ea":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}