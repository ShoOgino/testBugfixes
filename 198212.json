{"path":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","commits":[{"id":"d60f4e15b3e2fb549c23c8f2096249d439876df8","date":1204035825,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"/dev/null","sourceNew":"  public void testReuseAcrossWriters() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommitPoint cp = dp.snapshot();\n    copyFiles(dir, dp, cp);\n    writer.close();\n    copyFiles(dir, dp, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    copyFiles(dir, dp, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, dp, cp);\n    writer.close();\n    copyFiles(dir, dp, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, dp, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1559506fd82ede79bd8e60facef2a57524e175","date":1204808228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommitPoint cp = dp.snapshot();\n    copyFiles(dir, dp, cp);\n    writer.close();\n    copyFiles(dir, dp, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    copyFiles(dir, dp, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, dp, cp);\n    writer.close();\n    copyFiles(dir, dp, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, dp, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true,new StandardAnalyzer(), dp);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                             IndexWriter.MaxFieldLength.LIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true,new StandardAnalyzer(), dp);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true,new StandardAnalyzer(), dp);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, true,new StandardAnalyzer(), dp);\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++)\n      writer.addDocument(doc);\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = (IndexCommit) dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["8a1559506fd82ede79bd8e60facef2a57524e175"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"8a1559506fd82ede79bd8e60facef2a57524e175":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"d60f4e15b3e2fb549c23c8f2096249d439876df8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["87c966e9308847938a7c905c2e46a56d8df788b8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"8a1559506fd82ede79bd8e60facef2a57524e175":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"d60f4e15b3e2fb549c23c8f2096249d439876df8":["8a1559506fd82ede79bd8e60facef2a57524e175"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"87c966e9308847938a7c905c2e46a56d8df788b8":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}