{"path":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","commits":[{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"/dev/null","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.getWantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.getWantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"/dev/null","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"/dev/null","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"c26f00b574427b55127e869b935845554afde1fa":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"6aedf81f068e430dec27d94310415cc6ff52731c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6aedf81f068e430dec27d94310415cc6ff52731c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}