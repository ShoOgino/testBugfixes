{"path":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","sourceNew":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","sourceOld":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}