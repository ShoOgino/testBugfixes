{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader(0);\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader(0);\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader();\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader(0);\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader();\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader(0);\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader();\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output());\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput());\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader();\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_get(FST[T],BytesRef).mjava","sourceNew":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader();\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output());\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput());\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Looks up the output for this input, or null if the\n   *  input is not accepted */\n  public static<T> T get(FST<T> fst, BytesRef input) throws IOException {\n    assert fst.inputType == FST.INPUT_TYPE.BYTE1;\n\n    final BytesReader fstReader = fst.getBytesReader();\n\n    // TODO: would be nice not to alloc this on every lookup\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    // Accumulate output as we go\n    T output = fst.outputs.getNoOutput();\n    for(int i=0;i<input.length;i++) {\n      if (fst.findTargetArc(input.bytes[i+input.offset] & 0xFF, arc, arc, fstReader) == null) {\n        return null;\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (arc.isFinal()) {\n      return fst.outputs.add(output, arc.nextFinalOutput);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8061ddd97f3352007d927dae445884a6f3d857b":["82557a475db3e0849171dc0be5b02e3ae0745ddb","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["54204c8a3ca26aeafd273139fc29baf70d0f6786","c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["82557a475db3e0849171dc0be5b02e3ae0745ddb","8917bfede3b4ca30f4305c1e391e9218959cd723"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}