{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#setBits(IndexReader,TermDocs,OpenBitSet,String,String).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#setBits(IndexReader,TermDocs,OpenBitSet,String,String).mjava","pathOld":"/dev/null","sourceNew":"\t/** Marks documents in a specific range. Code borrowed from original RangeFilter and simplified (and returns number of terms) */\n\tprivate int setBits(final IndexReader reader, final TermDocs termDocs, final OpenBitSet bits, String lowerTerm, String upperTerm) throws IOException {\n\t\t//System.out.println(stringToHexDigits(lowerTerm)+\" TO \"+stringToHexDigits(upperTerm));\n\t\tint count=0,len=lowerTerm.length();\n\t\tfinal String field;\n\t\tif (len<trieVariant.TRIE_CODED_LENGTH) {\n\t\t\t// lower precision value is in helper field\n\t\t\tfield=(this.field + trieVariant.LOWER_PRECISION_FIELD_NAME_SUFFIX).intern();\n\t\t\t// add padding before lower precision values to group them\n\t\t\tlowerTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(lowerTerm).toString();\n\t\t\tupperTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(upperTerm).toString();\n\t\t\t// length is longer by 1 char because of padding\n\t\t\tlen++;\n\t\t} else {\n\t\t\t// full precision value is in original field\n\t\t\tfield=this.field;\n\t\t}\n\t\tfinal TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\n\t\ttry {\n\t\t\tdo {\n\t\t\t\tfinal Term term = enumerator.term();\n\t\t\t\tif (term!=null && term.field()==field) {\n\t\t\t\t\t// break out when upperTerm reached or length of term is different\n\t\t\t\t\tfinal String t=term.text();\n\t\t\t\t\tif (len!=t.length() || t.compareTo(upperTerm)>0) break;\n\t\t\t\t\t// we have a good term, find the docs\n\t\t\t\t\tcount++;\n\t\t\t\t\ttermDocs.seek(enumerator);\n\t\t\t\t\twhile (termDocs.next()) bits.set(termDocs.doc());\n\t\t\t\t} else break;\n\t\t\t} while (enumerator.next());\n\t\t} finally {\n\t\t\tenumerator.close();\n\t\t}\n\t\treturn count;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#setBits(IndexReader,TermDocs,OpenBitSet,String,String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#setBits(IndexReader,TermDocs,OpenBitSet,String,String).mjava","sourceNew":"  /** Marks documents in a specific range. Code borrowed from original RangeFilter and simplified (and returns number of terms) */\n  private int setBits(final IndexReader reader, final TermDocs termDocs, final OpenBitSet bits, String lowerTerm, String upperTerm) throws IOException {\n    //System.out.println(stringToHexDigits(lowerTerm)+\" TO \"+stringToHexDigits(upperTerm));\n    int count=0,len=lowerTerm.length();\n    final String field;\n    if (len<trieVariant.TRIE_CODED_LENGTH) {\n      // lower precision value is in helper field\n      field=(this.field + trieVariant.LOWER_PRECISION_FIELD_NAME_SUFFIX).intern();\n      // add padding before lower precision values to group them\n      lowerTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(lowerTerm).toString();\n      upperTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(upperTerm).toString();\n      // length is longer by 1 char because of padding\n      len++;\n    } else {\n      // full precision value is in original field\n      field=this.field;\n    }\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\n    try {\n      do {\n        final Term term = enumerator.term();\n        if (term!=null && term.field()==field) {\n          // break out when upperTerm reached or length of term is different\n          final String t=term.text();\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\n          // we have a good term, find the docs\n          count++;\n          termDocs.seek(enumerator);\n          while (termDocs.next()) bits.set(termDocs.doc());\n        } else break;\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return count;\n  }\n\n","sourceOld":"\t/** Marks documents in a specific range. Code borrowed from original RangeFilter and simplified (and returns number of terms) */\n\tprivate int setBits(final IndexReader reader, final TermDocs termDocs, final OpenBitSet bits, String lowerTerm, String upperTerm) throws IOException {\n\t\t//System.out.println(stringToHexDigits(lowerTerm)+\" TO \"+stringToHexDigits(upperTerm));\n\t\tint count=0,len=lowerTerm.length();\n\t\tfinal String field;\n\t\tif (len<trieVariant.TRIE_CODED_LENGTH) {\n\t\t\t// lower precision value is in helper field\n\t\t\tfield=(this.field + trieVariant.LOWER_PRECISION_FIELD_NAME_SUFFIX).intern();\n\t\t\t// add padding before lower precision values to group them\n\t\t\tlowerTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(lowerTerm).toString();\n\t\t\tupperTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(upperTerm).toString();\n\t\t\t// length is longer by 1 char because of padding\n\t\t\tlen++;\n\t\t} else {\n\t\t\t// full precision value is in original field\n\t\t\tfield=this.field;\n\t\t}\n\t\tfinal TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\n\t\ttry {\n\t\t\tdo {\n\t\t\t\tfinal Term term = enumerator.term();\n\t\t\t\tif (term!=null && term.field()==field) {\n\t\t\t\t\t// break out when upperTerm reached or length of term is different\n\t\t\t\t\tfinal String t=term.text();\n\t\t\t\t\tif (len!=t.length() || t.compareTo(upperTerm)>0) break;\n\t\t\t\t\t// we have a good term, find the docs\n\t\t\t\t\tcount++;\n\t\t\t\t\ttermDocs.seek(enumerator);\n\t\t\t\t\twhile (termDocs.next()) bits.set(termDocs.doc());\n\t\t\t\t} else break;\n\t\t\t} while (enumerator.next());\n\t\t} finally {\n\t\t\tenumerator.close();\n\t\t}\n\t\treturn count;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter#fillBits(IndexReader,OpenBitSet,TermDocs,String,String,String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#setBits(IndexReader,TermDocs,OpenBitSet,String,String).mjava","sourceNew":"  void fillBits(\r\n    final IndexReader reader,\r\n    final OpenBitSet bits, final TermDocs termDocs,\r\n    String field,\r\n    final String lowerTerm, final String upperTerm\r\n  ) throws IOException {\r\n    final int len=lowerTerm.length();\r\n    assert upperTerm.length()==len;\r\n    field=field.intern();\r\n    \r\n    // find the docs\r\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\r\n    try {\r\n      do {\r\n        final Term term = enumerator.term();\r\n        if (term!=null && term.field()==field) {\r\n          // break out when upperTerm reached or length of term is different\r\n          final String t=term.text();\r\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\r\n          // we have a good term, find the docs\r\n          lastNumberOfTerms++;\r\n          termDocs.seek(enumerator);\r\n          while (termDocs.next()) bits.set(termDocs.doc());\r\n        } else break;\r\n      } while (enumerator.next());\r\n    } finally {\r\n      enumerator.close();\r\n    }\r\n  }\r\n\n","sourceOld":"  /** Marks documents in a specific range. Code borrowed from original RangeFilter and simplified (and returns number of terms) */\n  private int setBits(final IndexReader reader, final TermDocs termDocs, final OpenBitSet bits, String lowerTerm, String upperTerm) throws IOException {\n    //System.out.println(stringToHexDigits(lowerTerm)+\" TO \"+stringToHexDigits(upperTerm));\n    int count=0,len=lowerTerm.length();\n    final String field;\n    if (len<trieVariant.TRIE_CODED_LENGTH) {\n      // lower precision value is in helper field\n      field=(this.field + trieVariant.LOWER_PRECISION_FIELD_NAME_SUFFIX).intern();\n      // add padding before lower precision values to group them\n      lowerTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(lowerTerm).toString();\n      upperTerm=new StringBuffer(len+1).append((char)(trieVariant.TRIE_CODED_PADDING_START+len)).append(upperTerm).toString();\n      // length is longer by 1 char because of padding\n      len++;\n    } else {\n      // full precision value is in original field\n      field=this.field;\n    }\n    final TermEnum enumerator = reader.terms(new Term(field, lowerTerm));\n    try {\n      do {\n        final Term term = enumerator.term();\n        if (term!=null && term.field()==field) {\n          // break out when upperTerm reached or length of term is different\n          final String t=term.text();\n          if (len!=t.length() || t.compareTo(upperTerm)>0) break;\n          // we have a good term, find the docs\n          count++;\n          termDocs.seek(enumerator);\n          while (termDocs.next()) bits.set(termDocs.doc());\n        } else break;\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}