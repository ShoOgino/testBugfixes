{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomInts.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomInts.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomInts.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[(iterations - 1) * BLOCK_SIZE + ForUtil.MAX_DATA_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        forUtil.writeBlock(\n            Arrays.copyOfRange(values, i * BLOCK_SIZE, values.length),\n            new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(Arrays.copyOfRange(values, i * BLOCK_SIZE, (i + 1) * BLOCK_SIZE),\n            Arrays.copyOf(restored, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new ByteBuffersDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new RAMDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestForUtil#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new ByteBuffersDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws IOException {\n    final int iterations = RandomNumbers.randomIntBetween(random(), 1, 1000);\n    final float acceptableOverheadRatio = random().nextFloat();\n    final int[] values = new int[iterations * BLOCK_SIZE];\n    for (int i = 0; i < iterations; ++i) {\n      final int bpv = random().nextInt(32);\n      if (bpv == 0) {\n        final int value = RandomNumbers.randomIntBetween(random(), 0, Integer.MAX_VALUE);\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = value;\n        }\n      } else {\n        for (int j = 0; j < BLOCK_SIZE; ++j) {\n          values[i * BLOCK_SIZE + j] = RandomNumbers.randomIntBetween(random(),\n              0, (int) PackedInts.maxValue(bpv));\n        }\n      }\n    }\n\n    final Directory d = new ByteBuffersDirectory();\n    final long endPointer;\n\n    {\n      // encode\n      IndexOutput out = d.createOutput(\"test.bin\", IOContext.DEFAULT);\n      final ForUtil forUtil = new ForUtil(acceptableOverheadRatio, out);\n      \n      for (int i = 0; i < iterations; ++i) {\n        // Although values after BLOCK_SIZE are garbage, we need to allocate extra bytes to avoid AIOOBE.\n        int[] block = ArrayUtil.grow(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE));\n        forUtil.writeBlock(ArrayUtil.grow(block, MAX_DATA_SIZE), new byte[MAX_ENCODED_SIZE], out);\n      }\n      endPointer = out.getFilePointer();\n      out.close();\n    }\n\n    {\n      // decode\n      IndexInput in = d.openInput(\"test.bin\", IOContext.READONCE);\n      final ForUtil forUtil = new ForUtil(in);\n      for (int i = 0; i < iterations; ++i) {\n        if (random().nextBoolean()) {\n          forUtil.skipBlock(in);\n          continue;\n        }\n        final int[] restored = new int[MAX_DATA_SIZE];\n        forUtil.readBlock(in, new byte[MAX_ENCODED_SIZE], restored);\n        assertArrayEquals(ArrayUtil.copyOfSubArray(values, i*BLOCK_SIZE, (i+1)*BLOCK_SIZE),\n            ArrayUtil.copyOfSubArray(restored, 0, BLOCK_SIZE));\n      }\n      assertEquals(endPointer, in.getFilePointer());\n      in.close();\n    }\n    \n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["d77dafd89756a5161d244985903e3487ca109182"],"6448f67be45147de82a85cd903fec34e8930da75":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["6448f67be45147de82a85cd903fec34e8930da75","9798d0818e7a880546802b509792d3f3d57babd2"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","6448f67be45147de82a85cd903fec34e8930da75"],"d77dafd89756a5161d244985903e3487ca109182":["9798d0818e7a880546802b509792d3f3d57babd2"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"9798d0818e7a880546802b509792d3f3d57babd2":["6448f67be45147de82a85cd903fec34e8930da75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6448f67be45147de82a85cd903fec34e8930da75","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"6448f67be45147de82a85cd903fec34e8930da75":["b70042a8a492f7054d480ccdd2be9796510d4327","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d77dafd89756a5161d244985903e3487ca109182":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","d77dafd89756a5161d244985903e3487ca109182","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}