{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bf819846fb54a635eb297e36e7c6196d67f8273","date":1349447995,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8435160e9702b19398118ddf76b61c846612b6a4":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8435160e9702b19398118ddf76b61c846612b6a4"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["1bf819846fb54a635eb297e36e7c6196d67f8273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"8435160e9702b19398118ddf76b61c846612b6a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1bf819846fb54a635eb297e36e7c6196d67f8273":["8435160e9702b19398118ddf76b61c846612b6a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}