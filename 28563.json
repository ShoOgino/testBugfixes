{"path":"src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","commits":[{"id":"0e9a39f67d5c6faaea751aa2325e3e8acec34f58","date":1132431756,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","pathOld":"/dev/null","sourceNew":"  // original lucene floatToByte\r\n  static byte orig_floatToByte(float f) {\r\n    if (f < 0.0f)                                 // round negatives up to zero\r\n      f = 0.0f;\r\n\r\n    if (f == 0.0f)                                // zero is a special case\r\n      return 0;\r\n\r\n    int bits = Float.floatToIntBits(f);           // parse float into parts\r\n    int mantissa = (bits & 0xffffff) >> 21;\r\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\r\n\r\n    if (exponent > 31) {                          // overflow: use max value\r\n      exponent = 31;\r\n      mantissa = 7;\r\n    }\r\n\r\n    if (exponent < 0) {                           // underflow: use min value\r\n      exponent = 0;\r\n      mantissa = 1;\r\n    }\r\n\r\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","sourceNew":"  // original lucene floatToByte\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","sourceOld":"  // original lucene floatToByte\r\n  static byte orig_floatToByte(float f) {\r\n    if (f < 0.0f)                                 // round negatives up to zero\r\n      f = 0.0f;\r\n\r\n    if (f == 0.0f)                                // zero is a special case\r\n      return 0;\r\n\r\n    int bits = Float.floatToIntBits(f);           // parse float into parts\r\n    int mantissa = (bits & 0xffffff) >> 21;\r\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\r\n\r\n    if (exponent > 31) {                          // overflow: use max value\r\n      exponent = 31;\r\n      mantissa = 7;\r\n    }\r\n\r\n    if (exponent < 0) {                           // underflow: use min value\r\n      exponent = 0;\r\n      mantissa = 1;\r\n    }\r\n\r\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\r\n  }\r\n\n","bugFix":null,"bugIntro":["4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#orig_floatToByte(float).mjava","sourceNew":"  // original lucene floatToByte\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","sourceOld":"  // original lucene floatToByte\n  static byte orig_floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0e9a39f67d5c6faaea751aa2325e3e8acec34f58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["0e9a39f67d5c6faaea751aa2325e3e8acec34f58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6a361a621b184d9b73c9c9a37323a9845b8f8260"]},"commit2Childs":{"0e9a39f67d5c6faaea751aa2325e3e8acec34f58":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e9a39f67d5c6faaea751aa2325e3e8acec34f58"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}