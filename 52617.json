{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757","5ef87af8c7bd0f8429622b83aa74202383f2e757","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8ad5ab7cc5ae59face1653596ddf2018a8322a4","date":1288947711,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#flush(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDeletes whether pending deletes should also\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDeletes) && triggerMerge) {\n      maybeMerge();\n    }\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered udpates (adds and deletes)\n   * to the Directory.\n   * @param triggerMerge if true, we may merge segments (if\n   *  deletes or docs were flushed) if necessary\n   * @param flushDocStores if false we are allowed to keep\n   *  doc stores open to share with the next segment\n   * @param flushDeletes whether pending deletes should also\n   *  be flushed\n   */\n  protected final void flush(boolean triggerMerge, boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    // NOTE: this method cannot be sync'd because\n    // maybeMerge() in turn calls mergeScheduler.merge which\n    // in turn can take a long time to run and we don't want\n    // to hold the lock for that.  In the case of\n    // ConcurrentMergeScheduler this can lead to deadlock\n    // when it stalls due to too many running merges.\n\n    // We can be called during close, when closing==true, so we must pass false to ensureOpen:\n    ensureOpen(false);\n    if (doFlush(flushDocStores, flushDeletes) && triggerMerge)\n      maybeMerge();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["e8ad5ab7cc5ae59face1653596ddf2018a8322a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["9454a6510e2db155fb01faa5c049b06ece95fab9","e8ad5ab7cc5ae59face1653596ddf2018a8322a4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85a883878c0af761245ab048babc63d099f835f3","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"e8ad5ab7cc5ae59face1653596ddf2018a8322a4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e8ad5ab7cc5ae59face1653596ddf2018a8322a4":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","85a883878c0af761245ab048babc63d099f835f3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["85a883878c0af761245ab048babc63d099f835f3","e8ad5ab7cc5ae59face1653596ddf2018a8322a4","833a7987bc1c94455fde83e3311f72bddedcfb93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"833a7987bc1c94455fde83e3311f72bddedcfb93":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817","833a7987bc1c94455fde83e3311f72bddedcfb93"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}