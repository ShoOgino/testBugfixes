{"path":"sandbox/projects/appex/src/java/search/contenthandler/ZIPHandler#getNestedDataSource().mjava","commits":[{"id":"066e7c650bc6be15a2046e12740179ac678d667f","date":1020873157,"type":1,"author":"Kelvin Tan","isMerge":false,"pathNew":"sandbox/projects/appex/src/java/search/contenthandler/ZIPHandler#getNestedDataSource().mjava","pathOld":"sandbox/projects/appex/src/java/search/contenthandler/ZIPHandler#parse(Document,File).mjava","sourceNew":"    public List getNestedDataSource()\n    {\n        if (!file.exists())\n            return null;\n        if (nestedDataSource == null)\n        {\n            nestedDataSource = new ArrayList();\n        }\n        try\n        {\n            ZipFile zFile = new ZipFile(file);\n            for (Enumeration e = zFile.entries(); e.hasMoreElements();)\n            {\n                ZipEntry entry = (ZipEntry) e.nextElement();\n                String entryName = entry.getName();\n                IOUtils.writeToTempFile(zFile.getInputStream(entry),\n                                        TEMP_FOLDER + entryName);\n                if (!entry.isDirectory())\n                {\n                    // create a new DataMap for each zip entry\n                    DataSource ds = new FSDataSource(TEMP_FOLDER + entryName);\n                    nestedDataSource.add(ds);\n                }\n            }\n            zFile.close();\n        }\n        catch (ZipException ze)\n        {\n            cat.error(\"ZipException parsing zip:\" + ze.getMessage(), ze);\n        }\n        catch (IOException ioe)\n        {\n            cat.error(\"IOException parsing zip:\" + ioe.getMessage(), ioe);\n        }\n        return nestedDataSource;\n    }\n\n","sourceOld":"    public void parse(Document doc, File f)\n    {\n        if (!f.exists())\n            return;\n        try\n        {\n            ZipFile zFile = new ZipFile(f);\n            for (Enumeration e = zFile.entries(); e.hasMoreElements();)\n            {\n                ZipEntry entry = (ZipEntry) e.nextElement();\n                String entryName = entry.getName();\n                IOUtils.writeToTempFile(zFile.getInputStream(entry),\n                                        TEMP_FOLDER + entryName);\n                if (!entry.isDirectory())\n                {\n                    // create a new DataMap for each zip entry\n                    Map dataMap = new HashMap();\n                    dataMap.put(\"filePath\", TEMP_FOLDER + entryName);\n                    dataMapList.add(dataMap);\n                }\n            }\n            zFile.close();\n        }\n        catch (ZipException ze)\n        {\n            cat.error(\"ZipException parsing zip:\" + ze.getMessage(), ze);\n        }\n        catch (IOException ioe)\n        {\n            cat.error(\"IOException parsing zip:\" + ioe.getMessage(), ioe);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f35ba86e9cc568fdc800d780c620749584b1d5bc","date":1051838861,"type":4,"author":"Kelvin Tan","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/projects/appex/src/java/search/contenthandler/ZIPHandler#getNestedDataSource().mjava","sourceNew":null,"sourceOld":"    public List getNestedDataSource()\n    {\n        if (!file.exists())\n            return null;\n        if (nestedDataSource == null)\n        {\n            nestedDataSource = new ArrayList();\n        }\n        try\n        {\n            ZipFile zFile = new ZipFile(file);\n            for (Enumeration e = zFile.entries(); e.hasMoreElements();)\n            {\n                ZipEntry entry = (ZipEntry) e.nextElement();\n                String entryName = entry.getName();\n                IOUtils.writeToTempFile(zFile.getInputStream(entry),\n                                        TEMP_FOLDER + entryName);\n                if (!entry.isDirectory())\n                {\n                    // create a new DataMap for each zip entry\n                    DataSource ds = new FSDataSource(TEMP_FOLDER + entryName);\n                    nestedDataSource.add(ds);\n                }\n            }\n            zFile.close();\n        }\n        catch (ZipException ze)\n        {\n            cat.error(\"ZipException parsing zip:\" + ze.getMessage(), ze);\n        }\n        catch (IOException ioe)\n        {\n            cat.error(\"IOException parsing zip:\" + ioe.getMessage(), ioe);\n        }\n        return nestedDataSource;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f35ba86e9cc568fdc800d780c620749584b1d5bc":["066e7c650bc6be15a2046e12740179ac678d667f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f35ba86e9cc568fdc800d780c620749584b1d5bc"],"066e7c650bc6be15a2046e12740179ac678d667f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["066e7c650bc6be15a2046e12740179ac678d667f"],"f35ba86e9cc568fdc800d780c620749584b1d5bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"066e7c650bc6be15a2046e12740179ac678d667f":["f35ba86e9cc568fdc800d780c620749584b1d5bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}