{"path":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map,SegmentWriteState).mjava","sourceNew":"  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","sourceOld":"  public void flush(Map threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","sourceOld":"  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["60cdc0e643184821eb066795a8791cd82559f46e"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}