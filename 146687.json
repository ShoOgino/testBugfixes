{"path":"src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#test().mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(FileBasedSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core.getResourceLoader());\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["84f1ddc6934c6c11372619b2ab45bab869ef13a6","d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84f1ddc6934c6c11372619b2ab45bab869ef13a6","date":1216657101,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#test().mjava","pathOld":"src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(FileBasedSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core.getResourceLoader());\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(FileBasedSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core.getResourceLoader());\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n\n\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90","date":1216996119,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#test().mjava","pathOld":"src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(FileBasedSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(FileBasedSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core.getResourceLoader());\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n\n\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#test().mjava","pathOld":"src/test/org/apache/solr/spelling/FileBasedSpellCheckerTest#test().mjava","sourceNew":"  public void test() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(FileBasedSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n\n\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    FileBasedSpellChecker checker = new FileBasedSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", FileBasedSpellChecker.class.getName());\n\n    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, \"external\");\n    File spelling = new File(\"spellings.txt\");\n    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, spelling.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"teststop\");\n    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, \"UTF-8\");\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(FileBasedSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + \"external\", dictName.equals(\"external\") == true);\n    checker.build(core, null);\n\n    IndexReader reader = core.getSearcher().get().getReader();\n    Collection<Token> tokens = queryConverter.convert(\"fob\");\n    SpellingResult result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    Map<String, Integer> suggestions = result.get(tokens.iterator().next());\n    Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();\n    assertTrue(entry.getKey() + \" is not equal to \" + \"foo\", entry.getKey().equals(\"foo\") == true);\n    assertTrue(entry.getValue() + \" does not equal: \" + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);\n\n    tokens = queryConverter.convert(\"super\");\n    result = checker.getSuggestions(tokens, reader);\n    assertTrue(\"result is null and it shouldn't be\", result != null);\n    suggestions = result.get(tokens.iterator().next());\n    assertTrue(\"suggestions is not null and it should be\", suggestions == null);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"84f1ddc6934c6c11372619b2ab45bab869ef13a6":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["84f1ddc6934c6c11372619b2ab45bab869ef13a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["84f1ddc6934c6c11372619b2ab45bab869ef13a6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"84f1ddc6934c6c11372619b2ab45bab869ef13a6":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}