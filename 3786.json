{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      return new TermSpans(postings, term);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(acceptDocs, null, requiredPostings.getRequiredPostings());\n      return new TermSpans(postings, term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      return new TermSpans(this, getSimScorer(context), postings, term);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      return new TermSpans(postings, term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(this, getSimScorer(context), postings, term, positionsCost);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      return new TermSpans(this, getSimScorer(context), postings, term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(this, getSimScorer(context), postings, term, positionsCost);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd3db3e8f35bef1d4d3f0411933b3190297302a","date":1485357107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","bugFix":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termStates.get(context);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termStates.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termStates.get(context);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.wasBuiltFor(ReaderUtil.getTopLevelContext(context)) : \"The top-reader used to create Weight is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      float positionsCost = termPositionsCost(termsEnum) * PHRASE_TO_SPAN_TERM_POSITIONS_COST;\n      return new TermSpans(getSimScorer(context), postings, term, positionsCost);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"b94236357aaa22b76c10629851fe4e376e0cea82":["3bd3db3e8f35bef1d4d3f0411933b3190297302a","a6e9f769521480a623f897c0d59089b919fa4239"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6e9f769521480a623f897c0d59089b919fa4239":["3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["7dd748bb245633a8195281556bb0e68a6ea97d18","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["598b5d23aa7c9732bf473c21a9cd309c44599394","3bd3db3e8f35bef1d4d3f0411933b3190297302a"],"3bd3db3e8f35bef1d4d3f0411933b3190297302a":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}