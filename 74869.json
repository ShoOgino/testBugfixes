{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor,int).mjava","commits":[{"id":"8a14a9a6131884330f34844dabc1ece206ceaea9","date":1561954503,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor,int).mjava","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, BKDReaderDocIDSetIterator scratchIterator, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim = 0; dim < numDataDims; dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(scratchIterator.docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim = 0; dim < numDataDims; dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitCompressedDocValues(int[],byte[],IndexInput,BKDReaderDocIDSetIterator,int,IntersectVisitor,int).mjava","sourceNew":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, BKDReaderDocIDSetIterator scratchIterator, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * config.bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim = 0; dim < config.numDims; dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*config.bytesPerDim + prefix, config.bytesPerDim - prefix);\n        }\n        visitor.visit(scratchIterator.docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","sourceOld":"  private void visitCompressedDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, BKDReaderDocIDSetIterator scratchIterator, int count, IntersectVisitor visitor, int compressedDim) throws IOException {\n    // the byte at `compressedByteOffset` is compressed using run-length compression,\n    // other suffix bytes are stored verbatim\n    final int compressedByteOffset = compressedDim * bytesPerDim + commonPrefixLengths[compressedDim];\n    commonPrefixLengths[compressedDim]++;\n    int i;\n    for (i = 0; i < count; ) {\n      scratchPackedValue[compressedByteOffset] = in.readByte();\n      final int runLen = Byte.toUnsignedInt(in.readByte());\n      for (int j = 0; j < runLen; ++j) {\n        for(int dim = 0; dim < numDataDims; dim++) {\n          int prefix = commonPrefixLengths[dim];\n          in.readBytes(scratchPackedValue, dim*bytesPerDim + prefix, bytesPerDim - prefix);\n        }\n        visitor.visit(scratchIterator.docIDs[i+j], scratchPackedValue);\n      }\n      i += runLen;\n    }\n    if (i != count) {\n      throw new CorruptIndexException(\"Sub blocks do not add up to the expected count: \" + count + \" != \" + i, in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["8a14a9a6131884330f34844dabc1ece206ceaea9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a14a9a6131884330f34844dabc1ece206ceaea9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a14a9a6131884330f34844dabc1ece206ceaea9"],"8a14a9a6131884330f34844dabc1ece206ceaea9":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}