{"path":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   *\n   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float) \n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   *\n   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float) \n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   *\n   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float) \n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   *\n   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float) \n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#suggestSimilar(String,int).mjava","sourceNew":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   *\n   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float) \n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n  }\n\n","sourceOld":"  /**\n   * Suggest similar words.\n   * \n   * <p>As the Lucene similarity that is used to fetch the most relevant n-grammed terms\n   * is not the same as the edit distance strategy used to calculate the best\n   * matching spell-checked word from the hits that Lucene found, one usually has\n   * to retrieve a couple of numSug's in order to get the true best match.\n   *\n   * <p>I.e. if numSug == 1, don't count on that suggestion being the best one.\n   * Thus, you should set this value to <b>at least</b> 5 for a good suggestion.\n   *\n   * @param word the word you want a spell check done on\n   * @param numSug the number of suggested words\n   * @throws IOException if the underlying index throws an {@link IOException}\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @return String[]\n   *\n   * @see #suggestSimilar(String, int, IndexReader, String, SuggestMode, float) \n   */\n  public String[] suggestSimilar(String word, int numSug) throws IOException {\n    return this.suggestSimilar(word, numSug, null, null, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}