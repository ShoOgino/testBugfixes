{"path":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":null,"sourceOld":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a3ee7c72e7539c6ad4b8494808b7d64c210febf","date":1269122965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n    String many_ws = sb.toString();\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestFaceting#testRegularBig().mjava","sourceNew":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testRegularBig() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    int nTerms=7;\n    for (int i=0; i<nTerms; i++) {\n      sb.append(t(i));\n      sb.append(' ');\n    }\n\n    int i1=1000000;\n\n    // int iter=65536+10;\n    int iter=1000;\n    int commitInterval=iter/9;\n\n    for (int i=0; i<iter; i++) {\n      // assertU(adoc(\"id\", t(i), \"many_ws\", many_ws + t(i1+i) + \" \" + t(i1*2+i)));\n      assertU(adoc(\"id\", t(i), \"many_ws\", t(i1+i) + \" \" + t(i1*2+i)));\n      if (iter % commitInterval == 0) {\n        assertU(commit());\n      }\n    }\n    assertU(commit());\n\n    for (int i=0; i<iter; i+=iter/10) {\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n    }\n\n    int i=iter-1;\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:\"+t(i),\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                ,\"facet.mincount\", \"1\"\n\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=\" + 2 + \"]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1+i) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(i1*2+i) + \"'][.='1']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["28427ef110c4c5bf5b4057731b83110bd1e13724","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf","28427ef110c4c5bf5b4057731b83110bd1e13724"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"9a3ee7c72e7539c6ad4b8494808b7d64c210febf":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"1da8d55113b689b06716246649de6f62430f15c0":["9a3ee7c72e7539c6ad4b8494808b7d64c210febf"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["c26f00b574427b55127e869b935845554afde1fa","5f4e87790277826a2aea119328600dfb07761f32","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}