{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","commits":[{"id":"b6b0122d107a2f2a35007aca038d2a7fde039266","date":1222123999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","sourceNew":"  public void xxxtestOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeExceptions().mjava","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void xxxtestOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT);\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT);\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);    \n    w.setMaxBufferedDocs(2);\n    w.setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.UNLIMITED);\n      ((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeExceptions().mjava","sourceNew":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimizeExceptions() throws IOException {\n    RAMDirectory startDir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(startDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    ((LogMergePolicy) w.getMergePolicy()).setMergeFactor(100);\n    for(int i=0;i<27;i++)\n      addDoc(w);\n    w.close();\n\n    for(int i=0;i<200;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      w = new IndexWriter(dir, conf);\n      dir.setRandomIOExceptionRate(0.5, 100);\n      try {\n        w.optimize();\n      } catch (IOException ioe) {\n        if (ioe.getCause() == null)\n          fail(\"optimize threw IOException without root cause\");\n      }\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b6b0122d107a2f2a35007aca038d2a7fde039266"],"b6b0122d107a2f2a35007aca038d2a7fde039266":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["09c482d1e63332617181729a225b215c452d8a79"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"b6b0122d107a2f2a35007aca038d2a7fde039266":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6b0122d107a2f2a35007aca038d2a7fde039266"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"09c482d1e63332617181729a225b215c452d8a79":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}