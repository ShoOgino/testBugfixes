{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","commits":[{"id":"51f6eb2e42e0de57b9d737aa322902b2d3029149","date":1450381224,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, QParserPlugin.DEFAULT_QTYPE, rb.req);              \n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","sourceNew":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);\n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","sourceOld":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, QParserPlugin.DEFAULT_QTYPE, rb.req);              \n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","sourceNew":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);\n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","sourceOld":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, QParserPlugin.DEFAULT_QTYPE, rb.req);              \n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","sourceNew":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);\n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","sourceOld":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, QParserPlugin.DEFAULT_QTYPE, rb.req);              \n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","sourceNew":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);\n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","sourceOld":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, QParserPlugin.DEFAULT_QTYPE, rb.req);              \n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","sourceNew":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);\n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          log.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          log.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","sourceOld":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);\n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          LOG.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          LOG.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#maxResultsForSuggest(ResponseBuilder).mjava","sourceNew":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);\n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          log.error(\"Error\", e);\n          return null;\n        } catch (SyntaxError e) {\n          log.error(\"Error\", e);\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","sourceOld":"  private Integer maxResultsForSuggest(ResponseBuilder rb) {\n    SolrParams params = rb.req.getParams();\n    float maxResultsForSuggestParamValue = params.getFloat(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST, 0.0f);\n    Integer maxResultsForSuggest = null;\n    \n    if (maxResultsForSuggestParamValue > 0.0f) {\n      if (maxResultsForSuggestParamValue == (int) maxResultsForSuggestParamValue) {\n        // If a whole number was passed in, this is a discrete number of documents\n        maxResultsForSuggest = (int) maxResultsForSuggestParamValue;\n      } else {\n        // If a fractional value was passed in, this is the % of documents returned by the specified filter\n        // If no specified filter, we use the most restrictive filter of the fq parameters\n        String maxResultsFilterQueryString = params.get(SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST_FQ);\n        \n        int maxResultsByFilters = Integer.MAX_VALUE;\n        SolrIndexSearcher searcher = rb.req.getSearcher();\n        \n        try {\n          if (maxResultsFilterQueryString != null) {\n            // Get the default Lucene query parser\n            QParser parser = QParser.getParser(maxResultsFilterQueryString, rb.req);\n            DocSet s = searcher.getDocSet(parser.getQuery());\n            maxResultsByFilters = s.size();\n          } else {\n            List<Query> filters = rb.getFilters();\n\n            // Get the maximum possible hits within these filters (size of most restrictive filter). \n            if (filters != null) {\n              for (Query query : filters) {\n                DocSet s = searcher.getDocSet(query);\n                if (s != null) {\n                  maxResultsByFilters = Math.min(s.size(), maxResultsByFilters);\n                }\n              }\n            }\n          }\n        } catch (IOException e){\n          log.error(e.toString());\n          return null;\n        } catch (SyntaxError e) {\n          log.error(e.toString());\n          return null;\n        }\n        \n        // Recalculate maxResultsForSuggest if filters were specified\n        if (maxResultsByFilters != Integer.MAX_VALUE) {\n          maxResultsForSuggest = Math.round(maxResultsByFilters * maxResultsForSuggestParamValue);\n        }\n      }\n    }\n    return maxResultsForSuggest;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51f6eb2e42e0de57b9d737aa322902b2d3029149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["51f6eb2e42e0de57b9d737aa322902b2d3029149","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["51f6eb2e42e0de57b9d737aa322902b2d3029149"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["51f6eb2e42e0de57b9d737aa322902b2d3029149","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["51f6eb2e42e0de57b9d737aa322902b2d3029149","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"51f6eb2e42e0de57b9d737aa322902b2d3029149":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f6eb2e42e0de57b9d737aa322902b2d3029149"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}