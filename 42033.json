{"path":"solr/core/src/java/org/apache/solr/search/CaffeineCache#init(Map,Object,CacheRegenerator).mjava","commits":[{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CaffeineCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    super.init(args, regenerator);\n    String str = (String) args.get(SIZE_PARAM);\n    maxSize = (str == null) ? 1024 : Integer.parseInt(str);\n    str = (String) args.get(\"initialSize\");\n    initialSize = Math.min((str == null) ? 1024 : Integer.parseInt(str), maxSize);\n    str = (String) args.get(MAX_IDLE_TIME_PARAM);\n    if (str == null) {\n      maxIdleTimeSec = -1;\n    } else {\n      maxIdleTimeSec = Integer.parseInt(str);\n    }\n    str = (String) args.get(MAX_RAM_MB_PARAM);\n    int maxRamMB = str == null ? -1 : Double.valueOf(str).intValue();\n    maxRamBytes = maxRamMB < 0 ? Long.MAX_VALUE : maxRamMB * 1024L * 1024L;\n    str = (String) args.get(CLEANUP_THREAD_PARAM);\n    cleanupThread = str != null && Boolean.parseBoolean(str);\n    if (cleanupThread) {\n      executor = ForkJoinPool.commonPool();\n    } else {\n      executor = Runnable::run;\n    }\n\n    description = generateDescription(maxSize, initialSize);\n\n    cache = buildCache(null);\n    inserts = new LongAdder();\n\n    initialRamBytes =\n        RamUsageEstimator.shallowSizeOfInstance(cache.getClass()) +\n        RamUsageEstimator.shallowSizeOfInstance(executor.getClass()) +\n        RamUsageEstimator.sizeOfObject(description);\n\n    return persistence;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CaffeineCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    super.init(args, regenerator);\n    String str = (String) args.get(SIZE_PARAM);\n    maxSize = (str == null) ? 1024 : Integer.parseInt(str);\n    str = (String) args.get(\"initialSize\");\n    initialSize = Math.min((str == null) ? 1024 : Integer.parseInt(str), maxSize);\n    str = (String) args.get(MAX_IDLE_TIME_PARAM);\n    if (str == null) {\n      maxIdleTimeSec = -1;\n    } else {\n      maxIdleTimeSec = Integer.parseInt(str);\n    }\n    str = (String) args.get(MAX_RAM_MB_PARAM);\n    int maxRamMB = str == null ? -1 : Double.valueOf(str).intValue();\n    maxRamBytes = maxRamMB < 0 ? Long.MAX_VALUE : maxRamMB * 1024L * 1024L;\n    str = (String) args.get(CLEANUP_THREAD_PARAM);\n    cleanupThread = str != null && Boolean.parseBoolean(str);\n    if (cleanupThread) {\n      executor = ForkJoinPool.commonPool();\n    } else {\n      executor = Runnable::run;\n    }\n\n    description = generateDescription(maxSize, initialSize);\n\n    cache = buildCache(null);\n    inserts = new LongAdder();\n\n    initialRamBytes =\n        RamUsageEstimator.shallowSizeOfInstance(cache.getClass()) +\n        RamUsageEstimator.shallowSizeOfInstance(executor.getClass()) +\n        RamUsageEstimator.sizeOfObject(description);\n\n    return persistence;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87f0484c38f986062889ed50f3bf3bd462848c26"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"87f0484c38f986062889ed50f3bf3bd462848c26":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}