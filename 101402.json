{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    String nonDocValuesField = \"number_p_d_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof DoublePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof DoublePointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    String nonDocValuesField = \"number_p_d_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof DoublePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof DoublePointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    doTestDoublePointFieldMultiValuedRangeFacet(\"number_p_d_mv_dv\", \"number_p_d_mv\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    String nonDocValuesField = \"number_p_d_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof DoublePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof DoublePointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    doTestDoublePointFieldMultiValuedRangeFacet(\"number_p_d_mv_dv\", \"number_p_d_mv\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    String nonDocValuesField = \"number_p_d_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof DoublePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof DoublePointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    String nonDocValuesField = \"number_p_d_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof DoublePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof DoublePointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    doTestDoublePointFieldMultiValuedRangeFacet(\"number_p_d_mv_dv\", \"number_p_d_mv\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    doTestDoublePointFieldMultiValuedRangeFacet(\"number_p_d_mv_dv\", \"number_p_d_mv\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Enable once MultiValued docValues are supported in PointFields\")\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    String nonDocValuesField = \"number_p_d_mv\";\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, String.valueOf(i), docValuesField, String.valueOf(i + 10), \n          nonDocValuesField, String.valueOf(i), nonDocValuesField, String.valueOf(i + 10)));\n    }\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof DoublePointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", \"0\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"100\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='10']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof DoublePointField);\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"filter\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n    \n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", \"-10\", \"facet.range.end\", \"20\", \"facet.range.gap\", \"2\", \"facet.range.method\", \"dv\"), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='0.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='2.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='4.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='6.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='8.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='10.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='12.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='14.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='16.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='18.0'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField + \"']/lst[@name='counts']/int[@name='-10.0'][.='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (PosVal<Double> value : sortedValues) {\n      // System.err.println(\"value.val: \" + value.val);\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    doTestDoublePointFieldMultiValuedRangeFacet(\"number_p_d_mv_dv\", \"number_p_d_mv\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (PosVal<Double> value : sortedValues) {\n      // System.err.println(\"value.val: \" + value.val);\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    doTestDoublePointFieldMultiValuedRangeFacet(\"number_p_d_mv_dv\", \"number_p_d_mv\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3167d2ebbb4aafb8ffb9f9af2ad6ee5a6318e9fd","date":1502082018,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min)).add(BigDecimal.valueOf(buffer * 2.0D))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (PosVal<Double> value : sortedValues) {\n      // System.err.println(\"value.val: \" + value.val);\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (PosVal<Double> value : sortedValues) {\n      // System.err.println(\"value.val: \" + value.val);\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"566112f6115904d848cbf09462ebd8bf1304257b","date":1502103699,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min)).add(BigDecimal.valueOf(buffer * 2.0D))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (PosVal<Double> value : sortedValues) {\n      // System.err.println(\"value.val: \" + value.val);\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (PosVal<Double> value : sortedValues) {\n      // System.err.println(\"value.val: \" + value.val);\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDoublePointFieldMultiValuedRangeFacet().mjava","sourceNew":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min)).add(BigDecimal.valueOf(buffer * 2.0D))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (PosVal<Double> value : sortedValues) {\n      // System.err.println(\"value.val: \" + value.val);\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testDoublePointFieldMultiValuedRangeFacet() throws Exception {\n    String docValuesField = \"number_p_d_mv_dv\";\n    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);\n    assertTrue(dvSchemaField.multiValued());\n    assertTrue(dvSchemaField.hasDocValues());\n    assertTrue(dvSchemaField.getType() instanceof PointField);\n\n    String nonDocValuesField = \"number_p_d_mv\";\n    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);\n    assertTrue(nonDvSchemaField.multiValued());\n    assertFalse(nonDvSchemaField.hasDocValues());\n    assertTrue(nonDvSchemaField.getType() instanceof PointField);\n\n    int numValues = 20 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Double> values;\n    List<PosVal<Double>> sortedValues;\n    double min, max, gap, buffer;\n    do {\n      values = getRandomDoubles(numValues, false);\n      sortedValues = toAscendingPosVals(values, true);\n      min = sortedValues.get(0).val;\n      max = sortedValues.get(sortedValues.size() - 1).val;\n      buffer = BigDecimal.valueOf(max).subtract(BigDecimal.valueOf(min))\n          .divide(BigDecimal.valueOf(numValues / 2), RoundingMode.HALF_UP).doubleValue();\n      gap = BigDecimal.valueOf(max + buffer).subtract(BigDecimal.valueOf(min - buffer))\n          .divide(BigDecimal.valueOf(numBuckets), RoundingMode.HALF_UP).doubleValue();\n    } while (max >= Double.MAX_VALUE - buffer || min <= -Double.MAX_VALUE + buffer);\n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);\n    for (int i = 0 ; i < numBuckets ; ++i) {\n      docIdBucket.add(new HashSet<>());\n    }\n    int bucketNum = 0;\n    double minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (PosVal<Double> value : sortedValues) {\n      // System.err.println(\"value.val: \" + value.val);\n      while (value.val - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values \n    }\n    for (int i = 0 ; i < numValues ; i += 2) {\n      assertU(adoc(\"id\", String.valueOf(i / 2),\n          docValuesField, String.valueOf(values.get(i)),\n          docValuesField, String.valueOf(values.get(i + 1)),\n          nonDocValuesField, String.valueOf(values.get(i)),\n          nonDocValuesField, String.valueOf(values.get(i + 1))));\n    }\n    assertU(commit());\n\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + (numValues / 2) + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"indent\", \"on\"),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + docIdBucket.get(i).size() + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\", \"indent\", \"on\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField,\n        \"facet.range.start\", String.valueOf(min - buffer), \"facet.range.end\", String.valueOf(max + buffer),\n        \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\", \"indent\", \"on\"),\n        testStrings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["46dc9ac8b3e748407baaef82453138ff3974480c","744b111b17d15d490a648eb021bfa240e7f11556"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["aaf90fc29510e72665ac7934f34c3d1c25efad64","566112f6115904d848cbf09462ebd8bf1304257b"],"566112f6115904d848cbf09462ebd8bf1304257b":["17e844d4f9ba6804f10747d7e51e83a9a8868c94","3167d2ebbb4aafb8ffb9f9af2ad6ee5a6318e9fd"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["897b06b1364bd1f658a8be7591e43f0851458e7f","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3167d2ebbb4aafb8ffb9f9af2ad6ee5a6318e9fd":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"744b111b17d15d490a648eb021bfa240e7f11556":["46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["566112f6115904d848cbf09462ebd8bf1304257b"]},"commit2Childs":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["17e844d4f9ba6804f10747d7e51e83a9a8868c94","aaf90fc29510e72665ac7934f34c3d1c25efad64"],"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["566112f6115904d848cbf09462ebd8bf1304257b","aaf90fc29510e72665ac7934f34c3d1c25efad64","3167d2ebbb4aafb8ffb9f9af2ad6ee5a6318e9fd"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"566112f6115904d848cbf09462ebd8bf1304257b":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"3167d2ebbb4aafb8ffb9f9af2ad6ee5a6318e9fd":["566112f6115904d848cbf09462ebd8bf1304257b"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}