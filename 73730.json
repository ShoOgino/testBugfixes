{"path":"solr/core/src/test/org/apache/solr/util/hll/FullHLLTest#assertElementsEqual(HLL,HLL).mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/FullHLLTest#assertElementsEqual(HLL,HLL).mjava","pathOld":"/dev/null","sourceNew":"    // ************************************************************************\n    // Assertion Helpers\n    /**\n     * Asserts that the two HLLs are register-wise equal.\n     */\n    private static void assertElementsEqual(final HLL hllA, final HLL hllB) {\n        final BitVector bitVectorA = hllA.probabilisticStorage;\n        final BitVector bitVectorB = hllA.probabilisticStorage;\n\n        final LongIterator iterA = bitVectorA.registerIterator();\n        final LongIterator iterB = bitVectorB.registerIterator();\n\n        for(;iterA.hasNext() && iterB.hasNext();) {\n            assertEquals(iterA.next(), iterB.next());\n        }\n        assertFalse(iterA.hasNext());\n        assertFalse(iterB.hasNext());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3982256978981b5e315dee0500a3e5c7a5fdcb8","date":1437060619,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/FullHLLTest#assertElementsEqual(HLL,HLL).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/hll/FullHLLTest#assertElementsEqual(HLL,HLL).mjava","sourceNew":"    // ************************************************************************\n    // Assertion Helpers\n    /**\n     * Asserts that the two HLLs are register-wise equal.\n     */\n    private static void assertElementsEqual(final HLL hllA, final HLL hllB) {\n        final BitVector bitVectorA = hllA.probabilisticStorage;\n        final BitVector bitVectorB = hllB.probabilisticStorage;\n\n        final LongIterator iterA = bitVectorA.registerIterator();\n        final LongIterator iterB = bitVectorB.registerIterator();\n\n        for(;iterA.hasNext() && iterB.hasNext();) {\n            assertEquals(iterA.next(), iterB.next());\n        }\n        assertFalse(iterA.hasNext());\n        assertFalse(iterB.hasNext());\n    }\n\n","sourceOld":"    // ************************************************************************\n    // Assertion Helpers\n    /**\n     * Asserts that the two HLLs are register-wise equal.\n     */\n    private static void assertElementsEqual(final HLL hllA, final HLL hllB) {\n        final BitVector bitVectorA = hllA.probabilisticStorage;\n        final BitVector bitVectorB = hllA.probabilisticStorage;\n\n        final LongIterator iterA = bitVectorA.registerIterator();\n        final LongIterator iterB = bitVectorB.registerIterator();\n\n        for(;iterA.hasNext() && iterB.hasNext();) {\n            assertEquals(iterA.next(), iterB.next());\n        }\n        assertFalse(iterA.hasNext());\n        assertFalse(iterB.hasNext());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/FullHLLTest#assertElementsEqual(HLL,HLL).mjava","pathOld":"/dev/null","sourceNew":"    // ************************************************************************\n    // Assertion Helpers\n    /**\n     * Asserts that the two HLLs are register-wise equal.\n     */\n    private static void assertElementsEqual(final HLL hllA, final HLL hllB) {\n        final BitVector bitVectorA = hllA.probabilisticStorage;\n        final BitVector bitVectorB = hllB.probabilisticStorage;\n\n        final LongIterator iterA = bitVectorA.registerIterator();\n        final LongIterator iterB = bitVectorB.registerIterator();\n\n        for(;iterA.hasNext() && iterB.hasNext();) {\n            assertEquals(iterA.next(), iterB.next());\n        }\n        assertFalse(iterA.hasNext());\n        assertFalse(iterB.hasNext());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3982256978981b5e315dee0500a3e5c7a5fdcb8":["6faa211c4af605e3cf078a76d200c1dc348973f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3982256978981b5e315dee0500a3e5c7a5fdcb8"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"e3982256978981b5e315dee0500a3e5c7a5fdcb8":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["e3982256978981b5e315dee0500a3e5c7a5fdcb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}