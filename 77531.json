{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","commits":[{"id":"a650dff0e8d5eb50adc81dabeb6b5ebec0c9c3e0","date":1459706876,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextSimpleBox();\n        // allowed to conservatively return false\n        if (polygon.contains(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon)) {\n          for (int k = 0; k < 1000; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double latitude = nextLatitudeAround(rectangle.minLat, rectangle.maxLat);\n            double longitude = nextLongitudeAround(rectangle.minLon, rectangle.maxLon);\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["82235a501cff963da53cb98d86009e33e15cf47f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82235a501cff963da53cb98d86009e33e15cf47f","date":1459788663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","sourceNew":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextSimpleBox();\n        // allowed to conservatively return false\n        if (polygon.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 1000; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double latitude = nextLatitudeAround(rectangle.minLat, rectangle.maxLat);\n            double longitude = nextLongitudeAround(rectangle.minLon, rectangle.maxLon);\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextSimpleBox();\n        // allowed to conservatively return false\n        if (polygon.contains(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon)) {\n          for (int k = 0; k < 1000; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double latitude = nextLatitudeAround(rectangle.minLat, rectangle.maxLat);\n            double longitude = nextLongitudeAround(rectangle.minLon, rectangle.maxLon);\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["a650dff0e8d5eb50adc81dabeb6b5ebec0c9c3e0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","sourceNew":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextSimpleBox();\n        // allowed to conservatively return false\n        if (polygon.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 1000; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double latitude = nextLatitudeAround(rectangle.minLat, rectangle.maxLat);\n            double longitude = nextLongitudeAround(rectangle.minLon, rectangle.maxLon);\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextSimpleBox();\n        // allowed to conservatively return false\n        if (polygon.contains(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon)) {\n          for (int k = 0; k < 1000; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double latitude = nextLatitudeAround(rectangle.minLat, rectangle.maxLat);\n            double longitude = nextLongitudeAround(rectangle.minLon, rectangle.maxLon);\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","sourceNew":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextBoxNear(polygon);\n        // allowed to conservatively return false\n        if (polygon.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 500; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(rectangle);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n          for (int k = 0; k < 100; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(polygon);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextSimpleBox();\n        // allowed to conservatively return false\n        if (polygon.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 1000; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double latitude = nextLatitudeAround(rectangle.minLat, rectangle.maxLat);\n            double longitude = nextLongitudeAround(rectangle.minLon, rectangle.maxLon);\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","sourceNew":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextBoxNear(polygon);\n        // allowed to conservatively return false\n        if (polygon.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 500; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(rectangle);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n          for (int k = 0; k < 100; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(polygon);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextSimpleBox();\n        // allowed to conservatively return false\n        if (polygon.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 1000; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double latitude = nextLatitudeAround(rectangle.minLat, rectangle.maxLat);\n            double longitude = nextLongitudeAround(rectangle.minLon, rectangle.maxLon);\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","sourceNew":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextBoxNear(polygon);\n        // allowed to conservatively return false\n        if (impl.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 500; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(rectangle);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(impl.contains(latitude, longitude));\n            }\n          }\n          for (int k = 0; k < 100; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(polygon);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(impl.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextBoxNear(polygon);\n        // allowed to conservatively return false\n        if (polygon.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 500; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(rectangle);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n          for (int k = 0; k < 100; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(polygon);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testContainsRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testContainsRandom().mjava","sourceNew":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextBoxNear(polygon);\n        // allowed to conservatively return false\n        if (impl.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 500; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(rectangle);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(impl.contains(latitude, longitude));\n            }\n          }\n          for (int k = 0; k < 100; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(polygon);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(impl.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** If polygon.contains(box) returns true, then any point in that box should return true as well */\n  public void testContainsRandom() throws Exception {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        Rectangle rectangle = GeoTestUtil.nextBoxNear(polygon);\n        // allowed to conservatively return false\n        if (polygon.relate(rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon) == Relation.CELL_INSIDE_QUERY) {\n          for (int k = 0; k < 500; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(rectangle);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n          for (int k = 0; k < 100; k++) {\n            // this tests in our range but sometimes outside! so we have to double-check its really in other box\n            double point[] = GeoTestUtil.nextPointNear(polygon);\n            double latitude = point[0];\n            double longitude = point[1];\n            // check for sure its in our box\n            if (latitude >= rectangle.minLat && latitude <= rectangle.maxLat && longitude >= rectangle.minLon && longitude <= rectangle.maxLon) {\n              assertTrue(polygon.contains(latitude, longitude));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82235a501cff963da53cb98d86009e33e15cf47f":["a650dff0e8d5eb50adc81dabeb6b5ebec0c9c3e0"],"a650dff0e8d5eb50adc81dabeb6b5ebec0c9c3e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a650dff0e8d5eb50adc81dabeb6b5ebec0c9c3e0","82235a501cff963da53cb98d86009e33e15cf47f"],"713122036535651642e6d4fe57ce12b449e18473":["82235a501cff963da53cb98d86009e33e15cf47f","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["713122036535651642e6d4fe57ce12b449e18473","925fce43f3bac029d912b9b7de03c789e258a333"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["82235a501cff963da53cb98d86009e33e15cf47f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["713122036535651642e6d4fe57ce12b449e18473"]},"commit2Childs":{"82235a501cff963da53cb98d86009e33e15cf47f":["09af2c9610ce53a4b25fd99344299b40318a4a1a","713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a650dff0e8d5eb50adc81dabeb6b5ebec0c9c3e0":["82235a501cff963da53cb98d86009e33e15cf47f","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"713122036535651642e6d4fe57ce12b449e18473":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a650dff0e8d5eb50adc81dabeb6b5ebec0c9c3e0"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}