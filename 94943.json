{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","commits":[{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"/dev/null","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a7ac6407286ebd80d6754a6586316e11c06f37b3","7875fce026a0a335830cfc75abc3eb009eff9a73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9088bc86d5a0e967da50b566ea1dd0c5458ba6f5","date":1418915621,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ac6407286ebd80d6754a6586316e11c06f37b3","date":1469634359,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n        // simulate three state changes on same collection, all should be batched together before\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        // and after too\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // simulate three state changes on two different collections with stateFormat=2, none should be batched\n        assertFalse(writer.maybeFlushBefore(c1));\n        // flushAfter has to be called as it updates the internal batching related info\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n        assertTrue(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // create a collection in stateFormat = 1 i.e. inside the main cluster state\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n        clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n        // simulate three state changes in c3, all should be batched\n        for (int i = 0; i < 3; i++) {\n          assertFalse(writer.maybeFlushBefore(c3));\n          assertFalse(writer.maybeFlushAfter(c3));\n        }\n\n        // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n        // none should be batched together\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["9088bc86d5a0e967da50b566ea1dd0c5458ba6f5","584c1ee8712b5af28075d98028ccab111d6eeda2"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n        // simulate three state changes on same collection, all should be batched together before\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        // and after too\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // simulate three state changes on two different collections with stateFormat=2, none should be batched\n        assertFalse(writer.maybeFlushBefore(c1));\n        // flushAfter has to be called as it updates the internal batching related info\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n        assertTrue(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // create a collection in stateFormat = 1 i.e. inside the main cluster state\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n        clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n        // simulate three state changes in c3, all should be batched\n        for (int i = 0; i < 3; i++) {\n          assertFalse(writer.maybeFlushBefore(c3));\n          assertFalse(writer.maybeFlushAfter(c3));\n        }\n\n        // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n        // none should be batched together\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n        // simulate three state changes on same collection, all should be batched together before\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        // and after too\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // simulate three state changes on two different collections with stateFormat=2, none should be batched\n        assertFalse(writer.maybeFlushBefore(c1));\n        // flushAfter has to be called as it updates the internal batching related info\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n        assertTrue(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // create a collection in stateFormat = 1 i.e. inside the main cluster state\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n        clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n        // simulate three state changes in c3, all should be batched\n        for (int i = 0; i < 3; i++) {\n          assertFalse(writer.maybeFlushBefore(c3));\n          assertFalse(writer.maybeFlushAfter(c3));\n        }\n\n        // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n        // none should be batched together\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n      assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n      assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n      assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n      // simulate three state changes on same collection, all should be batched together before\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushBefore(c1));\n      // and after too\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // simulate three state changes on two different collections with stateFormat=2, none should be batched\n      assertFalse(writer.maybeFlushBefore(c1));\n      // flushAfter has to be called as it updates the internal batching related info\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n      assertTrue(writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n\n      // create a collection in stateFormat = 1 i.e. inside the main cluster state\n      ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n          new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n      clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n      // simulate three state changes in c3, all should be batched\n      for (int i=0; i<3; i++) {\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n      }\n\n      // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n      // none should be batched together\n      assertFalse(writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n      assertFalse(writer.maybeFlushAfter(c1));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n      assertFalse(writer.maybeFlushAfter(c3));\n      assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n      assertFalse(writer.maybeFlushAfter(c2));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44","date":1494290035,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        assertFalse(\"Different (new) collection create can be batched together with another create\", writer.maybeFlushBefore(c2));\n\n        // simulate three state changes on same collection, all should be batched together before\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        // and after too\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // simulate three state changes on two different collections with stateFormat=2, all should be batched\n        assertFalse(writer.maybeFlushBefore(c1));\n        // flushAfter has to be called as it updates the internal batching related info\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // create a collection in stateFormat = 1 i.e. inside the main cluster state\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n        clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n        // simulate three state changes in c3, all should be batched\n        for (int i = 0; i < 3; i++) {\n          assertFalse(writer.maybeFlushBefore(c3));\n          assertFalse(writer.maybeFlushAfter(c3));\n        }\n\n        // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n        // none should be batched together\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n        // simulate three state changes on same collection, all should be batched together before\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        // and after too\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // simulate three state changes on two different collections with stateFormat=2, none should be batched\n        assertFalse(writer.maybeFlushBefore(c1));\n        // flushAfter has to be called as it updates the internal batching related info\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n        assertTrue(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // create a collection in stateFormat = 1 i.e. inside the main cluster state\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n        clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n        // simulate three state changes in c3, all should be batched\n        for (int i = 0; i < 3; i++) {\n          assertFalse(writer.maybeFlushBefore(c3));\n          assertFalse(writer.maybeFlushAfter(c3));\n        }\n\n        // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n        // none should be batched together\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        assertFalse(\"Different (new) collection create can be batched together with another create\", writer.maybeFlushBefore(c2));\n\n        // simulate three state changes on same collection, all should be batched together before\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        // and after too\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // simulate three state changes on two different collections with stateFormat=2, all should be batched\n        assertFalse(writer.maybeFlushBefore(c1));\n        // flushAfter has to be called as it updates the internal batching related info\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // create a collection in stateFormat = 1 i.e. inside the main cluster state\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n        clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n        // simulate three state changes in c3, all should be batched\n        for (int i = 0; i < 3; i++) {\n          assertFalse(writer.maybeFlushBefore(c3));\n          assertFalse(writer.maybeFlushAfter(c3));\n        }\n\n        // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n        // none should be batched together\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        assertTrue(\"Different (new) collection create cannot be batched together with another create\", writer.maybeFlushBefore(c2));\n\n        // simulate three state changes on same collection, all should be batched together before\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        // and after too\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // simulate three state changes on two different collections with stateFormat=2, none should be batched\n        assertFalse(writer.maybeFlushBefore(c1));\n        // flushAfter has to be called as it updates the internal batching related info\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n        assertTrue(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // create a collection in stateFormat = 1 i.e. inside the main cluster state\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n        clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n        // simulate three state changes in c3, all should be batched\n        for (int i = 0; i < 3; i++) {\n          assertFalse(writer.maybeFlushBefore(c3));\n          assertFalse(writer.maybeFlushAfter(c3));\n        }\n\n        // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n        // none should be batched together\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), new ZkStateWriter.ZkWriteCallback() {\n          @Override\n          public void onEnqueue() throws Exception {\n\n          }\n\n          @Override\n          public void onWrite() throws Exception {\n            didWrite.set(true);\n          }\n        });\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), new ZkStateWriter.ZkWriteCallback() {\n            @Override\n            public void onEnqueue() throws Exception {\n\n            }\n\n            @Override\n            public void onWrite() throws Exception {\n              didWrite.set(true);\n            }\n          });\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushBefore(new ZkWriteCommand(\"xyz\", null)));\n        assertFalse(\"Deletes can always be batched\", writer.maybeFlushAfter(new ZkWriteCommand(\"xyz\", null)));\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        assertFalse(\"First requests can always be batched\", writer.maybeFlushBefore(c1));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        assertFalse(\"Different (new) collection create can be batched together with another create\", writer.maybeFlushBefore(c2));\n\n        // simulate three state changes on same collection, all should be batched together before\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushBefore(c1));\n        // and after too\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // simulate three state changes on two different collections with stateFormat=2, all should be batched\n        assertFalse(writer.maybeFlushBefore(c1));\n        // flushAfter has to be called as it updates the internal batching related info\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertFalse(writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n        assertFalse(writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n\n        // create a collection in stateFormat = 1 i.e. inside the main cluster state\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n        clusterState = writer.enqueueUpdate(clusterState, c3, null);\n\n        // simulate three state changes in c3, all should be batched\n        for (int i = 0; i < 3; i++) {\n          assertFalse(writer.maybeFlushBefore(c3));\n          assertFalse(writer.maybeFlushAfter(c3));\n        }\n\n        // simulate state change in c3 (stateFormat=1) interleaved with state changes from c1,c2 (stateFormat=2)\n        // none should be batched together\n        assertFalse(writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c1));\n        assertFalse(writer.maybeFlushAfter(c1));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c3));\n        assertFalse(writer.maybeFlushAfter(c3));\n        assertTrue(\"different stateFormat, should be flushed\", writer.maybeFlushBefore(c2));\n        assertFalse(writer.maybeFlushAfter(c2));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44","584c1ee8712b5af28075d98028ccab111d6eeda2","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781bec8380d3b76fa7ca27eceb50019c8c160e02","date":1507948397,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), new ZkStateWriter.ZkWriteCallback() {\n          @Override\n          public void onEnqueue() throws Exception {\n\n          }\n\n          @Override\n          public void onWrite() throws Exception {\n            didWrite.set(true);\n          }\n        });\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), new ZkStateWriter.ZkWriteCallback() {\n            @Override\n            public void onEnqueue() throws Exception {\n\n            }\n\n            @Override\n            public void onWrite() throws Exception {\n              didWrite.set(true);\n            }\n          });\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    Path zkDir = createTempDir(\"testZkStateWriterBatching\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    String zkDir = createTempDir(\"testZkStateWriterBatching\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testZkStateWriterBatching().mjava","sourceNew":"  public void testZkStateWriterBatching() throws Exception {\n    Path zkDir = createTempDir(\"testZkStateWriterBatching\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\", new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\", new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\", new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testZkStateWriterBatching() throws Exception {\n    Path zkDir = createTempDir(\"testZkStateWriterBatching\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\", true);\n\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\"));\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\"));\n        ZkWriteCommand c3 = new ZkWriteCommand(\"c3\",\n            new DocCollection(\"c3\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c3\"));\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        // First write is flushed immediately\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c1), FAIL_ON_WRITE);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c2), FAIL_ON_WRITE);\n\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY + 100);\n        AtomicBoolean didWrite = new AtomicBoolean(false);\n        clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        assertTrue(\"Exceed the update delay, should be flushed\", didWrite.get());\n\n        for (int i = 0; i <= Overseer.STATE_UPDATE_BATCH_SIZE; i++) {\n          clusterState = writer.enqueueUpdate(clusterState, Collections.singletonList(c3), () -> didWrite.set(true));\n        }\n        assertTrue(\"Exceed the update batch size, should be flushed\", didWrite.get());\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44"],"9088bc86d5a0e967da50b566ea1dd0c5458ba6f5":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["781bec8380d3b76fa7ca27eceb50019c8c160e02"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7875fce026a0a335830cfc75abc3eb009eff9a73","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a7ac6407286ebd80d6754a6586316e11c06f37b3","7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9088bc86d5a0e967da50b566ea1dd0c5458ba6f5","7875fce026a0a335830cfc75abc3eb009eff9a73"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"781bec8380d3b76fa7ca27eceb50019c8c160e02":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["9088bc86d5a0e967da50b566ea1dd0c5458ba6f5"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["7875fce026a0a335830cfc75abc3eb009eff9a73","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["781bec8380d3b76fa7ca27eceb50019c8c160e02"],"9088bc86d5a0e967da50b566ea1dd0c5458ba6f5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"584c1ee8712b5af28075d98028ccab111d6eeda2":["9088bc86d5a0e967da50b566ea1dd0c5458ba6f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","e9017cf144952056066919f1ebc7897ff9bd71b1"],"781bec8380d3b76fa7ca27eceb50019c8c160e02":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a7ac6407286ebd80d6754a6586316e11c06f37b3","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}