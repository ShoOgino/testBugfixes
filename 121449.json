{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","commits":[{"id":"6a07f3e2a607281f2c8299665664e00c446b36a0","date":1361907596,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","pathOld":"/dev/null","sourceNew":"  public void testTrailingOperators() throws Exception {\n    // really just test that exceptions aren't thrown by\n    // single + -\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"-\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+ - +\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"- + -\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 +\")\n        ,\"/response/numFound==1\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 -\")\n        ,\"/response/numFound==1\");\n\n    Random r = random();\n    for (int i=0; i<100; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<r.nextInt(10); j++) {\n        switch (r.nextInt(3)) {\n          case 0: sb.append(' '); break;\n          case 1: sb.append('+'); break;\n          case 2: sb.append('-'); break;\n          case 3: sb.append((char)r.nextInt(127)); break;\n        }\n      }\n\n      String q = sb.toString();\n      assertJQ(req(\"defType\",\"edismax\", \"q\",q)\n          ,\"/response==\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","sourceNew":"  public void testTrailingOperators() throws Exception {\n    // really just test that exceptions aren't thrown by\n    // single + -\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"-\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+ - +\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"- + -\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 +\")\n        ,\"/response/numFound==1\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 -\")\n        ,\"/response/numFound==1\");\n\n    Random r = random();\n    for (int i=0; i<100; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<r.nextInt(10); j++) {\n        switch (r.nextInt(3)) {\n          case 0: sb.append(' '); break;\n          case 1: sb.append('+'); break;\n          case 2: sb.append('-'); break;\n          case 3: sb.append((char)r.nextInt(127)); break;\n        }\n      }\n\n      String q = sb.toString();\n      assertJQ(req(\"defType\",\"edismax\", \"q\",q)\n          ,\"/response==\");\n    }\n  }\n\n","sourceOld":"  public void testTrailingOperators() throws Exception {\n    // really just test that exceptions aren't thrown by\n    // single + -\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"-\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+ - +\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"- + -\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 +\")\n        ,\"/response/numFound==1\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 -\")\n        ,\"/response/numFound==1\");\n\n    Random r = random();\n    for (int i=0; i<100; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<r.nextInt(10); j++) {\n        switch (r.nextInt(3)) {\n          case 0: sb.append(' '); break;\n          case 1: sb.append('+'); break;\n          case 2: sb.append('-'); break;\n          case 3: sb.append((char)r.nextInt(127)); break;\n        }\n      }\n\n      String q = sb.toString();\n      assertJQ(req(\"defType\",\"edismax\", \"q\",q)\n          ,\"/response==\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","sourceNew":"  public void testTrailingOperators() throws Exception {\n    // really just test that exceptions aren't thrown by\n    // single + -\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"-\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+ - +\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"- + -\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 +\")\n        ,\"/response/numFound==1\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 -\")\n        ,\"/response/numFound==1\");\n\n    Random r = random();\n    for (int i=0; i<100; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<r.nextInt(10); j++) {\n        switch (r.nextInt(3)) {\n          case 0: sb.append(' '); break;\n          case 1: sb.append('+'); break;\n          case 2: sb.append('-'); break;\n          case 3: sb.append((char)r.nextInt(127)); break;\n        }\n      }\n\n      String q = sb.toString();\n      assertJQ(req(\"defType\",\"edismax\", \"q\",q)\n          ,\"/response==\");\n    }\n  }\n\n","sourceOld":"  public void testTrailingOperators() throws Exception {\n    // really just test that exceptions aren't thrown by\n    // single + -\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"-\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+ - +\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"- + -\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 +\")\n        ,\"/response/numFound==1\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 -\")\n        ,\"/response/numFound==1\");\n\n    Random r = random();\n    for (int i=0; i<100; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<r.nextInt(10); j++) {\n        switch (r.nextInt(3)) {\n          case 0: sb.append(' '); break;\n          case 1: sb.append('+'); break;\n          case 2: sb.append('-'); break;\n          case 3: sb.append((char)r.nextInt(127)); break;\n        }\n      }\n\n      String q = sb.toString();\n      assertJQ(req(\"defType\",\"edismax\", \"q\",q)\n          ,\"/response==\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","sourceNew":"  public void testTrailingOperators() throws Exception {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      // really just test that exceptions aren't thrown by\n      // single + -\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"-\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+ - +\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"- + -\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 +\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 -\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      Random r = random();\n      for (int i=0; i<100; i++) {\n        StringBuilder sb = new StringBuilder();\n        for (int j=0; j<r.nextInt(10); j++) {\n          switch (r.nextInt(3)) {\n            case 0: sb.append(' '); break;\n            case 1: sb.append('+'); break;\n            case 2: sb.append('-'); break;\n            case 3: sb.append((char)r.nextInt(127)); break;\n          }\n        }\n\n        String q = sb.toString();\n        assertJQ(req(\"defType\", \"edismax\", \"q\", q, \"df\", \"text_sw\", \"sow\", sow)\n            , \"/response==\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testTrailingOperators() throws Exception {\n    // really just test that exceptions aren't thrown by\n    // single + -\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"-\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+ - +\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"- + -\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 +\")\n        ,\"/response/numFound==1\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 -\")\n        ,\"/response/numFound==1\");\n\n    Random r = random();\n    for (int i=0; i<100; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<r.nextInt(10); j++) {\n        switch (r.nextInt(3)) {\n          case 0: sb.append(' '); break;\n          case 1: sb.append('+'); break;\n          case 2: sb.append('-'); break;\n          case 3: sb.append((char)r.nextInt(127)); break;\n        }\n      }\n\n      String q = sb.toString();\n      assertJQ(req(\"defType\",\"edismax\", \"q\",q)\n          ,\"/response==\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","sourceNew":"  public void testTrailingOperators() throws Exception {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      // really just test that exceptions aren't thrown by\n      // single + -\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"-\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+ - +\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"- + -\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 +\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 -\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      Random r = random();\n      for (int i=0; i<100; i++) {\n        StringBuilder sb = new StringBuilder();\n        for (int j=0; j<r.nextInt(10); j++) {\n          switch (r.nextInt(3)) {\n            case 0: sb.append(' '); break;\n            case 1: sb.append('+'); break;\n            case 2: sb.append('-'); break;\n            case 3: sb.append((char)r.nextInt(127)); break;\n          }\n        }\n\n        String q = sb.toString();\n        assertJQ(req(\"defType\", \"edismax\", \"q\", q, \"df\", \"text_sw\", \"sow\", sow)\n            , \"/response==\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testTrailingOperators() throws Exception {\n    // really just test that exceptions aren't thrown by\n    // single + -\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"-\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"+ - +\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"- + -\")\n        ,\"/response==\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 +\")\n        ,\"/response/numFound==1\");\n\n    assertJQ(req(\"defType\",\"edismax\", \"q\",\"id:47 -\")\n        ,\"/response/numFound==1\");\n\n    Random r = random();\n    for (int i=0; i<100; i++) {\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<r.nextInt(10); j++) {\n        switch (r.nextInt(3)) {\n          case 0: sb.append(' '); break;\n          case 1: sb.append('+'); break;\n          case 2: sb.append('-'); break;\n          case 3: sb.append((char)r.nextInt(127)); break;\n        }\n      }\n\n      String q = sb.toString();\n      assertJQ(req(\"defType\",\"edismax\", \"q\",q)\n          ,\"/response==\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b360a3d5b9d443b4e880d2c92724cffd7def8db","date":1490740768,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","sourceNew":"  public void testTrailingOperators() throws Exception {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      // really just test that exceptions aren't thrown by\n      // single + -\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"-\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+ - +\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"- + -\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 +\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 -\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      Random r = random();\n      for (int i=0; i<100; i++) {\n        StringBuilder sb = new StringBuilder();\n        for (int j=0; j<r.nextInt(10); j++) {\n          switch (r.nextInt(3)) {\n            case 0: sb.append(' '); break;\n            case 1: sb.append('+'); break;\n            case 2: sb.append('-'); break;\n            case 3: sb.append((char)r.nextInt(127)); break;\n          }\n        }\n\n        String q = sb.toString();\n        assertJQ(req(\"defType\", \"edismax\", \"q\", q, \"sow\", sow)\n            , \"/response==\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testTrailingOperators() throws Exception {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      // really just test that exceptions aren't thrown by\n      // single + -\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"-\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+ - +\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"- + -\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 +\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 -\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      Random r = random();\n      for (int i=0; i<100; i++) {\n        StringBuilder sb = new StringBuilder();\n        for (int j=0; j<r.nextInt(10); j++) {\n          switch (r.nextInt(3)) {\n            case 0: sb.append(' '); break;\n            case 1: sb.append('+'); break;\n            case 2: sb.append('-'); break;\n            case 3: sb.append((char)r.nextInt(127)); break;\n          }\n        }\n\n        String q = sb.toString();\n        assertJQ(req(\"defType\", \"edismax\", \"q\", q, \"df\", \"text_sw\", \"sow\", sow)\n            , \"/response==\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d81030ef9ff5ae6820e560c0833127181c7a2c","date":1490873946,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testTrailingOperators().mjava","sourceNew":"  public void testTrailingOperators() throws Exception {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      // really just test that exceptions aren't thrown by\n      // single + -\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"-\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+ - +\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"- + -\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 +\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 -\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      Random r = random();\n      for (int i=0; i<100; i++) {\n        StringBuilder sb = new StringBuilder();\n        for (int j=0; j<r.nextInt(10); j++) {\n          switch (r.nextInt(3)) {\n            case 0: sb.append(' '); break;\n            case 1: sb.append('+'); break;\n            case 2: sb.append('-'); break;\n            case 3: sb.append((char)r.nextInt(127)); break;\n          }\n        }\n\n        String q = sb.toString();\n        assertJQ(req(\"defType\", \"edismax\", \"q\", q, \"sow\", sow)\n            , \"/response==\");\n      }\n    }\n  }\n\n","sourceOld":"  public void testTrailingOperators() throws Exception {\n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      // really just test that exceptions aren't thrown by\n      // single + -\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"-\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"+ - +\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"- + -\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response==\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 +\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      assertJQ(req(\"defType\", \"edismax\", \"q\", \"id:47 -\", \"df\", \"text_sw\", \"sow\", sow)\n          , \"/response/numFound==1\");\n\n      Random r = random();\n      for (int i=0; i<100; i++) {\n        StringBuilder sb = new StringBuilder();\n        for (int j=0; j<r.nextInt(10); j++) {\n          switch (r.nextInt(3)) {\n            case 0: sb.append(' '); break;\n            case 1: sb.append('+'); break;\n            case 2: sb.append('-'); break;\n            case 3: sb.append((char)r.nextInt(127)); break;\n          }\n        }\n\n        String q = sb.toString();\n        assertJQ(req(\"defType\", \"edismax\", \"q\", q, \"df\", \"text_sw\", \"sow\", sow)\n            , \"/response==\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["e55782fb51a6e9789542818eb2161a3247f39ace"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["6a07f3e2a607281f2c8299665664e00c446b36a0","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a07f3e2a607281f2c8299665664e00c446b36a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6a07f3e2a607281f2c8299665664e00c446b36a0"],"36d81030ef9ff5ae6820e560c0833127181c7a2c":["c03778630c4604270d88c148afb8c7de35b51d3c"],"c03778630c4604270d88c148afb8c7de35b51d3c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"e55782fb51a6e9789542818eb2161a3247f39ace":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"]},"commit2Childs":{"8b360a3d5b9d443b4e880d2c92724cffd7def8db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a07f3e2a607281f2c8299665664e00c446b36a0"],"6a07f3e2a607281f2c8299665664e00c446b36a0":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"36d81030ef9ff5ae6820e560c0833127181c7a2c":[],"c03778630c4604270d88c148afb8c7de35b51d3c":["36d81030ef9ff5ae6820e560c0833127181c7a2c"],"e55782fb51a6e9789542818eb2161a3247f39ace":["8b360a3d5b9d443b4e880d2c92724cffd7def8db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","36d81030ef9ff5ae6820e560c0833127181c7a2c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}