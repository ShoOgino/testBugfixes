{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","commits":[{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingAtomicReader#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(i, cbdv.nextDoc());\n      assertEquals(Integer.parseInt(cbdv.binaryValue().utf8ToString()), Integer.parseInt(bdv.binaryValue().utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(i, cbdv.nextDoc());\n      assertEquals(Integer.parseInt(cbdv.binaryValue().utf8ToString()), Integer.parseInt(bdv.binaryValue().utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestOrdinalMappingLeafReader#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(i, bdv.nextDoc());\n      assertEquals(i, cbdv.nextDoc());\n      assertEquals(Integer.parseInt(cbdv.binaryValue().utf8ToString()), Integer.parseInt(bdv.binaryValue().utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  private void verifyResults(Directory indexDir, Directory taxoDir) throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = newSearcher(indexReader);\n    \n    FacetsCollector collector = new FacetsCollector();\n    FacetsCollector.search(searcher, new MatchAllDocsQuery(), 10, collector);\n\n    // tag facets\n    Facets tagFacets = new FastTaxonomyFacetCounts(\"$tags\", taxoReader, facetConfig, collector);\n    FacetResult result = tagFacets.getTopChildren(10, \"tag\");\n    for (LabelAndValue lv: result.labelValues) {\n      if (VERBOSE) {\n        System.out.println(lv);\n      }\n      assertEquals(NUM_DOCS, lv.value.intValue());\n    }\n    \n    // id facets\n    Facets idFacets = new FastTaxonomyFacetCounts(taxoReader, facetConfig, collector);\n    FacetResult idResult = idFacets.getTopChildren(10, \"id\");\n    assertEquals(NUM_DOCS, idResult.childCount);\n    assertEquals(NUM_DOCS * 2, idResult.value); // each \"id\" appears twice\n    \n    BinaryDocValues bdv = MultiDocValues.getBinaryValues(indexReader, \"bdv\");\n    BinaryDocValues cbdv = MultiDocValues.getBinaryValues(indexReader, \"cbdv\");\n    for (int i = 0; i < indexReader.maxDoc(); i++) {\n      assertEquals(Integer.parseInt(cbdv.get(i).utf8ToString()), Integer.parseInt(bdv.get(i).utf8ToString())*2);\n    }\n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9644a32526f2e2ae87543b00e8be543aa25f29c","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9644a32526f2e2ae87543b00e8be543aa25f29c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}