{"path":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#setNextReader(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Sets the {@link AtomicReaderContext} for which {@link #setNextDoc(int)}\n   * calls will be made. Returns true iff this reader has associations for any\n   * of the documents belonging to the association given to the constructor.\n   */\n  public final boolean setNextReader(AtomicReaderContext context) throws IOException {\n    DocValues dv = context.reader().docValues(dvField);\n    if (dv == null) {\n      current = null;\n      return false;\n    }\n    \n    current = useDirectSource ? dv.getDirectSource() : dv.getSource();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link AtomicReaderContext} for which {@link #setNextDoc(int)}\n   * calls will be made. Returns true iff this reader has associations for any\n   * of the documents belonging to the association given to the constructor.\n   */\n  public final boolean setNextReader(AtomicReaderContext context) throws IOException {\n    hasAssociations = pi.setNextReader(context);\n    return hasAssociations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#setNextReader(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Sets the {@link AtomicReaderContext} for which {@link #setNextDoc(int)}\n   * calls will be made. Returns true iff this reader has associations for any\n   * of the documents belonging to the association given to the constructor.\n   */\n  public final boolean setNextReader(AtomicReaderContext context) throws IOException {\n    current = context.reader().getBinaryDocValues(dvField);\n    return current != null;\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link AtomicReaderContext} for which {@link #setNextDoc(int)}\n   * calls will be made. Returns true iff this reader has associations for any\n   * of the documents belonging to the association given to the constructor.\n   */\n  public final boolean setNextReader(AtomicReaderContext context) throws IOException {\n    hasAssociations = pi.setNextReader(context);\n    return hasAssociations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#setNextReader(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Sets the {@link AtomicReaderContext} for which {@link #setNextDoc(int)}\n   * calls will be made. Returns true iff this reader has associations for any\n   * of the documents belonging to the association given to the constructor.\n   */\n  public final boolean setNextReader(AtomicReaderContext context) throws IOException {\n    current = context.reader().getBinaryDocValues(dvField);\n    return current != null;\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link AtomicReaderContext} for which {@link #setNextDoc(int)}\n   * calls will be made. Returns true iff this reader has associations for any\n   * of the documents belonging to the association given to the constructor.\n   */\n  public final boolean setNextReader(AtomicReaderContext context) throws IOException {\n    DocValues dv = context.reader().docValues(dvField);\n    if (dv == null) {\n      current = null;\n      return false;\n    }\n    \n    current = useDirectSource ? dv.getDirectSource() : dv.getSource();\n    return true;\n  }\n\n","bugFix":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#setNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the {@link AtomicReaderContext} for which {@link #setNextDoc(int)}\n   * calls will be made. Returns true iff this reader has associations for any\n   * of the documents belonging to the association given to the constructor.\n   */\n  public final boolean setNextReader(AtomicReaderContext context) throws IOException {\n    current = context.reader().getBinaryDocValues(dvField);\n    return current != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#setNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the {@link AtomicReaderContext} for which {@link #setNextDoc(int)}\n   * calls will be made. Returns true iff this reader has associations for any\n   * of the documents belonging to the association given to the constructor.\n   */\n  public final boolean setNextReader(AtomicReaderContext context) throws IOException {\n    current = context.reader().getBinaryDocValues(dvField);\n    return current != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["d4d69c535930b5cce125cff868d40f6373dc27d4","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d4d69c535930b5cce125cff868d40f6373dc27d4","c4015cd39dff8d4dec562d909f9766debac53aa6"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}