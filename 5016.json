{"path":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#getLine().mjava","commits":[{"id":"80931fa1f3b04650bde7b20e61b02063a7093ced","date":1333130683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#getLine().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses from the current point in the stream til\n   * the end of the current line.\n   * \n   * @return array of values til end of line \n   *        ('null' when end of file has been reached)\n   * @throws IOException on parse error or input read-failure\n   */\n  public String[] getLine() throws IOException {\n    String[] ret = EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch (reusableToken.type) {\n            case TT_TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret = null;\n                }\n                break;\n            case TT_INVALID:\n            default:\n                // error: throw IOException\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n            // unreachable: break;\n        }\n        if (reusableToken.type != TT_TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n      ret = (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#getLine().mjava","pathOld":"solr/core/src/java/org/apache/solr/internal/csv/CSVParser#getLine().mjava","sourceNew":"  /**\n   * Parses from the current point in the stream til\n   * the end of the current line.\n   * \n   * @return array of values til end of line \n   *        ('null' when end of file has been reached)\n   * @throws IOException on parse error or input read-failure\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public String[] getLine() throws IOException {\n    String[] ret = EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch (reusableToken.type) {\n            case TT_TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret = null;\n                }\n                break;\n            case TT_INVALID:\n            default:\n                // error: throw IOException\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n            // unreachable: break;\n        }\n        if (reusableToken.type != TT_TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n      ret = (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n  }\n\n","sourceOld":"  /**\n   * Parses from the current point in the stream til\n   * the end of the current line.\n   * \n   * @return array of values til end of line \n   *        ('null' when end of file has been reached)\n   * @throws IOException on parse error or input read-failure\n   */\n  public String[] getLine() throws IOException {\n    String[] ret = EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch (reusableToken.type) {\n            case TT_TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret = null;\n                }\n                break;\n            case TT_INVALID:\n            default:\n                // error: throw IOException\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n            // unreachable: break;\n        }\n        if (reusableToken.type != TT_TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n      ret = (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80931fa1f3b04650bde7b20e61b02063a7093ced":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80931fa1f3b04650bde7b20e61b02063a7093ced"],"80931fa1f3b04650bde7b20e61b02063a7093ced":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}