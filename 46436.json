{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#testDenseWithGap().mjava","commits":[{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#testDenseWithGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDenseWithGap().mjava","sourceNew":"  public void testDenseWithGap() throws Exception {\n    List<String> words = Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\");\n    List<BytesRef> entries = new ArrayList<>();\n    for (String word : words) {\n      entries.add(new BytesRef(word.getBytes(StandardCharsets.US_ASCII)));\n    }\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(entries));\n    for (BytesRef entry : entries) {\n      assertNotNull(entry.utf8ToString() + \" not found\", fstEnum.seekExact(entry));\n    }\n  }\n\n","sourceOld":"  public void testDenseWithGap() throws Exception {\n    List<String> words = Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\");\n    List<BytesRef> entries = new ArrayList<>();\n    for (String word : words) {\n      entries.add(new BytesRef(word.getBytes(StandardCharsets.US_ASCII)));\n    }\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(entries));\n    for (BytesRef entry : entries) {\n      assertNotNull(entry.utf8ToString() + \" not found\", fstEnum.seekExact(entry));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#testDenseWithGap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDenseWithGap().mjava","sourceNew":"  public void testDenseWithGap() throws Exception {\n    List<String> words = Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\");\n    List<BytesRef> entries = new ArrayList<>();\n    for (String word : words) {\n      entries.add(new BytesRef(word.getBytes(StandardCharsets.US_ASCII)));\n    }\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(entries));\n    for (BytesRef entry : entries) {\n      assertNotNull(entry.utf8ToString() + \" not found\", fstEnum.seekExact(entry));\n    }\n  }\n\n","sourceOld":"  public void testDenseWithGap() throws Exception {\n    List<String> words = Arrays.asList(\"ah\", \"bi\", \"cj\", \"dk\", \"fl\", \"gm\");\n    List<BytesRef> entries = new ArrayList<>();\n    for (String word : words) {\n      entries.add(new BytesRef(word.getBytes(StandardCharsets.US_ASCII)));\n    }\n    final BytesRefFSTEnum<Object> fstEnum = new BytesRefFSTEnum<>(buildFST(entries));\n    for (BytesRef entry : entries) {\n      assertNotNull(entry.utf8ToString() + \" not found\", fstEnum.seekExact(entry));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}