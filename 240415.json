{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testNouns2().mjava","commits":[{"id":"09c24344d8c547da8d804ff8a4cdb9ef0decf980","date":1302800830,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testNouns2().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * decl II nouns with (s,t) -> š and (d,z) -> ž\n   * palatalization will generally conflate to two stems\n   * due to the ambiguity (plural and singular).\n   */\n  public void testNouns2() throws IOException {\n    // decl. II\n    \n    // c -> č palatalization\n    checkOneTerm(a, \"lācis\",  \"lāc\"); // nom. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // nom. pl.\n    checkOneTerm(a, \"lāča\",   \"lāc\"); // gen. sing.\n    checkOneTerm(a, \"lāču\",   \"lāc\"); // gen. pl.\n    checkOneTerm(a, \"lācim\",  \"lāc\"); // dat. sing.\n    checkOneTerm(a, \"lāčiem\", \"lāc\"); // dat. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // acc. sing.\n    checkOneTerm(a, \"lāčus\",  \"lāc\"); // acc. pl.\n    checkOneTerm(a, \"lācī\",   \"lāc\"); // loc. sing.\n    checkOneTerm(a, \"lāčos\",  \"lāc\"); // loc. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // voc. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // voc. pl.\n    \n    // n -> ņ palatalization\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // nom. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // nom. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // gen. sing.\n    checkOneTerm(a, \"akmeņu\",   \"akmen\"); // gen. pl.\n    checkOneTerm(a, \"akmenim\",  \"akmen\"); // dat. sing.\n    checkOneTerm(a, \"akmeņiem\", \"akmen\"); // dat. pl.\n    checkOneTerm(a, \"akmeni\",   \"akmen\"); // acc. sing.\n    checkOneTerm(a, \"akmeņus\",  \"akmen\"); // acc. pl.\n    checkOneTerm(a, \"akmenī\",   \"akmen\"); // loc. sing.\n    checkOneTerm(a, \"akmeņos\",  \"akmen\"); // loc. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // voc. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // voc. pl.\n    \n    // no palatalization\n    checkOneTerm(a, \"kurmis\",   \"kurm\"); // nom. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // nom. pl.\n    checkOneTerm(a, \"kurmja\",   \"kurm\"); // gen. sing.\n    checkOneTerm(a, \"kurmju\",   \"kurm\"); // gen. pl.\n    checkOneTerm(a, \"kurmim\",   \"kurm\"); // dat. sing.\n    checkOneTerm(a, \"kurmjiem\", \"kurm\"); // dat. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // acc. sing.\n    checkOneTerm(a, \"kurmjus\",  \"kurm\"); // acc. pl.\n    checkOneTerm(a, \"kurmī\",    \"kurm\"); // loc. sing.\n    checkOneTerm(a, \"kurmjos\",  \"kurm\"); // loc. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // voc. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // voc. pl.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testNouns2().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * decl II nouns with (s,t) -> š and (d,z) -> ž\n   * palatalization will generally conflate to two stems\n   * due to the ambiguity (plural and singular).\n   */\n  public void testNouns2() throws IOException {\n    // decl. II\n    \n    // c -> č palatalization\n    checkOneTerm(a, \"lācis\",  \"lāc\"); // nom. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // nom. pl.\n    checkOneTerm(a, \"lāča\",   \"lāc\"); // gen. sing.\n    checkOneTerm(a, \"lāču\",   \"lāc\"); // gen. pl.\n    checkOneTerm(a, \"lācim\",  \"lāc\"); // dat. sing.\n    checkOneTerm(a, \"lāčiem\", \"lāc\"); // dat. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // acc. sing.\n    checkOneTerm(a, \"lāčus\",  \"lāc\"); // acc. pl.\n    checkOneTerm(a, \"lācī\",   \"lāc\"); // loc. sing.\n    checkOneTerm(a, \"lāčos\",  \"lāc\"); // loc. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // voc. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // voc. pl.\n    \n    // n -> ņ palatalization\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // nom. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // nom. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // gen. sing.\n    checkOneTerm(a, \"akmeņu\",   \"akmen\"); // gen. pl.\n    checkOneTerm(a, \"akmenim\",  \"akmen\"); // dat. sing.\n    checkOneTerm(a, \"akmeņiem\", \"akmen\"); // dat. pl.\n    checkOneTerm(a, \"akmeni\",   \"akmen\"); // acc. sing.\n    checkOneTerm(a, \"akmeņus\",  \"akmen\"); // acc. pl.\n    checkOneTerm(a, \"akmenī\",   \"akmen\"); // loc. sing.\n    checkOneTerm(a, \"akmeņos\",  \"akmen\"); // loc. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // voc. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // voc. pl.\n    \n    // no palatalization\n    checkOneTerm(a, \"kurmis\",   \"kurm\"); // nom. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // nom. pl.\n    checkOneTerm(a, \"kurmja\",   \"kurm\"); // gen. sing.\n    checkOneTerm(a, \"kurmju\",   \"kurm\"); // gen. pl.\n    checkOneTerm(a, \"kurmim\",   \"kurm\"); // dat. sing.\n    checkOneTerm(a, \"kurmjiem\", \"kurm\"); // dat. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // acc. sing.\n    checkOneTerm(a, \"kurmjus\",  \"kurm\"); // acc. pl.\n    checkOneTerm(a, \"kurmī\",    \"kurm\"); // loc. sing.\n    checkOneTerm(a, \"kurmjos\",  \"kurm\"); // loc. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // voc. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // voc. pl.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testNouns2().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * decl II nouns with (s,t) -> š and (d,z) -> ž\n   * palatalization will generally conflate to two stems\n   * due to the ambiguity (plural and singular).\n   */\n  public void testNouns2() throws IOException {\n    // decl. II\n    \n    // c -> č palatalization\n    checkOneTerm(a, \"lācis\",  \"lāc\"); // nom. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // nom. pl.\n    checkOneTerm(a, \"lāča\",   \"lāc\"); // gen. sing.\n    checkOneTerm(a, \"lāču\",   \"lāc\"); // gen. pl.\n    checkOneTerm(a, \"lācim\",  \"lāc\"); // dat. sing.\n    checkOneTerm(a, \"lāčiem\", \"lāc\"); // dat. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // acc. sing.\n    checkOneTerm(a, \"lāčus\",  \"lāc\"); // acc. pl.\n    checkOneTerm(a, \"lācī\",   \"lāc\"); // loc. sing.\n    checkOneTerm(a, \"lāčos\",  \"lāc\"); // loc. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // voc. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // voc. pl.\n    \n    // n -> ņ palatalization\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // nom. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // nom. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // gen. sing.\n    checkOneTerm(a, \"akmeņu\",   \"akmen\"); // gen. pl.\n    checkOneTerm(a, \"akmenim\",  \"akmen\"); // dat. sing.\n    checkOneTerm(a, \"akmeņiem\", \"akmen\"); // dat. pl.\n    checkOneTerm(a, \"akmeni\",   \"akmen\"); // acc. sing.\n    checkOneTerm(a, \"akmeņus\",  \"akmen\"); // acc. pl.\n    checkOneTerm(a, \"akmenī\",   \"akmen\"); // loc. sing.\n    checkOneTerm(a, \"akmeņos\",  \"akmen\"); // loc. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // voc. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // voc. pl.\n    \n    // no palatalization\n    checkOneTerm(a, \"kurmis\",   \"kurm\"); // nom. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // nom. pl.\n    checkOneTerm(a, \"kurmja\",   \"kurm\"); // gen. sing.\n    checkOneTerm(a, \"kurmju\",   \"kurm\"); // gen. pl.\n    checkOneTerm(a, \"kurmim\",   \"kurm\"); // dat. sing.\n    checkOneTerm(a, \"kurmjiem\", \"kurm\"); // dat. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // acc. sing.\n    checkOneTerm(a, \"kurmjus\",  \"kurm\"); // acc. pl.\n    checkOneTerm(a, \"kurmī\",    \"kurm\"); // loc. sing.\n    checkOneTerm(a, \"kurmjos\",  \"kurm\"); // loc. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // voc. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // voc. pl.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testNouns2().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * decl II nouns with (s,t) -> š and (d,z) -> ž\n   * palatalization will generally conflate to two stems\n   * due to the ambiguity (plural and singular).\n   */\n  public void testNouns2() throws IOException {\n    // decl. II\n    \n    // c -> č palatalization\n    checkOneTerm(a, \"lācis\",  \"lāc\"); // nom. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // nom. pl.\n    checkOneTerm(a, \"lāča\",   \"lāc\"); // gen. sing.\n    checkOneTerm(a, \"lāču\",   \"lāc\"); // gen. pl.\n    checkOneTerm(a, \"lācim\",  \"lāc\"); // dat. sing.\n    checkOneTerm(a, \"lāčiem\", \"lāc\"); // dat. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // acc. sing.\n    checkOneTerm(a, \"lāčus\",  \"lāc\"); // acc. pl.\n    checkOneTerm(a, \"lācī\",   \"lāc\"); // loc. sing.\n    checkOneTerm(a, \"lāčos\",  \"lāc\"); // loc. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // voc. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // voc. pl.\n    \n    // n -> ņ palatalization\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // nom. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // nom. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // gen. sing.\n    checkOneTerm(a, \"akmeņu\",   \"akmen\"); // gen. pl.\n    checkOneTerm(a, \"akmenim\",  \"akmen\"); // dat. sing.\n    checkOneTerm(a, \"akmeņiem\", \"akmen\"); // dat. pl.\n    checkOneTerm(a, \"akmeni\",   \"akmen\"); // acc. sing.\n    checkOneTerm(a, \"akmeņus\",  \"akmen\"); // acc. pl.\n    checkOneTerm(a, \"akmenī\",   \"akmen\"); // loc. sing.\n    checkOneTerm(a, \"akmeņos\",  \"akmen\"); // loc. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // voc. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // voc. pl.\n    \n    // no palatalization\n    checkOneTerm(a, \"kurmis\",   \"kurm\"); // nom. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // nom. pl.\n    checkOneTerm(a, \"kurmja\",   \"kurm\"); // gen. sing.\n    checkOneTerm(a, \"kurmju\",   \"kurm\"); // gen. pl.\n    checkOneTerm(a, \"kurmim\",   \"kurm\"); // dat. sing.\n    checkOneTerm(a, \"kurmjiem\", \"kurm\"); // dat. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // acc. sing.\n    checkOneTerm(a, \"kurmjus\",  \"kurm\"); // acc. pl.\n    checkOneTerm(a, \"kurmī\",    \"kurm\"); // loc. sing.\n    checkOneTerm(a, \"kurmjos\",  \"kurm\"); // loc. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // voc. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // voc. pl.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testNouns2().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/lv/TestLatvianStemmer#testNouns2().mjava","sourceNew":"  /**\n   * decl II nouns with (s,t) -> š and (d,z) -> ž\n   * palatalization will generally conflate to two stems\n   * due to the ambiguity (plural and singular).\n   */\n  public void testNouns2() throws IOException {\n    // decl. II\n    \n    // c -> č palatalization\n    checkOneTerm(a, \"lācis\",  \"lāc\"); // nom. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // nom. pl.\n    checkOneTerm(a, \"lāča\",   \"lāc\"); // gen. sing.\n    checkOneTerm(a, \"lāču\",   \"lāc\"); // gen. pl.\n    checkOneTerm(a, \"lācim\",  \"lāc\"); // dat. sing.\n    checkOneTerm(a, \"lāčiem\", \"lāc\"); // dat. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // acc. sing.\n    checkOneTerm(a, \"lāčus\",  \"lāc\"); // acc. pl.\n    checkOneTerm(a, \"lācī\",   \"lāc\"); // loc. sing.\n    checkOneTerm(a, \"lāčos\",  \"lāc\"); // loc. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // voc. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // voc. pl.\n    \n    // n -> ņ palatalization\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // nom. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // nom. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // gen. sing.\n    checkOneTerm(a, \"akmeņu\",   \"akmen\"); // gen. pl.\n    checkOneTerm(a, \"akmenim\",  \"akmen\"); // dat. sing.\n    checkOneTerm(a, \"akmeņiem\", \"akmen\"); // dat. pl.\n    checkOneTerm(a, \"akmeni\",   \"akmen\"); // acc. sing.\n    checkOneTerm(a, \"akmeņus\",  \"akmen\"); // acc. pl.\n    checkOneTerm(a, \"akmenī\",   \"akmen\"); // loc. sing.\n    checkOneTerm(a, \"akmeņos\",  \"akmen\"); // loc. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // voc. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // voc. pl.\n    \n    // no palatalization\n    checkOneTerm(a, \"kurmis\",   \"kurm\"); // nom. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // nom. pl.\n    checkOneTerm(a, \"kurmja\",   \"kurm\"); // gen. sing.\n    checkOneTerm(a, \"kurmju\",   \"kurm\"); // gen. pl.\n    checkOneTerm(a, \"kurmim\",   \"kurm\"); // dat. sing.\n    checkOneTerm(a, \"kurmjiem\", \"kurm\"); // dat. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // acc. sing.\n    checkOneTerm(a, \"kurmjus\",  \"kurm\"); // acc. pl.\n    checkOneTerm(a, \"kurmī\",    \"kurm\"); // loc. sing.\n    checkOneTerm(a, \"kurmjos\",  \"kurm\"); // loc. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // voc. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // voc. pl.\n  }\n\n","sourceOld":"  /**\n   * decl II nouns with (s,t) -> š and (d,z) -> ž\n   * palatalization will generally conflate to two stems\n   * due to the ambiguity (plural and singular).\n   */\n  public void testNouns2() throws IOException {\n    // decl. II\n    \n    // c -> č palatalization\n    checkOneTerm(a, \"lācis\",  \"lāc\"); // nom. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // nom. pl.\n    checkOneTerm(a, \"lāča\",   \"lāc\"); // gen. sing.\n    checkOneTerm(a, \"lāču\",   \"lāc\"); // gen. pl.\n    checkOneTerm(a, \"lācim\",  \"lāc\"); // dat. sing.\n    checkOneTerm(a, \"lāčiem\", \"lāc\"); // dat. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // acc. sing.\n    checkOneTerm(a, \"lāčus\",  \"lāc\"); // acc. pl.\n    checkOneTerm(a, \"lācī\",   \"lāc\"); // loc. sing.\n    checkOneTerm(a, \"lāčos\",  \"lāc\"); // loc. pl.\n    checkOneTerm(a, \"lāci\",   \"lāc\"); // voc. sing.\n    checkOneTerm(a, \"lāči\",   \"lāc\"); // voc. pl.\n    \n    // n -> ņ palatalization\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // nom. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // nom. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // gen. sing.\n    checkOneTerm(a, \"akmeņu\",   \"akmen\"); // gen. pl.\n    checkOneTerm(a, \"akmenim\",  \"akmen\"); // dat. sing.\n    checkOneTerm(a, \"akmeņiem\", \"akmen\"); // dat. pl.\n    checkOneTerm(a, \"akmeni\",   \"akmen\"); // acc. sing.\n    checkOneTerm(a, \"akmeņus\",  \"akmen\"); // acc. pl.\n    checkOneTerm(a, \"akmenī\",   \"akmen\"); // loc. sing.\n    checkOneTerm(a, \"akmeņos\",  \"akmen\"); // loc. pl.\n    checkOneTerm(a, \"akmens\",   \"akmen\"); // voc. sing.\n    checkOneTerm(a, \"akmeņi\",   \"akmen\"); // voc. pl.\n    \n    // no palatalization\n    checkOneTerm(a, \"kurmis\",   \"kurm\"); // nom. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // nom. pl.\n    checkOneTerm(a, \"kurmja\",   \"kurm\"); // gen. sing.\n    checkOneTerm(a, \"kurmju\",   \"kurm\"); // gen. pl.\n    checkOneTerm(a, \"kurmim\",   \"kurm\"); // dat. sing.\n    checkOneTerm(a, \"kurmjiem\", \"kurm\"); // dat. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // acc. sing.\n    checkOneTerm(a, \"kurmjus\",  \"kurm\"); // acc. pl.\n    checkOneTerm(a, \"kurmī\",    \"kurm\"); // loc. sing.\n    checkOneTerm(a, \"kurmjos\",  \"kurm\"); // loc. pl.\n    checkOneTerm(a, \"kurmi\",    \"kurm\"); // voc. sing.\n    checkOneTerm(a, \"kurmji\",   \"kurm\"); // voc. pl.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["09c24344d8c547da8d804ff8a4cdb9ef0decf980"],"09c24344d8c547da8d804ff8a4cdb9ef0decf980":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eb46686a27187e42311e77666a2c7026f461ebc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09c24344d8c547da8d804ff8a4cdb9ef0decf980"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09c24344d8c547da8d804ff8a4cdb9ef0decf980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09c24344d8c547da8d804ff8a4cdb9ef0decf980"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09c24344d8c547da8d804ff8a4cdb9ef0decf980":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c24344d8c547da8d804ff8a4cdb9ef0decf980","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}