{"path":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n      s.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n      s.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n      s.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n      s.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94","date":1327846543,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      // nocommit: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n      //FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cd232a36e691d3af7035460733f822fb1a5239a","date":1327962711,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      // TODO: FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      // nocommit: I removed that as we can never get insanity by composite readers anymore... Is this ok?\n      //FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      // TODO: FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9","date":1327969999,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      // TODO: FieldCache.DEFAULT.purge(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["7b91922b55d15444d554721b352861d028eb8278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["7b91922b55d15444d554721b352861d028eb8278","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cd232a36e691d3af7035460733f822fb1a5239a":["a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94"],"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0e7c2454a6a8237bfd0e953f5b940838408c9055","8cd232a36e691d3af7035460733f822fb1a5239a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"8cd232a36e691d3af7035460733f822fb1a5239a":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a85e7319b5cf755cba8f1bfa7365afeb9cc3ad94":["8cd232a36e691d3af7035460733f822fb1a5239a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8fa38e5ecc85303dce7ded93b3cc9a48b3d546d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}