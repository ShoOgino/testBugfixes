{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newField(\"foo\", \"bar\", StringField.TYPE_UNSTORED));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newField(\"foo\", \"bar\", StringField.TYPE_UNSTORED));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newField(\"foo\", \"bar\", StringField.TYPE_UNSTORED));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newField(\"foo\", \"bar\", StringField.TYPE_UNSTORED));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newField(\"foo\", \"bar\", StringField.TYPE_UNSTORED));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.shutdown();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.shutdown();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.shutdown();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.shutdown();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(LeafReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(AtomicReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dcdf0501ecb64dde73646fe1f7533c1586deac1","date":1507107556,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setMergedSegmentWarmer((r) -> {\n              IndexSearcher s = newSearcher(r);\n              TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n              assertEquals(20, hits.totalHits);\n              didWarm.set(true);\n           })\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for (int i = 0; i < 20; i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setMergedSegmentWarmer(new IndexWriter.IndexReaderWarmer() {\n              @Override\n              public void warm(LeafReader r) throws IOException {\n                IndexSearcher s = newSearcher(r);\n                TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n                assertEquals(20, hits.totalHits);\n                didWarm.set(true);\n              }\n            }).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setMergedSegmentWarmer((r) -> {\n              IndexSearcher s = newSearcher(r);\n              TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n              assertEquals(20, hits.totalHits.value);\n              didWarm.set(true);\n           })\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for (int i = 0; i < 20; i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setMergedSegmentWarmer((r) -> {\n              IndexSearcher s = newSearcher(r);\n              TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n              assertEquals(20, hits.totalHits);\n              didWarm.set(true);\n           })\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for (int i = 0; i < 20; i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f","date":1533501662,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSegmentWarmer().mjava","sourceNew":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setMergedSegmentWarmer((r) -> {\n              IndexSearcher s = newSearcher(r);\n              int count = s.count(new TermQuery(new Term(\"foo\", \"bar\")));\n              assertEquals(20, count);\n              didWarm.set(true);\n           })\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for (int i = 0; i < 20; i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setMergedSegmentWarmer((r) -> {\n              IndexSearcher s = newSearcher(r);\n              TopDocs hits = s.search(new TermQuery(new Term(\"foo\", \"bar\")), 10);\n              assertEquals(20, hits.totalHits.value);\n              didWarm.set(true);\n           })\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for (int i = 0; i < 20; i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dcdf0501ecb64dde73646fe1f7533c1586deac1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["3dcdf0501ecb64dde73646fe1f7533c1586deac1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f"]},"commit2Childs":{"3dcdf0501ecb64dde73646fe1f7533c1586deac1":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["d82f2f7ad0b5fdfd0dcb7a59bbcc834853180f1f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3dcdf0501ecb64dde73646fe1f7533c1586deac1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}