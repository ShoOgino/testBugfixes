{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqPayloadIterator).mjava","commits":[{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqPayloadIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqIterator).mjava","sourceNew":"  @Override\n  public void build(TermFreqPayloadIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    BytesRef scratch = new BytesRef();\n    TermFreqPayloadIterator iter = new WFSTTermFreqIteratorWrapper(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqIterator iterator) throws IOException {\n    if (iterator instanceof TermFreqPayloadIterator) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    BytesRef scratch = new BytesRef();\n    TermFreqIterator iter = new WFSTTermFreqIteratorWrapper(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqPayloadIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqPayloadIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    BytesRef scratch = new BytesRef();\n    TermFreqPayloadIterator iter = new WFSTTermFreqIteratorWrapper(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}