{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","sourceNew":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, length5, true);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, length5, true);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","sourceNew":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5, true);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, length5, true);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","sourceNew":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5, true);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","sourceNew":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toLightAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","sourceNew":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toLightAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testLength().mjava","sourceNew":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like LengthFilter */\n  public void testLength() throws Exception {\n    CharacterRunAutomaton length5 = new CharacterRunAutomaton(new RegExp(\".{5,}\").toAutomaton());\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, length5);\n    assertAnalyzesTo(a, \"ok toolong fine notfine\",\n        new String[] { \"ok\", \"fine\" },\n        new int[] { 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}