{"path":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","commits":[{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9574fd7667d776b150040d29c4ca217a0d726ac","date":1344007238,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene40PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene40PostingsFormat#Lucene40PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene40PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene40PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene40Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene40PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene40PostingsFormat#Lucene40PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene40PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene40PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene40Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene40PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene40PostingsFormat#Lucene40PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene40PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene40PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene40Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879f5e74b68e6faa45251db337bb1e1a9e9be647","date":1350008268,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene40PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene41Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene40PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene40PostingsFormat#Lucene40PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene40PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene40PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene40Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene41Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene40PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene41Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene41Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene40PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene40PostingsFormat#Lucene40PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene40PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene40PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene40Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene41Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene40PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene40PostingsFormat#Lucene40PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene40PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene40PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene40Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene42Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene41Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","date":1359743129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene42Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene41Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene42Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene42Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene42Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * <p>\n   * Takes effect immediately, but only applies to newly flushed/merged\n   * segments.\n   * \n   * <p>\n   * <b>NOTE:</b> This parameter does not apply to all PostingsFormat implementations,\n   * including the default one in this release. It only makes sense for term indexes\n   * that are implemented as a fixed gap between terms. For example, \n   * {@link Lucene41PostingsFormat} implements the term index instead based upon how\n   * terms share prefixes. To configure its parameters (the minimum and maximum size\n   * for a block), you would instead use  {@link Lucene41PostingsFormat#Lucene41PostingsFormat(int, int)}.\n   * which can also be configured on a per-field basis:\n   * <pre class=\"prettyprint\">\n   * //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100\n   * final PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100);\n   * iwc.setCodec(new Lucene42Codec() {\n   *   &#64;Override\n   *   public PostingsFormat getPostingsFormatForField(String field) {\n   *     if (field.equals(\"fieldWithTonsOfTerms\"))\n   *       return tweakedPostings;\n   *     else\n   *       return super.getPostingsFormatForField(field);\n   *   }\n   * });\n   * </pre>\n   * Note that other implementations may have their own parameters, or no parameters at all.\n   * \n   * @see IndexWriterConfig#DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public LiveIndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9574fd7667d776b150040d29c4ca217a0d726ac":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["879f5e74b68e6faa45251db337bb1e1a9e9be647"],"a45bec74b98f6fc05f52770cfb425739e6563960":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["e9574fd7667d776b150040d29c4ca217a0d726ac","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["7f4e54ed7cef46f86888b5fb547594f62160395c","e9574fd7667d776b150040d29c4ca217a0d726ac"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["e9574fd7667d776b150040d29c4ca217a0d726ac"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["e9574fd7667d776b150040d29c4ca217a0d726ac","6616b1fd222bb5a60f7f7856ace312252bc97890"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["7f4e54ed7cef46f86888b5fb547594f62160395c","e9574fd7667d776b150040d29c4ca217a0d726ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"e9574fd7667d776b150040d29c4ca217a0d726ac":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","8fd5be977c105554c6a7b68afcdbc511439723ab","879f5e74b68e6faa45251db337bb1e1a9e9be647","c7492bcb52be51e55d596134b95b2e53cc4ffb91","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a45bec74b98f6fc05f52770cfb425739e6563960"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["6616b1fd222bb5a60f7f7856ace312252bc97890"],"d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d33aeb9ed95127e3cb6b2abce6c4b0441e6c3633","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["e9574fd7667d776b150040d29c4ca217a0d726ac","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","8fd5be977c105554c6a7b68afcdbc511439723ab","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}