{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(Config).mjava","commits":[{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":0,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(Config).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(Config config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(Config).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(Config config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(Config).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(Config config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(Config).mjava","sourceNew":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(XmlConfigFile config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","sourceOld":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(Config config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["2ad458affd82a1d762eb506003907d9363a333cb"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2ad458affd82a1d762eb506003907d9363a333cb":["ee622110ba6021d0390037e77574743c1e55348c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}