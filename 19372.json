{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","commits":[{"id":"d029fbe10fe5651865203eddc5b9d07fa3c59128","date":1456214468,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHostFragmentRule() throws Exception {\n    String rulesColl = \"ipRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String ip_1 = \"-1\";\n    String ip_2 = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      String[] ipFragments = hostAndPortMatcher.group(1).split(\"\\\\.\");\n      ip_1 = ipFragments[ipFragments.length - 1];\n      ip_2 = ipFragments[ipFragments.length - 2];\n    }\n\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1);\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","sourceNew":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRule() throws Exception {\n    String rulesColl = \"ipRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String ip_1 = \"-1\";\n    String ip_2 = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      String[] ipFragments = hostAndPortMatcher.group(1).split(\"\\\\.\");\n      ip_1 = ipFragments[ipFragments.length - 1];\n      ip_2 = ipFragments[ipFragments.length - 2];\n    }\n\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1);\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","sourceNew":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRule() throws Exception {\n    String rulesColl = \"ipRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String ip_1 = \"-1\";\n    String ip_2 = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      String[] ipFragments = hostAndPortMatcher.group(1).split(\"\\\\.\");\n      ip_1 = ipFragments[ipFragments.length - 1];\n      ip_2 = ipFragments[ipFragments.length - 2];\n    }\n\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1);\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432ec497284686a1567bffcc0c843a8b9eaae57b","date":1475677162,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","sourceNew":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ac6146556cfb813fae76783544007fc3aaa34d","date":1476790432,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","sourceNew":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","sourceNew":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRule() throws Exception {\n    String rulesColl = \"ipRuleColl\";\n    String baseUrl = getBaseUrl((HttpSolrClient) clients.get(0));\n    String ip_1 = \"-1\";\n    String ip_2 = \"-1\";\n    Matcher hostAndPortMatcher = Pattern.compile(\"(?:https?://)?([^:]+):(\\\\d+)\").matcher(baseUrl);\n    if (hostAndPortMatcher.find()) {\n      String[] ipFragments = hostAndPortMatcher.group(1).split(\"\\\\.\");\n      ip_1 = ipFragments[ipFragments.length - 1];\n      ip_2 = ipFragments[ipFragments.length - 2];\n    }\n\n    try (SolrClient client = createNewSolrClient(\"\", baseUrl)) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1);\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eade42881b2b73694a2b065cce4d6367a1870676","date":1564191666,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","sourceNew":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","sourceNew":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#testHostFragmentRule().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testHostFragmentRule() throws Exception {\n\n    String rulesColl = \"hostFragment\";\n\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    String host = jetty.getBaseUrl().getHost();\n    String[] ipFragments = host.split(\"\\\\.\");\n    String ip_1 = ipFragments[ipFragments.length - 1];\n    String ip_2 = ipFragments[ipFragments.length - 2];\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"ip_2:\" + ip_2, \"ip_1:\" + ip_1)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n    List<Map> list = (List<Map>) rulesCollection.get(\"rule\");\n    assertEquals(2, list.size());\n    assertEquals(ip_2, list.get(0).get(\"ip_2\"));\n    assertEquals(ip_1, list.get(1).get(\"ip_1\"));\n\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals(\"ImplicitSnitch\", list.get(0).get(\"class\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["eade42881b2b73694a2b065cce4d6367a1870676"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["d029fbe10fe5651865203eddc5b9d07fa3c59128","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"432ec497284686a1567bffcc0c843a8b9eaae57b":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"82ac6146556cfb813fae76783544007fc3aaa34d":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"f8061ddd97f3352007d927dae445884a6f3d857b":["82ac6146556cfb813fae76783544007fc3aaa34d","eade42881b2b73694a2b065cce4d6367a1870676"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d029fbe10fe5651865203eddc5b9d07fa3c59128","82ac6146556cfb813fae76783544007fc3aaa34d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"eade42881b2b73694a2b065cce4d6367a1870676":["82ac6146556cfb813fae76783544007fc3aaa34d"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"432ec497284686a1567bffcc0c843a8b9eaae57b":["82ac6146556cfb813fae76783544007fc3aaa34d"],"82ac6146556cfb813fae76783544007fc3aaa34d":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","eade42881b2b73694a2b065cce4d6367a1870676"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"eade42881b2b73694a2b065cce4d6367a1870676":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}