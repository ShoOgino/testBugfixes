{"path":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSortSpec(boolean).mjava","commits":[{"id":"07cbaf0735458446c429df54ba816915e8a1f638","date":1476738812,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSortSpec(boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortSpec getSortSpec(boolean useGlobal) throws SyntaxError {\n    SortSpec sort = super.getSortSpec(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      SortSpec oldSort = SortSpecParsing.parseSortSpec(sortStr, getReq());\n      if( oldSort.getSort() != null ) {\n        sort.setSortAndFields(oldSort.getSort(), oldSort.getSchemaFields());\n      }\n    }\n    return sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSortSpec(boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortSpec getSortSpec(boolean useGlobal) throws SyntaxError {\n    SortSpec sort = super.getSortSpec(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      SortSpec oldSort = SortSpecParsing.parseSortSpec(sortStr, getReq());\n      if( oldSort.getSort() != null ) {\n        sort.setSortAndFields(oldSort.getSort(), oldSort.getSchemaFields());\n      }\n    }\n    return sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637559b0fb4d8b154a84b1af4661cb1b5d9c8415","date":1504740251,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSortSpec(boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortSpec getSortSpec(boolean useGlobal) throws SyntaxError {\n    SortSpec sort = super.getSortSpec(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      SortSpec oldSort = SortSpecParsing.parseSortSpec(sortStr, getReq());\n      if( oldSort.getSort() != null ) {\n        sort.setSortAndFields(oldSort.getSort(), oldSort.getSchemaFields());\n      }\n    }\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSortSpec(boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortSpec getSortSpec(boolean useGlobal) throws SyntaxError {\n    SortSpec sort = super.getSortSpec(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      SortSpec oldSort = SortSpecParsing.parseSortSpec(sortStr, getReq());\n      if( oldSort.getSort() != null ) {\n        sort.setSortAndFields(oldSort.getSort(), oldSort.getSchemaFields());\n      }\n    }\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSortSpec(boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortSpec getSortSpec(boolean useGlobal) throws SyntaxError {\n    SortSpec sort = super.getSortSpec(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      SortSpec oldSort = SortSpecParsing.parseSortSpec(sortStr, getReq());\n      if( oldSort.getSort() != null ) {\n        sort.setSortAndFields(oldSort.getSort(), oldSort.getSchemaFields());\n      }\n    }\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["07cbaf0735458446c429df54ba816915e8a1f638","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"637559b0fb4d8b154a84b1af4661cb1b5d9c8415":["07cbaf0735458446c429df54ba816915e8a1f638"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["07cbaf0735458446c429df54ba816915e8a1f638","637559b0fb4d8b154a84b1af4661cb1b5d9c8415"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07cbaf0735458446c429df54ba816915e8a1f638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07cbaf0735458446c429df54ba816915e8a1f638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"637559b0fb4d8b154a84b1af4661cb1b5d9c8415":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07cbaf0735458446c429df54ba816915e8a1f638","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"07cbaf0735458446c429df54ba816915e8a1f638":["685bd38810c206c93e9058f3c2cfa9827c086c27","637559b0fb4d8b154a84b1af4661cb1b5d9c8415","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}