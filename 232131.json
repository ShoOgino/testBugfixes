{"path":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","commits":[{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory(random);\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = new MockRAMDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory(random);\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(new Field(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n      //DateFilter filter =\n      //  new DateFilter(\"modified\", Time(1997,0,1), Time(1998,0,1));\n      //DateFilter filter = DateFilter.Before(\"modified\", Time(1997,00,01));\n      //System.out.println(filter);\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score\n// \t\t\t   + \" \" + DateField.stringToDate(d.get(\"modified\"))\n                             + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer();\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      String[] queries = {\n        \"a b\",\n        \"\\\"a b\\\"\",\n        \"\\\"a b c\\\"\",\n        \"a c\",\n        \"\\\"a c\\\"\",\n        \"\\\"a c e\\\"\",\n      };\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.INT)});\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"contents\", analyzer);\n      parser.setPhraseSlop(4);\n      for (int j = 0; j < queries.length; j++) {\n        Query query = parser.parse(queries[j]);\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], Field.Store.YES, Field.Index.ANALYZED));\n        d.add(newField(\"id\", \"\"+j, Field.Index.NOT_ANALYZED_NO_NORMS));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexSearcher searcher = new IndexSearcher(directory, true);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      searcher.close();\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fae06511695f4be0bce5337deb3b3f813d0c3e7c","date":1323890147,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(SortField.FIELD_SCORE,\n                           new SortField(\"id\", SortField.Type.INT));\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(new SortField[] {\n          SortField.FIELD_SCORE,\n          new SortField(\"id\", SortField.Type.INT)});\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#doTestSearch(Random,PrintWriter,boolean).mjava","sourceNew":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(SortField.FIELD_SCORE,\n                           new SortField(\"id\", SortField.Type.INT));\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"    private void doTestSearch(Random random, PrintWriter out, boolean useCompoundFile)\n    throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n\n      String[] docs = {\n        \"a b c d e\",\n        \"a b c d e a b c d e\",\n        \"a b c d e f g h i j\",\n        \"a c e\",\n        \"e c a\",\n        \"a c e a c e\",\n        \"a c e a b c\"\n      };\n      for (int j = 0; j < docs.length; j++) {\n        Document d = new Document();\n        d.add(newField(\"contents\", docs[j], TextField.TYPE_STORED));\n        d.add(newField(\"id\", \"\"+j, StringField.TYPE_UNSTORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      ScoreDoc[] hits = null;\n\n      Sort sort = new Sort(SortField.FIELD_SCORE,\n                           new SortField(\"id\", SortField.Type.INT));\n\n      for (Query query : buildQueries()) {\n        out.println(\"Query: \" + query.toString(\"contents\"));\n        if (VERBOSE) {\n          System.out.println(\"TEST: query=\" + query);\n        }\n\n        hits = searcher.search(query, null, 1000, sort).scoreDocs;\n\n        out.println(hits.length + \" total results\");\n        for (int i = 0 ; i < hits.length && i < 10; i++) {\n          Document d = searcher.doc(hits[i].doc);\n          out.println(i + \" \" + hits[i].score + \" \" + d.get(\"contents\"));\n        }\n      }\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c19f985e36a65cc969e8e564fe337a0d41512075":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","c19f985e36a65cc969e8e564fe337a0d41512075"],"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"090a0320e4de4a3674376aef96b9701f47564f86":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["090a0320e4de4a3674376aef96b9701f47564f86"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["c19f985e36a65cc969e8e564fe337a0d41512075","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ab5cb6a74aefb78aa0569857970b9151dfe2e787","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"962d04139994fce5193143ef35615499a9a96d78":[],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["b1add9ddc0005b07550d4350720aac22dc9886b3","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}