{"path":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","commits":[{"id":"aa4607364a2fc156ffb717ddc21d860e466ac7fd","date":1258218641,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"/dev/null","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4)));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b76616526aa00e6e6983cbd99b234605e00e3cf","date":1258472185,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",\" + Constants.EARTH_RADIUS_KM +\n            \")\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(gh_s, geohash(32, -79),\" + Constants.EARTH_RADIUS_KM +\n            \")\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n  }\n\n","sourceOld":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\"));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4)));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n  }\n\n","bugFix":null,"bugIntro":["7fd616bd8e6f2a1d20f73c7f07b4df8fc00ec0fe","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n  }\n\n","sourceOld":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(x_td, y_td, 0, 0, 1)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",\" + Constants.EARTH_RADIUS_KM +\n            \")\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(gh_s, geohash(32, -79),\" + Constants.EARTH_RADIUS_KM +\n            \")\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n  }\n\n","bugFix":null,"bugIntro":["7fd616bd8e6f2a1d20f73c7f07b4df8fc00ec0fe","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","date":1262055526,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n  }\n\n","sourceOld":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n  }\n\n","bugFix":null,"bugIntro":["7fd616bd8e6f2a1d20f73c7f07b4df8fc00ec0fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d9b714fef469c13dd60071836695ff6f785033f","date":1268618935,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","sourceOld":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.30894'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","pathOld":"src/test/org/apache/solr/search/function/distance/DistanceFunctionTest#testHaversine().mjava","sourceNew":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","sourceOld":"  public void testHaversine() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_td\", \"0\", \"y_td\", \"0\", \"gh_s\", GeoHashUtils.encode(32.7693246, -79.9289094)));\n    assertU(adoc(\"id\", \"2\", \"x_td\", \"0\", \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -78.9289094)));\n    assertU(adoc(\"id\", \"3\", \"x_td\", String.valueOf(Math.PI / 2), \"y_td\", String.valueOf(Math.PI / 2), \"gh_s\", GeoHashUtils.encode(32.7693246, -80.9289094)));\n    assertU(adoc(\"id\", \"4\", \"x_td\", String.valueOf(Math.PI / 4), \"y_td\", String.valueOf(Math.PI / 4), \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"5\", \"x_td\", \"45.0\", \"y_td\", \"45.0\",\n            \"gh_s\", GeoHashUtils.encode(32.7693246, -81.9289094)));\n    assertU(adoc(\"id\", \"6\", \"point_hash\", \"32.5, -79.0\"));\n    assertU(adoc(\"id\", \"7\", \"point_hash\", \"32.6, -78.0\"));\n    assertU(commit());\n    //Get the haversine distance between the point 0,0 and the docs above assuming a radius of 1\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:2\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:3\"), \"//float[@name='score']='\" + (float) (Math.PI / 2) + \"'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0)\", \"fq\", \"id:4\"), \"//float[@name='score']='1.0471976'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}hsin(1, x_td, y_td, 0, 0, true)\", \"fq\", \"id:5\"), \"//float[@name='score']='1.0471976'\");\n\n    //Geo Hash Haversine\n    //Can verify here: http://www.movable-type.co.uk/scripts/latlong.html, but they use a slightly different radius for the earth, so just be close\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, \\\"\" + GeoHashUtils.encode(32, -79) +\n            \"\\\",)\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n\n    assertQ(req(\"fl\", \"id,point_hash,score\", \"q\", \"{!func}recip(ghhsin(\" + Constants.EARTH_RADIUS_KM + \", point_hash, \\\"\" + GeoHashUtils.encode(32, -79) + \"\\\"), 1, 1, 0)\"),\n            \"//*[@numFound='7']\", \n            \"//result/doc[1]/float[@name='id'][.='6.0']\",\n            \"//result/doc[2]/float[@name='id'][.='7.0']\"//all the rest don't matter\n            );\n\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}ghhsin(\" + Constants.EARTH_RADIUS_KM + \", gh_s, geohash(32, -79))\", \"fq\", \"id:1\"), \"//float[@name='score']='122.309006'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["0b76616526aa00e6e6983cbd99b234605e00e3cf"],"4d9b714fef469c13dd60071836695ff6f785033f":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["4d9b714fef469c13dd60071836695ff6f785033f"],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"0b76616526aa00e6e6983cbd99b234605e00e3cf":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"4d9b714fef469c13dd60071836695ff6f785033f":["ad94625fb8d088209f46650c8097196fec67f00c"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["4d9b714fef469c13dd60071836695ff6f785033f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["aa4607364a2fc156ffb717ddc21d860e466ac7fd"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"aa4607364a2fc156ffb717ddc21d860e466ac7fd":["0b76616526aa00e6e6983cbd99b234605e00e3cf"],"0b76616526aa00e6e6983cbd99b234605e00e3cf":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}