{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#basic().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#basic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Ignore\n  public void basic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = AbstractDataImportHandlerTest.getContext(null, null,\n            dataSource, 0, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    Assert.assertEquals(5, count);\n    Assert.assertEquals(Float.class, msrp.getClass());\n    Assert.assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#basic().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#basic().mjava","sourceNew":"  @Test\n  @Ignore\n  public void basic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = AbstractDataImportHandlerTest.getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    Assert.assertEquals(5, count);\n    Assert.assertEquals(Float.class, msrp.getClass());\n    Assert.assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void basic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = AbstractDataImportHandlerTest.getContext(null, null,\n            dataSource, 0, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    Assert.assertEquals(5, count);\n    Assert.assertEquals(Float.class, msrp.getClass());\n    Assert.assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#basic().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#basic().mjava","sourceNew":"  @Test\n  @Ignore\n  public void basic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = AbstractDataImportHandlerTest.getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    Assert.assertEquals(5, count);\n    Assert.assertEquals(Float.class, msrp.getClass());\n    Assert.assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void basic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = AbstractDataImportHandlerTest.getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    Assert.assertEquals(5, count);\n    Assert.assertEquals(Float.class, msrp.getClass());\n    Assert.assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}