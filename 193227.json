{"path":"lucene/src/java/org/apache/lucene/index/DocFieldConsumers#getPerDoc().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldConsumers#getPerDoc().mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldConsumers#getPerDoc().mjava","sourceNew":"  synchronized PerDoc getPerDoc() {\n    if (freeCount == 0) {\n      allocCount++;\n      if (allocCount > docFreeList.length) {\n        // Grow our free list up front to make sure we have\n        // enough space to recycle all outstanding PerDoc\n        // instances\n        assert allocCount == 1+docFreeList.length;\n        docFreeList = new PerDoc[ArrayUtil.oversize(allocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      }\n      return new PerDoc();\n    } else\n      return docFreeList[--freeCount];\n  }\n\n","sourceOld":"  synchronized PerDoc getPerDoc() {\n    if (freeCount == 0) {\n      allocCount++;\n      if (allocCount > docFreeList.length) {\n        // Grow our free list up front to make sure we have\n        // enough space to recycle all outstanding PerDoc\n        // instances\n        assert allocCount == 1+docFreeList.length;\n        docFreeList = new PerDoc[ArrayUtil.oversize(allocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      }\n      return new PerDoc();\n    } else\n      return docFreeList[--freeCount];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldConsumers#getPerDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldConsumers#getPerDoc().mjava","sourceNew":"  PerDoc getPerDoc() {\n    if (freeCount == 0) {\n      allocCount++;\n      if (allocCount > docFreeList.length) {\n        // Grow our free list up front to make sure we have\n        // enough space to recycle all outstanding PerDoc\n        // instances\n        assert allocCount == 1+docFreeList.length;\n        docFreeList = new PerDoc[ArrayUtil.oversize(allocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      }\n      return new PerDoc();\n    } else\n      return docFreeList[--freeCount];\n  }\n\n","sourceOld":"  synchronized PerDoc getPerDoc() {\n    if (freeCount == 0) {\n      allocCount++;\n      if (allocCount > docFreeList.length) {\n        // Grow our free list up front to make sure we have\n        // enough space to recycle all outstanding PerDoc\n        // instances\n        assert allocCount == 1+docFreeList.length;\n        docFreeList = new PerDoc[ArrayUtil.oversize(allocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      }\n      return new PerDoc();\n    } else\n      return docFreeList[--freeCount];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldConsumers#getPerDoc().mjava","sourceNew":null,"sourceOld":"  PerDoc getPerDoc() {\n    if (freeCount == 0) {\n      allocCount++;\n      if (allocCount > docFreeList.length) {\n        // Grow our free list up front to make sure we have\n        // enough space to recycle all outstanding PerDoc\n        // instances\n        assert allocCount == 1+docFreeList.length;\n        docFreeList = new PerDoc[ArrayUtil.oversize(allocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      }\n      return new PerDoc();\n    } else\n      return docFreeList[--freeCount];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7896cf1e46aab37432760018befa9a411c0e2500","date":1283176044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldConsumers#getPerDoc().mjava","sourceNew":null,"sourceOld":"  synchronized PerDoc getPerDoc() {\n    if (freeCount == 0) {\n      allocCount++;\n      if (allocCount > docFreeList.length) {\n        // Grow our free list up front to make sure we have\n        // enough space to recycle all outstanding PerDoc\n        // instances\n        assert allocCount == 1+docFreeList.length;\n        docFreeList = new PerDoc[ArrayUtil.oversize(allocCount, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      }\n      return new PerDoc();\n    } else\n      return docFreeList[--freeCount];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7896cf1e46aab37432760018befa9a411c0e2500":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7896cf1e46aab37432760018befa9a411c0e2500"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7896cf1e46aab37432760018befa9a411c0e2500":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6c18273ea5b3974d2f30117f46f1ae416c28f727","7896cf1e46aab37432760018befa9a411c0e2500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"833a7987bc1c94455fde83e3311f72bddedcfb93":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","833a7987bc1c94455fde83e3311f72bddedcfb93"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}