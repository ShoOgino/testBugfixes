{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","commits":[{"id":"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7","date":1354804202,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(String...).mjava","sourceNew":"  private void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", names.contains(name));\n    }\n  }\n\n","sourceOld":"  private void checkInCores(String... nameCheck) {\n    Collection<String> names = cores.getCoreNames();\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", names.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", names.contains(name));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", names.contains(name));\n    }\n  }\n\n","sourceOld":"  private void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", names.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getCoreNames();\n    \n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", names.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getCoreNames();\n    \n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> names = cc.getCoreNames();\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", names.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    \n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getCoreNames();\n    \n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n\n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getCoreNames();\n    \n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    \n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n\n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad026d488f8fbf9ab33e5232d3343395c19b6cc8","date":1507308872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n\n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \",\n        loadedNames.size(), nameCheck.length);\n\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    \n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48e6317c36b128552eaed2363bb069267defb0e0","date":1507335877,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#checkInCores(CoreContainer,String...).mjava","sourceNew":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n    \n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \", \n        loadedNames.size(), nameCheck.length);\n    \n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","sourceOld":"  public static void checkInCores(CoreContainer cc, String... nameCheck) {\n    Collection<String> loadedNames = cc.getLoadedCoreNames();\n\n    assertEquals(\"There whould be exactly as many loaded cores as loaded names returned. \",\n        loadedNames.size(), nameCheck.length);\n\n    for (String name : nameCheck) {\n      assertTrue(\"core \" + name + \" was not found in the list of cores\", loadedNames.contains(name));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8b6a4b585aed7660a589375f6a09b90efd29c961"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["a837c064b67fa63a9394136e31218b908cdcf783"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48e6317c36b128552eaed2363bb069267defb0e0"],"48e6317c36b128552eaed2363bb069267defb0e0":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["48e6317c36b128552eaed2363bb069267defb0e0"],"a837c064b67fa63a9394136e31218b908cdcf783":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["407687e67faf6e1f02a211ca078d8e3eed631027","a837c064b67fa63a9394136e31218b908cdcf783"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","ad026d488f8fbf9ab33e5232d3343395c19b6cc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"48e6317c36b128552eaed2363bb069267defb0e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}