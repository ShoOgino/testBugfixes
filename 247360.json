{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#createQueries(List,Analyzer).mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#createQueries(List,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Parse the strings containing Lucene queries.\n     *\n     * @param qs array of strings containing query expressions\n     * @param a  analyzer to use when parsing queries\n     * @return array of Lucene queries\n     */\n    public static Query[] createQueries(List qs, Analyzer a)\n    {\n        QueryParser qp = new QueryParser(\"body\", a);\n        List queries = new ArrayList();\n        for (int i = 0; i < qs.size(); i++)\n        {\n            try\n            {\n                Object query = qs.get(i);\n                Query q = null;\n                if (query instanceof String)\n                {\n                    q = qp.parse((String) query);\n                }\n                else if (query instanceof Query)\n                {\n                    q = (Query) query;\n                }\n                else\n                {\n                    System.err.println(\"Unsupported Query Type: \" + query);\n                }\n                if (q != null)\n                {\n                    queries.add(q);\n                }\n\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n            }\n        }\n        return (Query[]) queries.toArray(new Query[0]);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f55f56ccbdfcad354e67291558fdec36be2341c8","date":1244730392,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/standard/StandardBenchmarker#createQueries(List,Analyzer).mjava","sourceNew":null,"sourceOld":"    /**\n     * Parse the strings containing Lucene queries.\n     *\n     * @param qs array of strings containing query expressions\n     * @param a  analyzer to use when parsing queries\n     * @return array of Lucene queries\n     */\n    public static Query[] createQueries(List qs, Analyzer a)\n    {\n        QueryParser qp = new QueryParser(\"body\", a);\n        List queries = new ArrayList();\n        for (int i = 0; i < qs.size(); i++)\n        {\n            try\n            {\n                Object query = qs.get(i);\n                Query q = null;\n                if (query instanceof String)\n                {\n                    q = qp.parse((String) query);\n                }\n                else if (query instanceof Query)\n                {\n                    q = (Query) query;\n                }\n                else\n                {\n                    System.err.println(\"Unsupported Query Type: \" + query);\n                }\n                if (q != null)\n                {\n                    queries.add(q);\n                }\n\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n            }\n        }\n        return (Query[]) queries.toArray(new Query[0]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f55f56ccbdfcad354e67291558fdec36be2341c8":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f55f56ccbdfcad354e67291558fdec36be2341c8"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["f55f56ccbdfcad354e67291558fdec36be2341c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"f55f56ccbdfcad354e67291558fdec36be2341c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}