{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/SegmentingTokenizerBase#refill().mjava","commits":[{"id":"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2","date":1326399048,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/SegmentingTokenizerBase#refill().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Refill the buffer, accumulating the offset and setting usableLength to the\n   * last unambiguous break position\n   */\n  private void refill() throws IOException {\n    offset += usableLength;\n    int leftover = length - usableLength;\n    System.arraycopy(buffer, usableLength, buffer, 0, leftover);\n    int requested = buffer.length - leftover;\n    int returned = input.read(buffer, leftover, requested);\n    length = returned < 0 ? leftover : returned + leftover;\n    if (returned < requested) /* reader has been emptied, process the rest */\n      usableLength = length;\n    else { /* still more data to be read, find a safe-stopping place */\n      usableLength = findSafeEnd();\n      if (usableLength < 0)\n        usableLength = length; /*\n                                * more than IOBUFFER of text without breaks,\n                                * gonna possibly truncate tokens\n                                */\n    }\n\n    wrapper.setText(buffer, 0, Math.max(0, usableLength));\n    iterator.setText(wrapper);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1387d416b7beb69f15a682854da8ec4c153f5bce","date":1332264506,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/SegmentingTokenizerBase#refill().mjava","sourceNew":null,"sourceOld":"  /**\n   * Refill the buffer, accumulating the offset and setting usableLength to the\n   * last unambiguous break position\n   */\n  private void refill() throws IOException {\n    offset += usableLength;\n    int leftover = length - usableLength;\n    System.arraycopy(buffer, usableLength, buffer, 0, leftover);\n    int requested = buffer.length - leftover;\n    int returned = input.read(buffer, leftover, requested);\n    length = returned < 0 ? leftover : returned + leftover;\n    if (returned < requested) /* reader has been emptied, process the rest */\n      usableLength = length;\n    else { /* still more data to be read, find a safe-stopping place */\n      usableLength = findSafeEnd();\n      if (usableLength < 0)\n        usableLength = length; /*\n                                * more than IOBUFFER of text without breaks,\n                                * gonna possibly truncate tokens\n                                */\n    }\n\n    wrapper.setText(buffer, 0, Math.max(0, usableLength));\n    iterator.setText(wrapper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1387d416b7beb69f15a682854da8ec4c153f5bce":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1387d416b7beb69f15a682854da8ec4c153f5bce"]},"commit2Childs":{"1387d416b7beb69f15a682854da8ec4c153f5bce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2"],"6ae8b8ec55786d06eb9b03fc7bc86a907e1a3ae2":["1387d416b7beb69f15a682854da8ec4c153f5bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}