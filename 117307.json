{"path":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.shutdown();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#setSpellIndex(Directory).mjava","sourceNew":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(null));\n          writer.close();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Use a different index as the spell checker index or re-open\n   * the existing index if <code>spellIndex</code> is the same value\n   * as given in the constructor.\n   * @param spellIndexDir the spell directory to use\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws  IOException if spellchecker can not open the directory\n   */\n  // TODO: we should make this final as it is called in the constructor\n  public void setSpellIndex(Directory spellIndexDir) throws IOException {\n    // this could be the same directory as the current spellIndex\n    // modifications to the directory should be synchronized \n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      if (!DirectoryReader.indexExists(spellIndexDir)) {\n          IndexWriter writer = new IndexWriter(spellIndexDir,\n            new IndexWriterConfig(Version.LUCENE_CURRENT,\n                null));\n          writer.shutdown();\n      }\n      swapSearcher(spellIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}