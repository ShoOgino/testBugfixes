{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#getHashRangeIdx(DocRouter,List[DocRouter.Range],int[],String).mjava","commits":[{"id":"8f1ea787bab5bdb5e72685e55424898da05509b6","date":1370289750,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#getHashRangeIdx(DocRouter,List[DocRouter.Range],int[],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(DocRouter,List[DocRouter.Range],int[],String).mjava","sourceNew":"  private int getHashRangeIdx(DocRouter router, List<DocRouter.Range> ranges, int[] docCounts, String id) {\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        return i;\n    }\n    return -1;\n  }\n\n","sourceOld":"  protected void indexAndUpdateCount(DocRouter router, List<DocRouter.Range> ranges, int[] docCounts, String id) throws Exception {\n    index(\"id\", id);\n\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        docCounts[i]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd2d639986db5a5a6f3703a8b4136a6473a5f81","date":1376372957,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#getHashRangeIdx(DocRouter,List[DocRouter.Range],int[],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#getHashRangeIdx(DocRouter,List[DocRouter.Range],int[],String).mjava","sourceNew":"  private int getHashRangeIdx(DocRouter router, List<DocRouter.Range> ranges, int[] docCounts, String id) {\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null,null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        return i;\n    }\n    return -1;\n  }\n\n","sourceOld":"  private int getHashRangeIdx(DocRouter router, List<DocRouter.Range> ranges, int[] docCounts, String id) {\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        return i;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#getHashRangeIdx(DocRouter,List[DocRouter.Range],int[],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#getHashRangeIdx(DocRouter,List[DocRouter.Range],int[],String).mjava","sourceNew":"  private int getHashRangeIdx(DocRouter router, List<DocRouter.Range> ranges, int[] docCounts, String id) {\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null,null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        return i;\n    }\n    return -1;\n  }\n\n","sourceOld":"  private int getHashRangeIdx(DocRouter router, List<DocRouter.Range> ranges, int[] docCounts, String id) {\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        return i;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1816753738ff1f27f11b38030e83c0ded050b7a4","date":1380106089,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#getHashRangeIdx(DocRouter,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#getHashRangeIdx(DocRouter,List[DocRouter.Range],int[],String).mjava","sourceNew":"  public static int getHashRangeIdx(DocRouter router, List<DocRouter.Range> ranges, String id) {\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null,null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        return i;\n    }\n    return -1;\n  }\n\n","sourceOld":"  private int getHashRangeIdx(DocRouter router, List<DocRouter.Range> ranges, int[] docCounts, String id) {\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null,null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        return i;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1816753738ff1f27f11b38030e83c0ded050b7a4":["cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8f1ea787bab5bdb5e72685e55424898da05509b6","cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cdd2d639986db5a5a6f3703a8b4136a6473a5f81":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1816753738ff1f27f11b38030e83c0ded050b7a4"]},"commit2Childs":{"1816753738ff1f27f11b38030e83c0ded050b7a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f1ea787bab5bdb5e72685e55424898da05509b6":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cdd2d639986db5a5a6f3703a8b4136a6473a5f81"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f1ea787bab5bdb5e72685e55424898da05509b6"],"cdd2d639986db5a5a6f3703a8b4136a6473a5f81":["1816753738ff1f27f11b38030e83c0ded050b7a4","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}