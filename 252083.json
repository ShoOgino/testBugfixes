{"path":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new NearSpans(this, reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return new NearSpans(this, reader);\n  }\n\n","bugFix":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getPayloadSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getPayloadSpans(reader);\n\n    return inOrder\n            ? (PayloadSpans) new NearSpansOrdered(this, reader)\n            : (PayloadSpans) new NearSpansUnordered(this, reader);\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","bugFix":null,"bugIntro":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b00d44ccb616bf40482a9ba5302cb256c26c6e4c","date":1249308735,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getPayloadSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getPayloadSpans(reader);\n\n    return inOrder\n            ? (PayloadSpans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (PayloadSpans) new NearSpansUnordered(this, reader);\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getPayloadSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getPayloadSpans(reader);\n\n    return inOrder\n            ? (PayloadSpans) new NearSpansOrdered(this, reader)\n            : (PayloadSpans) new NearSpansUnordered(this, reader);\n  }\n\n","bugFix":["fd5947db4de866f035b932f219674c03562d904e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getPayloadSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getPayloadSpans(reader);\n\n    return inOrder\n            ? (PayloadSpans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (PayloadSpans) new NearSpansUnordered(this, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","sourceNew":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return ((SpanQuery)clauses.get(0)).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","sourceOld":"  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    if (clauses.size() == 0)                      // optimize 0-clause case\n      return new SpanOrQuery(getClauses()).getSpans(reader);\n\n    if (clauses.size() == 1)                      // optimize 1-clause case\n      return clauses.get(0).getSpans(reader);\n\n    return inOrder\n            ? (Spans) new NearSpansOrdered(this, reader, collectPayloads)\n            : (Spans) new NearSpansUnordered(this, reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["fd5947db4de866f035b932f219674c03562d904e"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd5947db4de866f035b932f219674c03562d904e":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["fd5947db4de866f035b932f219674c03562d904e"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"fd5947db4de866f035b932f219674c03562d904e":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}