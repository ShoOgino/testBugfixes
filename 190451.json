{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31c8c009cea52067b0cf34f2ea666147e80b1461","date":1406233016,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum,PrefixTerm).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum, PrefixTerm prefixTerm) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state, prefixTerm);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        if (prefixTerm == null) {\n          // Only increment stats for real terms:\n          sumDocFreq += state.docFreq;\n          sumTotalTermFreq += state.totalTermFreq;\n          numTerms++;\n          if (firstPendingTerm == null) {\n            firstPendingTerm = term;\n          }\n          lastPendingTerm = term;\n        }\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum,PrefixTerm).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum, PrefixTerm prefixTerm) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state, prefixTerm);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        if (prefixTerm == null) {\n          // Only increment stats for real terms:\n          sumDocFreq += state.docFreq;\n          sumTotalTermFreq += state.totalTermFreq;\n          numTerms++;\n          if (firstPendingTerm == null) {\n            firstPendingTerm = term;\n          }\n          lastPendingTerm = term;\n        }\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum,PrefixTerm).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum, PrefixTerm prefixTerm) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state, prefixTerm);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        if (prefixTerm == null) {\n          // Only increment stats for real terms:\n          sumDocFreq += state.docFreq;\n          sumTotalTermFreq += state.totalTermFreq;\n          numTerms++;\n          if (firstPendingTerm == null) {\n            firstPendingTerm = term;\n          }\n          lastPendingTerm = term;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum,PrefixTerm).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum, PrefixTerm prefixTerm) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state, prefixTerm);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        if (prefixTerm == null) {\n          // Only increment stats for real terms:\n          sumDocFreq += state.docFreq;\n          sumTotalTermFreq += state.totalTermFreq;\n          numTerms++;\n          if (firstPendingTerm == null) {\n            firstPendingTerm = term;\n          }\n          lastPendingTerm = term;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum, NormsProducer norms) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen, norms);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n      /*\n      if (DEBUG) {\n        int[] tmp = new int[lastTerm.length];\n        System.arraycopy(prefixStarts, 0, tmp, 0, tmp.length);\n        System.out.println(\"BTTW: write term=\" + brToString(text) + \" prefixStarts=\" + Arrays.toString(tmp) + \" pending.size()=\" + pending.size());\n      }\n      */\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        pushTerm(text);\n       \n        PendingTerm term = new PendingTerm(text, state);\n        pending.add(term);\n        //if (DEBUG) System.out.println(\"    add pending term = \" + text + \" pending.size()=\" + pending.size());\n\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        numTerms++;\n        if (firstPendingTerm == null) {\n          firstPendingTerm = term;\n        }\n        lastPendingTerm = term;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"f838187609fee3a1afa5f162f93c796046242c84":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3e8715d826e588419327562287d5d6a8040d63d6","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["3e8715d826e588419327562287d5d6a8040d63d6","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["2bb2842e561df4e8e9ad89010605fc86ac265465","3e8715d826e588419327562287d5d6a8040d63d6"],"622a708571e534680618b3c5e0c28ac539a47776":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["f838187609fee3a1afa5f162f93c796046242c84"],"3e8715d826e588419327562287d5d6a8040d63d6":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"f838187609fee3a1afa5f162f93c796046242c84":["31c8c009cea52067b0cf34f2ea666147e80b1461"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4d637064d608752565d4f9f41b2497dfdfdde50e":["f838187609fee3a1afa5f162f93c796046242c84"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","622a708571e534680618b3c5e0c28ac539a47776"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed","4d637064d608752565d4f9f41b2497dfdfdde50e"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"31c8c009cea52067b0cf34f2ea666147e80b1461":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3e8715d826e588419327562287d5d6a8040d63d6":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","d2638f781be724518ff6c2263d14a48cf6e68017"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}