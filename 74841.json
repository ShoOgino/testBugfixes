{"path":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76697424569a60025d31906b10df39bab5af9110","date":1426446885,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n    \n    Map<String,String> args = new HashMap<>();\n    args.put( CommonParams.Q, \"title:test\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    \n    assertQ(\"Make sure they got in\", req\n            ,\"//*[@numFound='3']\"\n            );\n    \n    args.put( CommonParams.SORT, \"val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    args.put( CommonParams.SORT, \"val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    args.put( CommonParams.SORT, \"score desc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"with sort param [desc]\", req,\"//*[@numFound='3']\" );\n    \n    // Using legacy ';' param\n    args.remove( CommonParams.SORT );\n    args.put( QueryParsing.DEFTYPE, \"lucenePlusSort\" );\n    args.put( CommonParams.Q, \"title:test; val_s1 desc\" );\n    assertQ(\"with sort param [desc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    args.put( CommonParams.Q, \"title:test; val_s1 asc\" );\n    assertQ(\"with sort param [asc]\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/SearchHandlerTest#testSorting().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":"  public void testSorting() throws Exception {\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n  }\n\n","sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":null,"sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='12']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='10']\"\n            ,\"//result/doc[2]/int[@name='id'][.='11']\"\n            ,\"//result/doc[3]/int[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/StandardRequestHandlerTest#testSorting().mjava","sourceNew":null,"sourceOld":"  public void testSorting() throws Exception {\n    SolrCore core = h.getCore();\n    assertU(adoc(\"id\", \"10\", \"title\", \"test\", \"val_s1\", \"aaa\"));\n    assertU(adoc(\"id\", \"11\", \"title\", \"test\", \"val_s1\", \"bbb\"));\n    assertU(adoc(\"id\", \"12\", \"title\", \"test\", \"val_s1\", \"ccc\"));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"title:test\")\n            ,\"//*[@numFound='3']\"\n            );\n    \n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 asc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"val_s1 desc\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n    \n    // Make sure score parsing works\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score desc\")\n        ,\"//*[@numFound='3']\"\n    );\n\n    assertQ(req(\"q\", \"title:test\", \"sort\",\"score asc\")\n        ,\"//*[@numFound='3']\"\n    );\n    \n    // Using legacy ';' param\n    assertQ(req(\"q\", \"title:test; val_s1 desc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='12']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='10']\"\n            );\n\n    assertQ(req(\"q\", \"title:test; val_s1 asc\", \"defType\",\"lucenePlusSort\")\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='10']\"\n            ,\"//result/doc[2]/str[@name='id'][.='11']\"\n            ,\"//result/doc[3]/str[@name='id'][.='12']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["76697424569a60025d31906b10df39bab5af9110"],"30c8e5574b55d57947e989443dfde611646530ee":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["76697424569a60025d31906b10df39bab5af9110","5ff704ef91e9ae30ca59babb23ece85720701b60"],"76697424569a60025d31906b10df39bab5af9110":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","76697424569a60025d31906b10df39bab5af9110"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["76697424569a60025d31906b10df39bab5af9110","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["a71f63026529f3c1f03cfdd664910873ab2369ae"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["76697424569a60025d31906b10df39bab5af9110","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","5ff704ef91e9ae30ca59babb23ece85720701b60"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76697424569a60025d31906b10df39bab5af9110":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["30c8e5574b55d57947e989443dfde611646530ee"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}