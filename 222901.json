{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#addPosition(int,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#addPosition(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriter#addPosition(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsWriterImpl#addPosition(int,BytesRef).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload) throws IOException {\n    assert !omitTermFreqAndPositions: \"omitTermFreqAndPositions is true\";\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta > 0 || position == 0 || position == -1: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}