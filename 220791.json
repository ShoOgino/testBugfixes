{"path":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","commits":[{"id":"f7e7599efe704cd8a873a909e546525ace4b5502","date":1491388304,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ClusterStateMockUtil.Result result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    result.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    result.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ClusterStateMockUtil.Result result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    result.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    result.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","sourceNew":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    reader.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ClusterStateMockUtil.Result result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    result.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    result.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","sourceNew":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    reader.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ClusterStateMockUtil.Result result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    result.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    result.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","sourceNew":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    reader.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ClusterStateMockUtil.Result result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    result.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    result = ClusterStateMockUtil.buildClusterState(null, \"csrr2rD*csr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = result.reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    result.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/NodeMutatorTest#downNodeReportsAllImpactedCollectionsAndNothingElse().mjava","sourceNew":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2\", 1, NODE1, NODE2);\n    ClusterState clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    reader.close();\n\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2csr1r2r3\", 1, NODE1, NODE2, NODE3);\n    clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  @Test\n  public void downNodeReportsAllImpactedCollectionsAndNothingElse() throws IOException {\n    NodeMutator nm = new NodeMutator();\n\n    //We use 2 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    ZkStateReader reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2\", 1, 1, NODE1, NODE2);\n    ClusterState clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    ZkNodeProps props = new ZkNodeProps(ZkStateReader.NODE_NAME_PROP, NODE1);\n    List<ZkWriteCommand> writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 1);\n    assertEquals(writes.get(0).name, \"collection1\");\n    assertEquals(writes.get(0).collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n    assertEquals(writes.get(0).collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n    reader.close();\n\n    //We use 3 nodes with maxShardsPerNode as 1\n    //Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2\n    //Collection2: 1 shard X 1 replica = replica1 on node2\n    //Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3\n    reader = ClusterStateMockUtil.buildClusterState(\"csrr2rDcsr2csr1r2r3\", 1, 1, NODE1, NODE2, NODE3);\n    clusterState = reader.getClusterState();\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica1\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection1\").getReplica(\"replica2\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection2\").getReplica(\"replica4\").getBaseUrl(), NODE2_URL);\n\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica5\").getBaseUrl(), NODE1_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica6\").getBaseUrl(), NODE2_URL);\n    assertEquals(clusterState.getCollection(\"collection3\").getReplica(\"replica7\").getBaseUrl(), NODE3_URL);\n\n    writes = nm.downNode(clusterState, props);\n    assertEquals(writes.size(), 2);\n    for (ZkWriteCommand write : writes) {\n      if (write.name.equals(\"collection1\")) {\n        assertEquals(write.collection.getReplica(\"replica1\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica2\").getState(), Replica.State.ACTIVE);\n      } else if (write.name.equals(\"collection3\")) {\n        assertEquals(write.collection.getReplica(\"replica5\").getState(), Replica.State.DOWN);\n        assertEquals(write.collection.getReplica(\"replica6\").getState(), Replica.State.ACTIVE);\n        assertEquals(write.collection.getReplica(\"replica7\").getState(), Replica.State.ACTIVE);\n      } else {\n        fail(\"No other collection needs to be changed\");\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["f7e7599efe704cd8a873a909e546525ace4b5502","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["f7e7599efe704cd8a873a909e546525ace4b5502","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"f7e7599efe704cd8a873a909e546525ace4b5502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f7e7599efe704cd8a873a909e546525ace4b5502"],"560c18d71dad43d675158783c3840f8c80d6d39c":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7e7599efe704cd8a873a909e546525ace4b5502":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}