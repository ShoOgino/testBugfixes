{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#tooLargeForGetRequest().mjava","commits":[{"id":"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63","date":1544462572,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#tooLargeForGetRequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void tooLargeForGetRequest() throws IOException, SolrServerException {\n    // Test expressions which are larger than GET can handle\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n    for(int i=1; i<=50; i++) {\n      updateRequest.add(id, \"id_\"+(i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrClientCache cache = new SolrClientCache();\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(cache);\n    String longQuery = \"\\\"id:(\" + IntStream.range(0, 4000).mapToObj(i -> \"a\").collect(Collectors.joining(\" \", \"\", \"\")) + \")\\\"\";\n        \n    try {\n      assertSuccess(\"significantTerms(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\", streamContext);\n      String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n              \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n              \"gap=\\\"+1YEAR\\\", \" +\n              \"field=\\\"test_dt\\\", \" +\n              \"format=\\\"yyyy\\\", \" +\n              \"count(*), sum(price_f), max(price_f), min(price_f))\";\n      assertSuccess(expr, streamContext);\n      expr = \"facet(\"\n                    +   \"collection1, \"\n                    +   \"q=\"+longQuery+\", \"\n                    +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n                    +   \"sort=\\\"a_s asc\\\", \"\n                    +   \"buckets=\\\"a_s\\\", \"\n                    +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                    +   \"bucketSizeLimit=100, \"\n                    +   \"sum(a_i), sum(a_f), \"\n                    +   \"min(a_i), min(a_f), \"\n                    +   \"max(a_i), max(a_f), \"\n                    +   \"avg(a_i), avg(a_f), \"\n                    +   \"count(*)\"\n                    + \")\";\n      assertSuccess(expr, streamContext);\n      expr = \"stats(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\"; \n      assertSuccess(expr, streamContext);\n      expr = \"search(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\";\n      assertSuccess(expr, streamContext);\n      expr = \"random(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\";\n      assertSuccess(expr, streamContext);\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#tooLargeForGetRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#tooLargeForGetRequest().mjava","sourceNew":"  @Test\n  public void tooLargeForGetRequest() throws IOException, SolrServerException {\n    // Test expressions which are larger than GET can handle\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n    for(int i=1; i<=50; i++) {\n      updateRequest.add(id, \"id_\"+(i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrClientCache cache = new SolrClientCache();\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(cache);\n    String longQuery = \"\\\"id:(\" + IntStream.range(0, 4000).mapToObj(i -> \"a\").collect(Collectors.joining(\" \", \"\", \"\")) + \")\\\"\";\n\n    try {\n      assertSuccess(\"significantTerms(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\", streamContext);\n      String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n              \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n              \"gap=\\\"+1YEAR\\\", \" +\n              \"field=\\\"test_dt\\\", \" +\n              \"format=\\\"yyyy\\\", \" +\n              \"count(*), sum(price_f), max(price_f), min(price_f))\";\n      assertSuccess(expr, streamContext);\n      expr = \"facet(\"\n                    +   \"collection1, \"\n                    +   \"q=\"+longQuery+\", \"\n                    +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n                    +   \"sort=\\\"a_s asc\\\", \"\n                    +   \"buckets=\\\"a_s\\\", \"\n                    +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                    +   \"bucketSizeLimit=100, \"\n                    +   \"sum(a_i), sum(a_f), \"\n                    +   \"min(a_i), min(a_f), \"\n                    +   \"max(a_i), max(a_f), \"\n                    +   \"avg(a_i), avg(a_f), \"\n                    +   \"count(*)\"\n                    + \")\";\n      assertSuccess(expr, streamContext);\n      expr = \"stats(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      assertSuccess(expr, streamContext);\n      expr = \"search(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\";\n      assertSuccess(expr, streamContext);\n      expr = \"random(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\";\n      assertSuccess(expr, streamContext);\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void tooLargeForGetRequest() throws IOException, SolrServerException {\n    // Test expressions which are larger than GET can handle\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n    for(int i=1; i<=50; i++) {\n      updateRequest.add(id, \"id_\"+(i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrClientCache cache = new SolrClientCache();\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(cache);\n    String longQuery = \"\\\"id:(\" + IntStream.range(0, 4000).mapToObj(i -> \"a\").collect(Collectors.joining(\" \", \"\", \"\")) + \")\\\"\";\n        \n    try {\n      assertSuccess(\"significantTerms(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\", streamContext);\n      String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n              \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n              \"gap=\\\"+1YEAR\\\", \" +\n              \"field=\\\"test_dt\\\", \" +\n              \"format=\\\"yyyy\\\", \" +\n              \"count(*), sum(price_f), max(price_f), min(price_f))\";\n      assertSuccess(expr, streamContext);\n      expr = \"facet(\"\n                    +   \"collection1, \"\n                    +   \"q=\"+longQuery+\", \"\n                    +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n                    +   \"sort=\\\"a_s asc\\\", \"\n                    +   \"buckets=\\\"a_s\\\", \"\n                    +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                    +   \"bucketSizeLimit=100, \"\n                    +   \"sum(a_i), sum(a_f), \"\n                    +   \"min(a_i), min(a_f), \"\n                    +   \"max(a_i), max(a_f), \"\n                    +   \"avg(a_i), avg(a_f), \"\n                    +   \"count(*)\"\n                    + \")\";\n      assertSuccess(expr, streamContext);\n      expr = \"stats(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\"; \n      assertSuccess(expr, streamContext);\n      expr = \"search(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\";\n      assertSuccess(expr, streamContext);\n      expr = \"random(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\";\n      assertSuccess(expr, streamContext);\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2be0a2886c76942ff986465eabde7b858895dc9","date":1555349228,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#tooLargeForGetRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#tooLargeForGetRequest().mjava","sourceNew":"  @Test\n  public void tooLargeForGetRequest() throws IOException, SolrServerException {\n    // Test expressions which are larger than GET can handle\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n    for(int i=1; i<=50; i++) {\n      updateRequest.add(id, \"id_\"+(i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrClientCache cache = new SolrClientCache();\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(cache);\n    // use filter() to allow being parsed as 'terms in set' query instead of a (weighted/scored) BooleanQuery\n    // so we don't trip too many boolean clauses\n    String longQuery = \"\\\"filter(id:(\" + IntStream.range(0, 4000).mapToObj(i -> \"a\").collect(Collectors.joining(\" \", \"\", \"\")) + \"))\\\"\";\n\n    try {\n      assertSuccess(\"significantTerms(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\", streamContext);\n      String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n              \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n              \"gap=\\\"+1YEAR\\\", \" +\n              \"field=\\\"test_dt\\\", \" +\n              \"format=\\\"yyyy\\\", \" +\n              \"count(*), sum(price_f), max(price_f), min(price_f))\";\n      assertSuccess(expr, streamContext);\n      expr = \"facet(\"\n                    +   \"collection1, \"\n                    +   \"q=\"+longQuery+\", \"\n                    +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n                    +   \"sort=\\\"a_s asc\\\", \"\n                    +   \"buckets=\\\"a_s\\\", \"\n                    +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                    +   \"bucketSizeLimit=100, \"\n                    +   \"sum(a_i), sum(a_f), \"\n                    +   \"min(a_i), min(a_f), \"\n                    +   \"max(a_i), max(a_f), \"\n                    +   \"avg(a_i), avg(a_f), \"\n                    +   \"count(*)\"\n                    + \")\";\n      assertSuccess(expr, streamContext);\n      expr = \"stats(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      assertSuccess(expr, streamContext);\n      expr = \"search(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\";\n      assertSuccess(expr, streamContext);\n      expr = \"random(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\";\n      assertSuccess(expr, streamContext);\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void tooLargeForGetRequest() throws IOException, SolrServerException {\n    // Test expressions which are larger than GET can handle\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 10; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n    for(int i=1; i<=50; i++) {\n      updateRequest.add(id, \"id_\"+(i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrClientCache cache = new SolrClientCache();\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(cache);\n    String longQuery = \"\\\"id:(\" + IntStream.range(0, 4000).mapToObj(i -> \"a\").collect(Collectors.joining(\" \", \"\", \"\")) + \")\\\"\";\n\n    try {\n      assertSuccess(\"significantTerms(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\", streamContext);\n      String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\"+longQuery+\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n              \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n              \"gap=\\\"+1YEAR\\\", \" +\n              \"field=\\\"test_dt\\\", \" +\n              \"format=\\\"yyyy\\\", \" +\n              \"count(*), sum(price_f), max(price_f), min(price_f))\";\n      assertSuccess(expr, streamContext);\n      expr = \"facet(\"\n                    +   \"collection1, \"\n                    +   \"q=\"+longQuery+\", \"\n                    +   \"fl=\\\"a_s,a_i,a_f\\\", \"\n                    +   \"sort=\\\"a_s asc\\\", \"\n                    +   \"buckets=\\\"a_s\\\", \"\n                    +   \"bucketSorts=\\\"sum(a_i) asc\\\", \"\n                    +   \"bucketSizeLimit=100, \"\n                    +   \"sum(a_i), sum(a_f), \"\n                    +   \"min(a_i), min(a_f), \"\n                    +   \"max(a_i), max(a_f), \"\n                    +   \"avg(a_i), avg(a_f), \"\n                    +   \"count(*)\"\n                    + \")\";\n      assertSuccess(expr, streamContext);\n      expr = \"stats(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))\";\n      assertSuccess(expr, streamContext);\n      expr = \"search(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\")\";\n      assertSuccess(expr, streamContext);\n      expr = \"random(\" + COLLECTIONORALIAS + \", q=\"+longQuery+\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\";\n      assertSuccess(expr, streamContext);\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2be0a2886c76942ff986465eabde7b858895dc9":["a0370d6fb5289875090a50a9d0887ee584fed440"],"a0370d6fb5289875090a50a9d0887ee584fed440":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a2be0a2886c76942ff986465eabde7b858895dc9"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a2be0a2886c76942ff986465eabde7b858895dc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0370d6fb5289875090a50a9d0887ee584fed440":["a2be0a2886c76942ff986465eabde7b858895dc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c517f0a79ad9bb05bd316925c6cd35f1ca96ae63"],"c517f0a79ad9bb05bd316925c6cd35f1ca96ae63":["a0370d6fb5289875090a50a9d0887ee584fed440"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}