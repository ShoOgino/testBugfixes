{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","commits":[{"id":"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","date":1493894873,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#test().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = new HashMap<>();\n    props.put(\"event\", \"nodeLost\");\n    long waitForSeconds = 1 + random().nextInt(5);\n    props.put(\"waitFor\", waitForSeconds);\n    props.put(\"enabled\", true);\n    List<Map<String, String>> actions = new ArrayList<>(3);\n    Map<String, String> map = new HashMap<>(2);\n    map.put(\"name\", \"compute_plan\");\n    map.put(\"class\", \"solr.ComputePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"execute_plan\");\n    map.put(\"class\", \"solr.ExecutePlanAction\");\n    actions.add(map);\n    map = new HashMap<>(2);\n    map.put(\"name\", \"log_plan\");\n    map.put(\"class\", \"solr.LogPlanAction\");\n    actions.add(map);\n    props.put(\"actions\", actions);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"009caa80830ac6369c42e5f6515405d686eabfee","date":1494487120,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(event -> fail(\"Did not expect the listener to fire on first run!\"));\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<NodeAddedTrigger.NodeAddedEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getNodeName());\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40bc8c0d06a69d0a0a517b3fe6a10b0d4d1338c","date":1495967532,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          if (timeSource.getTime() - event.getEventTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period\");\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26c61d5a7f832d4eb353313f88198c8f6fd0dc67","date":1495985871,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS);\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setListener(noFirstRunListener);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setListener(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      \n      cluster.waitForAllNodes(30);\n      \n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc201e01d035a7370848d9d2451e0e27ee77df2e","date":1544724144,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      \n      cluster.waitForAllNodes(30);\n      \n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      \n      cluster.waitForAllNodes(30);\n      \n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger1\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      \n      cluster.waitForAllNodes(30);\n      \n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // clean nodeAdded markers - normally done by OverseerTriggerThread\n    container.getZkController().getSolrCloudManager().getDistribStateManager()\n        .removeRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, true, false);\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger2\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      \n      cluster.waitForAllNodes(30);\n      \n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger1\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      \n      cluster.waitForAllNodes(30);\n      \n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      @SuppressWarnings({\"unchecked\"})\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // clean nodeAdded markers - normally done by OverseerTriggerThread\n    container.getZkController().getSolrCloudManager().getDistribStateManager()\n        .removeRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, true, false);\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger2\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger1\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      \n      cluster.waitForAllNodes(30);\n      \n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // clean nodeAdded markers - normally done by OverseerTriggerThread\n    container.getZkController().getSolrCloudManager().getDistribStateManager()\n        .removeRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, true, false);\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger2\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testTrigger().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger1\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode1 = cluster.startJettySolrRunner();\n      JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n      \n      cluster.waitForAllNodes(30);\n      \n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"processor was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      @SuppressWarnings({\"unchecked\"})\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1.getNodeName()));\n      assertTrue(nodeNames.contains(newNode2.getNodeName()));\n    }\n\n    // clean nodeAdded markers - normally done by OverseerTriggerThread\n    container.getZkController().getSolrCloudManager().getDistribStateManager()\n        .removeRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH, true, false);\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger2\")) {\n      final SolrCloudManager cloudManager = container.getZkController().getSolrCloudManager();\n      trigger.configure(container.getResourceLoader(), cloudManager, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      JettySolrRunner newNode = cluster.startJettySolrRunner();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = cloudManager.getTimeSource().getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      newNode.stop(); // stop the new jetty\n      int counter = 0;\n      do {\n        trigger.run();\n        Thread.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c5fd294da67452cd8d116692194908de00eb5209"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"009caa80830ac6369c42e5f6515405d686eabfee":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"d40bc8c0d06a69d0a0a517b3fe6a10b0d4d1338c":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"26c61d5a7f832d4eb353313f88198c8f6fd0dc67":["d40bc8c0d06a69d0a0a517b3fe6a10b0d4d1338c"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["009caa80830ac6369c42e5f6515405d686eabfee","464244264804e3f981bf1fb4b732516d8d62dbc2"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"c5fd294da67452cd8d116692194908de00eb5209":["26c61d5a7f832d4eb353313f88198c8f6fd0dc67"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["009caa80830ac6369c42e5f6515405d686eabfee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["009caa80830ac6369c42e5f6515405d686eabfee"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["bc201e01d035a7370848d9d2451e0e27ee77df2e"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"009caa80830ac6369c42e5f6515405d686eabfee":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","560c18d71dad43d675158783c3840f8c80d6d39c"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"d40bc8c0d06a69d0a0a517b3fe6a10b0d4d1338c":["26c61d5a7f832d4eb353313f88198c8f6fd0dc67"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"bc201e01d035a7370848d9d2451e0e27ee77df2e":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["d40bc8c0d06a69d0a0a517b3fe6a10b0d4d1338c"],"26c61d5a7f832d4eb353313f88198c8f6fd0dc67":["c5fd294da67452cd8d116692194908de00eb5209"],"c5fd294da67452cd8d116692194908de00eb5209":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}