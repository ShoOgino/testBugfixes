{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","commits":[{"id":"ee545e24d7448c1c28710f34a22e32bd1d7cf83b","date":1252329121,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    Assert.assertEquals(l, new HashSet<String>(fList));\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    Assert.assertEquals(l, new HashSet<String>(fList));\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", AbstractDataImportHandlerTest.createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    Assert.assertEquals(l, new HashSet<String>(fList));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testBiggerSmallerFiles().mjava","sourceNew":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    Assert.assertEquals(l, new HashSet<String>(fList));\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    Assert.assertEquals(l, new HashSet<String>(fList));\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", AbstractDataImportHandlerTest.createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    Assert.assertEquals(l, new HashSet<String>(fList));\n  }\n\n","sourceOld":"  @Test\n  public void testBiggerSmallerFiles() throws IOException {\n    long time = System.currentTimeMillis();\n    File tmpdir = new File(\".\" + time);\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    long minLength = Long.MAX_VALUE;\n    String smallestFile = \"\";\n    byte[] content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"a.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"a.xml\";\n    }\n    content = \"abcdefgij\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"b.xml\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"b.xml\";\n    }\n    content = \"abc\".getBytes(\"UTF-8\");\n    createFile(tmpdir, \"c.props\", content, false);\n    if (minLength > content.length) {\n      minLength = content.length;\n      smallestFile = \"c.props\";\n    }\n    Map attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.BIGGER_THAN, String.valueOf(minLength));\n    List<String> fList = getFiles(null, attrs);\n    Assert.assertEquals(2, fList.size());\n    Set<String> l = new HashSet<String>();\n    l.add(new File(tmpdir, \"a.xml\").getAbsolutePath());\n    l.add(new File(tmpdir, \"b.xml\").getAbsolutePath());\n    Assert.assertEquals(l, new HashSet<String>(fList));\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, String.valueOf(minLength+1));\n    fList = getFiles(null, attrs);\n    l.clear();\n    l.add(new File(tmpdir, smallestFile).getAbsolutePath());\n    Assert.assertEquals(l, new HashSet<String>(fList));\n    attrs = AbstractDataImportHandlerTest.createMap(\n            FileListEntityProcessor.FILE_NAME, \".*\",\n            FileListEntityProcessor.BASE_DIR, tmpdir.getAbsolutePath(),\n            FileListEntityProcessor.SMALLER_THAN, \"${a.x}\");\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"a\", AbstractDataImportHandlerTest.createMap(\"x\", \"4\"));\n    fList = getFiles(resolver, attrs);\n    Assert.assertEquals(l, new HashSet<String>(fList));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee545e24d7448c1c28710f34a22e32bd1d7cf83b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ee545e24d7448c1c28710f34a22e32bd1d7cf83b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ee545e24d7448c1c28710f34a22e32bd1d7cf83b":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ee545e24d7448c1c28710f34a22e32bd1d7cf83b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}