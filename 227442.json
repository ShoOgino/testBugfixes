{"path":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    final protected boolean termCompare(Term term) {\n        if (field == term.field()) {\n            String target = term.text();\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            distance = 1 - ((double)dist / (double)Math.min(textlen, targetlen));\n            return (distance > FUZZY_THRESHOLD);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ae70812bc33b0270c1366378b2c2da95fe86a6","date":1036648540,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","sourceNew":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        if (field == term.field()) {\n            String target = term.text();\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            distance = 1 - ((double)dist / (double)Math.min(textlen, targetlen));\n            return (distance > FUZZY_THRESHOLD);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","sourceOld":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    final protected boolean termCompare(Term term) {\n        if (field == term.field()) {\n            String target = term.text();\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            distance = 1 - ((double)dist / (double)Math.min(textlen, targetlen));\n            return (distance > FUZZY_THRESHOLD);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16787e95e3c32c394cf5195e223e39ff5cbda3a","date":1092422102,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","sourceNew":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        if (field == term.field()) {\n            String target = term.text();\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            distance = 1 - ((double)dist / (double)Math.min(textlen, targetlen));\n            return (distance > minimumSimilarity);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","sourceOld":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        if (field == term.field()) {\n            String target = term.text();\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            distance = 1 - ((double)dist / (double)Math.min(textlen, targetlen));\n            return (distance > FUZZY_THRESHOLD);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51d06e615dc831227c94b4b16cdd5763692d2d4","date":1095169515,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","sourceNew":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        String termText = term.text();\n        if (field == term.field() && termText.startsWith(prefix)) {\n            String target = termText.substring(prefixLength);\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            distance = 1 - ((double)dist / (double)Math.min(textlen, targetlen));\n            return (distance > minimumSimilarity);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","sourceOld":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        if (field == term.field()) {\n            String target = term.text();\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            distance = 1 - ((double)dist / (double)Math.min(textlen, targetlen));\n            return (distance > minimumSimilarity);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2b17f10a0d622e1a8082a94957764dad150530","date":1097079592,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","sourceNew":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        String termText = term.text();\n        if (field == term.field() && termText.startsWith(prefix)) {\n            String target = termText.substring(prefixLength);\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            similarity = 1 - ((float)dist / (float) (prefixLength + Math.min(textlen, targetlen)));\n            return (similarity > minimumSimilarity);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","sourceOld":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        String termText = term.text();\n        if (field == term.field() && termText.startsWith(prefix)) {\n            String target = termText.substring(prefixLength);\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            distance = 1 - ((double)dist / (double)Math.min(textlen, targetlen));\n            return (distance > minimumSimilarity);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3af9908203648fa4313aca6c4913cb4864014bb","date":1099870044,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","sourceNew":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        if (field == term.field() && term.text().startsWith(prefix)) {\n            final String target = term.text().substring(prefix.length());\n            this.similarity = similarity(target);\n            return (similarity > minimumSimilarity);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","sourceOld":"    /**\n     The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        String termText = term.text();\n        if (field == term.field() && termText.startsWith(prefix)) {\n            String target = termText.substring(prefixLength);\n            int targetlen = target.length();\n            int dist = editDistance(text, target, textlen, targetlen);\n            similarity = 1 - ((float)dist / (float) (prefixLength + Math.min(textlen, targetlen)));\n            return (similarity > minimumSimilarity);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a070f32444fce25dc4bd4cd63d856282e1498e","date":1099870910,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","sourceNew":"  /**\n   * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n   * calculate the distance between the given term and the comparing term. \n   */\n  protected final boolean termCompare(Term term) {\n    if (field == term.field() && term.text().startsWith(prefix)) {\n        final String target = term.text().substring(prefix.length());\n        this.similarity = similarity(target);\n        return (similarity > minimumSimilarity);\n    }\n    endEnum = true;\n    return false;\n  }\n\n","sourceOld":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    protected final boolean termCompare(Term term) {\n        if (field == term.field() && term.text().startsWith(prefix)) {\n            final String target = term.text().substring(prefix.length());\n            this.similarity = similarity(target);\n            return (similarity > minimumSimilarity);\n        }\n        endEnum = true;\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","sourceNew":"  /**\n   * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n   * calculate the distance between the given term and the comparing term. \n   */\n  @Override\n  protected final boolean termCompare(Term term) {\n    if (field == term.field() && term.text().startsWith(prefix)) {\n        final String target = term.text().substring(prefix.length());\n        this.similarity = similarity(target);\n        return (similarity > minimumSimilarity);\n    }\n    endEnum = true;\n    return false;\n  }\n\n","sourceOld":"  /**\n   * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n   * calculate the distance between the given term and the comparing term. \n   */\n  protected final boolean termCompare(Term term) {\n    if (field == term.field() && term.text().startsWith(prefix)) {\n        final String target = term.text().substring(prefix.length());\n        this.similarity = similarity(target);\n        return (similarity > minimumSimilarity);\n    }\n    endEnum = true;\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#termCompare(Term).mjava","sourceNew":"  /**\n   * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n   * calculate the distance between the given term and the comparing term. \n   */\n  @Override\n  protected final boolean termCompare(Term term) {\n    if (field == term.field() && term.text().startsWith(prefix)) {\n        final String target = term.text().substring(prefix.length());\n        this.similarity = similarity(target);\n        return (similarity > minimumSimilarity);\n    }\n    endEnum = true;\n    return false;\n  }\n\n","sourceOld":"  /**\n   * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n   * calculate the distance between the given term and the comparing term. \n   */\n  @Override\n  protected final boolean termCompare(Term term) {\n    if (field == term.field() && term.text().startsWith(prefix)) {\n        final String target = term.text().substring(prefix.length());\n        this.similarity = similarity(target);\n        return (similarity > minimumSimilarity);\n    }\n    endEnum = true;\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d2b17f10a0d622e1a8082a94957764dad150530":["b51d06e615dc831227c94b4b16cdd5763692d2d4"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"49a070f32444fce25dc4bd4cd63d856282e1498e":["b3af9908203648fa4313aca6c4913cb4864014bb"],"8a9e385641d717e641408d8fbbc62be8fc766357":["49a070f32444fce25dc4bd4cd63d856282e1498e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b51d06e615dc831227c94b4b16cdd5763692d2d4":["c16787e95e3c32c394cf5195e223e39ff5cbda3a"],"c16787e95e3c32c394cf5195e223e39ff5cbda3a":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"b3af9908203648fa4313aca6c4913cb4864014bb":["6d2b17f10a0d622e1a8082a94957764dad150530"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"6d2b17f10a0d622e1a8082a94957764dad150530":["b3af9908203648fa4313aca6c4913cb4864014bb"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"49a070f32444fce25dc4bd4cd63d856282e1498e":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b51d06e615dc831227c94b4b16cdd5763692d2d4":["6d2b17f10a0d622e1a8082a94957764dad150530"],"c16787e95e3c32c394cf5195e223e39ff5cbda3a":["b51d06e615dc831227c94b4b16cdd5763692d2d4"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["c16787e95e3c32c394cf5195e223e39ff5cbda3a"],"b3af9908203648fa4313aca6c4913cb4864014bb":["49a070f32444fce25dc4bd4cd63d856282e1498e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}