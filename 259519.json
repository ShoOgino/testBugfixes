{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + RUN_TIME_MSEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + RUN_TIME_MSEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + RUN_TIME_MSEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + 1000*RUN_TIME_SEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing.TimedThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + RUN_TIME_MSEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      final long stopTime = System.currentTimeMillis() + RUN_TIME_MSEC;\n\n      count = 0;\n\n      try {\n        do {\n          if (anyErrors()) break;\n          doWork();\n          count++;\n        } while(System.currentTimeMillis() < stopTime);\n      } catch (Throwable e) {\n        System.out.println(Thread.currentThread() + \": exc\");\n        e.printStackTrace(System.out);\n        failed = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["9454a6510e2db155fb01faa5c049b06ece95fab9","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["9454a6510e2db155fb01faa5c049b06ece95fab9","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}