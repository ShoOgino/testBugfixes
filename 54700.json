{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        long block = ord >>> INTERVAL_SHIFT;\n        if (block != currentOrd >>> INTERVAL_SHIFT) {\n          // switch to different block\n          input.seek(addresses.get(block));\n          readHeader();\n        }\n        \n        currentOrd = ord;\n        \n        int offset = (int) (ord & INTERVAL_MASK);\n        if (offset == 0) {\n          readFirstTerm();\n        } else {\n          input.seek(currentBlockStart + offsets[offset-1]);\n          readTerm(offset);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}