{"path":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","pathOld":"modules/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","sourceNew":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84ab9fb766b354a9a9f16580a1162aac7ebbfc51","date":1340868936,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","sourceNew":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagsAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","sourceNew":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagsAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b081c0897be4656f83148f8ddc8143488f6bd6f","date":1372847443,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","sourceNew":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (!keywordAttr.isKeyword() && \n          (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt)))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagsAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagsAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["c9372469b09ed273740e18f76520c99aa075358b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilter#incrementToken().mjava","sourceNew":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (!keywordAttr.isKeyword() && \n          (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt)))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagsAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /** Retrieves the next token (possibly from the list of lemmas). */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (lemmaListIndex < lemmaList.size()) {\n      restoreState(current);\n      posIncrAtt.setPositionIncrement(0);\n      popNextLemma();\n      return true;\n    } else if (this.input.incrementToken()) {\n      if (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt))) {\n        current = captureState();\n        popNextLemma();\n      } else {\n        tagsAtt.clear();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["84ab9fb766b354a9a9f16580a1162aac7ebbfc51","8b081c0897be4656f83148f8ddc8143488f6bd6f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","84ab9fb766b354a9a9f16580a1162aac7ebbfc51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84ab9fb766b354a9a9f16580a1162aac7ebbfc51":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8b081c0897be4656f83148f8ddc8143488f6bd6f":["84ab9fb766b354a9a9f16580a1162aac7ebbfc51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b081c0897be4656f83148f8ddc8143488f6bd6f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","84ab9fb766b354a9a9f16580a1162aac7ebbfc51"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"84ab9fb766b354a9a9f16580a1162aac7ebbfc51":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","8b081c0897be4656f83148f8ddc8143488f6bd6f"],"8b081c0897be4656f83148f8ddc8143488f6bd6f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}