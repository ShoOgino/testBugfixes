{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(FirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(FirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> SecondPassGroupingCollector<T> createSecondPassCollector(FirstPassGroupingCollector firstPassGroupingCollector,\n                                                                       String groupField,\n                                                                       Sort groupSort,\n                                                                       Sort sortWithinGroup,\n                                                                       int groupOffset,\n                                                                       int maxDocsPerGroup,\n                                                                       boolean getScores,\n                                                                       boolean getMaxScores,\n                                                                       boolean fillSortFields) throws IOException {\n\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (SecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (SecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(FirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> SecondPassGroupingCollector<T> createSecondPassCollector(FirstPassGroupingCollector firstPassGroupingCollector,\n                                                                       String groupField,\n                                                                       Sort groupSort,\n                                                                       Sort sortWithinGroup,\n                                                                       int groupOffset,\n                                                                       int maxDocsPerGroup,\n                                                                       boolean getScores,\n                                                                       boolean getMaxScores,\n                                                                       boolean fillSortFields) throws IOException {\n\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (SecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (SecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(FirstPassGroupingCollector,Sort,Sort,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(FirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> TopGroupsCollector<T> createSecondPassCollector(FirstPassGroupingCollector firstPassGroupingCollector,\n                                                                       Sort groupSort,\n                                                                       Sort sortWithinGroup,\n                                                                       int groupOffset,\n                                                                       int maxDocsPerGroup,\n                                                                       boolean getScores,\n                                                                       boolean getMaxScores,\n                                                                       boolean fillSortFields) throws IOException {\n\n    Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n    return new TopGroupsCollector<>(firstPassGroupingCollector.getGroupSelector(), searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> SecondPassGroupingCollector<T> createSecondPassCollector(FirstPassGroupingCollector firstPassGroupingCollector,\n                                                                       String groupField,\n                                                                       Sort groupSort,\n                                                                       Sort sortWithinGroup,\n                                                                       int groupOffset,\n                                                                       int maxDocsPerGroup,\n                                                                       boolean getScores,\n                                                                       boolean getMaxScores,\n                                                                       boolean fillSortFields) throws IOException {\n\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (SecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (SecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(FirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> SecondPassGroupingCollector<T> createSecondPassCollector(FirstPassGroupingCollector firstPassGroupingCollector,\n                                                                       String groupField,\n                                                                       Sort groupSort,\n                                                                       Sort sortWithinGroup,\n                                                                       int groupOffset,\n                                                                       int maxDocsPerGroup,\n                                                                       boolean getScores,\n                                                                       boolean getMaxScores,\n                                                                       boolean fillSortFields) throws IOException {\n\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (SecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (SecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}