{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","sourceNew":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","sourceOld":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","sourceNew":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","sourceOld":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}