{"path":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","commits":[{"id":"9b637fb447c5b4257f6b4532d84ca91e456c1f2a","date":1352405059,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, NumericDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      consumer.add(pending.get(docID));\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ad1376d356a33e10b3b9b95708ddc83252499a6","date":1353008654,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","sourceNew":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, NumericDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n\n    AppendingLongBuffer.Iterator it = pending.iterator();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      assert it.hasNext();\n      consumer.add(it.next());\n    }\n    assert !it.hasNext();\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, NumericDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      consumer.add(pending.get(docID));\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","sourceNew":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, NumericDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n\n    AppendingLongBuffer.Iterator it = pending.iterator();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      assert it.hasNext();\n      consumer.add(it.next());\n    }\n    assert !it.hasNext();\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, NumericDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n\n    AppendingLongBuffer.Iterator it = pending.iterator();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      assert it.hasNext();\n      consumer.add(it.next());\n    }\n    assert !it.hasNext();\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6295f14d43685811599f8a8f02a63d75ec6bd8fe","date":1353248103,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","sourceNew":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, NumericDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n\n    AppendingLongBuffer.Iterator it = pending.iterator();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      assert it.hasNext();\n      long v = it.next();\n      consumer.add(v);\n    }\n    assert !it.hasNext();\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, NumericDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n\n    AppendingLongBuffer.Iterator it = pending.iterator();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      assert it.hasNext();\n      consumer.add(it.next());\n    }\n    assert !it.hasNext();\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumberDVWriter#flush(FieldInfo,SegmentWriteState,NumericDocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    NumericDocValuesConsumer consumer = dvConsumer.addNumericField(fieldInfo, minValue, maxValue);\n    final int bufferedDocCount = pending.size();\n\n    AppendingLongBuffer.Iterator it = pending.iterator();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      assert it.hasNext();\n      long v = it.next();\n      consumer.add(v);\n    }\n    assert !it.hasNext();\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, NumericDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n\n    AppendingLongBuffer.Iterator it = pending.iterator();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      assert it.hasNext();\n      long v = it.next();\n      consumer.add(v);\n    }\n    assert !it.hasNext();\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(0);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ad1376d356a33e10b3b9b95708ddc83252499a6":["9b637fb447c5b4257f6b4532d84ca91e456c1f2a"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["7ad1376d356a33e10b3b9b95708ddc83252499a6"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"9b637fb447c5b4257f6b4532d84ca91e456c1f2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ad1376d356a33e10b3b9b95708ddc83252499a6":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"ce73f585d17f53055185a19beb46db23d76e0ad9":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b637fb447c5b4257f6b4532d84ca91e456c1f2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":[],"9b637fb447c5b4257f6b4532d84ca91e456c1f2a":["7ad1376d356a33e10b3b9b95708ddc83252499a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}