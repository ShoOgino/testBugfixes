{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"827a82bc4dd5d485dbe63f69e8429ecff24cb602","date":1485435575,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.apply(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.apply(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee49d43fb47965f24d4ad89e7a1bdcc10410d615","date":1485765906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.apply(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.apply(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      private final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        final SortedNumericDocValues values = context.reader().getSortedNumericDocValues(field);\n        if (values == null) {\n          return null;\n        }\n\n        final TwoPhaseIterator iterator = new TwoPhaseIterator(values) {\n\n          @Override\n          public boolean matches() throws IOException {\n            for (int i = 0, count = values.docValueCount(); i < count; ++i) {\n              final long value = values.nextValue();\n              final int lat = (int) (value >>> 32);\n              final int lon = (int) (value & 0xFFFFFFFF);\n              if (distancePredicate.test(lat, lon)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public float matchCost() {\n            return 100f; // TODO: what should it be?\n          }\n\n        };\n        return new ConstantScoreScorer(this, boost, iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["598b5d23aa7c9732bf473c21a9cd309c44599394","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["598b5d23aa7c9732bf473c21a9cd309c44599394","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["598b5d23aa7c9732bf473c21a9cd309c44599394","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}