{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(FNX_VERSION);\n    infos.setGlobalFieldMapVersion(Long.parseLong(readString(FNX_VERSION.length, scratch)));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert scratch.startsWith(USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert scratch.startsWith(USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","sourceNew":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, FNX_VERSION);\n    infos.setGlobalFieldMapVersion(Long.parseLong(readString(FNX_VERSION.length, scratch)));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(FNX_VERSION);\n    infos.setGlobalFieldMapVersion(Long.parseLong(readString(FNX_VERSION.length, scratch)));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert scratch.startsWith(USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert scratch.startsWith(USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert scratch.startsWith(NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","sourceNew":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, FNX_VERSION);\n    infos.setGlobalFieldMapVersion(Long.parseLong(readString(FNX_VERSION.length, scratch)));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","sourceNew":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"319624eb66a10b717d3e66af448543e7dc5c479d":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["319624eb66a10b717d3e66af448543e7dc5c479d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["319624eb66a10b717d3e66af448543e7dc5c479d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"319624eb66a10b717d3e66af448543e7dc5c479d":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}