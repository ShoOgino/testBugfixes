{"path":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","commits":[{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"/dev/null","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    Field f1 = newField(\"f1\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f3);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f4.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f5.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f6.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f6);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f7.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f8.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f9.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.optimize();\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f4.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f7.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f5.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f8.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f6.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f9.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.optimize();\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    Field f1 = newField(\"f1\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f3.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f3);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f4.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f5.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f6.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f6);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f7.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f8.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f9.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.optimize();\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f4.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", Field.Store.NO, Field.Index.ANALYZED);\n    f7.setIndexOptions(IndexOptions.DOCS_ONLY);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f5.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f8.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f6.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", Field.Store.NO, Field.Index.ANALYZED);\n    f9.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.optimize();\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.fieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testPositions().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testPositions() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n        \n    // f1,f2,f3: docs only\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    Field f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n       \n    Field f2 = newField(\"f2\", \"This field has docs only\", ft);\n    d.add(f2);\n    \n    Field f3 = newField(\"f3\", \"This field has docs only\", ft);\n    d.add(f3);\n\n    FieldType ft2 = new FieldType(TextField.TYPE_UNSTORED);\n    ft2.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    // f4,f5,f6 docs and freqs\n    Field f4 = newField(\"f4\", \"This field has docs and freqs\", ft2);\n    d.add(f4);\n       \n    Field f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    Field f6 = newField(\"f6\", \"This field has docs and freqs\", ft2);\n    d.add(f6);\n    \n    FieldType ft3 = new FieldType(TextField.TYPE_UNSTORED);\n    ft3.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    \n    // f7,f8,f9 docs/freqs/positions\n    Field f7 = newField(\"f7\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f7);\n       \n    Field f8 = newField(\"f8\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f8);\n    \n    Field f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n    writer.forceMerge(1);\n\n    // now we add another document which has docs-only for f1, f4, f7, docs/freqs for f2, f5, f8, \n    // and docs/freqs/positions for f3, f6, f9\n    d = new Document();\n    \n    // f1,f4,f7: docs only\n    f1 = newField(\"f1\", \"This field has docs only\", ft);\n    d.add(f1);\n    \n    f4 = newField(\"f4\", \"This field has docs only\", ft);\n    d.add(f4);\n    \n    f7 = newField(\"f7\", \"This field has docs only\", ft);\n    d.add(f7);\n\n    // f2, f5, f8: docs and freqs\n    f2 = newField(\"f2\", \"This field has docs and freqs\", ft2);\n    d.add(f2);\n    \n    f5 = newField(\"f5\", \"This field has docs and freqs\", ft2);\n    d.add(f5);\n    \n    f8 = newField(\"f8\", \"This field has docs and freqs\", ft2);\n    d.add(f8);\n    \n    // f3, f6, f9: docs and freqs and positions\n    f3 = newField(\"f3\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f3);     \n    \n    f6 = newField(\"f6\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f6);\n    \n    f9 = newField(\"f9\", \"This field has docs and freqs and positions\", ft3);\n    d.add(f9);\n        \n    writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    // docs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f1\").indexOptions);\n    // docs + docs/freqs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n    // docs + docs/freqs/pos = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f3\").indexOptions);\n    // docs/freqs + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f4\").indexOptions);\n    // docs/freqs + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f5\").indexOptions);\n    // docs/freqs + docs/freqs/pos = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f6\").indexOptions);\n    // docs/freqs/pos + docs = docs\n    assertEquals(IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f7\").indexOptions);\n    // docs/freqs/pos + docs/freqs = docs/freqs\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fi.fieldInfo(\"f8\").indexOptions);\n    // docs/freqs/pos + docs/freqs/pos = docs/freqs/pos\n    assertEquals(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f9\").indexOptions);\n    \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}