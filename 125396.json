{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","commits":[{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","pathOld":"/dev/null","sourceNew":"  public void run() {\n    long startMs = System.currentTimeMillis();\n    try {\n      sendRecoveryCommandWithRetry();\n    } catch (Exception exc) {\n      log.error(getName()+\" failed due to: \"+exc, exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n      }\n    }\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(getName()+\" completed successfully after running for \"+Math.round(diffMs/1000L)+\" secs\");    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["22859cb40e09867e7da8de84a31956c07259f82f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","sourceNew":"  public void run() {\n    RTimer timer = new RTimer();\n    try {\n      sendRecoveryCommandWithRetry();\n    } catch (Exception exc) {\n      log.error(getName()+\" failed due to: \"+exc, exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n      }\n    }\n    log.info(\"{} completed successfully after running for {}ms\", getName(), timer.getTime());\n  }\n\n","sourceOld":"  public void run() {\n    long startMs = System.currentTimeMillis();\n    try {\n      sendRecoveryCommandWithRetry();\n    } catch (Exception exc) {\n      log.error(getName()+\" failed due to: \"+exc, exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n      }\n    }\n    long diffMs = (System.currentTimeMillis() - startMs);\n    log.info(getName()+\" completed successfully after running for \"+Math.round(diffMs/1000L)+\" secs\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22859cb40e09867e7da8de84a31956c07259f82f","date":1441822065,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","sourceNew":"  public void run() {\n    RTimer timer = new RTimer();\n\n    String replicaCoreName = nodeProps.getCoreName();\n    String replicaCoreNodeName = ((Replica) nodeProps.getNodeProps()).getName();\n    String replicaNodeName = nodeProps.getNodeName();\n    final String replicaUrl = nodeProps.getCoreUrl();\n\n    if (!zkController.isReplicaInRecoveryHandling(replicaUrl)) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Replica: \" + replicaUrl + \" should have been marked under leader initiated recovery in ZkController but wasn't.\");\n    }\n\n    boolean sendRecoveryCommand = publishDownState(replicaCoreName, replicaCoreNodeName, replicaNodeName, replicaUrl, false);\n\n    if (sendRecoveryCommand)  {\n      try {\n        sendRecoveryCommandWithRetry();\n      } catch (Exception exc) {\n        log.error(getName()+\" failed due to: \"+exc, exc);\n        if (exc instanceof SolrException) {\n          throw (SolrException)exc;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n        }\n      } finally {\n        zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n      }\n    } else  {\n      // replica is no longer in recovery on this node (may be handled on another node)\n      zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    }\n    log.info(\"{} completed successfully after running for {}ms\", getName(), timer.getTime());\n  }\n\n","sourceOld":"  public void run() {\n    RTimer timer = new RTimer();\n    try {\n      sendRecoveryCommandWithRetry();\n    } catch (Exception exc) {\n      log.error(getName()+\" failed due to: \"+exc, exc);\n      if (exc instanceof SolrException) {\n        throw (SolrException)exc;\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n      }\n    }\n    log.info(\"{} completed successfully after running for {}ms\", getName(), timer.getTime());\n  }\n\n","bugFix":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29252e837df815b8d01fd6dff973126cced351c5","date":1521709907,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","sourceNew":"  public void run() {\n    RTimer timer = new RTimer();\n\n    String replicaCoreName = nodeProps.getCoreName();\n    String replicaCoreNodeName = ((Replica) nodeProps.getNodeProps()).getName();\n    String replicaNodeName = nodeProps.getNodeName();\n    final String replicaUrl = nodeProps.getCoreUrl();\n\n    if (!zkController.isReplicaInRecoveryHandling(replicaUrl)) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Replica: \" + replicaUrl + \" should have been marked under leader initiated recovery in ZkController but wasn't.\");\n    }\n    if (!CloudUtil.replicaExists(zkController.getClusterState(), collection, shardId, replicaCoreNodeName)) {\n      log.info(\"Replica does not exist, skip doing LIR\");\n    }\n    boolean sendRecoveryCommand = publishDownState(replicaCoreName, replicaCoreNodeName, replicaNodeName, replicaUrl, false);\n\n    if (sendRecoveryCommand)  {\n      try {\n        sendRecoveryCommandWithRetry();\n      } catch (Exception exc) {\n        log.error(getName()+\" failed due to: \"+exc, exc);\n        if (exc instanceof SolrException) {\n          throw (SolrException)exc;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n        }\n      } finally {\n        zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n      }\n    } else  {\n      // replica is no longer in recovery on this node (may be handled on another node)\n      zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    }\n    log.info(\"{} completed successfully after running for {}ms\", getName(), timer.getTime());\n  }\n\n","sourceOld":"  public void run() {\n    RTimer timer = new RTimer();\n\n    String replicaCoreName = nodeProps.getCoreName();\n    String replicaCoreNodeName = ((Replica) nodeProps.getNodeProps()).getName();\n    String replicaNodeName = nodeProps.getNodeName();\n    final String replicaUrl = nodeProps.getCoreUrl();\n\n    if (!zkController.isReplicaInRecoveryHandling(replicaUrl)) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Replica: \" + replicaUrl + \" should have been marked under leader initiated recovery in ZkController but wasn't.\");\n    }\n\n    boolean sendRecoveryCommand = publishDownState(replicaCoreName, replicaCoreNodeName, replicaNodeName, replicaUrl, false);\n\n    if (sendRecoveryCommand)  {\n      try {\n        sendRecoveryCommandWithRetry();\n      } catch (Exception exc) {\n        log.error(getName()+\" failed due to: \"+exc, exc);\n        if (exc instanceof SolrException) {\n          throw (SolrException)exc;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n        }\n      } finally {\n        zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n      }\n    } else  {\n      // replica is no longer in recovery on this node (may be handled on another node)\n      zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    }\n    log.info(\"{} completed successfully after running for {}ms\", getName(), timer.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","sourceNew":"  public void run() {\n    RTimer timer = new RTimer();\n\n    String replicaCoreName = nodeProps.getCoreName();\n    String replicaCoreNodeName = ((Replica) nodeProps.getNodeProps()).getName();\n    String replicaNodeName = nodeProps.getNodeName();\n    final String replicaUrl = nodeProps.getCoreUrl();\n\n    if (!zkController.isReplicaInRecoveryHandling(replicaUrl)) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Replica: \" + replicaUrl + \" should have been marked under leader initiated recovery in ZkController but wasn't.\");\n    }\n    if (!CloudUtil.replicaExists(zkController.getClusterState(), collection, shardId, replicaCoreNodeName)) {\n      log.info(\"Replica does not exist, skip doing LIR\");\n    }\n    boolean sendRecoveryCommand = publishDownState(replicaCoreName, replicaCoreNodeName, replicaNodeName, replicaUrl, false);\n\n    if (sendRecoveryCommand)  {\n      try {\n        sendRecoveryCommandWithRetry();\n      } catch (Exception exc) {\n        log.error(getName()+\" failed due to: \"+exc, exc);\n        if (exc instanceof SolrException) {\n          throw (SolrException)exc;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n        }\n      } finally {\n        zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n      }\n    } else  {\n      // replica is no longer in recovery on this node (may be handled on another node)\n      zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    }\n    log.info(\"{} completed successfully after running for {}ms\", getName(), timer.getTime());\n  }\n\n","sourceOld":"  public void run() {\n    RTimer timer = new RTimer();\n\n    String replicaCoreName = nodeProps.getCoreName();\n    String replicaCoreNodeName = ((Replica) nodeProps.getNodeProps()).getName();\n    String replicaNodeName = nodeProps.getNodeName();\n    final String replicaUrl = nodeProps.getCoreUrl();\n\n    if (!zkController.isReplicaInRecoveryHandling(replicaUrl)) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Replica: \" + replicaUrl + \" should have been marked under leader initiated recovery in ZkController but wasn't.\");\n    }\n\n    boolean sendRecoveryCommand = publishDownState(replicaCoreName, replicaCoreNodeName, replicaNodeName, replicaUrl, false);\n\n    if (sendRecoveryCommand)  {\n      try {\n        sendRecoveryCommandWithRetry();\n      } catch (Exception exc) {\n        log.error(getName()+\" failed due to: \"+exc, exc);\n        if (exc instanceof SolrException) {\n          throw (SolrException)exc;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n        }\n      } finally {\n        zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n      }\n    } else  {\n      // replica is no longer in recovery on this node (may be handled on another node)\n      zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    }\n    log.info(\"{} completed successfully after running for {}ms\", getName(), timer.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderInitiatedRecoveryThread#run().mjava","sourceNew":null,"sourceOld":"  public void run() {\n    RTimer timer = new RTimer();\n\n    String replicaCoreName = nodeProps.getCoreName();\n    String replicaCoreNodeName = ((Replica) nodeProps.getNodeProps()).getName();\n    String replicaNodeName = nodeProps.getNodeName();\n    final String replicaUrl = nodeProps.getCoreUrl();\n\n    if (!zkController.isReplicaInRecoveryHandling(replicaUrl)) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Replica: \" + replicaUrl + \" should have been marked under leader initiated recovery in ZkController but wasn't.\");\n    }\n    if (!CloudUtil.replicaExists(zkController.getClusterState(), collection, shardId, replicaCoreNodeName)) {\n      log.info(\"Replica does not exist, skip doing LIR\");\n    }\n    boolean sendRecoveryCommand = publishDownState(replicaCoreName, replicaCoreNodeName, replicaNodeName, replicaUrl, false);\n\n    if (sendRecoveryCommand)  {\n      try {\n        sendRecoveryCommandWithRetry();\n      } catch (Exception exc) {\n        log.error(getName()+\" failed due to: \"+exc, exc);\n        if (exc instanceof SolrException) {\n          throw (SolrException)exc;\n        } else {\n          throw new SolrException(ErrorCode.SERVER_ERROR, exc);\n        }\n      } finally {\n        zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n      }\n    } else  {\n      // replica is no longer in recovery on this node (may be handled on another node)\n      zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);\n    }\n    log.info(\"{} completed successfully after running for {}ms\", getName(), timer.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["22859cb40e09867e7da8de84a31956c07259f82f","29252e837df815b8d01fd6dff973126cced351c5"],"22859cb40e09867e7da8de84a31956c07259f82f":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"29252e837df815b8d01fd6dff973126cced351c5":["22859cb40e09867e7da8de84a31956c07259f82f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"22859cb40e09867e7da8de84a31956c07259f82f":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","29252e837df815b8d01fd6dff973126cced351c5"],"29252e837df815b8d01fd6dff973126cced351c5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["22859cb40e09867e7da8de84a31956c07259f82f"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}