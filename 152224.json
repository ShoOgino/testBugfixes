{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#gaps().mjava","commits":[{"id":"ff275d3941a30f2db7c9278444015f412b835254","date":1544435249,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#gaps().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int gaps() {\n      for (int i = 0; i < subIterators.length; i++) {\n        if (subIterators[i].end() > end) {\n          innerPositions[i * 2] = start;\n          innerPositions[i * 2 + 1] = firstEnd;\n        }\n        else {\n          innerPositions[i * 2] = subIterators[i].start();\n          innerPositions[i * 2 + 1] = subIterators[i].end();\n        }\n      }\n      Arrays.sort(innerPositions);\n      int gaps = 0;\n      for (int i = 1; i < subIterators.length; i++) {\n        gaps += (innerPositions[i * 2] - innerPositions[i * 2 - 1] - 1);\n      }\n      return gaps;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/UnorderedIntervalsSource.UnorderedIntervalIterator#gaps().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalFunction.UnorderedIntervalIterator#gaps().mjava","sourceNew":"    @Override\n    public int gaps() {\n      for (int i = 0; i < subIterators.length; i++) {\n        if (subIterators[i].end() > end) {\n          innerPositions[i * 2] = start;\n          innerPositions[i * 2 + 1] = firstEnd;\n        }\n        else {\n          innerPositions[i * 2] = subIterators[i].start();\n          innerPositions[i * 2 + 1] = subIterators[i].end();\n        }\n      }\n      Arrays.sort(innerPositions);\n      int gaps = 0;\n      for (int i = 1; i < subIterators.length; i++) {\n        gaps += (innerPositions[i * 2] - innerPositions[i * 2 - 1] - 1);\n      }\n      return gaps;\n    }\n\n","sourceOld":"    @Override\n    public int gaps() {\n      for (int i = 0; i < subIterators.length; i++) {\n        if (subIterators[i].end() > end) {\n          innerPositions[i * 2] = start;\n          innerPositions[i * 2 + 1] = firstEnd;\n        }\n        else {\n          innerPositions[i * 2] = subIterators[i].start();\n          innerPositions[i * 2 + 1] = subIterators[i].end();\n        }\n      }\n      Arrays.sort(innerPositions);\n      int gaps = 0;\n      for (int i = 1; i < subIterators.length; i++) {\n        gaps += (innerPositions[i * 2] - innerPositions[i * 2 - 1] - 1);\n      }\n      return gaps;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["ff275d3941a30f2db7c9278444015f412b835254"],"ff275d3941a30f2db7c9278444015f412b835254":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"]},"commit2Childs":{"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff275d3941a30f2db7c9278444015f412b835254":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff275d3941a30f2db7c9278444015f412b835254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}