{"path":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","commits":[{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(getFlushPolicy()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73","15ae21aa0a9700dcc50c436549450b1547dfaa9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15ae21aa0a9700dcc50c436549450b1547dfaa9d","date":1344005053,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(getFlushPolicy()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(getFlushPolicy()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(getFlushPolicy()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"94b4f4bf8892e6006d66f4231d6d1873bbe56e73","date":1352661595,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler().getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(getReaderTermsIndexDivisor()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(getTermIndexInterval()).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"checkIntegrityAtMerge=\").append(getCheckIntegrityAtMerge()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"checkIntegrityAtMerge=\").append(getCheckIntegrityAtMerge()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"checkIntegrityAtMerge=\").append(getCheckIntegrityAtMerge()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"checkIntegrityAtMerge=\").append(getCheckIntegrityAtMerge()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2131047ecceac64b54ba70feec3d26bbd7e483d7","date":1411862069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"checkIntegrityAtMerge=\").append(getCheckIntegrityAtMerge()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"checkIntegrityAtMerge=\").append(getCheckIntegrityAtMerge()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b97509e7e2489430edfe784e4411976e3c6c748","date":1434336771,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(IndexWriterConfig.WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(getWriteLockTimeout()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(getMaxBufferedDeleteTerms()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1ea5763a93795952100d48e19c48f19777c552c","date":1512660172,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"readerAttributes=\").append(getReaderAttributes()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81819c5a4a660afd353042c67106e682bb877cf1","date":1583169587,"type":3,"author":"msfroh","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"readerAttributes=\").append(getReaderAttributes()).append(\"\\n\");\n    sb.append(\"maxCommitMergeWaitSeconds=\").append(getMaxCommitMergeWaitSeconds()).append(\"\\n\");\n    sb.append(\"indexWriterEvents=\").append(getIndexWriterEvents().getClass().getName()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"readerAttributes=\").append(getReaderAttributes()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"maxCommitMergeWaitSeconds=\").append(getMaxCommitMergeWaitSeconds()).append(\"\\n\");\n    sb.append(\"indexWriterEvents=\").append(getIndexWriterEvents().getClass().getName()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"readerAttributes=\").append(getReaderAttributes()).append(\"\\n\");\n    sb.append(\"maxCommitMergeWaitSeconds=\").append(getMaxCommitMergeWaitSeconds()).append(\"\\n\");\n    sb.append(\"indexWriterEvents=\").append(getIndexWriterEvents().getClass().getName()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba192a321314de8edbe20b279eee9c471b16b48b","date":1583706474,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"maxCommitMergeWaitSeconds=\").append(getMaxCommitMergeWaitSeconds()).append(\"\\n\");\n    sb.append(\"indexWriterEvents=\").append(getIndexWriterEvents().getClass().getName()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(getIndexerThreadPool()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe39f1a106531207c028defebbc9eb5bb489ac50","date":1592513789,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"maxCommitMergeWaitSeconds=\").append(getMaxCommitMergeWaitSeconds()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1182fe36fb5df768dc2da53f6d5338cbc07268ae","date":1592861749,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"maxCommitMergeWaitSeconds=\").append(getMaxCommitMergeWaitSeconds()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"maxCommitMergeWaitMillis=\").append(getMaxCommitMergeWaitMillis()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"maxFullFlushMergeWaitMillis=\").append(getMaxFullFlushMergeWaitMillis()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(getRAMBufferSizeMB()).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(getMaxBufferedDocs()).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(getMergedSegmentWarmer()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(getIndexDeletionPolicy().getClass().getName()).append(\"\\n\");\n    IndexCommit commit = getIndexCommit();\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(getOpenMode()).append(\"\\n\");\n    sb.append(\"similarity=\").append(getSimilarity().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergeScheduler=\").append(getMergeScheduler()).append(\"\\n\");\n    sb.append(\"codec=\").append(getCodec()).append(\"\\n\");\n    sb.append(\"infoStream=\").append(getInfoStream().getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(getMergePolicy()).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(getReaderPooling()).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(getRAMPerThreadHardLimitMB()).append(\"\\n\");\n    sb.append(\"useCompoundFile=\").append(getUseCompoundFile()).append(\"\\n\");\n    sb.append(\"commitOnClose=\").append(getCommitOnClose()).append(\"\\n\");\n    sb.append(\"indexSort=\").append(getIndexSort()).append(\"\\n\");\n    sb.append(\"checkPendingFlushOnUpdate=\").append(isCheckPendingFlushOnUpdate()).append(\"\\n\");\n    sb.append(\"softDeletesField=\").append(getSoftDeletesField()).append(\"\\n\");\n    sb.append(\"maxCommitMergeWaitMillis=\").append(getMaxCommitMergeWaitMillis()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba192a321314de8edbe20b279eee9c471b16b48b":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a45bec74b98f6fc05f52770cfb425739e6563960"],"f1ea5763a93795952100d48e19c48f19777c552c":["28288370235ed02234a64753cdbf0c6ec096304a"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"0ad30c6a479e764150a3316e57263319775f1df2":["2b97509e7e2489430edfe784e4411976e3c6c748","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["81819c5a4a660afd353042c67106e682bb877cf1"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["2b97509e7e2489430edfe784e4411976e3c6c748","0ad30c6a479e764150a3316e57263319775f1df2"],"2b97509e7e2489430edfe784e4411976e3c6c748":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["d0ef034a4f10871667ae75181537775ddcf8ade4","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"81819c5a4a660afd353042c67106e682bb877cf1":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"5eb2511ababf862ea11e10761c70ee560cd84510":["a45bec74b98f6fc05f52770cfb425739e6563960","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"264935965977b4a9e2f3920420647072c9c49176":["ba192a321314de8edbe20b279eee9c471b16b48b"],"94b4f4bf8892e6006d66f4231d6d1873bbe56e73":["9eae2a56dc810a17cf807d831f720dec931a03de"],"9eae2a56dc810a17cf807d831f720dec931a03de":["15ae21aa0a9700dcc50c436549450b1547dfaa9d"],"a45bec74b98f6fc05f52770cfb425739e6563960":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["417142ff08fda9cf0b72d5133e63097a166c6458"],"407687e67faf6e1f02a211ca078d8e3eed631027":["9eae2a56dc810a17cf807d831f720dec931a03de","94b4f4bf8892e6006d66f4231d6d1873bbe56e73"],"fe39f1a106531207c028defebbc9eb5bb489ac50":["264935965977b4a9e2f3920420647072c9c49176"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["7f4e54ed7cef46f86888b5fb547594f62160395c","15ae21aa0a9700dcc50c436549450b1547dfaa9d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d470c8182e92b264680e34081b75e70a9f2b3c89","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d470c8182e92b264680e34081b75e70a9f2b3c89","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2b97509e7e2489430edfe784e4411976e3c6c748","d470c8182e92b264680e34081b75e70a9f2b3c89"],"417142ff08fda9cf0b72d5133e63097a166c6458":["28288370235ed02234a64753cdbf0c6ec096304a","f1ea5763a93795952100d48e19c48f19777c552c"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["2b97509e7e2489430edfe784e4411976e3c6c748"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["7f4e54ed7cef46f86888b5fb547594f62160395c","15ae21aa0a9700dcc50c436549450b1547dfaa9d"],"15ae21aa0a9700dcc50c436549450b1547dfaa9d":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["2b97509e7e2489430edfe784e4411976e3c6c748","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"ba192a321314de8edbe20b279eee9c471b16b48b":["264935965977b4a9e2f3920420647072c9c49176"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","d0ef034a4f10871667ae75181537775ddcf8ade4"],"f1ea5763a93795952100d48e19c48f19777c552c":["417142ff08fda9cf0b72d5133e63097a166c6458"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["81819c5a4a660afd353042c67106e682bb877cf1"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a45bec74b98f6fc05f52770cfb425739e6563960"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["ba192a321314de8edbe20b279eee9c471b16b48b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2b97509e7e2489430edfe784e4411976e3c6c748":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"9bb9a29a5e71a90295f175df8919802993142c9a":["2b97509e7e2489430edfe784e4411976e3c6c748"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","15ae21aa0a9700dcc50c436549450b1547dfaa9d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"81819c5a4a660afd353042c67106e682bb877cf1":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"264935965977b4a9e2f3920420647072c9c49176":["fe39f1a106531207c028defebbc9eb5bb489ac50"],"94b4f4bf8892e6006d66f4231d6d1873bbe56e73":["407687e67faf6e1f02a211ca078d8e3eed631027","088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"9eae2a56dc810a17cf807d831f720dec931a03de":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73","407687e67faf6e1f02a211ca078d8e3eed631027"],"a45bec74b98f6fc05f52770cfb425739e6563960":["1f3b037cd083286b2af89f96e768f85dcd8072d6","5eb2511ababf862ea11e10761c70ee560cd84510"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"fe39f1a106531207c028defebbc9eb5bb489ac50":["1182fe36fb5df768dc2da53f6d5338cbc07268ae"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["f1ea5763a93795952100d48e19c48f19777c552c","417142ff08fda9cf0b72d5133e63097a166c6458"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["9bb9a29a5e71a90295f175df8919802993142c9a","2131047ecceac64b54ba70feec3d26bbd7e483d7"],"2131047ecceac64b54ba70feec3d26bbd7e483d7":["9bb9a29a5e71a90295f175df8919802993142c9a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"15ae21aa0a9700dcc50c436549450b1547dfaa9d":["9eae2a56dc810a17cf807d831f720dec931a03de","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"1182fe36fb5df768dc2da53f6d5338cbc07268ae":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","5eb2511ababf862ea11e10761c70ee560cd84510","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}