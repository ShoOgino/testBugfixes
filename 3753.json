{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","sourceNew":"    public synchronized boolean delete(int docID) {\n      assert liveDocs != null;\n      assert docID >= 0 && docID < liveDocs.length();\n      assert !shared;\n      final boolean didDelete = liveDocs.get(docID);\n      if (didDelete) {\n       ((MutableBits) liveDocs).clear(docID);\n        pendingDeleteCount++;\n        //System.out.println(\"  new del seg=\" + info + \" docID=\" + docID + \" pendingDelCount=\" + pendingDeleteCount + \" totDelCount=\" + (info.docCount-liveDocs.count()));\n      }\n      return didDelete;\n    }\n\n","sourceOld":"    public synchronized boolean delete(int docID) {\n      assert liveDocs != null;\n      assert docID >= 0 && docID < liveDocs.length();\n      assert !shared;\n      final boolean didDelete = liveDocs.get(docID);\n      if (didDelete) {\n       ((MutableBits) liveDocs).clear(docID);\n        pendingDeleteCount++;\n        //System.out.println(\"  new del seg=\" + info + \" docID=\" + docID + \" pendingDelCount=\" + pendingDeleteCount + \" totDelCount=\" + (info.docCount-liveDocs.count()));\n      }\n      return didDelete;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48dc2f21f6c0cd2187dce0dabcd85af064de4ab8","date":1329915672,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","sourceNew":"    public synchronized boolean delete(int docID) {\n      assert liveDocs != null;\n      assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \",liveDocsLength=\" + liveDocs.length();\n      assert !shared;\n      final boolean didDelete = liveDocs.get(docID);\n      if (didDelete) {\n       ((MutableBits) liveDocs).clear(docID);\n        pendingDeleteCount++;\n        //System.out.println(\"  new del seg=\" + info + \" docID=\" + docID + \" pendingDelCount=\" + pendingDeleteCount + \" totDelCount=\" + (info.docCount-liveDocs.count()));\n      }\n      return didDelete;\n    }\n\n","sourceOld":"    public synchronized boolean delete(int docID) {\n      assert liveDocs != null;\n      assert docID >= 0 && docID < liveDocs.length();\n      assert !shared;\n      final boolean didDelete = liveDocs.get(docID);\n      if (didDelete) {\n       ((MutableBits) liveDocs).clear(docID);\n        pendingDeleteCount++;\n        //System.out.println(\"  new del seg=\" + info + \" docID=\" + docID + \" pendingDelCount=\" + pendingDeleteCount + \" totDelCount=\" + (info.docCount-liveDocs.count()));\n      }\n      return didDelete;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","sourceNew":"    public synchronized boolean delete(int docID) {\n      assert liveDocs != null;\n      assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \",liveDocsLength=\" + liveDocs.length();\n      assert !shared;\n      final boolean didDelete = liveDocs.get(docID);\n      if (didDelete) {\n       ((MutableBits) liveDocs).clear(docID);\n        pendingDeleteCount++;\n        //System.out.println(\"  new del seg=\" + info + \" docID=\" + docID + \" pendingDelCount=\" + pendingDeleteCount + \" totDelCount=\" + (info.docCount-liveDocs.count()));\n      }\n      return didDelete;\n    }\n\n","sourceOld":"    public synchronized boolean delete(int docID) {\n      assert liveDocs != null;\n      assert docID >= 0 && docID < liveDocs.length();\n      assert !shared;\n      final boolean didDelete = liveDocs.get(docID);\n      if (didDelete) {\n       ((MutableBits) liveDocs).clear(docID);\n        pendingDeleteCount++;\n        //System.out.println(\"  new del seg=\" + info + \" docID=\" + docID + \" pendingDelCount=\" + pendingDeleteCount + \" totDelCount=\" + (info.docCount-liveDocs.count()));\n      }\n      return didDelete;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean delete(int docID) {\n      assert liveDocs != null;\n      assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \",liveDocsLength=\" + liveDocs.length();\n      assert !shared;\n      final boolean didDelete = liveDocs.get(docID);\n      if (didDelete) {\n       ((MutableBits) liveDocs).clear(docID);\n        pendingDeleteCount++;\n        //System.out.println(\"  new del seg=\" + info + \" docID=\" + docID + \" pendingDelCount=\" + pendingDeleteCount + \" totDelCount=\" + (info.docCount-liveDocs.count()));\n      }\n      return didDelete;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#delete(int).mjava","sourceNew":null,"sourceOld":"    public synchronized boolean delete(int docID) {\n      assert liveDocs != null;\n      assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \",liveDocsLength=\" + liveDocs.length();\n      assert !shared;\n      final boolean didDelete = liveDocs.get(docID);\n      if (didDelete) {\n       ((MutableBits) liveDocs).clear(docID);\n        pendingDeleteCount++;\n        //System.out.println(\"  new del seg=\" + info + \" docID=\" + docID + \" pendingDelCount=\" + pendingDeleteCount + \" totDelCount=\" + (info.docCount-liveDocs.count()));\n      }\n      return didDelete;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","48dc2f21f6c0cd2187dce0dabcd85af064de4ab8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"48dc2f21f6c0cd2187dce0dabcd85af064de4ab8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["48dc2f21f6c0cd2187dce0dabcd85af064de4ab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","48dc2f21f6c0cd2187dce0dabcd85af064de4ab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"48dc2f21f6c0cd2187dce0dabcd85af064de4ab8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}