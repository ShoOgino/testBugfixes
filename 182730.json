{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanOperation.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    BooleanOperation booleanOperation = null;\n    if(operationExpressions != null && operationExpressions.size() == 1) {\n      StreamExpression ex = operationExpressions.get(0);\n      StreamOperation operation = factory.constructOperation(ex);\n      if(operation instanceof BooleanOperation) {\n        booleanOperation = (BooleanOperation) operation;\n      } else {\n        throw new IOException(\"The HavingStream requires a BooleanOperation. A StreamOperation was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanOperation.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), booleanOperation);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e196615f77a3277b22dbf33f9b4a9f086943dfe","date":1481905676,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanOperation.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    BooleanOperation booleanOperation = null;\n    if(operationExpressions != null && operationExpressions.size() == 1) {\n      StreamExpression ex = operationExpressions.get(0);\n      StreamOperation operation = factory.constructOperation(ex);\n      if(operation instanceof BooleanOperation) {\n        booleanOperation = (BooleanOperation) operation;\n      } else {\n        throw new IOException(\"The HavingStream requires a BooleanOperation. A StreamOperation was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanOperation.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), booleanOperation);\n  }\n\n","sourceOld":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanOperation.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    BooleanOperation booleanOperation = null;\n    if(operationExpressions != null && operationExpressions.size() == 1) {\n      StreamExpression ex = operationExpressions.get(0);\n      StreamOperation operation = factory.constructOperation(ex);\n      if(operation instanceof BooleanOperation) {\n        booleanOperation = (BooleanOperation) operation;\n      } else {\n        throw new IOException(\"The HavingStream requires a BooleanOperation. A StreamOperation was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanOperation.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), booleanOperation);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"addd43cfe13659bd5dbdfe7aaaf50b64a419be42","date":1483473183,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanOperation.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    BooleanOperation booleanOperation = null;\n    if(operationExpressions != null && operationExpressions.size() == 1) {\n      StreamExpression ex = operationExpressions.get(0);\n      StreamOperation operation = factory.constructOperation(ex);\n      if(operation instanceof BooleanOperation) {\n        booleanOperation = (BooleanOperation) operation;\n      } else {\n        throw new IOException(\"The HavingStream requires a BooleanOperation. A StreamOperation was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanOperation.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), booleanOperation);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanEvaluator.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    StreamEvaluator evaluator = null;\n    if(evaluatorExpressions != null && evaluatorExpressions.size() == 1) {\n      StreamExpression ex = evaluatorExpressions.get(0);\n      evaluator = factory.constructEvaluator(ex);\n      if(!(evaluator instanceof BooleanEvaluator)) {\n        throw new IOException(\"The HavingStream requires a BooleanEvaluator. A StreamEvaluator was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanEvaluator.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), (BooleanEvaluator)evaluator);\n  }\n\n","sourceOld":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanOperation.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    BooleanOperation booleanOperation = null;\n    if(operationExpressions != null && operationExpressions.size() == 1) {\n      StreamExpression ex = operationExpressions.get(0);\n      StreamOperation operation = factory.constructOperation(ex);\n      if(operation instanceof BooleanOperation) {\n        booleanOperation = (BooleanOperation) operation;\n      } else {\n        throw new IOException(\"The HavingStream requires a BooleanOperation. A StreamOperation was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanOperation.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), booleanOperation);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, RecursiveBooleanEvaluator.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    StreamEvaluator evaluator = null;\n    if(evaluatorExpressions != null && evaluatorExpressions.size() == 1) {\n      StreamExpression ex = evaluatorExpressions.get(0);\n      evaluator = factory.constructEvaluator(ex);\n      if(!(evaluator instanceof RecursiveBooleanEvaluator)) {\n        throw new IOException(\"The HavingStream requires a RecursiveBooleanEvaluator. A StreamEvaluator was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a RecursiveBooleanEvaluator.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), (RecursiveBooleanEvaluator)evaluator);\n  }\n\n","sourceOld":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanEvaluator.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    StreamEvaluator evaluator = null;\n    if(evaluatorExpressions != null && evaluatorExpressions.size() == 1) {\n      StreamExpression ex = evaluatorExpressions.get(0);\n      evaluator = factory.constructEvaluator(ex);\n      if(!(evaluator instanceof BooleanEvaluator)) {\n        throw new IOException(\"The HavingStream requires a BooleanEvaluator. A StreamEvaluator was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanEvaluator.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), (BooleanEvaluator)evaluator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, RecursiveBooleanEvaluator.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    StreamEvaluator evaluator = null;\n    if(evaluatorExpressions != null && evaluatorExpressions.size() == 1) {\n      StreamExpression ex = evaluatorExpressions.get(0);\n      evaluator = factory.constructEvaluator(ex);\n      if(!(evaluator instanceof RecursiveBooleanEvaluator)) {\n        throw new IOException(\"The HavingStream requires a RecursiveBooleanEvaluator. A StreamEvaluator was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a RecursiveBooleanEvaluator.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), (RecursiveBooleanEvaluator)evaluator);\n  }\n\n","sourceOld":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanEvaluator.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    StreamEvaluator evaluator = null;\n    if(evaluatorExpressions != null && evaluatorExpressions.size() == 1) {\n      StreamExpression ex = evaluatorExpressions.get(0);\n      evaluator = factory.constructEvaluator(ex);\n      if(!(evaluator instanceof BooleanEvaluator)) {\n        throw new IOException(\"The HavingStream requires a BooleanEvaluator. A StreamEvaluator was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanEvaluator.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), (BooleanEvaluator)evaluator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HavingStream#HavingStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, RecursiveBooleanEvaluator.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    StreamEvaluator evaluator = null;\n    if(evaluatorExpressions != null && evaluatorExpressions.size() == 1) {\n      StreamExpression ex = evaluatorExpressions.get(0);\n      evaluator = factory.constructEvaluator(ex);\n      if(!(evaluator instanceof RecursiveBooleanEvaluator)) {\n        throw new IOException(\"The HavingStream requires a RecursiveBooleanEvaluator. A StreamEvaluator was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a RecursiveBooleanEvaluator.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), (RecursiveBooleanEvaluator)evaluator);\n  }\n\n","sourceOld":"  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanEvaluator.class);\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n\n    StreamEvaluator evaluator = null;\n    if(evaluatorExpressions != null && evaluatorExpressions.size() == 1) {\n      StreamExpression ex = evaluatorExpressions.get(0);\n      evaluator = factory.constructEvaluator(ex);\n      if(!(evaluator instanceof BooleanEvaluator)) {\n        throw new IOException(\"The HavingStream requires a BooleanEvaluator. A StreamEvaluator was provided.\");\n      }\n    } else {\n      throw new IOException(\"The HavingStream requires a BooleanEvaluator.\");\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), (BooleanEvaluator)evaluator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e196615f77a3277b22dbf33f9b4a9f086943dfe":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["addd43cfe13659bd5dbdfe7aaaf50b64a419be42"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["88073e8783f450d4c0218decc2f001a1ac2c7e7c","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"addd43cfe13659bd5dbdfe7aaaf50b64a419be42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"2e196615f77a3277b22dbf33f9b4a9f086943dfe":[],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["2e196615f77a3277b22dbf33f9b4a9f086943dfe"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36b1ce25b5b465615c00f409ce694664abbe7bd2","addd43cfe13659bd5dbdfe7aaaf50b64a419be42"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"addd43cfe13659bd5dbdfe7aaaf50b64a419be42":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2e196615f77a3277b22dbf33f9b4a9f086943dfe","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}