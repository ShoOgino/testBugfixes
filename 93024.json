{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,SolrScraperConfig).mjava","commits":[{"id":"aca9a18be9d7251531953284ee8d8012b022cbc7","date":1519116407,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,SolrScraperConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, SolrScraperConfig scraperConfig) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      SolrQueryConfig queryConfig = scraperConfig.getQuery();\n\n      // create Solr request parameters\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      for (Map<String, String> param : queryConfig.getParams()) {\n        for (String name : param.keySet()) {\n          Object obj = param.get(name);\n          if (obj instanceof Number) {\n            params.add(name, obj.toString());\n          } else {\n            params.add(name, param.get(name));\n          }\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(queryConfig.getPath());\n\n      // invoke Solr\n      NamedList<Object> queryResponse = null;\n      if (queryConfig.getCore().equals(\"\") && queryConfig.getCollection().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest);\n      } else if (!queryConfig.getCore().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest, queryConfig.getCore());\n      } else if (!queryConfig.getCollection().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest, queryConfig.getCollection());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      for (String jsonQuery : scraperConfig.getJsonQueries()) {\n        JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n        jqs.add(compiledJsonQuery);\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (!scraperConfig.getQuery().getCollection().equals(\"\")) {\n              labelNames.add(\"collection\");\n              labelValues.add(scraperConfig.getQuery().getCollection());\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (!scraperConfig.getQuery().getCore().equals(\"\")) {\n              labelNames.add(\"core\");\n              labelValues.add(scraperConfig.getQuery().getCore());\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              if (labelValues.get(labelNames.indexOf(\"collection\")).equals(\"-\") && labelValues.get(labelNames.indexOf(\"shard\")).equals(\"-\") && labelValues.get(labelNames.indexOf(\"replica\")).equals(\"-\")) {\n                labelNames.add(\"core\");\n                labelValues.add(\"-\");\n              } else {\n                StringBuffer sb = new StringBuffer();\n                sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                    .append(\"_\")\n                    .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                    .append(\"_\")\n                    .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n                labelNames.add(\"core\");\n                labelValues.add(sb.toString());\n              }\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          logger.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | SolrServerException | IOException e) {\n      logger.error(e.toString());\n    } catch (Exception e) {\n      logger.error(e.toString());\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6edfc2dfac665ac59cb5f5335512bea5456d1dc3","date":1519140363,"type":4,"author":"koji","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,SolrScraperConfig).mjava","sourceNew":null,"sourceOld":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, SolrScraperConfig scraperConfig) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      SolrQueryConfig queryConfig = scraperConfig.getQuery();\n\n      // create Solr request parameters\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      for (Map<String, String> param : queryConfig.getParams()) {\n        for (String name : param.keySet()) {\n          Object obj = param.get(name);\n          if (obj instanceof Number) {\n            params.add(name, obj.toString());\n          } else {\n            params.add(name, param.get(name));\n          }\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(queryConfig.getPath());\n\n      // invoke Solr\n      NamedList<Object> queryResponse = null;\n      if (queryConfig.getCore().equals(\"\") && queryConfig.getCollection().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest);\n      } else if (!queryConfig.getCore().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest, queryConfig.getCore());\n      } else if (!queryConfig.getCollection().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest, queryConfig.getCollection());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      for (String jsonQuery : scraperConfig.getJsonQueries()) {\n        JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n        jqs.add(compiledJsonQuery);\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (!scraperConfig.getQuery().getCollection().equals(\"\")) {\n              labelNames.add(\"collection\");\n              labelValues.add(scraperConfig.getQuery().getCollection());\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (!scraperConfig.getQuery().getCore().equals(\"\")) {\n              labelNames.add(\"core\");\n              labelValues.add(scraperConfig.getQuery().getCore());\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              if (labelValues.get(labelNames.indexOf(\"collection\")).equals(\"-\") && labelValues.get(labelNames.indexOf(\"shard\")).equals(\"-\") && labelValues.get(labelNames.indexOf(\"replica\")).equals(\"-\")) {\n                labelNames.add(\"core\");\n                labelValues.add(\"-\");\n              } else {\n                StringBuffer sb = new StringBuffer();\n                sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                    .append(\"_\")\n                    .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                    .append(\"_\")\n                    .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n                labelNames.add(\"core\");\n                labelValues.add(sb.toString());\n              }\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          logger.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | SolrServerException | IOException e) {\n      logger.error(e.toString());\n    } catch (Exception e) {\n      logger.error(e.toString());\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"873efcdf87d1e2a7c3014c56779fec9967a3ec9f","date":1519279726,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,SolrScraperConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, SolrScraperConfig scraperConfig) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      SolrQueryConfig queryConfig = scraperConfig.getQuery();\n\n      // create Solr request parameters\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      for (Map<String, String> param : queryConfig.getParams()) {\n        for (String name : param.keySet()) {\n          Object obj = param.get(name);\n          if (obj instanceof Number) {\n            params.add(name, obj.toString());\n          } else {\n            params.add(name, param.get(name));\n          }\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(queryConfig.getPath());\n\n      // invoke Solr\n      NamedList<Object> queryResponse = null;\n      if (queryConfig.getCore().equals(\"\") && queryConfig.getCollection().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest);\n      } else if (!queryConfig.getCore().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest, queryConfig.getCore());\n      } else if (!queryConfig.getCollection().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest, queryConfig.getCollection());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      for (String jsonQuery : scraperConfig.getJsonQueries()) {\n        JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n        jqs.add(compiledJsonQuery);\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (!scraperConfig.getQuery().getCollection().equals(\"\")) {\n              labelNames.add(\"collection\");\n              labelValues.add(scraperConfig.getQuery().getCollection());\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (!scraperConfig.getQuery().getCore().equals(\"\")) {\n              labelNames.add(\"core\");\n              labelValues.add(scraperConfig.getQuery().getCore());\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              if (labelValues.get(labelNames.indexOf(\"collection\")).equals(\"-\") && labelValues.get(labelNames.indexOf(\"shard\")).equals(\"-\") && labelValues.get(labelNames.indexOf(\"replica\")).equals(\"-\")) {\n                labelNames.add(\"core\");\n                labelValues.add(\"-\");\n              } else {\n                StringBuffer sb = new StringBuffer();\n                sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                    .append(\"_\")\n                    .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                    .append(\"_\")\n                    .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n                labelNames.add(\"core\");\n                labelValues.add(sb.toString());\n              }\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          logger.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | SolrServerException | IOException e) {\n      logger.error(e.toString());\n    } catch (Exception e) {\n      logger.error(e.toString());\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b857dd3d30acf3541d2bf24a619d81effc9c11d","date":1519436286,"type":4,"author":"koji","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#collectResponse(SolrClient,SolrScraperConfig).mjava","sourceNew":null,"sourceOld":"  /**\n   * Collect facet count.\n   */\n  public Map<String, Collector.MetricFamilySamples> collectResponse(SolrClient solrClient, SolrScraperConfig scraperConfig) {\n    Map<String, Collector.MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();\n\n    try {\n      SolrQueryConfig queryConfig = scraperConfig.getQuery();\n\n      // create Solr request parameters\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      for (Map<String, String> param : queryConfig.getParams()) {\n        for (String name : param.keySet()) {\n          Object obj = param.get(name);\n          if (obj instanceof Number) {\n            params.add(name, obj.toString());\n          } else {\n            params.add(name, param.get(name));\n          }\n        }\n      }\n\n      // create Solr queryConfig request\n      QueryRequest queryRequest = new QueryRequest(params);\n      queryRequest.setPath(queryConfig.getPath());\n\n      // invoke Solr\n      NamedList<Object> queryResponse = null;\n      if (queryConfig.getCore().equals(\"\") && queryConfig.getCollection().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest);\n      } else if (!queryConfig.getCore().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest, queryConfig.getCore());\n      } else if (!queryConfig.getCollection().equals(\"\")) {\n        queryResponse = solrClient.request(queryRequest, queryConfig.getCollection());\n      }\n\n      ObjectMapper om = new ObjectMapper();\n\n      JsonNode metricsJson = om.readTree((String) queryResponse.get(\"response\"));\n\n      List<JsonQuery> jqs = new ArrayList<>();\n      for (String jsonQuery : scraperConfig.getJsonQueries()) {\n        JsonQuery compiledJsonQuery = JsonQuery.compile(jsonQuery);\n        jqs.add(compiledJsonQuery);\n      }\n\n      for (int i = 0; i < jqs.size(); i++) {\n        JsonQuery q = jqs.get(i);\n        try {\n          List<JsonNode> results = q.apply(metricsJson);\n          for (JsonNode result : results) {\n            String type = result.get(\"type\").textValue();\n            String name = result.get(\"name\").textValue();\n            String help = result.get(\"help\").textValue();\n            Double value = result.get(\"value\").doubleValue();\n            ArrayList<String> labelNames = new ArrayList<>(this.labelNames);\n            ArrayList<String> labelValues = new ArrayList<>(this.labelValues);\n\n            if (solrClient instanceof CloudSolrClient) {\n              labelNames.add(\"zk_host\");\n              labelValues.add(((CloudSolrClient) solrClient).getZkHost());\n            }\n\n            if (!scraperConfig.getQuery().getCollection().equals(\"\")) {\n              labelNames.add(\"collection\");\n              labelValues.add(scraperConfig.getQuery().getCollection());\n            }\n\n            if (solrClient instanceof HttpSolrClient) {\n              labelNames.add(\"base_url\");\n              labelValues.add(((HttpSolrClient) solrClient).getBaseURL());\n            }\n\n            if (!scraperConfig.getQuery().getCore().equals(\"\")) {\n              labelNames.add(\"core\");\n              labelValues.add(scraperConfig.getQuery().getCore());\n            }\n\n            for(Iterator<JsonNode> ite = result.get(\"label_names\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelNames.add(item.textValue());\n            }\n            for(Iterator<JsonNode> ite = result.get(\"label_values\").iterator();ite.hasNext();){\n              JsonNode item = ite.next();\n              labelValues.add(item.textValue());\n            }\n\n            if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n              if (labelValues.get(labelNames.indexOf(\"collection\")).equals(\"-\") && labelValues.get(labelNames.indexOf(\"shard\")).equals(\"-\") && labelValues.get(labelNames.indexOf(\"replica\")).equals(\"-\")) {\n                labelNames.add(\"core\");\n                labelValues.add(\"-\");\n              } else {\n                StringBuffer sb = new StringBuffer();\n                sb.append(labelValues.get(labelNames.indexOf(\"collection\")))\n                    .append(\"_\")\n                    .append(labelValues.get(labelNames.indexOf(\"shard\")))\n                    .append(\"_\")\n                    .append(labelValues.get(labelNames.indexOf(\"replica\")));\n\n                labelNames.add(\"core\");\n                labelValues.add(sb.toString());\n              }\n            }\n\n            if (!metricFamilySamplesMap.containsKey(name)) {\n              Collector.MetricFamilySamples metricFamilySamples = new Collector.MetricFamilySamples(\n                name,\n                Collector.Type.valueOf(type),\n                help,\n                new ArrayList<>()\n              );\n              metricFamilySamplesMap.put(name, metricFamilySamples);\n            }\n\n            Collector.MetricFamilySamples.Sample sample = new Collector.MetricFamilySamples.Sample(name, labelNames, labelValues, value);\n\n            if (!metricFamilySamplesMap.get(name).samples.contains(sample)) {\n              metricFamilySamplesMap.get(name).samples.add(sample);\n            }\n          }\n        } catch (JsonQueryException e) {\n          logger.error(e.toString() + \" \" + q.toString());\n          SolrExporter.scrapeErrorTotal.inc();\n        }\n      }\n    } catch (HttpSolrClient.RemoteSolrException | SolrServerException | IOException e) {\n      logger.error(e.toString());\n    } catch (Exception e) {\n      logger.error(e.toString());\n    }\n\n    return metricFamilySamplesMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"873efcdf87d1e2a7c3014c56779fec9967a3ec9f":["6edfc2dfac665ac59cb5f5335512bea5456d1dc3"],"0b857dd3d30acf3541d2bf24a619d81effc9c11d":["873efcdf87d1e2a7c3014c56779fec9967a3ec9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6edfc2dfac665ac59cb5f5335512bea5456d1dc3":["aca9a18be9d7251531953284ee8d8012b022cbc7"],"aca9a18be9d7251531953284ee8d8012b022cbc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b857dd3d30acf3541d2bf24a619d81effc9c11d"]},"commit2Childs":{"873efcdf87d1e2a7c3014c56779fec9967a3ec9f":["0b857dd3d30acf3541d2bf24a619d81effc9c11d"],"0b857dd3d30acf3541d2bf24a619d81effc9c11d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aca9a18be9d7251531953284ee8d8012b022cbc7"],"6edfc2dfac665ac59cb5f5335512bea5456d1dc3":["873efcdf87d1e2a7c3014c56779fec9967a3ec9f"],"aca9a18be9d7251531953284ee8d8012b022cbc7":["6edfc2dfac665ac59cb5f5335512bea5456d1dc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}