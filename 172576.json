{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream, true);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream, false, true);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream, true);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    CheckIndex.testLiveDocs(reader, infoStream, true);\n    CheckIndex.testFieldInfos(reader, infoStream, true);\n    CheckIndex.testFieldNorms(reader, infoStream, true);\n    CheckIndex.testPostings(reader, infoStream, false, true);\n    CheckIndex.testStoredFields(reader, infoStream, true);\n    CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    FieldNormStatus fieldNormStatus = CheckIndex.testFieldNorms(reader, infoStream, true);\n    TermIndexStatus termIndexStatus = CheckIndex.testPostings(reader, infoStream, false, true);\n    StoredFieldStatus storedFieldStatus = CheckIndex.testStoredFields(reader, infoStream, true);\n    TermVectorStatus termVectorStatus = CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    DocValuesStatus docValuesStatus = CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    CheckIndex.testLiveDocs(reader, infoStream, true);\n    CheckIndex.testFieldInfos(reader, infoStream, true);\n    CheckIndex.testFieldNorms(reader, infoStream, true);\n    CheckIndex.testPostings(reader, infoStream, false, true);\n    CheckIndex.testStoredFields(reader, infoStream, true);\n    CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","500867f0f15393f6b2c38c3366e414fccba04ed6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    reader.checkIntegrity();\n    CheckIndex.testLiveDocs(reader, infoStream, true);\n    CheckIndex.testFieldInfos(reader, infoStream, true);\n    CheckIndex.testFieldNorms(reader, infoStream, true);\n    CheckIndex.testPostings(reader, infoStream, false, true);\n    CheckIndex.testStoredFields(reader, infoStream, true);\n    CheckIndex.testTermVectors(reader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(reader, infoStream, true);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5aa8e6cd0d3d70981c7bbfda33bf25337d26a3c3","date":1456826479,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"762c80e29fe0c3bb83aabe2e64af6379273cec7b","date":1484347562,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true, Version.LUCENE_7_0_0);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true, Version.LUCENE_7_0_0);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true, Version.LUCENE_7_0_0);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true, Version.LUCENE_7_0_0);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","date":1499084229,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true, Version.LUCENE_7_0_0);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true, Version.LUCENE_7_0_0);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true, Version.LUCENE_7_0_0);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true, Version.LUCENE_7_0_0);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true, Version.LUCENE_7_0_0);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true, Version.LUCENE_7_0_0);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0e5953a07337cd41bcde610503024c07073b26","date":1519143251,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean doSlowChecks) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, doSlowChecks, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, doSlowChecks, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean crossCheckTermVectors) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, crossCheckTermVectors, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc","date":1541533532,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkReader(LeafReader,boolean).mjava","sourceNew":"  public static void checkReader(LeafReader reader, boolean doSlowChecks) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, doSlowChecks, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, doSlowChecks, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n\n    // FieldInfos should be cached at the reader and always return the same instance\n    if (reader.getFieldInfos() != reader.getFieldInfos()) {\n      throw new RuntimeException(\"getFieldInfos() returned different instances for class: \"+reader.getClass());\n    }\n  }\n\n","sourceOld":"  public static void checkReader(LeafReader reader, boolean doSlowChecks) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n\n    final CodecReader codecReader;\n    if (reader instanceof CodecReader) {\n      codecReader = (CodecReader) reader;\n      reader.checkIntegrity();\n    } else {\n      codecReader = SlowCodecReaderWrapper.wrap(reader);\n    }\n    CheckIndex.testLiveDocs(codecReader, infoStream, true);\n    CheckIndex.testFieldInfos(codecReader, infoStream, true);\n    CheckIndex.testFieldNorms(codecReader, infoStream, true);\n    CheckIndex.testPostings(codecReader, infoStream, false, doSlowChecks, true);\n    CheckIndex.testStoredFields(codecReader, infoStream, true);\n    CheckIndex.testTermVectors(codecReader, infoStream, false, doSlowChecks, true);\n    CheckIndex.testDocValues(codecReader, infoStream, true);\n    CheckIndex.testPoints(codecReader, infoStream, true);\n    \n    // some checks really against the reader API\n    checkReaderSanity(reader);\n    \n    if (LuceneTestCase.INFOSTREAM) {\n      System.out.println(bos.toString(IOUtils.UTF_8));\n    }\n    \n    LeafReader unwrapped = FilterLeafReader.unwrap(reader);\n    if (unwrapped instanceof SegmentReader) {\n      SegmentReader sr = (SegmentReader) unwrapped;\n      long bytesUsed = sr.ramBytesUsed(); \n      if (sr.ramBytesUsed() < 0) {\n        throw new IllegalStateException(\"invalid ramBytesUsed for reader: \" + bytesUsed);\n      }\n      assert Accountables.toString(sr) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30c8e5574b55d57947e989443dfde611646530ee":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","cc018b79379c67835b40b1259cd3dc931df60944"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc":["9a0e5953a07337cd41bcde610503024c07073b26"],"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["500867f0f15393f6b2c38c3366e414fccba04ed6","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"5aa8e6cd0d3d70981c7bbfda33bf25337d26a3c3":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"9a0e5953a07337cd41bcde610503024c07073b26":["cc018b79379c67835b40b1259cd3dc931df60944"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","5aa8e6cd0d3d70981c7bbfda33bf25337d26a3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"]},"commit2Childs":{"30c8e5574b55d57947e989443dfde611646530ee":[],"500867f0f15393f6b2c38c3366e414fccba04ed6":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["cc018b79379c67835b40b1259cd3dc931df60944"],"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5aa8e6cd0d3d70981c7bbfda33bf25337d26a3c3","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5aa8e6cd0d3d70981c7bbfda33bf25337d26a3c3":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["30c8e5574b55d57947e989443dfde611646530ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","cc018b79379c67835b40b1259cd3dc931df60944"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","9a0e5953a07337cd41bcde610503024c07073b26"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["507e7decdf00981d09a74632ea30299a4ce6ba72","762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"9a0e5953a07337cd41bcde610503024c07073b26":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","507e7decdf00981d09a74632ea30299a4ce6ba72","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}