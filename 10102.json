{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  public void close() throws IOException {\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  public void close() throws IOException {\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  public void close() throws IOException {\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  public void close() throws IOException {\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09603b329b773f13c5bc71091a8e683671cbc9ba","date":1399576172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8544a91abff05b6667a0b0064a519fac0392d75","date":1399576472,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (!w.isClosed()) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3921a5e384eadf112ab18ed933e77e32e3d39e63","date":1404444185,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (!w.isClosed()) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n      // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n      w.commit();\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (!w.isClosed()) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (!w.isClosed()) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n      if (w.getConfig().getCommitOnClose() == false) {\n        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n        w.commit();\n      }\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (!w.isClosed()) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n      // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n      w.commit();\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e963b815e505e8632dd877cde9e5ed8f07e14514","date":1408052679,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (w.isClosed() == false) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n      doRandomForceMerge();\n      if (w.getConfig().getCommitOnClose() == false) {\n        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n        w.commit();\n      }\n    }\n    w.close();\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (!w.isClosed()) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2) {\n      doRandomForceMerge();\n      if (w.getConfig().getCommitOnClose() == false) {\n        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n        w.commit();\n      }\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (w.isClosed() == false) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n      doRandomForceMerge();\n      if (w.getConfig().getCommitOnClose() == false) {\n        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n        w.commit();\n      }\n    }\n    IOUtils.close(w, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (w.isClosed() == false) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n      doRandomForceMerge();\n      if (w.getConfig().getCommitOnClose() == false) {\n        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n        w.commit();\n      }\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (w.isClosed() == false) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n      doRandomForceMerge();\n      if (w.getConfig().getCommitOnClose() == false) {\n        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n        w.commit();\n      }\n    }\n    IOUtils.close(w, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (w.isClosed() == false) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n      doRandomForceMerge();\n      if (w.getConfig().getCommitOnClose() == false) {\n        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n        w.commit();\n      }\n    }\n    w.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    boolean success = false;\n    try {\n      if (w.isClosed() == false) {\n        LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n      }\n      // if someone isn't using getReader() API, we want to be sure to\n      // forceMerge since presumably they might open a reader on the dir.\n      if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n        doRandomForceMerge();\n        if (w.getConfig().getCommitOnClose() == false) {\n          // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n          w.commit();\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w, analyzer);\n      } else {\n        IOUtils.closeWhileHandlingException(w, analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    if (w.isClosed() == false) {\n      LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n    }\n    // if someone isn't using getReader() API, we want to be sure to\n    // forceMerge since presumably they might open a reader on the dir.\n    if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n      doRandomForceMerge();\n      if (w.getConfig().getCommitOnClose() == false) {\n        // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n        w.commit();\n      }\n    }\n    IOUtils.close(w, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e84628e1e00d06556b67af150a13dbfb1849a818","date":1588191102,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#close().mjava","sourceNew":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    boolean success = false;\n    try {\n      if (w.isClosed() == false) {\n        LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, config);\n      }\n      // if someone isn't using getReader() API, we want to be sure to\n      // forceMerge since presumably they might open a reader on the dir.\n      if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n        doRandomForceMerge();\n        if (config.getCommitOnClose() == false) {\n          // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n          w.commit();\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w, analyzer);\n      } else {\n        IOUtils.closeWhileHandlingException(w, analyzer);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this writer.\n   * @see IndexWriter#close()\n   */\n  @Override\n  public void close() throws IOException {\n    boolean success = false;\n    try {\n      if (w.isClosed() == false) {\n        LuceneTestCase.maybeChangeLiveIndexWriterConfig(r, w.getConfig());\n      }\n      // if someone isn't using getReader() API, we want to be sure to\n      // forceMerge since presumably they might open a reader on the dir.\n      if (getReaderCalled == false && r.nextInt(8) == 2 && w.isClosed() == false) {\n        doRandomForceMerge();\n        if (w.getConfig().getCommitOnClose() == false) {\n          // index may have changed, must commit the changes, or otherwise they are discarded by the call to close()\n          w.commit();\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w, analyzer);\n      } else {\n        IOUtils.closeWhileHandlingException(w, analyzer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"e84628e1e00d06556b67af150a13dbfb1849a818":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3921a5e384eadf112ab18ed933e77e32e3d39e63":["f8544a91abff05b6667a0b0064a519fac0392d75"],"f8544a91abff05b6667a0b0064a519fac0392d75":["09603b329b773f13c5bc71091a8e683671cbc9ba"],"09603b329b773f13c5bc71091a8e683671cbc9ba":["7530de27b87b961b51f01bd1299b7004d46e8823"],"e963b815e505e8632dd877cde9e5ed8f07e14514":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e963b815e505e8632dd877cde9e5ed8f07e14514","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3921a5e384eadf112ab18ed933e77e32e3d39e63"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["e963b815e505e8632dd877cde9e5ed8f07e14514"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e84628e1e00d06556b67af150a13dbfb1849a818"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e84628e1e00d06556b67af150a13dbfb1849a818":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"3921a5e384eadf112ab18ed933e77e32e3d39e63":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f8544a91abff05b6667a0b0064a519fac0392d75":["3921a5e384eadf112ab18ed933e77e32e3d39e63"],"09603b329b773f13c5bc71091a8e683671cbc9ba":["f8544a91abff05b6667a0b0064a519fac0392d75"],"e963b815e505e8632dd877cde9e5ed8f07e14514":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["e84628e1e00d06556b67af150a13dbfb1849a818"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e963b815e505e8632dd877cde9e5ed8f07e14514"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1eee4175312c41f89aa23427f9e4edfc00deeaac"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09603b329b773f13c5bc71091a8e683671cbc9ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}