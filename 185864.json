{"path":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeReopen();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random.nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random.nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random.nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":["568cba246a11f491637ba492f881589c2142667c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) throws IOException {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.shutdown();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.shutdown();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.shutdown();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.shutdown();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"979571cf7d796d784493945b878f59570bdd9967","date":1419001645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeReopen\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n      : new SearcherManager(writer, random().nextBoolean(), false, factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n      : new SearcherManager(writer, random().nextBoolean(), false, factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n        : new SearcherManager(writer, random().nextBoolean(), factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSearcherManager#testIntermediateClose().mjava","sourceNew":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n      : new SearcherManager(writer, random().nextBoolean(), false, factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    expectThrows(AlreadyClosedException.class, () -> {\n      searcherManager.acquire();\n    });\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","sourceOld":"  public void testIntermediateClose() throws IOException, InterruptedException {\n    Directory dir = newDirectory();\n    // Test can deadlock if we use SMS:\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        new MockAnalyzer(random())).setMergeScheduler(new ConcurrentMergeScheduler()));\n    writer.addDocument(new Document());\n    writer.commit();\n    final CountDownLatch awaitEnterWarm = new CountDownLatch(1);\n    final CountDownLatch awaitClose = new CountDownLatch(1);\n    final AtomicBoolean triedReopen = new AtomicBoolean(false);\n    final ExecutorService es = random().nextBoolean() ? null : Executors.newCachedThreadPool(new NamedThreadFactory(\"testIntermediateClose\"));\n    final SearcherFactory factory = new SearcherFactory() {\n      @Override\n      public IndexSearcher newSearcher(IndexReader r, IndexReader previous) {\n        try {\n          if (triedReopen.get()) {\n            awaitEnterWarm.countDown();\n            awaitClose.await();\n          }\n        } catch (InterruptedException e) {\n          //\n        }\n        return new IndexSearcher(r, es);\n      }\n    };\n    final SearcherManager searcherManager = random().nextBoolean() \n        ? new SearcherManager(dir, factory) \n      : new SearcherManager(writer, random().nextBoolean(), false, factory);\n    if (VERBOSE) {\n      System.out.println(\"sm created\");\n    }\n    IndexSearcher searcher = searcherManager.acquire();\n    try {\n      assertEquals(1, searcher.getIndexReader().numDocs());\n    } finally {\n      searcherManager.release(searcher);\n    }\n    writer.addDocument(new Document());\n    writer.commit();\n    final AtomicBoolean success = new AtomicBoolean(false);\n    final Throwable[] exc = new Throwable[1];\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          triedReopen.set(true);\n          if (VERBOSE) {\n            System.out.println(\"NOW call maybeRefresh\");\n          }\n          searcherManager.maybeRefresh();\n          success.set(true);\n        } catch (AlreadyClosedException e) {\n          // expected\n        } catch (Throwable e) {\n          if (VERBOSE) {\n            System.out.println(\"FAIL: unexpected exc\");\n            e.printStackTrace(System.out);\n          }\n          exc[0] = e;\n          // use success as the barrier here to make sure we see the write\n          success.set(false);\n\n        }\n      }\n    });\n    thread.start();\n    if (VERBOSE) {\n      System.out.println(\"THREAD started\");\n    }\n    awaitEnterWarm.await();\n    if (VERBOSE) {\n      System.out.println(\"NOW call close\");\n    }\n    searcherManager.close();\n    awaitClose.countDown();\n    thread.join();\n    try {\n      searcherManager.acquire();\n      fail(\"already closed\");\n    } catch (AlreadyClosedException ex) {\n      // expected\n    }\n    assertFalse(success.get());\n    assertTrue(triedReopen.get());\n    assertNull(\"\" + exc[0], exc[0]);\n    writer.close();\n    dir.close();\n    if (es != null) {\n      es.shutdown();\n      es.awaitTermination(1, TimeUnit.SECONDS);\n    }\n  }\n\n","bugFix":["dfc6076b23c4069ed33fce21fd75a8ccfbf5019c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05fe562aa248790944d43cdd478f512572835ba0":["68496c2200e559fb7802f7575427b7a482659afb"],"0c924d4069ef5a5bc479a493befe0121aada6896":["979571cf7d796d784493945b878f59570bdd9967","e0dfae671422e7453a9199aa320f91427cd80d60"],"e0dfae671422e7453a9199aa320f91427cd80d60":["979571cf7d796d784493945b878f59570bdd9967"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"979571cf7d796d784493945b878f59570bdd9967":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"68496c2200e559fb7802f7575427b7a482659afb":["e0dfae671422e7453a9199aa320f91427cd80d60","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["e0dfae671422e7453a9199aa320f91427cd80d60"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c924d4069ef5a5bc479a493befe0121aada6896":[],"e0dfae671422e7453a9199aa320f91427cd80d60":["0c924d4069ef5a5bc479a493befe0121aada6896","68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["979571cf7d796d784493945b878f59570bdd9967"],"68496c2200e559fb7802f7575427b7a482659afb":["05fe562aa248790944d43cdd478f512572835ba0"],"979571cf7d796d784493945b878f59570bdd9967":["0c924d4069ef5a5bc479a493befe0121aada6896","e0dfae671422e7453a9199aa320f91427cd80d60"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0c924d4069ef5a5bc479a493befe0121aada6896","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}