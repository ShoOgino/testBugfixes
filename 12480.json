{"path":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first\n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName);\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    rmDir(destDir);\n\n    destDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();\n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n\n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n\n        in.close();\n        out.close();\n      }\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3741149a89925c02f14dbeef8365b896798d91fc","date":1303483574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.tempDirs.add(destDir.getAbsolutePath());\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /**\n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first\n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName);\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    rmDir(destDir);\n\n    destDir.mkdir();\n    LuceneTestCase.tempDirs.add(destDir.getAbsolutePath());\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();\n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n\n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n\n        in.close();\n        out.close();\n      }\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":"  /**\n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first\n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName);\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    rmDir(destDir);\n\n    destDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();\n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n\n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n\n        in.close();\n        out.close();\n      }\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.tempDirs.add(destDir.getAbsolutePath());\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.tempDirs.add(destDir.getAbsolutePath());\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","date":1306320383,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.registerTempFile(destDir);\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.tempDirs.add(destDir.getAbsolutePath());\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.registerTempFile(destDir);\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.tempDirs.add(destDir.getAbsolutePath());\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.registerTempFile(destDir);\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.tempDirs.add(destDir.getAbsolutePath());\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#unzip(File,File).mjava","sourceNew":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.registerTempFile(destDir);\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","sourceOld":"  /** \n   * Convenience method: Unzip zipName + \".zip\" under destDir, removing destDir first \n   */\n  public static void unzip(File zipName, File destDir) throws IOException {\n    \n    ZipFile zipFile = new ZipFile(zipName);\n    \n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n    \n    rmDir(destDir);\n    \n    destDir.mkdir();\n    LuceneTestCase.registerTempFile(destDir);\n    \n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n      \n      InputStream in = zipFile.getInputStream(entry);\n      File targetFile = new File(destDir, entry.getName());\n      if (entry.isDirectory()) {\n        // allow unzipping with directory structure\n        targetFile.mkdirs();\n      } else {\n        if (targetFile.getParentFile()!=null) {\n          // be on the safe side: do not rely on that directories are always extracted\n          // before their children (although this makes sense, but is it guaranteed?)\n          targetFile.getParentFile().mkdirs();   \n        }\n        OutputStream out = new BufferedOutputStream(new FileOutputStream(targetFile));\n        \n        byte[] buffer = new byte[8192];\n        int len;\n        while((len = in.read(buffer)) >= 0) {\n          out.write(buffer, 0, len);\n        }\n        \n        in.close();\n        out.close();\n      }\n    }\n    \n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3741149a89925c02f14dbeef8365b896798d91fc"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3741149a89925c02f14dbeef8365b896798d91fc"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7":["3741149a89925c02f14dbeef8365b896798d91fc"],"7b91922b55d15444d554721b352861d028eb8278":["435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","3741149a89925c02f14dbeef8365b896798d91fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3741149a89925c02f14dbeef8365b896798d91fc":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"]},"commit2Childs":{"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233","3741149a89925c02f14dbeef8365b896798d91fc","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7":["7b91922b55d15444d554721b352861d028eb8278","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3741149a89925c02f14dbeef8365b896798d91fc":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","a3776dccca01c11e7046323cfad46a3b4a471233"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["d493718201f0d0c54c773fb323d87bbd2fbffe41","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}