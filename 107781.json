{"path":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","pathOld":"/dev/null","sourceNew":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * @todo Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      Scorer top = (Scorer) scorerQueue.top();\n      currentDoc = top.doc();\n      currentScore = top.score();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (top.next()) {\n          scorerQueue.adjustTop();\n        } else {\n          scorerQueue.pop();\n          if (scorerQueue.size() < (minimumNrMatchers - nrMatchers)) {\n            // Not enough subscorers left for a match on this document,\n            // and also no more chance of any further match.\n            return false;\n          }\n          if (scorerQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        top = (Scorer) scorerQueue.top();\n        if (top.doc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        } else {\n          currentScore += top.score();\n          nrMatchers++;\n        }\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed","date":1161132968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","sourceNew":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * @todo Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (! scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (--queueSize == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (queueSize < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * @todo Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      Scorer top = (Scorer) scorerQueue.top();\n      currentDoc = top.doc();\n      currentScore = top.score();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (top.next()) {\n          scorerQueue.adjustTop();\n        } else {\n          scorerQueue.pop();\n          if (scorerQueue.size() < (minimumNrMatchers - nrMatchers)) {\n            // Not enough subscorers left for a match on this document,\n            // and also no more chance of any further match.\n            return false;\n          }\n          if (scorerQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        top = (Scorer) scorerQueue.top();\n        if (top.doc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        } else {\n          currentScore += top.score();\n          nrMatchers++;\n        }\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","bugFix":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7be534ca83a593a45a836cbffd544f2671d9ca60","date":1237394690,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","sourceNew":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * @todo Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (! scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (scorerDocQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerDocQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * @todo Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (! scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (--queueSize == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (queueSize < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","sourceNew":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * TODO: Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (!scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (scorerDocQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerDocQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * @todo Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (! scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (scorerDocQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerDocQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","sourceNew":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * TODO: Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (!scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (scorerDocQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerDocQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * TODO: Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (!scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (scorerDocQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerDocQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"30a558487f2298c2c19ceca9103c1b6865d64708":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["30a558487f2298c2c19ceca9103c1b6865d64708"]},"commit2Childs":{"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"30a558487f2298c2c19ceca9103c1b6865d64708":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}