{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","sourceOld":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4879790608519b344f4cad50c6b8246d6d25ee","date":1381784666,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":"  /**\n   * Constructs an OpenBitSet from an existing long[].\n   * <p>\n   * The first 64 bits are in long[0], with bit index 0 at the least significant\n   * bit, and bit index 63 at the most significant. Given a bit index, the word\n   * containing it is long[index/64], and it is at bit number index%64 within\n   * that word.\n   * <p>\n   * numWords are the number of elements in the array that contain set bits\n   * (non-zero longs). numWords should be &lt= bits.length, and any existing\n   * words in the array at position &gt= numWords should be zero.\n   * \n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    if (numWords > bits.length) {\n      throw new IllegalArgumentException(\"numWords cannot exceed bits.length\");\n    }\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","sourceOld":"  /** Constructs an OpenBitSet from an existing long[].\n   * <br/>\n   * The first 64 bits are in long[0],\n   * with bit index 0 at the least significant bit, and bit index 63 at the most significant.\n   * Given a bit index,\n   * the word containing it is long[index/64], and it is at bit number index%64 within that word.\n   * <p>\n   * numWords are the number of elements in the array that contain\n   * set bits (non-zero longs).\n   * numWords should be &lt= bits.length, and\n   * any existing words in the array at position &gt= numWords should be zero.\n   *\n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an OpenBitSet from an existing long[].\n   * <p>\n   * The first 64 bits are in long[0], with bit index 0 at the least significant\n   * bit, and bit index 63 at the most significant. Given a bit index, the word\n   * containing it is long[index/64], and it is at bit number index%64 within\n   * that word.\n   * <p>\n   * numWords are the number of elements in the array that contain set bits\n   * (non-zero longs). numWords should be &lt= bits.length, and any existing\n   * words in the array at position &gt= numWords should be zero.\n   * \n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    if (numWords > bits.length) {\n      throw new IllegalArgumentException(\"numWords cannot exceed bits.length\");\n    }\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSet#OpenBitSet(long[],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an OpenBitSet from an existing long[].\n   * <p>\n   * The first 64 bits are in long[0], with bit index 0 at the least significant\n   * bit, and bit index 63 at the most significant. Given a bit index, the word\n   * containing it is long[index/64], and it is at bit number index%64 within\n   * that word.\n   * <p>\n   * numWords are the number of elements in the array that contain set bits\n   * (non-zero longs). numWords should be &lt= bits.length, and any existing\n   * words in the array at position &gt= numWords should be zero.\n   * \n   */\n  public OpenBitSet(long[] bits, int numWords) {\n    if (numWords > bits.length) {\n      throw new IllegalArgumentException(\"numWords cannot exceed bits.length\");\n    }\n    this.bits = bits;\n    this.wlen = numWords;\n    this.numBits = wlen * 64;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["cd4879790608519b344f4cad50c6b8246d6d25ee","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["cd4879790608519b344f4cad50c6b8246d6d25ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"cd4879790608519b344f4cad50c6b8246d6d25ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd4879790608519b344f4cad50c6b8246d6d25ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd4879790608519b344f4cad50c6b8246d6d25ee":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}