{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#runTool(CommandLine).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = cli.getOptionValue(\"solr\", DEFAULT_SOLR_URL);\n      if (!solrUrl.endsWith(\"/\"))\n        solrUrl += \"/\";\n      \n      int exitCode = 0;\n      String systemInfoUrl = solrUrl+\"admin/info/system\";\n      HttpClient httpClient = getHttpClient();\n      try {        \n        // hit Solr to get system info\n        Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n        \n        // convert raw JSON into user-friendly output\n        Map<String,Object> status = \n            reportStatus(solrUrl, systemInfo, httpClient);\n        \n        // pretty-print the status to stdout\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(status);\n        System.out.println(arr.toString());\n        \n      } catch (Exception exc) {\n        if (checkCommunicationError(exc)) {\n          // this is not actually an error from the tool as it's ok if Solr is not online.\n          System.err.println(\"Solr at \"+solrUrl+\" not online.\");\n        } else {\n          System.err.print(\"Failed to get system information from \"+solrUrl+\" due to: \");\n          exc.printStackTrace(System.err);          \n          exitCode = 1;\n        }\n      } finally {\n        closeHttpClient(httpClient);        \n      }\n            \n      return exitCode;\n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = cli.getOptionValue(\"solr\", DEFAULT_SOLR_URL);\n      if (!solrUrl.endsWith(\"/\"))\n        solrUrl += \"/\";\n\n      int exitCode = 0;\n      String systemInfoUrl = solrUrl+\"admin/info/system\";\n      HttpClient httpClient = getHttpClient();\n      try {\n        // hit Solr to get system info\n        Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n        // convert raw JSON into user-friendly output\n        Map<String,Object> status =\n            reportStatus(solrUrl, systemInfo, httpClient);\n\n        // pretty-print the status to stdout\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(status);\n        System.out.println(arr.toString());\n\n      } catch (Exception exc) {\n        if (checkCommunicationError(exc)) {\n          // this is not actually an error from the tool as it's ok if Solr is not online.\n          System.err.println(\"Solr at \"+solrUrl+\" not online.\");\n        } else {\n          System.err.print(\"Failed to get system information from \"+solrUrl+\" due to: \");\n          exc.printStackTrace(System.err);\n          exitCode = 1;\n        }\n      } finally {\n        closeHttpClient(httpClient);\n      }\n\n      return exitCode;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = cli.getOptionValue(\"solr\", DEFAULT_SOLR_URL);\n      if (!solrUrl.endsWith(\"/\"))\n        solrUrl += \"/\";\n      \n      int exitCode = 0;\n      String systemInfoUrl = solrUrl+\"admin/info/system\";\n      HttpClient httpClient = getHttpClient();\n      try {        \n        // hit Solr to get system info\n        Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n        \n        // convert raw JSON into user-friendly output\n        Map<String,Object> status = \n            reportStatus(solrUrl, systemInfo, httpClient);\n        \n        // pretty-print the status to stdout\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(status);\n        System.out.println(arr.toString());\n        \n      } catch (Exception exc) {\n        if (checkCommunicationError(exc)) {\n          // this is not actually an error from the tool as it's ok if Solr is not online.\n          System.err.println(\"Solr at \"+solrUrl+\" not online.\");\n        } else {\n          System.err.print(\"Failed to get system information from \"+solrUrl+\" due to: \");\n          exc.printStackTrace(System.err);          \n          exitCode = 1;\n        }\n      } finally {\n        closeHttpClient(httpClient);        \n      }\n            \n      return exitCode;\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#runTool(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#runTool(CommandLine).mjava","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = cli.getOptionValue(\"solr\", DEFAULT_SOLR_URL);\n      if (!solrUrl.endsWith(\"/\"))\n        solrUrl += \"/\";\n\n      int exitCode = 0;\n      String systemInfoUrl = solrUrl+\"admin/info/system\";\n      CloseableHttpClient httpClient = getHttpClient();\n      try {\n        // hit Solr to get system info\n        Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n        // convert raw JSON into user-friendly output\n        Map<String,Object> status =\n            reportStatus(solrUrl, systemInfo, httpClient);\n\n        // pretty-print the status to stdout\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(status);\n        System.out.println(arr.toString());\n\n      } catch (Exception exc) {\n        if (checkCommunicationError(exc)) {\n          // this is not actually an error from the tool as it's ok if Solr is not online.\n          System.err.println(\"Solr at \"+solrUrl+\" not online.\");\n        } else {\n          System.err.print(\"Failed to get system information from \"+solrUrl+\" due to: \");\n          exc.printStackTrace(System.err);\n          exitCode = 1;\n        }\n      } finally {\n        closeHttpClient(httpClient);\n      }\n\n      return exitCode;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = cli.getOptionValue(\"solr\", DEFAULT_SOLR_URL);\n      if (!solrUrl.endsWith(\"/\"))\n        solrUrl += \"/\";\n\n      int exitCode = 0;\n      String systemInfoUrl = solrUrl+\"admin/info/system\";\n      HttpClient httpClient = getHttpClient();\n      try {\n        // hit Solr to get system info\n        Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n        // convert raw JSON into user-friendly output\n        Map<String,Object> status =\n            reportStatus(solrUrl, systemInfo, httpClient);\n\n        // pretty-print the status to stdout\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(status);\n        System.out.println(arr.toString());\n\n      } catch (Exception exc) {\n        if (checkCommunicationError(exc)) {\n          // this is not actually an error from the tool as it's ok if Solr is not online.\n          System.err.println(\"Solr at \"+solrUrl+\" not online.\");\n        } else {\n          System.err.print(\"Failed to get system information from \"+solrUrl+\" due to: \");\n          exc.printStackTrace(System.err);\n          exitCode = 1;\n        }\n      } finally {\n        closeHttpClient(httpClient);\n      }\n\n      return exitCode;\n    }\n\n","bugFix":["709714c6ee47950678dd2d2ef4e0473886909226"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":5,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#getStatus(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.StatusTool#runTool(CommandLine).mjava","sourceNew":"    public Map<String,Object> getStatus(String solrUrl) throws Exception {\n      Map<String,Object> status = null;\n\n      if (!solrUrl.endsWith(\"/\"))\n        solrUrl += \"/\";\n\n      String systemInfoUrl = solrUrl+\"admin/info/system\";\n      CloseableHttpClient httpClient = getHttpClient();\n      try {\n        // hit Solr to get system info\n        Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2, true);\n        // convert raw JSON into user-friendly output\n        status = reportStatus(solrUrl, systemInfo, httpClient);\n      } finally {\n        closeHttpClient(httpClient);\n      }\n\n      return status;\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = cli.getOptionValue(\"solr\", DEFAULT_SOLR_URL);\n      if (!solrUrl.endsWith(\"/\"))\n        solrUrl += \"/\";\n\n      int exitCode = 0;\n      String systemInfoUrl = solrUrl+\"admin/info/system\";\n      CloseableHttpClient httpClient = getHttpClient();\n      try {\n        // hit Solr to get system info\n        Map<String,Object> systemInfo = getJson(httpClient, systemInfoUrl, 2);\n\n        // convert raw JSON into user-friendly output\n        Map<String,Object> status =\n            reportStatus(solrUrl, systemInfo, httpClient);\n\n        // pretty-print the status to stdout\n        CharArr arr = new CharArr();\n        new JSONWriter(arr, 2).write(status);\n        System.out.println(arr.toString());\n\n      } catch (Exception exc) {\n        if (checkCommunicationError(exc)) {\n          // this is not actually an error from the tool as it's ok if Solr is not online.\n          System.err.println(\"Solr at \"+solrUrl+\" not online.\");\n        } else {\n          System.err.print(\"Failed to get system information from \"+solrUrl+\" due to: \");\n          exc.printStackTrace(System.err);\n          exitCode = 1;\n        }\n      } finally {\n        closeHttpClient(httpClient);\n      }\n\n      return exitCode;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e25c332f157326faecb36f76173033c1284776a5":["709714c6ee47950678dd2d2ef4e0473886909226"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["e25c332f157326faecb36f76173033c1284776a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ca20be81c9284c840498143264e583ccbb8525a"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"709714c6ee47950678dd2d2ef4e0473886909226":["e25c332f157326faecb36f76173033c1284776a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"e25c332f157326faecb36f76173033c1284776a5":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["4ca20be81c9284c840498143264e583ccbb8525a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}