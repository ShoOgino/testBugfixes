{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentInfoPerCommit si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n\n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n\n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n\n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n\n      if (fieldInfos.hasDocValues()) {\n        docValuesProducer = initDocValuesProducer(codec);\n      } else {\n        docValuesProducer = null;\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n\n      if (fieldInfos.hasDocValues()) {\n        initDocValuesProducers(codec);\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"256a0e54e76f18e115a43e7fe793b54d4e9a3005","date":1412426514,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n\n      if (fieldInfos.hasDocValues()) {\n        docValuesProducer = initDocValuesProducer(codec);\n      } else {\n        docValuesProducer = null;\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    // TODO if the segment uses CFS, we may open the CFS file twice: once for\n    // reading the FieldInfos (if they are not gen'd) and second time by\n    // SegmentCoreReaders. We can open the CFS here and pass to SCR, but then it\n    // results in less readable code (resource not closed where it was opened).\n    // Best if we could somehow read FieldInfos in SCR but not keep it there, but\n    // constructors don't allow returning two things...\n    fieldInfos = readFieldInfos(si);\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n\n      if (fieldInfos.hasDocValues()) {\n        docValuesProducer = initDocValuesProducer(codec);\n      } else {\n        docValuesProducer = null;\n      }\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.getDocCount() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(this, si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f412711b73fe38b28bb793928ad02da8c829cff5","date":1465765014,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f","4987206dabc9f3576bb1df72e987094a7dad6e4f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,int,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentCommitInfo,IOContext).mjava","sourceNew":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, int createdVersionMajor, IOContext context) throws IOException {\n    this.si = si;\n    this.metaData = new LeafMetaData(createdVersionMajor, si.info.getMinVersion(), si.info.getIndexSort());\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new SegmentReader with a new core.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: why is this public?\n  public SegmentReader(SegmentCommitInfo si, IOContext context) throws IOException {\n    this.si = si;\n\n    // We pull liveDocs/DV updates from disk:\n    this.isNRT = false;\n    \n    core = new SegmentCoreReaders(si.info.dir, si, context);\n    segDocValues = new SegmentDocValues();\n    \n    boolean success = false;\n    final Codec codec = si.info.getCodec();\n    try {\n      if (si.hasDeletions()) {\n        // NOTE: the bitvector is stored using the regular directory, not cfs\n        liveDocs = codec.liveDocsFormat().readLiveDocs(directory(), si, IOContext.READONCE);\n      } else {\n        assert si.getDelCount() == 0;\n        liveDocs = null;\n      }\n      numDocs = si.info.maxDoc() - si.getDelCount();\n      \n      fieldInfos = initFieldInfos();\n      docValuesProducer = initDocValuesProducer();\n\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        doClose();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"b0267c69e2456a3477a1ad785723f2135da3117e":["9bb9a29a5e71a90295f175df8919802993142c9a"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"b7605579001505896d48b07160075a5c8b8e128e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","0567bdc5c86c94ced64201187cfcef2417d76dda"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d","f412711b73fe38b28bb793928ad02da8c829cff5"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["f412711b73fe38b28bb793928ad02da8c829cff5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9bb9a29a5e71a90295f175df8919802993142c9a","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["9bb9a29a5e71a90295f175df8919802993142c9a","b0267c69e2456a3477a1ad785723f2135da3117e"],"9bb9a29a5e71a90295f175df8919802993142c9a":["22a2e66dfda83847e80095b8693c660742ab3e9c","256a0e54e76f18e115a43e7fe793b54d4e9a3005"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","0567bdc5c86c94ced64201187cfcef2417d76dda"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"f412711b73fe38b28bb793928ad02da8c829cff5":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["f412711b73fe38b28bb793928ad02da8c829cff5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31741cf1390044e38a2ec3127cf302ba841bfd75"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["0567bdc5c86c94ced64201187cfcef2417d76dda","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["9bb9a29a5e71a90295f175df8919802993142c9a"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc","22a2e66dfda83847e80095b8693c660742ab3e9c"],"b7605579001505896d48b07160075a5c8b8e128e":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"9bb9a29a5e71a90295f175df8919802993142c9a":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f412711b73fe38b28bb793928ad02da8c829cff5"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["256a0e54e76f18e115a43e7fe793b54d4e9a3005","9bb9a29a5e71a90295f175df8919802993142c9a"],"f412711b73fe38b28bb793928ad02da8c829cff5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","a656b32c3aa151037a8c52e9b134acc3cbf482bc","92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}