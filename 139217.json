{"path":"src/java/org/apache/solr/analysis/WordDelimiterFilter#addCombos(List[Token],int,int,boolean,boolean,int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#addCombos(List[Token],int,int,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  // index \"a\",\"b\",\"c\" as  pos0=\"a\", pos1=\"b\", pos2=\"c\", pos2=\"abc\"\n  private void addCombos(List<Token> lst, int start, int end, boolean generateSubwords, boolean catenateSubwords, int posOffset) {\n    if (end-start==1) {\n      // always generate a word alone, even if generateSubwords=0 because\n      // the catenation of all the subwords *is* the subword.\n      queue.add(lst.get(start));\n      return;\n    }\n\n    StringBuilder sb = null;\n    if (catenateSubwords) sb=new StringBuilder();\n    Token firstTok=null;\n    Token tok=null;\n    for (int i=start; i<end; i++) {\n      tok = lst.get(i);\n      if (catenateSubwords) {\n        if (i==start) firstTok=tok;\n        sb.append(tok.termText());\n      }\n      if (generateSubwords) {\n        queue.add(tok);\n      }\n    }\n\n    if (catenateSubwords) {\n      Token concatTok = new Token(sb.toString(),\n              firstTok.startOffset(),\n              tok.endOffset(),\n              firstTok.type());\n      // if we indexed some other tokens, then overlap concatTok with the last.\n      // Otherwise, use the value passed in as the position offset.\n      concatTok.setPositionIncrement(generateSubwords==true ? 0 : posOffset);\n      queue.add(concatTok);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8ae1ed027200f075b0de9f264776fa32c4862f","date":1207066219,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#addCombos(List[Token],int,int,boolean,boolean,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#addCombos(List[Token],int,int,boolean,boolean,int).mjava","sourceNew":"  // index \"a\",\"b\",\"c\" as  pos0=\"a\", pos1=\"b\", pos2=\"c\", pos2=\"abc\"\n  private void addCombos(List<Token> lst, int start, int end, boolean generateSubwords, boolean catenateSubwords, int posOffset) {\n    if (end-start==1) {\n      // always generate a word alone, even if generateSubwords=0 because\n      // the catenation of all the subwords *is* the subword.\n      queue.add(lst.get(start));\n      return;\n    }\n\n    StringBuilder sb = null;\n    if (catenateSubwords) sb=new StringBuilder();\n    Token firstTok=null;\n    Token tok=null;\n    for (int i=start; i<end; i++) {\n      tok = lst.get(i);\n      if (catenateSubwords) {\n        if (i==start) firstTok=tok;\n        sb.append(tok.termBuffer(), 0, tok.termLength());\n      }\n      if (generateSubwords) {\n        queue.add(tok);\n      }\n    }\n\n    if (catenateSubwords) {\n      Token concatTok = new Token(sb.toString(),\n              firstTok.startOffset(),\n              tok.endOffset(),\n              firstTok.type());\n      // if we indexed some other tokens, then overlap concatTok with the last.\n      // Otherwise, use the value passed in as the position offset.\n      concatTok.setPositionIncrement(generateSubwords==true ? 0 : posOffset);\n      queue.add(concatTok);\n    }\n  }\n\n","sourceOld":"  // index \"a\",\"b\",\"c\" as  pos0=\"a\", pos1=\"b\", pos2=\"c\", pos2=\"abc\"\n  private void addCombos(List<Token> lst, int start, int end, boolean generateSubwords, boolean catenateSubwords, int posOffset) {\n    if (end-start==1) {\n      // always generate a word alone, even if generateSubwords=0 because\n      // the catenation of all the subwords *is* the subword.\n      queue.add(lst.get(start));\n      return;\n    }\n\n    StringBuilder sb = null;\n    if (catenateSubwords) sb=new StringBuilder();\n    Token firstTok=null;\n    Token tok=null;\n    for (int i=start; i<end; i++) {\n      tok = lst.get(i);\n      if (catenateSubwords) {\n        if (i==start) firstTok=tok;\n        sb.append(tok.termText());\n      }\n      if (generateSubwords) {\n        queue.add(tok);\n      }\n    }\n\n    if (catenateSubwords) {\n      Token concatTok = new Token(sb.toString(),\n              firstTok.startOffset(),\n              tok.endOffset(),\n              firstTok.type());\n      // if we indexed some other tokens, then overlap concatTok with the last.\n      // Otherwise, use the value passed in as the position offset.\n      concatTok.setPositionIncrement(generateSubwords==true ? 0 : posOffset);\n      queue.add(concatTok);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#addCombos(List[Token],int,int,boolean,boolean,int).mjava","sourceNew":null,"sourceOld":"  // index \"a\",\"b\",\"c\" as  pos0=\"a\", pos1=\"b\", pos2=\"c\", pos2=\"abc\"\n  private void addCombos(List<Token> lst, int start, int end, boolean generateSubwords, boolean catenateSubwords, int posOffset) {\n    if (end-start==1) {\n      // always generate a word alone, even if generateSubwords=0 because\n      // the catenation of all the subwords *is* the subword.\n      queue.add(lst.get(start));\n      return;\n    }\n\n    StringBuilder sb = null;\n    if (catenateSubwords) sb=new StringBuilder();\n    Token firstTok=null;\n    Token tok=null;\n    for (int i=start; i<end; i++) {\n      tok = lst.get(i);\n      if (catenateSubwords) {\n        if (i==start) firstTok=tok;\n        sb.append(tok.termBuffer(), 0, tok.termLength());\n      }\n      if (generateSubwords) {\n        queue.add(tok);\n      }\n    }\n\n    if (catenateSubwords) {\n      Token concatTok = new Token(sb.toString(),\n              firstTok.startOffset(),\n              tok.endOffset(),\n              firstTok.type());\n      // if we indexed some other tokens, then overlap concatTok with the last.\n      // Otherwise, use the value passed in as the position offset.\n      concatTok.setPositionIncrement(generateSubwords==true ? 0 : posOffset);\n      queue.add(concatTok);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef28ac95f5f85bbf872801277448c0924b0a6827","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}