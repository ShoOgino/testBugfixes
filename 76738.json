{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,byte[],byte[],IntFunction[BytesRef]).mjava","commits":[{"id":"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","date":1468339076,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,byte[],byte[],IntFunction[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, byte[] minPackedValue, byte[] maxPackedValue, IntFunction<BytesRef> values) throws IOException {\n    byte[] lastPackedValue = new byte[bytesPerDim];\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert numDims != 1 || valueInOrder(i, lastPackedValue, packedValue.bytes, packedValue.offset);\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,int,byte[],byte[],IntFunction[BytesRef],int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,byte[],byte[],IntFunction[BytesRef]).mjava","sourceNew":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, int sortedDim, byte[] minPackedValue, byte[] maxPackedValue,\n      IntFunction<BytesRef> values, int[] docs, int docsOffset) throws IOException {\n    byte[] lastPackedValue = new byte[packedBytesLength];\n    int lastDoc = -1;\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert valueInOrder(i, sortedDim, lastPackedValue, packedValue.bytes, packedValue.offset,\n          docs[docsOffset + i], lastDoc);\n      lastDoc = docs[docsOffset + i];\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, byte[] minPackedValue, byte[] maxPackedValue, IntFunction<BytesRef> values) throws IOException {\n    byte[] lastPackedValue = new byte[bytesPerDim];\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert numDims != 1 || valueInOrder(i, lastPackedValue, packedValue.bytes, packedValue.offset);\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valuesInOrderAndBounds(int,byte[],byte[],IntFunction[BytesRef]).mjava","sourceNew":null,"sourceOld":"  // only called from assert\n  private boolean valuesInOrderAndBounds(int count, byte[] minPackedValue, byte[] maxPackedValue, IntFunction<BytesRef> values) throws IOException {\n    byte[] lastPackedValue = new byte[bytesPerDim];\n    for (int i=0;i<count;i++) {\n      BytesRef packedValue = values.apply(i);\n      assert packedValue.length == packedBytesLength;\n      assert numDims != 1 || valueInOrder(i, lastPackedValue, packedValue.bytes, packedValue.offset);\n\n      // Make sure this value does in fact fall within this leaf cell:\n      assert valueInBounds(packedValue, minPackedValue, maxPackedValue);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"]},"commit2Childs":{"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}