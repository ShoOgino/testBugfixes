{"path":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    StandardFacetsAccumulator sfa = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(StandardFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","sourceNew":null,"sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams, DUMMY_REQ); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    OldFacetsAccumulator sfa = new OldFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    sfa.setComplementThreshold(OldFacetsAccumulator.DISABLE_COMPLEMENT);\n    sfa.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"607428da722dcb3e86bbd11c63de8986e6275c36":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}