{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    StringReader reader = new StringReader(\"This is a good test of the english stop analyzer with positions\");\n    int expectedIncr[] =                  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", reader);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    StringReader reader = new StringReader(\"This is a good test of the english stop analyzer with positions\");\n    int expectedIncr[] =                  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", reader);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    StringReader reader = new StringReader(\"This is a good test of the english stop analyzer with positions\");\n    int expectedIncr[] =                  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", reader);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    StringReader reader = new StringReader(\"This is a good test of the english stop analyzer with positions\");\n    int expectedIncr[] =                  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", reader);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    StringReader reader = new StringReader(\"This is a good test of the english stop analyzer with positions\");\n    int expectedIncr[] =                  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", reader);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    StringReader reader = new StringReader(\"This is a good test of the english stop analyzer with positions\");\n    int expectedIncr[] =                  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", reader);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", s);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    StringReader reader = new StringReader(\"This is a good test of the english stop analyzer with positions\");\n    int expectedIncr[] =                  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", reader);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","bugFix":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", s);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    StringReader reader = new StringReader(\"This is a good test of the english stop analyzer with positions\");\n    int expectedIncr[] =                  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", reader);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    TokenStream stream = newStop.tokenStream(\"test\", s);\n    assertNotNull(stream);\n    int i = 0;\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n    stream.reset();\n    while (stream.incrementToken()) {\n      String text = termAtt.toString();\n      assertFalse(stopWordsSet.contains(text));\n      assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n    }\n  }\n\n","bugFix":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","4c1b87b155748a27fbed84a0ffb3f8799177451e","a775c547c3519b47efd41c09cb47100ddb9604c7","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(TEST_VERSION_CURRENT, asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(TEST_VERSION_CURRENT, stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n    newStop.close();\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopAnalyzer#testStopListPositions().mjava","sourceNew":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n    newStop.close();\n  }\n\n","sourceOld":"  public void testStopListPositions() throws IOException {\n    CharArraySet stopWordsSet = new CharArraySet(asSet(\"good\", \"test\", \"analyzer\"), false);\n    StopAnalyzer newStop = new StopAnalyzer(stopWordsSet);\n    String s =             \"This is a good test of the english stop analyzer with positions\";\n    int expectedIncr[] =  { 1,   1, 1,          3, 1,  1,      1,            2,   1};\n    try (TokenStream stream = newStop.tokenStream(\"test\", s)) {\n      assertNotNull(stream);\n      int i = 0;\n      CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n      PositionIncrementAttribute posIncrAtt = stream.addAttribute(PositionIncrementAttribute.class);\n\n      stream.reset();\n      while (stream.incrementToken()) {\n        String text = termAtt.toString();\n        assertFalse(stopWordsSet.contains(text));\n        assertEquals(expectedIncr[i++],posIncrAtt.getPositionIncrement());\n      }\n      stream.end();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4c1b87b155748a27fbed84a0ffb3f8799177451e","c83d6c4335f31cae14f625a222bc842f20073dcd"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["4c1b87b155748a27fbed84a0ffb3f8799177451e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"4c1b87b155748a27fbed84a0ffb3f8799177451e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","05a14b2611ead08655a2b2bdc61632eb31316e57","c83d6c4335f31cae14f625a222bc842f20073dcd"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c1b87b155748a27fbed84a0ffb3f8799177451e","05a14b2611ead08655a2b2bdc61632eb31316e57"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","05a14b2611ead08655a2b2bdc61632eb31316e57","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}