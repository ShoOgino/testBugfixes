{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecContentSource#openNextFile().mjava","sourceNew":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","sourceOld":"  void openNextFile() throws NoMoreDataException, IOException {\n    close();\n    int retries = 0;\n    while (true) {\n      if (nextFile >= inputFiles.size()) { \n        // exhausted files, start a new round, unless forever set to false.\n        if (!forever) {\n          throw new NoMoreDataException();\n        }\n        nextFile = 0;\n        iteration++;\n      }\n      File f = inputFiles.get(nextFile++);\n      if (verbose) {\n        System.out.println(\"opening: \" + f + \" length: \" + f.length());\n      }\n      try {\n        GZIPInputStream zis = new GZIPInputStream(new FileInputStream(f), BUFFER_SIZE);\n        reader = new BufferedReader(new InputStreamReader(zis, encoding), BUFFER_SIZE);\n        return;\n      } catch (Exception e) {\n        retries++;\n        if (retries < 20 && verbose) {\n          System.out.println(\"Skipping 'bad' file \" + f.getAbsolutePath() + \"  #retries=\" + retries);\n          continue;\n        }\n        throw new NoMoreDataException();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}