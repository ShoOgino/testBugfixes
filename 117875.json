{"path":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testFloorBlocks().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testFloorBlocks().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloorBlocks() throws Exception {\n    final String[] terms = new String[] {\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\", \"aa\", \"xx\"};\n    r = makeIndex(terms);\n    //r = makeIndex(\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\");\n\n    // First term in first block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // No block\n    assertEquals(0, docFreq(r, \"bb0\"));\n\n    // Second block\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // Backwards to prior floor block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa1\"));\n    assertEquals(0, docFreq(r, \"yy\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator();\n    while(te.next() != null) {\n      //System.out.println(\"TEST: next term=\" + te.term().utf8ToString());\n    }\n\n    assertTrue(seekExact(te, \"aa1\"));\n    assertEquals(\"aa2\", next(te));\n    assertTrue(seekExact(te, \"aa8\"));\n    assertEquals(\"aa9\", next(te));\n    assertEquals(\"xx\", next(te));\n\n    testRandomSeeks(r, terms);\n    close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testFloorBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testFloorBlocks().mjava","sourceNew":"  public void testFloorBlocks() throws Exception {\n    final String[] terms = new String[] {\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\", \"aa\", \"xx\"};\n    r = makeIndex(terms);\n    //r = makeIndex(\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\");\n\n    // First term in first block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // No block\n    assertEquals(0, docFreq(r, \"bb0\"));\n\n    // Second block\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // Backwards to prior floor block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa1\"));\n    assertEquals(0, docFreq(r, \"yy\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator(null);\n    while(te.next() != null) {\n      //System.out.println(\"TEST: next term=\" + te.term().utf8ToString());\n    }\n\n    assertTrue(seekExact(te, \"aa1\"));\n    assertEquals(\"aa2\", next(te));\n    assertTrue(seekExact(te, \"aa8\"));\n    assertEquals(\"aa9\", next(te));\n    assertEquals(\"xx\", next(te));\n\n    testRandomSeeks(r, terms);\n    close();\n  }\n\n","sourceOld":"  public void testFloorBlocks() throws Exception {\n    final String[] terms = new String[] {\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\", \"aa\", \"xx\"};\n    r = makeIndex(terms);\n    //r = makeIndex(\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\");\n\n    // First term in first block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // No block\n    assertEquals(0, docFreq(r, \"bb0\"));\n\n    // Second block\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // Backwards to prior floor block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa1\"));\n    assertEquals(0, docFreq(r, \"yy\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator();\n    while(te.next() != null) {\n      //System.out.println(\"TEST: next term=\" + te.term().utf8ToString());\n    }\n\n    assertTrue(seekExact(te, \"aa1\"));\n    assertEquals(\"aa2\", next(te));\n    assertTrue(seekExact(te, \"aa8\"));\n    assertEquals(\"aa9\", next(te));\n    assertEquals(\"xx\", next(te));\n\n    testRandomSeeks(r, terms);\n    close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testFloorBlocks().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#testFloorBlocks().mjava","sourceNew":"  public void testFloorBlocks() throws Exception {\n    final String[] terms = new String[] {\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\", \"aa\", \"xx\"};\n    r = makeIndex(terms);\n    //r = makeIndex(\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\");\n\n    // First term in first block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // No block\n    assertEquals(0, docFreq(r, \"bb0\"));\n\n    // Second block\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // Backwards to prior floor block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa1\"));\n    assertEquals(0, docFreq(r, \"yy\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator(null);\n    while(te.next() != null) {\n      //System.out.println(\"TEST: next term=\" + te.term().utf8ToString());\n    }\n\n    assertTrue(seekExact(te, \"aa1\"));\n    assertEquals(\"aa2\", next(te));\n    assertTrue(seekExact(te, \"aa8\"));\n    assertEquals(\"aa9\", next(te));\n    assertEquals(\"xx\", next(te));\n\n    testRandomSeeks(r, terms);\n    close();\n  }\n\n","sourceOld":"  public void testFloorBlocks() throws Exception {\n    final String[] terms = new String[] {\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\", \"aa\", \"xx\"};\n    r = makeIndex(terms);\n    //r = makeIndex(\"aa0\", \"aa1\", \"aa2\", \"aa3\", \"aa4\", \"aa5\", \"aa6\", \"aa7\", \"aa8\", \"aa9\");\n\n    // First term in first block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // No block\n    assertEquals(0, docFreq(r, \"bb0\"));\n\n    // Second block\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    // Backwards to prior floor block:\n    assertEquals(1, docFreq(r, \"aa0\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n    assertEquals(0, docFreq(r, \"a\"));\n    assertEquals(1, docFreq(r, \"aa\"));\n\n    // Forwards to last floor block:\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa1\"));\n    assertEquals(0, docFreq(r, \"yy\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa9\"));\n\n    assertEquals(1, docFreq(r, \"xx\"));\n    assertEquals(1, docFreq(r, \"aa4\"));\n\n    final TermsEnum te = MultiFields.getTerms(r, FIELD).iterator(null);\n    while(te.next() != null) {\n      //System.out.println(\"TEST: next term=\" + te.term().utf8ToString());\n    }\n\n    assertTrue(seekExact(te, \"aa1\"));\n    assertEquals(\"aa2\", next(te));\n    assertTrue(seekExact(te, \"aa8\"));\n    assertEquals(\"aa9\", next(te));\n    assertEquals(\"xx\", next(te));\n\n    testRandomSeeks(r, terms);\n    close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}