{"path":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecationRemoved().mjava","commits":[{"id":"f3a7218407032c06bc1d6c57edf979e7788f5def","date":1326793293,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecationRemoved().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that only update.chain and not update.processor works (SOLR-2105)\n   */\n  public void testUpdateProcessorParamDeprecationRemoved() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(\"update.processor\", \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertTrue(\"Old param update.processor should not have any effect anymore\", true);\n    } catch (Exception e) {\n      assertFalse(\"Got wrong exception while testing update.chain\", e.getMessage().equals(\"unknown UpdateRequestProcessorChain: nonexistant\"));\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(\"update.processor\");\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecationRemoved().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecationRemoved().mjava","sourceNew":"  /**\n   * Tests that only update.chain and not update.processor works (SOLR-2105)\n   */\n  public void testUpdateProcessorParamDeprecationRemoved() throws Exception {\n    SolrCore core = h.getCore();\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(\"update.processor\", \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertTrue(\"Old param update.processor should not have any effect anymore\", true);\n    } catch (Exception e) {\n      assertFalse(\"Got wrong exception while testing update.chain\", e.getMessage().equals(\"unknown UpdateRequestProcessorChain: nonexistant\"));\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(\"update.processor\");\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that only update.chain and not update.processor works (SOLR-2105)\n   */\n  public void testUpdateProcessorParamDeprecationRemoved() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(\"update.processor\", \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertTrue(\"Old param update.processor should not have any effect anymore\", true);\n    } catch (Exception e) {\n      assertFalse(\"Got wrong exception while testing update.chain\", e.getMessage().equals(\"unknown UpdateRequestProcessorChain: nonexistant\"));\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(\"update.processor\");\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecationRemoved().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecationRemoved().mjava","sourceNew":"  /**\n   * Tests that only update.chain and not update.processor works (SOLR-2105)\n   */\n  public void testUpdateProcessorParamDeprecationRemoved() throws Exception {\n    SolrCore core = h.getCore();\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(\"update.processor\", \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n      handler.handleRequestBody(req, rsp);\n      assertTrue(\"Old param update.processor should not have any effect anymore\", true);\n    } catch (Exception e) {\n      assertFalse(\"Got wrong exception while testing update.chain\", e.getMessage().equals(\"unknown UpdateRequestProcessorChain: nonexistant\"));\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(\"update.processor\");\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n      handler.handleRequestBody(req, rsp);\n      assertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n      assertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that only update.chain and not update.processor works (SOLR-2105)\n   */\n  public void testUpdateProcessorParamDeprecationRemoved() throws Exception {\n    SolrCore core = h.getCore();\n    \n    UpdateRequestHandler handler = new UpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(\"update.processor\", \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertTrue(\"Old param update.processor should not have any effect anymore\", true);\n    } catch (Exception e) {\n      assertFalse(\"Got wrong exception while testing update.chain\", e.getMessage().equals(\"unknown UpdateRequestProcessorChain: nonexistant\"));\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(\"update.processor\");\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["f3a7218407032c06bc1d6c57edf979e7788f5def"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3a7218407032c06bc1d6c57edf979e7788f5def":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3a7218407032c06bc1d6c57edf979e7788f5def"],"f3a7218407032c06bc1d6c57edf979e7788f5def":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}