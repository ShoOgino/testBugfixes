{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","sourceNew":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenListStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"hello_world\");\n    assertNext(ts, reusableToken, \"greetings_world\");\n    assertNext(ts, reusableToken, \"hello_earth\");\n    assertNext(ts, reusableToken, \"greetings_earth\");\n    assertNext(ts, reusableToken, \"hello_tellus\");\n    assertNext(ts, reusableToken, \"greetings_tellus\");\n    assertNull(ts.next(reusableToken));\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, reusableToken, \"helloworld\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingsworld\", 0, 10);\n    assertNext(ts, reusableToken, \"helloearth\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingsearth\", 0, 10);\n    assertNext(ts, reusableToken, \"hellotellus\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingstellus\", 0, 10);\n    assertNull(ts.next(reusableToken));\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new TokenListStream(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNull(ts.next(reusableToken));\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertNull(ts.next(reusableToken));\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertNull(ts.next(reusableToken));\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, reusableToken, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, reusableToken, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertNull(ts.next(reusableToken));\n\n    System.currentTimeMillis();\n\n\n  }\n\n","sourceOld":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenListStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"hello_world\");\n    assertNext(ts, reusableToken, \"greetings_world\");\n    assertNext(ts, reusableToken, \"hello_earth\");\n    assertNext(ts, reusableToken, \"greetings_earth\");\n    assertNext(ts, reusableToken, \"hello_tellus\");\n    assertNext(ts, reusableToken, \"greetings_tellus\");\n    assertNull(ts.next(reusableToken));\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, reusableToken, \"helloworld\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingsworld\", 0, 10);\n    assertNext(ts, reusableToken, \"helloearth\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingsearth\", 0, 10);\n    assertNext(ts, reusableToken, \"hellotellus\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingstellus\", 0, 10);\n    assertNull(ts.next(reusableToken));\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new TokenListStream(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNull(ts.next(reusableToken));\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertNull(ts.next(reusableToken));\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertNull(ts.next(reusableToken));\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, reusableToken, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, reusableToken, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertNull(ts.next(reusableToken));\n\n    System.currentTimeMillis();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","sourceNew":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    final Token reusableToken = new Token();\n    assertNext(ts, \"hello_world\");\n    assertNext(ts, \"greetings_world\");\n    assertNext(ts, \"hello_earth\");\n    assertNext(ts, \"greetings_earth\");\n    assertNext(ts, \"hello_tellus\");\n    assertNext(ts, \"greetings_tellus\");\n    assertFalse(ts.incrementToken());\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, \"helloworld\", 0, 10);\n    assertNext(ts, \"greetingsworld\", 0, 10);\n    assertNext(ts, \"helloearth\", 0, 10);\n    assertNext(ts, \"greetingsearth\", 0, 10);\n    assertNext(ts, \"hellotellus\", 0, 10);\n    assertNext(ts, \"greetingstellus\", 0, 10);\n    assertFalse(ts.incrementToken());\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new CachingTokenFilter(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n\n  }\n\n","sourceOld":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenListStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"hello_world\");\n    assertNext(ts, reusableToken, \"greetings_world\");\n    assertNext(ts, reusableToken, \"hello_earth\");\n    assertNext(ts, reusableToken, \"greetings_earth\");\n    assertNext(ts, reusableToken, \"hello_tellus\");\n    assertNext(ts, reusableToken, \"greetings_tellus\");\n    assertNull(ts.next(reusableToken));\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, reusableToken, \"helloworld\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingsworld\", 0, 10);\n    assertNext(ts, reusableToken, \"helloearth\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingsearth\", 0, 10);\n    assertNext(ts, reusableToken, \"hellotellus\", 0, 10);\n    assertNext(ts, reusableToken, \"greetingstellus\", 0, 10);\n    assertNull(ts.next(reusableToken));\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new TokenListStream(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNull(ts.next(reusableToken));\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertNull(ts.next(reusableToken));\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, reusableToken, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, reusableToken, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, reusableToken, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, reusableToken, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, reusableToken, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertNull(ts.next(reusableToken));\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, reusableToken, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, reusableToken, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, reusableToken, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, reusableToken, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, reusableToken, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, reusableToken, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertNull(ts.next(reusableToken));\n\n    System.currentTimeMillis();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054f92bb0a8ff8d94755c13351fbfc928e3e9760","date":1252294178,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","sourceNew":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    assertNext(ts, \"hello_world\");\n    assertNext(ts, \"greetings_world\");\n    assertNext(ts, \"hello_earth\");\n    assertNext(ts, \"greetings_earth\");\n    assertNext(ts, \"hello_tellus\");\n    assertNext(ts, \"greetings_tellus\");\n    assertFalse(ts.incrementToken());\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, \"helloworld\", 0, 10);\n    assertNext(ts, \"greetingsworld\", 0, 10);\n    assertNext(ts, \"helloearth\", 0, 10);\n    assertNext(ts, \"greetingsearth\", 0, 10);\n    assertNext(ts, \"hellotellus\", 0, 10);\n    assertNext(ts, \"greetingstellus\", 0, 10);\n    assertFalse(ts.incrementToken());\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new CachingTokenFilter(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n\n  }\n\n","sourceOld":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    final Token reusableToken = new Token();\n    assertNext(ts, \"hello_world\");\n    assertNext(ts, \"greetings_world\");\n    assertNext(ts, \"hello_earth\");\n    assertNext(ts, \"greetings_earth\");\n    assertNext(ts, \"hello_tellus\");\n    assertNext(ts, \"greetings_tellus\");\n    assertFalse(ts.incrementToken());\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, \"helloworld\", 0, 10);\n    assertNext(ts, \"greetingsworld\", 0, 10);\n    assertNext(ts, \"helloearth\", 0, 10);\n    assertNext(ts, \"greetingsearth\", 0, 10);\n    assertNext(ts, \"hellotellus\", 0, 10);\n    assertNext(ts, \"greetingstellus\", 0, 10);\n    assertFalse(ts.incrementToken());\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new CachingTokenFilter(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","sourceNew":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    assertNext(ts, \"hello_world\");\n    assertNext(ts, \"greetings_world\");\n    assertNext(ts, \"hello_earth\");\n    assertNext(ts, \"greetings_earth\");\n    assertNext(ts, \"hello_tellus\");\n    assertNext(ts, \"greetings_tellus\");\n    assertFalse(ts.incrementToken());\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, \"helloworld\", 0, 10);\n    assertNext(ts, \"greetingsworld\", 0, 10);\n    assertNext(ts, \"helloearth\", 0, 10);\n    assertNext(ts, \"greetingsearth\", 0, 10);\n    assertNext(ts, \"hellotellus\", 0, 10);\n    assertNext(ts, \"greetingstellus\", 0, 10);\n    assertFalse(ts.incrementToken());\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new CachingTokenFilter(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n\n  }\n\n","sourceOld":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    assertNext(ts, \"hello_world\");\n    assertNext(ts, \"greetings_world\");\n    assertNext(ts, \"hello_earth\");\n    assertNext(ts, \"greetings_earth\");\n    assertNext(ts, \"hello_tellus\");\n    assertNext(ts, \"greetings_tellus\");\n    assertFalse(ts.incrementToken());\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, \"helloworld\", 0, 10);\n    assertNext(ts, \"greetingsworld\", 0, 10);\n    assertNext(ts, \"helloearth\", 0, 10);\n    assertNext(ts, \"greetingsearth\", 0, 10);\n    assertNext(ts, \"hellotellus\", 0, 10);\n    assertNext(ts, \"greetingstellus\", 0, 10);\n    assertFalse(ts.incrementToken());\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new CachingTokenFilter(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testTokenStream().mjava","sourceNew":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    assertNext(ts, \"hello_world\");\n    assertNext(ts, \"greetings_world\");\n    assertNext(ts, \"hello_earth\");\n    assertNext(ts, \"greetings_earth\");\n    assertNext(ts, \"hello_tellus\");\n    assertNext(ts, \"greetings_tellus\");\n    assertFalse(ts.incrementToken());\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, \"helloworld\", 0, 10);\n    assertNext(ts, \"greetingsworld\", 0, 10);\n    assertNext(ts, \"helloearth\", 0, 10);\n    assertNext(ts, \"greetingsearth\", 0, 10);\n    assertNext(ts, \"hellotellus\", 0, 10);\n    assertNext(ts, \"greetingstellus\", 0, 10);\n    assertFalse(ts.incrementToken());\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new CachingTokenFilter(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n\n  }\n\n","sourceOld":"  /**\n   * Extracts a matrix from a token stream.\n   * @throws IOException\n   */\n  public void testTokenStream() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;//new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    TokenStream ts;\n    TokenStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 0, 4));\n    tokens.add(tokenFactory(\"greetings\", 0, 0, 4));\n    tokens.add(tokenFactory(\"world\", 1, 5, 10));\n    tokens.add(tokenFactory(\"earth\", 0, 5, 10));\n    tokens.add(tokenFactory(\"tellus\", 0, 5, 10));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n\n    assertNext(ts, \"hello_world\");\n    assertNext(ts, \"greetings_world\");\n    assertNext(ts, \"hello_earth\");\n    assertNext(ts, \"greetings_earth\");\n    assertNext(ts, \"hello_tellus\");\n    assertNext(ts, \"greetings_tellus\");\n    assertFalse(ts.incrementToken());\n\n    // bi-grams with no spacer character, start offset, end offset\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 2, 2, null, false, new ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec());\n    assertNext(ts, \"helloworld\", 0, 10);\n    assertNext(ts, \"greetingsworld\", 0, 10);\n    assertNext(ts, \"helloearth\", 0, 10);\n    assertNext(ts, \"greetingsearth\", 0, 10);\n    assertNext(ts, \"hellotellus\", 0, 10);\n    assertNext(ts, \"greetingstellus\", 0, 10);\n    assertFalse(ts.incrementToken());\n\n\n    // add ^_prefix_and_suffix_$\n    //\n    // using 3d codec as it supports weights\n\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 0, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 0, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    ts = new PrefixAndSuffixAwareTokenFilter(new SingleTokenTokenStream(tokenFactory(\"^\", 1, 100f, 0, 0)), tls, new SingleTokenTokenStream(tokenFactory(\"$\", 1, 50f, 0, 0)));\n    tls = new CachingTokenFilter(ts);\n\n    // bi-grams, position incrememnt, weight, start offset, end offset\n\n    ts = new ShingleMatrixFilter(tls, 2, 2, new Character('_'), false);\n//\n//    for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size and allow single boundary token as shingle\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), false);\n\n//\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^\", 1, 10.0f, 0, 0);\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"$\", 1, 7.071068f, 10, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    // test unlimited size but don't allow single boundary token as shingle\n\n    tls.reset();\n    ts = new ShingleMatrixFilter(tls, 1, Integer.MAX_VALUE, new Character('_'), true);\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"^_hello\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_hello_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"world\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"world_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings\", 1, 10.049875f, 0, 4);\n    assertNext(ts, \"^_greetings_world\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_world_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings\", 1, 1.0f, 0, 4);\n    assertNext(ts, \"greetings_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_world_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"earth\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"earth_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_earth\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_earth_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_earth_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"^_hello_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_hello_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus_$\", 1, 7.2111025f, 0, 10);\n    assertNext(ts, \"tellus\", 1, 1.0f, 5, 10);\n    assertNext(ts, \"tellus_$\", 1, 7.1414285f, 5, 10);\n    assertNext(ts, \"^_greetings_tellus\", 1, 10.099504f, 0, 10);\n    assertNext(ts, \"^_greetings_tellus_$\", 1, 12.328828f, 0, 10);\n    assertNext(ts, \"greetings_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_tellus_$\", 1, 7.2111025f, 0, 10);\n\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n    // multi-token synonyms\n    //\n    // Token[][][] {\n    //    {{hello}, {greetings, and, salutations},\n    //    {{world}, {earth}, {tellus}}\n    // }\n    //\n\n\n    tokens = new LinkedList<Token>();\n    tokens.add(tokenFactory(\"hello\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"greetings\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"and\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"salutations\", 1, 1f, 0, 4, ShingleMatrixFilter.TokenPositioner.sameRow));\n    tokens.add(tokenFactory(\"world\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newColumn));\n    tokens.add(tokenFactory(\"earth\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n    tokens.add(tokenFactory(\"tellus\", 1, 1f, 5, 10, ShingleMatrixFilter.TokenPositioner.newRow));\n\n    tls = new TokenListStream(tokens);\n\n    // 2-3 grams\n\n    ts = new ShingleMatrixFilter(tls, 2, 3, new Character('_'), false);\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    // shingle, position increment, weight, start offset, end offset\n\n    assertNext(ts, \"hello_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"greetings_and\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"greetings_and_salutations\", 1, 1.7320508f, 0, 4);\n    assertNext(ts, \"and_salutations\", 1, 1.4142135f, 0, 4);\n    assertNext(ts, \"and_salutations_world\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_world\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_earth\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_earth\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"hello_tellus\", 1, 1.4142135f, 0, 10);\n    assertNext(ts, \"and_salutations_tellus\", 1, 1.7320508f, 0, 10);\n    assertNext(ts, \"salutations_tellus\", 1, 1.4142135f, 0, 10);\n\n    assertFalse(ts.incrementToken());\n\n    System.currentTimeMillis();\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dda87e5ad7246b25d0da56a16ead95360499d86":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["054f92bb0a8ff8d94755c13351fbfc928e3e9760"],"054f92bb0a8ff8d94755c13351fbfc928e3e9760":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["054f92bb0a8ff8d94755c13351fbfc928e3e9760"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"054f92bb0a8ff8d94755c13351fbfc928e3e9760":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}