{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readFieldTermStatesMap(DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,Map[String,BlockTermState]).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readFieldTermStatesMap(DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,Map[String,BlockTermState]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Reads all the {@link BlockTermState} of all the field in the current block line of the provided input.\n     * @param fieldTermStatesMap Map filled with the term states for each field. It is cleared first.\n     * @see #readTermStateForField\n     */\n    public static void readFieldTermStatesMap(DataInput termStatesInput,\n                                       DeltaBaseTermStateSerializer termStateSerializer,\n                                       BlockHeader blockHeader,\n                                       FieldInfos fieldInfos,\n                                       Map<String, BlockTermState> fieldTermStatesMap) throws IOException {\n      fieldTermStatesMap.clear();\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int fieldId = -numFields;\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n        return;\n      }\n      for (int fieldId : readFieldIds(termStatesInput, numFields)) {\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readFieldTermStatesMap(DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,Map[String,BlockTermState]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readFieldTermStatesMap(DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,Map[String,BlockTermState]).mjava","sourceNew":"    /**\n     * Reads all the {@link BlockTermState} of all the field in the current block line of the provided input.\n     * @param fieldTermStatesMap Map filled with the term states for each field. It is cleared first.\n     * @see #readTermStateForField\n     */\n    public void readFieldTermStatesMap(DataInput termStatesInput,\n                                       DeltaBaseTermStateSerializer termStateSerializer,\n                                       BlockHeader blockHeader,\n                                       FieldInfos fieldInfos,\n                                       Map<String, BlockTermState> fieldTermStatesMap) throws IOException {\n      fieldTermStatesMap.clear();\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int fieldId = -numFields;\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n        return;\n      }\n      for (int fieldId : readFieldIds(termStatesInput, numFields)) {\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n      }\n    }\n\n","sourceOld":"    /**\n     * Reads all the {@link BlockTermState} of all the field in the current block line of the provided input.\n     * @param fieldTermStatesMap Map filled with the term states for each field. It is cleared first.\n     * @see #readTermStateForField\n     */\n    public static void readFieldTermStatesMap(DataInput termStatesInput,\n                                       DeltaBaseTermStateSerializer termStateSerializer,\n                                       BlockHeader blockHeader,\n                                       FieldInfos fieldInfos,\n                                       Map<String, BlockTermState> fieldTermStatesMap) throws IOException {\n      fieldTermStatesMap.clear();\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int fieldId = -numFields;\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n        return;\n      }\n      for (int fieldId : readFieldIds(termStatesInput, numFields)) {\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readFieldTermStatesMap(DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,Map[String,BlockTermState]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/sharedterms/STBlockLine.Serializer#readFieldTermStatesMap(DataInput,DeltaBaseTermStateSerializer,BlockHeader,FieldInfos,Map[String,BlockTermState]).mjava","sourceNew":"    /**\n     * Reads all the {@link BlockTermState} of all the field in the current block line of the provided input.\n     * @param fieldTermStatesMap Map filled with the term states for each field. It is cleared first.\n     * @see #readTermStateForField\n     */\n    public void readFieldTermStatesMap(DataInput termStatesInput,\n                                       DeltaBaseTermStateSerializer termStateSerializer,\n                                       BlockHeader blockHeader,\n                                       FieldInfos fieldInfos,\n                                       Map<String, BlockTermState> fieldTermStatesMap) throws IOException {\n      fieldTermStatesMap.clear();\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int fieldId = -numFields;\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n        return;\n      }\n      for (int fieldId : readFieldIds(termStatesInput, numFields)) {\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n      }\n    }\n\n","sourceOld":"    /**\n     * Reads all the {@link BlockTermState} of all the field in the current block line of the provided input.\n     * @param fieldTermStatesMap Map filled with the term states for each field. It is cleared first.\n     * @see #readTermStateForField\n     */\n    public static void readFieldTermStatesMap(DataInput termStatesInput,\n                                       DeltaBaseTermStateSerializer termStateSerializer,\n                                       BlockHeader blockHeader,\n                                       FieldInfos fieldInfos,\n                                       Map<String, BlockTermState> fieldTermStatesMap) throws IOException {\n      fieldTermStatesMap.clear();\n      int numFields = termStatesInput.readZInt();\n      if (numFields <= 0) {\n        int fieldId = -numFields;\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n        return;\n      }\n      for (int fieldId : readFieldIds(termStatesInput, numFields)) {\n        fieldTermStatesMap.put(fieldInfos.fieldInfo(fieldId).name, termStateSerializer.readTermState(blockHeader.getBaseDocsFP(), blockHeader.getBasePositionsFP(),\n            blockHeader.getBasePayloadsFP(), termStatesInput, fieldInfos.fieldInfo(fieldId), null));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}