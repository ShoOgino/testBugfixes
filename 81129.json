{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetReplicaValues(String,Map[String,Map[String,List[ReplicaInfo]]],boolean).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetReplicaValues(String,Map[String,Map[String,List[ReplicaInfo]]],boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void simSetReplicaValues(String node, Map<String, Map<String, List<ReplicaInfo>>> source, boolean overwrite) {\n    List<ReplicaInfo> infos = nodeReplicaMap.get(node);\n    Map<String, ReplicaInfo> infoMap = new HashMap<>();\n    infos.forEach(ri -> infoMap.put(ri.getName(), ri));\n    if (infos == null) {\n      throw new RuntimeException(\"Node not present: \" + node);\n    }\n    source.forEach((coll, shards) -> shards.forEach((shard, replicas) -> replicas.forEach(r -> {\n      ReplicaInfo target = infoMap.get(r.getName());\n      if (target == null) {\n        throw new RuntimeException(\"Unable to find simulated replica of \" + r);\n      }\n      r.getVariables().forEach((k, v) -> {\n        if (target.getVariables().containsKey(k)) {\n          if (overwrite) {\n            target.getVariables().put(k, v);\n          }\n        } else {\n          target.getVariables().put(k, v);\n        }\n      });\n    })));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetReplicaValues(String,Map[String,Map[String,List[ReplicaInfo]]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetReplicaValues(String,Map[String,Map[String,List[ReplicaInfo]]],boolean).mjava","sourceNew":"  public void simSetReplicaValues(String node, Map<String, Map<String, List<ReplicaInfo>>> source, boolean overwrite) {\n    List<ReplicaInfo> infos = nodeReplicaMap.get(node);\n    if (infos == null) {\n      throw new RuntimeException(\"Node not present: \" + node);\n    }\n    // core_node_name is not unique across collections\n    Map<String, Map<String, ReplicaInfo>> infoMap = new HashMap<>();\n    infos.forEach(ri -> infoMap.computeIfAbsent(ri.getCollection(), Utils.NEW_HASHMAP_FUN).put(ri.getName(), ri));\n    source.forEach((coll, shards) -> shards.forEach((shard, replicas) -> replicas.forEach(r -> {\n      ReplicaInfo target = infoMap.getOrDefault(coll, Collections.emptyMap()).get(r.getName());\n      if (target == null) {\n        throw new RuntimeException(\"Unable to find simulated replica of \" + r);\n      }\n      r.getVariables().forEach((k, v) -> {\n        if (target.getVariables().containsKey(k)) {\n          if (overwrite) {\n            target.getVariables().put(k, v);\n          }\n        } else {\n          target.getVariables().put(k, v);\n        }\n      });\n    })));\n  }\n\n","sourceOld":"  public void simSetReplicaValues(String node, Map<String, Map<String, List<ReplicaInfo>>> source, boolean overwrite) {\n    List<ReplicaInfo> infos = nodeReplicaMap.get(node);\n    Map<String, ReplicaInfo> infoMap = new HashMap<>();\n    infos.forEach(ri -> infoMap.put(ri.getName(), ri));\n    if (infos == null) {\n      throw new RuntimeException(\"Node not present: \" + node);\n    }\n    source.forEach((coll, shards) -> shards.forEach((shard, replicas) -> replicas.forEach(r -> {\n      ReplicaInfo target = infoMap.get(r.getName());\n      if (target == null) {\n        throw new RuntimeException(\"Unable to find simulated replica of \" + r);\n      }\n      r.getVariables().forEach((k, v) -> {\n        if (target.getVariables().containsKey(k)) {\n          if (overwrite) {\n            target.getVariables().put(k, v);\n          }\n        } else {\n          target.getVariables().put(k, v);\n        }\n      });\n    })));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetReplicaValues(String,Map[String,Map[String,List[ReplicaInfo]]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetReplicaValues(String,Map[String,Map[String,List[ReplicaInfo]]],boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void simSetReplicaValues(String node, Map<String, Map<String, List<ReplicaInfo>>> source, boolean overwrite) {\n    List<ReplicaInfo> infos = nodeReplicaMap.get(node);\n    if (infos == null) {\n      throw new RuntimeException(\"Node not present: \" + node);\n    }\n    // core_node_name is not unique across collections\n    Map<String, Map<String, ReplicaInfo>> infoMap = new HashMap<>();\n    infos.forEach(ri -> infoMap.computeIfAbsent(ri.getCollection(), Utils.NEW_HASHMAP_FUN).put(ri.getName(), ri));\n    source.forEach((coll, shards) -> shards.forEach((shard, replicas) -> replicas.forEach(r -> {\n      ReplicaInfo target = infoMap.getOrDefault(coll, Collections.emptyMap()).get(r.getName());\n      if (target == null) {\n        throw new RuntimeException(\"Unable to find simulated replica of \" + r);\n      }\n      r.getVariables().forEach((k, v) -> {\n        if (target.getVariables().containsKey(k)) {\n          if (overwrite) {\n            target.getVariables().put(k, v);\n          }\n        } else {\n          target.getVariables().put(k, v);\n        }\n      });\n    })));\n  }\n\n","sourceOld":"  public void simSetReplicaValues(String node, Map<String, Map<String, List<ReplicaInfo>>> source, boolean overwrite) {\n    List<ReplicaInfo> infos = nodeReplicaMap.get(node);\n    if (infos == null) {\n      throw new RuntimeException(\"Node not present: \" + node);\n    }\n    // core_node_name is not unique across collections\n    Map<String, Map<String, ReplicaInfo>> infoMap = new HashMap<>();\n    infos.forEach(ri -> infoMap.computeIfAbsent(ri.getCollection(), Utils.NEW_HASHMAP_FUN).put(ri.getName(), ri));\n    source.forEach((coll, shards) -> shards.forEach((shard, replicas) -> replicas.forEach(r -> {\n      ReplicaInfo target = infoMap.getOrDefault(coll, Collections.emptyMap()).get(r.getName());\n      if (target == null) {\n        throw new RuntimeException(\"Unable to find simulated replica of \" + r);\n      }\n      r.getVariables().forEach((k, v) -> {\n        if (target.getVariables().containsKey(k)) {\n          if (overwrite) {\n            target.getVariables().put(k, v);\n          }\n        } else {\n          target.getVariables().put(k, v);\n        }\n      });\n    })));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetReplicaValues(String,Map[String,Map[String,List[Replica]]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simSetReplicaValues(String,Map[String,Map[String,List[ReplicaInfo]]],boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void simSetReplicaValues(String node, Map<String, Map<String, List<Replica>>> source, boolean overwrite) {\n    List<Replica> infos = nodeReplicaMap.get(node);\n    if (infos == null) {\n      throw new RuntimeException(\"Node not present: \" + node);\n    }\n    // core_node_name is not unique across collections\n    Map<String, Map<String, Replica>> infoMap = new HashMap<>();\n    infos.forEach(ri -> infoMap.computeIfAbsent(ri.getCollection(), Utils.NEW_HASHMAP_FUN).put(ri.getName(), ri));\n    source.forEach((coll, shards) -> shards.forEach((shard, replicas) -> replicas.forEach(r -> {\n      Replica target = infoMap.getOrDefault(coll, Collections.emptyMap()).get(r.getName());\n      if (target == null) {\n        throw new RuntimeException(\"Unable to find simulated replica of \" + r);\n      }\n      r.getProperties().forEach((k, v) -> {\n        if (target.getProperties().containsKey(k)) {\n          if (overwrite) {\n            target.getProperties().put(k, v);\n          }\n        } else {\n          target.getProperties().put(k, v);\n        }\n      });\n    })));\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void simSetReplicaValues(String node, Map<String, Map<String, List<ReplicaInfo>>> source, boolean overwrite) {\n    List<ReplicaInfo> infos = nodeReplicaMap.get(node);\n    if (infos == null) {\n      throw new RuntimeException(\"Node not present: \" + node);\n    }\n    // core_node_name is not unique across collections\n    Map<String, Map<String, ReplicaInfo>> infoMap = new HashMap<>();\n    infos.forEach(ri -> infoMap.computeIfAbsent(ri.getCollection(), Utils.NEW_HASHMAP_FUN).put(ri.getName(), ri));\n    source.forEach((coll, shards) -> shards.forEach((shard, replicas) -> replicas.forEach(r -> {\n      ReplicaInfo target = infoMap.getOrDefault(coll, Collections.emptyMap()).get(r.getName());\n      if (target == null) {\n        throw new RuntimeException(\"Unable to find simulated replica of \" + r);\n      }\n      r.getVariables().forEach((k, v) -> {\n        if (target.getVariables().containsKey(k)) {\n          if (overwrite) {\n            target.getVariables().put(k, v);\n          }\n        } else {\n          target.getVariables().put(k, v);\n        }\n      });\n    })));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}