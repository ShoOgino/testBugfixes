{"path":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = new TopScoreDocCollector(scores.length);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (!s.next()) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (!s.next()) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = new TopScoreDocCollector(scores.length);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (!s.next()) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (!s.next()) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositiveScoresOnlyCollector#testNegativeScores().mjava","sourceNew":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","sourceOld":"  public void testNegativeScores() throws Exception {\n  \n    // The Top*Collectors previously filtered out documents with <= scores. This\n    // behavior has changed. This test checks that if PositiveOnlyScoresFilter\n    // wraps one of these collectors, documents with <= 0 scores are indeed\n    // filtered.\n    \n    int numPositiveScores = 0;\n    for (int i = 0; i < scores.length; i++) {\n      if (scores[i] > 0) {\n        ++numPositiveScores;\n      }\n    }\n    \n    Scorer s = new SimpleScorer();\n    TopDocsCollector<ScoreDoc> tdc = TopScoreDocCollector.create(scores.length, true);\n    Collector c = new PositiveScoresOnlyCollector(tdc);\n    c.setScorer(s);\n    while (s.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      c.collect(0);\n    }\n    TopDocs td = tdc.topDocs();\n    ScoreDoc[] sd = td.scoreDocs;\n    assertEquals(numPositiveScores, td.totalHits);\n    for (int i = 0; i < sd.length; i++) {\n      assertTrue(\"only positive scores should return: \" + sd[i].score, sd[i].score > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"30a558487f2298c2c19ceca9103c1b6865d64708":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"30a558487f2298c2c19ceca9103c1b6865d64708":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}