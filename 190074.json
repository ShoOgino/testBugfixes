{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.SortedDocValuesImpl.SortedDocValuesEnum#seekExact(long).mjava","commits":[{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.SortedDocValuesImpl.SortedDocValuesEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexImpl.DocTermsIndexEnum#seekExact(long).mjava","sourceNew":"      @Override\n      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord < numOrd;\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","sourceOld":"      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord <= numOrd;\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a","date":1358789155,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.SortedDocValuesImpl.SortedDocValuesEnum#seekExact(long).mjava","sourceNew":null,"sourceOld":"      @Override\n      public void seekExact(long ord) throws IOException {\n        assert ord >= 0 && ord < numOrd;\n        // TODO: if gap is small, could iterate from current position?  Or let user decide that?\n        currentBlockNumber = bytes.fillAndGetIndex(term, termOrdToBytesOffset.get((int)ord));\n        end = blockEnds[currentBlockNumber];\n        currentOrd = (int)ord;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d7e5f3aa5935964617824d1f9b2599ddb334464","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["49bbfc33f80659ba9aa9d301edaae82dd4e01b5a"],"49bbfc33f80659ba9aa9d301edaae82dd4e01b5a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["49bbfc33f80659ba9aa9d301edaae82dd4e01b5a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}