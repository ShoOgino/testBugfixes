{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#assertReaderClosed(IndexReader,boolean,boolean).mjava","sourceNew":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","sourceOld":"  static void assertReaderClosed(IndexReader reader, boolean checkSubReaders, boolean checkNormsClosed) {\n    assertEquals(0, reader.getRefCount());\n    \n    if (checkNormsClosed && reader instanceof AtomicReader) {\n      // TODO: should we really assert something here? we check for open files and this is obselete...\n      // assertTrue(((SegmentReader) reader).normsClosed());\n    }\n    \n    if (checkSubReaders && reader instanceof CompositeReader) {\n      IndexReader[] subReaders = ((CompositeReader) reader).getSequentialSubReaders();\n      for (int i = 0; i < subReaders.length; i++) {\n        assertReaderClosed(subReaders[i], checkSubReaders, checkNormsClosed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}