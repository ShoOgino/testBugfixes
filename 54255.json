{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType).mjava","commits":[{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValuesType dvType) {\n      if (dvType != null) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != null && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValuesType dvType) {\n      if (dvType != null) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != null && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValuesType dvType) {\n      if (dvType != DocValuesType.NO) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NO && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValuesType dvType) {\n      if (dvType != null) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != null && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        \n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValuesType dvType) {\n      if (dvType != DocValuesType.NONE) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValuesType dvType) {\n      if (dvType != DocValuesType.NO) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NO && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.FieldNumbers#addOrGet(String,int,DocValuesType).mjava","sourceNew":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValuesType dvType, int dimensionCount, int dimensionNumBytes) {\n      if (dvType != DocValuesType.NONE) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      if (dimensionCount != 0) {\n        FieldDimensions dims = dimensions.get(fieldName);\n        if (dims != null) {\n          if (dims.dimensionCount != dimensionCount) {\n            throw new IllegalArgumentException(\"cannot change dimension count from \" + dims.dimensionCount + \" to \" + dimensionCount + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n          if (dims.dimensionNumBytes != dimensionNumBytes) {\n            throw new IllegalArgumentException(\"cannot change dimension numBytes from \" + dims.dimensionNumBytes + \" to \" + dimensionNumBytes + \" for field=\\\"\" + fieldName + \"\\\"\");\n          }\n        } else {\n          dimensions.put(fieldName, new FieldDimensions(dimensionCount, dimensionNumBytes));\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","sourceOld":"    /**\n     * Returns the global field number for the given field name. If the name\n     * does not exist yet it tries to add it with the given preferred field\n     * number assigned if possible otherwise the first unassigned field number\n     * is used as the field number.\n     */\n    synchronized int addOrGet(String fieldName, int preferredFieldNumber, DocValuesType dvType) {\n      if (dvType != DocValuesType.NONE) {\n        DocValuesType currentDVType = docValuesType.get(fieldName);\n        if (currentDVType == null) {\n          docValuesType.put(fieldName, dvType);\n        } else if (currentDVType != DocValuesType.NONE && currentDVType != dvType) {\n          throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + dvType + \" for field \\\"\" + fieldName + \"\\\"\");\n        }\n      }\n      Integer fieldNumber = nameToNumber.get(fieldName);\n      if (fieldNumber == null) {\n        final Integer preferredBoxed = Integer.valueOf(preferredFieldNumber);\n        if (preferredFieldNumber != -1 && !numberToName.containsKey(preferredBoxed)) {\n          // cool - we can use this number globally\n          fieldNumber = preferredBoxed;\n        } else {\n          // find a new FieldNumber\n          while (numberToName.containsKey(++lowestUnassignedFieldNumber)) {\n            // might not be up to date - lets do the work once needed\n          }\n          fieldNumber = lowestUnassignedFieldNumber;\n        }\n        assert fieldNumber >= 0;\n        numberToName.put(fieldNumber, fieldName);\n        nameToNumber.put(fieldName, fieldNumber);\n      }\n\n      return fieldNumber.intValue();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0837ab0472feecb3a54260729d845f839e1cbd72"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}