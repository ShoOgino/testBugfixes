{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n      storeDelDocs(null);\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n      storeDelDocs(null);\n    }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n      storeDelDocs(null);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new OpenBitSet(maxDoc);\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.fastSet(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new OpenBitSet(maxDoc);\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.fastSet(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new OpenBitSet(maxDoc);\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.fastSet(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll() throws CorruptIndexException, IOException {\n      dels = new OpenBitSet(in.maxDoc());\n      if (oldDels != null) {\n        dels.or(oldDels);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new OpenBitSet(maxDoc);\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.fastSet(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    void undeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    void undeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#undeleteAll().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#doUndeleteAll().mjava","sourceNew":"    void undeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","sourceOld":"    /**\n     * Just removes our overlaid deletions - does not undelete the original\n     * deletions.\n     */\n    @Override\n    protected void doUndeleteAll()  {\n      final int maxDoc = in.maxDoc();\n      liveDocs = new FixedBitSet(in.maxDoc());\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        // this loop is a little bit ineffective, as Bits has no nextSetBit():\n        for (int i = 0; i < maxDoc; i++) {\n          if (oldLiveDocs.get(i)) liveDocs.set(i);\n        }\n      } else {\n        // mark all docs as valid\n        liveDocs.set(0, maxDoc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["406e7055a3e99d3fa6ce49a555a51dd18b321806","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["406e7055a3e99d3fa6ce49a555a51dd18b321806","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}