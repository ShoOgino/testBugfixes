{"path":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * @param path\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4281584355bbe0d25a40eb7990ca2184a954bfa6","date":1313725067,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * @param path\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * @throws IOException\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * Note: sometimes you might pass null for the rawLockType when\n   * you know the Directory exists and the rawLockType is already\n   * in use.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * Note: sometimes you might pass null for the rawLockType when\n   * you know the Directory exists and the rawLockType is already\n   * in use.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * Note: sometimes you might pass null for the rawLockType when\n   * you know the Directory exists and the rawLockType is already\n   * in use.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, DirContext dirContext, String rawLockType)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * Note: sometimes you might pass null for the rawLockType when\n   * you know the Directory exists and the rawLockType is already\n   * in use.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,DirContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/DirectoryFactory#get(String,String).mjava","sourceNew":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * Note: sometimes you might pass null for the rawLockType when\n   * you know the Directory exists and the rawLockType is already\n   * in use.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, DirContext dirContext, String rawLockType)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Returns the Directory for a given path, using the specified rawLockType.\n   * Will return the same Directory instance for the same path.\n   * \n   * Note: sometimes you might pass null for the rawLockType when\n   * you know the Directory exists and the rawLockType is already\n   * in use.\n   * \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public abstract Directory get(String path, String rawLockType)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4281584355bbe0d25a40eb7990ca2184a954bfa6"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d9405f486872f1e416304dfe389741f4ee2f8a4d","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"4281584355bbe0d25a40eb7990ca2184a954bfa6":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"4281584355bbe0d25a40eb7990ca2184a954bfa6":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"e22ffe8cc51a892ae103df018822d7873e901c2a":["4281584355bbe0d25a40eb7990ca2184a954bfa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}