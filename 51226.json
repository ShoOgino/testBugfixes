{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /** Must fully consume state, since after this call that\n   *  TermState may be reused. */\n  public abstract DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState state, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    SegmentDocsAndPositionsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n      docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n    } else {\n      docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","sourceOld":"  /** Must fully consume state, since after this call that\n   *  TermState may be reused. */\n  public abstract DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState state, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a37a7b0a78003a4b0171c6c70384c2a70c686670","date":1289859534,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    SegmentDocsAndPositionsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n      docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n    } else {\n      docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    SegmentDocsAndPositionsEnum docsEnum;\n    if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n      docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n    } else {\n      docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n      if (docsEnum.startFreqIn != freqIn) {\n        // If you are using ParellelReader, and pass in a\n        // reused DocsEnum, it could have come from another\n        // reader also using standard codec\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      }\n    }\n    return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    }\n  }\n\n","sourceOld":"  /** Must fully consume state, since after this call that\n   *  TermState may be reused. */\n  public abstract DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState state, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, PrefixCodedTermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a37a7b0a78003a4b0171c6c70384c2a70c686670":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["99cf56f3a650b908f7017a72f9d23940418f8a52","a37a7b0a78003a4b0171c6c70384c2a70c686670"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a37a7b0a78003a4b0171c6c70384c2a70c686670"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a37a7b0a78003a4b0171c6c70384c2a70c686670"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa1a999d6674423e5c4ac858b410283f6fe03f20"]},"commit2Childs":{"a37a7b0a78003a4b0171c6c70384c2a70c686670":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","fa1a999d6674423e5c4ac858b410283f6fe03f20","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a37a7b0a78003a4b0171c6c70384c2a70c686670","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}