{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestMappingCharFilterFactory#testParseString().mjava","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (InitializationException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (InitializationException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (InitializationException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (InitializationException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestMappingCharFilterFactory#testParseString().mjava","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (InitializationException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (InitializationException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (InitializationException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (InitializationException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (InitializationException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (InitializationException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory(new HashMap<String,String>());\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory();\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fd0281bb5fad2633a71c03272cc73b3f21589aa","date":1364839995,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = (MappingCharFilterFactory)charFilterFactory(\"Mapping\");\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","sourceOld":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = new MappingCharFilterFactory(new HashMap<String,String>());\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/TestMappingCharFilterFactory#testParseString().mjava","sourceNew":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = (MappingCharFilterFactory)charFilterFactory(\"Mapping\");\n\n    expectThrows(IllegalArgumentException.class, () -> {      \n      f.parseString(\"\\\\\");\n    });\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    expectThrows(IllegalArgumentException.class, () -> {      \n      f.parseString(\"\\\\u000\");\n    });\n\n    // invalid hex number\n    expectThrows(NumberFormatException.class, () -> {      \n      f.parseString(\"\\\\u123x\");\n    });\n  }\n\n","sourceOld":"  public void testParseString() throws Exception {\n\n    MappingCharFilterFactory f = (MappingCharFilterFactory)charFilterFactory(\"Mapping\");\n\n    try {\n      f.parseString( \"\\\\\" );\n      fail( \"escape character cannot be alone.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n    \n    assertEquals( \"unexpected escaped characters\",\n        \"\\\\\\\"\\n\\t\\r\\b\\f\", f.parseString( \"\\\\\\\\\\\\\\\"\\\\n\\\\t\\\\r\\\\b\\\\f\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"A\", f.parseString( \"\\\\u0041\" ) );\n    assertEquals( \"unexpected escaped characters\",\n        \"AB\", f.parseString( \"\\\\u0041\\\\u0042\" ) );\n\n    try {\n      f.parseString( \"\\\\u000\" );\n      fail( \"invalid length check.\" );\n    }\n    catch (IllegalArgumentException expected) {}\n\n    try {\n      f.parseString( \"\\\\u123x\" );\n      fail( \"invalid hex number check.\" );\n    }\n    catch( NumberFormatException expected ){}\n  }\n\n","bugFix":["f6f80818731469e00f54165ec94aae2db868ea05","00c1e7284eb0e728903446dd05972acc9905dd53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"6fd0281bb5fad2633a71c03272cc73b3f21589aa":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"05fe562aa248790944d43cdd478f512572835ba0":["6fd0281bb5fad2633a71c03272cc73b3f21589aa"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["f6f80818731469e00f54165ec94aae2db868ea05"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6fd0281bb5fad2633a71c03272cc73b3f21589aa":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["6fd0281bb5fad2633a71c03272cc73b3f21589aa"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}