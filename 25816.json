{"path":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","commits":[{"id":"b793398be7cbf26fb9faa722569a03f8cb44c6ac","date":1554453334,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    setupCluster(true, 100, false, null);\n    runAdminCommands();\n    assertTrue(\"Expecting <2 callbacks in buffer, was \" + testHarness.get().receiver.getBuffer().size(),\n        testHarness.get().receiver.getBuffer().size() < 2); // Events still on queue\n    // We shutdown cluster while events are still in queue\n    testHarness.get().shutdownCluster();\n    assertThreeAdminEvents();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6796e4de0fa1cfeb0d3693a7137dfa3d9c63aaf9","date":1556025496,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","sourceNew":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    setupCluster(true, 150, false, null);\n    runAdminCommands();\n    assertTrue(\"Expecting <3 callbacks in buffer, was \" + testHarness.get().receiver.getBuffer().size(),\n        testHarness.get().receiver.getBuffer().size() < 3); // Events still on queue\n    // We shutdown cluster while events are still in queue\n    testHarness.get().shutdownCluster();\n    assertThreeAdminEvents();\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    setupCluster(true, 100, false, null);\n    runAdminCommands();\n    assertTrue(\"Expecting <2 callbacks in buffer, was \" + testHarness.get().receiver.getBuffer().size(),\n        testHarness.get().receiver.getBuffer().size() < 2); // Events still on queue\n    // We shutdown cluster while events are still in queue\n    testHarness.get().shutdownCluster();\n    assertThreeAdminEvents();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","sourceNew":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    final AuditTestHarness harness = testHarness.get();\n    final Semaphore gate = new Semaphore(0);\n    CallbackAuditLoggerPlugin.BLOCKING_SEMAPHORES.put(\"testAsyncQueueDrain_semaphore\", gate);\n    setupCluster(true, \"testAsyncQueueDrain_semaphore\", false);\n\n    final int preShutdownEventsAllowed = TestUtil.nextInt(random(), 0, 2);\n    final int postShutdownEventsAllowed = 3 - preShutdownEventsAllowed;\n\n    // Starting by only allowing 2/3 of the (expected) events to be logged right away...\n    log.info(\"Test will allow {} events to happen prior to shutdown\", preShutdownEventsAllowed);\n    gate.release(preShutdownEventsAllowed);\n    runThreeTestAdminCommands();\n\n    final List<AuditEvent> events = new ArrayList\n      (harness.receiver.waitForAuditEvents(preShutdownEventsAllowed));\n    assertEquals(preShutdownEventsAllowed, events.size());\n\n    // Now shutdown cluster while 1 event still in process\n    // Do this in a background thread because it blocks...\n    final Thread shutdownThread = new DefaultSolrThreadFactory(\"shutdown\")\n      .newThread(() -> { try {\n            log.info(\"START Shutting down Cluster.\");\n            harness.shutdownCluster();\n            log.info(\"END   Shutting down Cluster.\");\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        });\n    try {\n      shutdownThread.start();\n      // release the ticket so the event can be processed\n      log.info(\"releasing final {} semaphore tickets...\", postShutdownEventsAllowed);\n      gate.release(postShutdownEventsAllowed);\n\n      events.addAll(harness.receiver.waitForAuditEvents(postShutdownEventsAllowed));\n\n      assertThreeTestAdminEvents(events);\n    } finally {\n      shutdownThread.join();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    setupCluster(true, 150, false, null);\n    runAdminCommands();\n    assertTrue(\"Expecting <3 callbacks in buffer, was \" + testHarness.get().receiver.getBuffer().size(),\n        testHarness.get().receiver.getBuffer().size() < 3); // Events still on queue\n    // We shutdown cluster while events are still in queue\n    testHarness.get().shutdownCluster();\n    assertThreeAdminEvents();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","sourceNew":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    final AuditTestHarness harness = testHarness.get();\n    final Semaphore gate = new Semaphore(0);\n    CallbackAuditLoggerPlugin.BLOCKING_SEMAPHORES.put(\"testAsyncQueueDrain_semaphore\", gate);\n    setupCluster(true, \"testAsyncQueueDrain_semaphore\", false);\n\n    final int preShutdownEventsAllowed = TestUtil.nextInt(random(), 0, 2);\n    final int postShutdownEventsAllowed = 3 - preShutdownEventsAllowed;\n\n    // Starting by only allowing 2/3 of the (expected) events to be logged right away...\n    log.info(\"Test will allow {} events to happen prior to shutdown\", preShutdownEventsAllowed);\n    gate.release(preShutdownEventsAllowed);\n    runThreeTestAdminCommands();\n\n    final List<AuditEvent> events = new ArrayList\n      (harness.receiver.waitForAuditEvents(preShutdownEventsAllowed));\n    assertEquals(preShutdownEventsAllowed, events.size());\n\n    // Now shutdown cluster while 1 event still in process\n    // Do this in a background thread because it blocks...\n    final Thread shutdownThread = new SolrNamedThreadFactory(\"shutdown\")\n      .newThread(() -> { try {\n            log.info(\"START Shutting down Cluster.\");\n            harness.shutdownCluster();\n            log.info(\"END   Shutting down Cluster.\");\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        });\n    try {\n      shutdownThread.start();\n      // release the ticket so the event can be processed\n      log.info(\"releasing final {} semaphore tickets...\", postShutdownEventsAllowed);\n      gate.release(postShutdownEventsAllowed);\n\n      events.addAll(harness.receiver.waitForAuditEvents(postShutdownEventsAllowed));\n\n      assertThreeTestAdminEvents(events);\n    } finally {\n      shutdownThread.join();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    final AuditTestHarness harness = testHarness.get();\n    final Semaphore gate = new Semaphore(0);\n    CallbackAuditLoggerPlugin.BLOCKING_SEMAPHORES.put(\"testAsyncQueueDrain_semaphore\", gate);\n    setupCluster(true, \"testAsyncQueueDrain_semaphore\", false);\n\n    final int preShutdownEventsAllowed = TestUtil.nextInt(random(), 0, 2);\n    final int postShutdownEventsAllowed = 3 - preShutdownEventsAllowed;\n\n    // Starting by only allowing 2/3 of the (expected) events to be logged right away...\n    log.info(\"Test will allow {} events to happen prior to shutdown\", preShutdownEventsAllowed);\n    gate.release(preShutdownEventsAllowed);\n    runThreeTestAdminCommands();\n\n    final List<AuditEvent> events = new ArrayList\n      (harness.receiver.waitForAuditEvents(preShutdownEventsAllowed));\n    assertEquals(preShutdownEventsAllowed, events.size());\n\n    // Now shutdown cluster while 1 event still in process\n    // Do this in a background thread because it blocks...\n    final Thread shutdownThread = new DefaultSolrThreadFactory(\"shutdown\")\n      .newThread(() -> { try {\n            log.info(\"START Shutting down Cluster.\");\n            harness.shutdownCluster();\n            log.info(\"END   Shutting down Cluster.\");\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        });\n    try {\n      shutdownThread.start();\n      // release the ticket so the event can be processed\n      log.info(\"releasing final {} semaphore tickets...\", postShutdownEventsAllowed);\n      gate.release(postShutdownEventsAllowed);\n\n      events.addAll(harness.receiver.waitForAuditEvents(postShutdownEventsAllowed));\n\n      assertThreeTestAdminEvents(events);\n    } finally {\n      shutdownThread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#testAsyncQueueDrain().mjava","sourceNew":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    final AuditTestHarness harness = testHarness.get();\n    final Semaphore gate = new Semaphore(0);\n    CallbackAuditLoggerPlugin.BLOCKING_SEMAPHORES.put(\"testAsyncQueueDrain_semaphore\", gate);\n    setupCluster(true, \"testAsyncQueueDrain_semaphore\", false);\n\n    final int preShutdownEventsAllowed = TestUtil.nextInt(random(), 0, 2);\n    final int postShutdownEventsAllowed = 3 - preShutdownEventsAllowed;\n\n    // Starting by only allowing 2/3 of the (expected) events to be logged right away...\n    log.info(\"Test will allow {} events to happen prior to shutdown\", preShutdownEventsAllowed);\n    gate.release(preShutdownEventsAllowed);\n    runThreeTestAdminCommands();\n\n    final List<AuditEvent> events = new ArrayList<>\n      (harness.receiver.waitForAuditEvents(preShutdownEventsAllowed));\n    assertEquals(preShutdownEventsAllowed, events.size());\n\n    // Now shutdown cluster while 1 event still in process\n    // Do this in a background thread because it blocks...\n    final Thread shutdownThread = new SolrNamedThreadFactory(\"shutdown\")\n      .newThread(() -> { try {\n            log.info(\"START Shutting down Cluster.\");\n            harness.shutdownCluster();\n            log.info(\"END   Shutting down Cluster.\");\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        });\n    try {\n      shutdownThread.start();\n      // release the ticket so the event can be processed\n      log.info(\"releasing final {} semaphore tickets...\", postShutdownEventsAllowed);\n      gate.release(postShutdownEventsAllowed);\n\n      events.addAll(harness.receiver.waitForAuditEvents(postShutdownEventsAllowed));\n\n      assertThreeTestAdminEvents(events);\n    } finally {\n      shutdownThread.join();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncQueueDrain() throws Exception {\n    final AuditTestHarness harness = testHarness.get();\n    final Semaphore gate = new Semaphore(0);\n    CallbackAuditLoggerPlugin.BLOCKING_SEMAPHORES.put(\"testAsyncQueueDrain_semaphore\", gate);\n    setupCluster(true, \"testAsyncQueueDrain_semaphore\", false);\n\n    final int preShutdownEventsAllowed = TestUtil.nextInt(random(), 0, 2);\n    final int postShutdownEventsAllowed = 3 - preShutdownEventsAllowed;\n\n    // Starting by only allowing 2/3 of the (expected) events to be logged right away...\n    log.info(\"Test will allow {} events to happen prior to shutdown\", preShutdownEventsAllowed);\n    gate.release(preShutdownEventsAllowed);\n    runThreeTestAdminCommands();\n\n    final List<AuditEvent> events = new ArrayList\n      (harness.receiver.waitForAuditEvents(preShutdownEventsAllowed));\n    assertEquals(preShutdownEventsAllowed, events.size());\n\n    // Now shutdown cluster while 1 event still in process\n    // Do this in a background thread because it blocks...\n    final Thread shutdownThread = new SolrNamedThreadFactory(\"shutdown\")\n      .newThread(() -> { try {\n            log.info(\"START Shutting down Cluster.\");\n            harness.shutdownCluster();\n            log.info(\"END   Shutting down Cluster.\");\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        });\n    try {\n      shutdownThread.start();\n      // release the ticket so the event can be processed\n      log.info(\"releasing final {} semaphore tickets...\", postShutdownEventsAllowed);\n      gate.release(postShutdownEventsAllowed);\n\n      events.addAll(harness.receiver.waitForAuditEvents(postShutdownEventsAllowed));\n\n      assertThreeTestAdminEvents(events);\n    } finally {\n      shutdownThread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6796e4de0fa1cfeb0d3693a7137dfa3d9c63aaf9":["b793398be7cbf26fb9faa722569a03f8cb44c6ac"],"5d5482e225fe64e9f868c423923d1144adc88142":["6796e4de0fa1cfeb0d3693a7137dfa3d9c63aaf9"],"b793398be7cbf26fb9faa722569a03f8cb44c6ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["5d5482e225fe64e9f868c423923d1144adc88142"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"6796e4de0fa1cfeb0d3693a7137dfa3d9c63aaf9":["5d5482e225fe64e9f868c423923d1144adc88142"],"b793398be7cbf26fb9faa722569a03f8cb44c6ac":["6796e4de0fa1cfeb0d3693a7137dfa3d9c63aaf9"],"5d5482e225fe64e9f868c423923d1144adc88142":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b793398be7cbf26fb9faa722569a03f8cb44c6ac"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}