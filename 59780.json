{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n    String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n    // Need to explicitly set the QueryParser property to use RangeQuery\n    // rather\n    // than RangeFilters\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    // parser.setUseOldRangeQuery(true);\n    query = parser.parse(queryString);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream);\n      scorer.setHighlightCnstScrRngQuery(true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["25b09d64ea2a5e3eb87f819544b3fa1f306b9c4b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25b09d64ea2a5e3eb87f819544b3fa1f306b9c4b","date":1220957570,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","sourceNew":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n    String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n    // Need to explicitly set the QueryParser property to use RangeQuery\n    // rather\n    // than RangeFilters\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    // parser.setUseOldRangeQuery(true);\n    query = parser.parse(queryString);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      SpanScorer.setHighlightCnstScrRngQuery(true);\n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream);\n      \n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n    String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n    // Need to explicitly set the QueryParser property to use RangeQuery\n    // rather\n    // than RangeFilters\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    // parser.setUseOldRangeQuery(true);\n    query = parser.parse(queryString);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream);\n      scorer.setHighlightCnstScrRngQuery(true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":["296b8b38a87feb478921f77834a2302dfe77641c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","sourceNew":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      SpanScorer.setHighlightCnstScrRngQuery(true);\n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream);\n      \n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n    String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n    // Need to explicitly set the QueryParser property to use RangeQuery\n    // rather\n    // than RangeFilters\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    // parser.setUseOldRangeQuery(true);\n    query = parser.parse(queryString);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      SpanScorer.setHighlightCnstScrRngQuery(true);\n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream);\n      \n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","sourceNew":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      SpanScorer.setHighlightCnstScrRngQuery(true);\n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream);\n      \n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","sourceNew":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","sourceNew":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","sourceNew":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetConstantScoreRangeFragments().mjava","sourceNew":null,"sourceOld":"  public void testGetConstantScoreRangeFragments() throws Exception {\n\n    numHighlights = 0;\n\n    query = new ConstantScoreRangeQuery(FIELD_NAME, \"kannedy\", \"kznnedy\", true, true);\n\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["25b09d64ea2a5e3eb87f819544b3fa1f306b9c4b"],"25b09d64ea2a5e3eb87f819544b3fa1f306b9c4b":["296b8b38a87feb478921f77834a2302dfe77641c"]},"commit2Childs":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"296b8b38a87feb478921f77834a2302dfe77641c":["25b09d64ea2a5e3eb87f819544b3fa1f306b9c4b"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"25b09d64ea2a5e3eb87f819544b3fa1f306b9c4b":["6f7a11eba51d213f09b96054111cf56a1e5796a3"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}