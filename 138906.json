{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","commits":[{"id":"abba29aa88f170f3d51899c885b760337dd1c47c","date":1317196921,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if(refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16b371c3e5a42fa4fd50558be718acc9ec8505a","date":1317833758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","sourceNew":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if(refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936f1eae75daf11568fe1480aec9e06d2ef55367","date":1323215013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","sourceNew":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public final boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","sourceNew":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public final boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","sourceNew":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public final boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#tryIncRef().mjava","sourceNew":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public final boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Expert: increments the refCount of this IndexReader\n   * instance only if the IndexReader has not been closed yet\n   * and returns <code>true</code> iff the refCount was\n   * successfully incremented, otherwise <code>false</code>.\n   * If this method returns <code>false</code> the reader is either\n   * already closed or is currently been closed. Either way this\n   * reader instance shouldn't be used by an application unless\n   * <code>true</code> is returned.\n   * <p>\n   * RefCounts are used to determine when a\n   * reader can be closed safely, i.e. as soon as there are\n   * no more references.  Be sure to always call a\n   * corresponding {@link #decRef}, in a finally clause;\n   * otherwise the reader may never be closed.  Note that\n   * {@link #close} simply calls decRef(), which means that\n   * the IndexReader will not really be closed until {@link\n   * #decRef} has been called for all outstanding\n   * references.\n   *\n   * @see #decRef\n   * @see #incRef\n   */\n  public final boolean tryIncRef() {\n    int count;\n    while ((count = refCount.get()) > 0) {\n      if (refCount.compareAndSet(count, count+1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c16b371c3e5a42fa4fd50558be718acc9ec8505a":["abba29aa88f170f3d51899c885b760337dd1c47c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["c16b371c3e5a42fa4fd50558be718acc9ec8505a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936f1eae75daf11568fe1480aec9e06d2ef55367":["c16b371c3e5a42fa4fd50558be718acc9ec8505a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["c16b371c3e5a42fa4fd50558be718acc9ec8505a","936f1eae75daf11568fe1480aec9e06d2ef55367"],"abba29aa88f170f3d51899c885b760337dd1c47c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c16b371c3e5a42fa4fd50558be718acc9ec8505a":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","936f1eae75daf11568fe1480aec9e06d2ef55367","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abba29aa88f170f3d51899c885b760337dd1c47c"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"abba29aa88f170f3d51899c885b760337dd1c47c":["c16b371c3e5a42fa4fd50558be718acc9ec8505a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}