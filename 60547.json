{"path":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        rnd = newRandom();\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        rnd = newRandom();\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        rnd = newRandom();\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        rnd = newRandom();\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}