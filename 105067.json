{"path":"solr/core/src/test/org/apache/solr/handler/component/ResourceSharingTestComponent.DumbCsvDecoder#decode(InputStream).mjava","commits":[{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ResourceSharingTestComponent.DumbCsvDecoder#decode(InputStream).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TestObject decode(InputStream inputStream) {\n      // loading a tiny csv like:\n      // \n      // foo,bar\n      // baz,bam\n\n      try (Stream<String> lines = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(\"UTF-8\"))).lines()) {\n          lines.forEach(this::processSimpleCsvRow);\n      } catch (Exception e) {\n        log.error(\"failed to read dictionary {}\", getResourceName() );\n        throw new RuntimeException(\"Cannot load  dictionary \" , e);\n      }\n      \n      assertEquals(\"bar\", dict.get(\"foo\"));\n      assertEquals(\"bam\", dict.get(\"baz\"));\n      log.info(\"Loaded {}  using {}\", getDict().size(), this.getClass().getClassLoader());\n      \n      // if we get here we have seen the data from the blob and all we need is to test that two collections\n      // are able to see the same object..\n      return new TestObject();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ResourceSharingTestComponent.DumbCsvDecoder#decode(InputStream).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TestObject decode(InputStream inputStream) {\n      // loading a tiny csv like:\n      // \n      // foo,bar\n      // baz,bam\n\n      try (Stream<String> lines = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(\"UTF-8\"))).lines()) {\n          lines.forEach(this::processSimpleCsvRow);\n      } catch (Exception e) {\n        log.error(\"failed to read dictionary {}\", getResourceName() );\n        throw new RuntimeException(\"Cannot load  dictionary \" , e);\n      }\n      \n      assertEquals(\"bar\", dict.get(\"foo\"));\n      assertEquals(\"bam\", dict.get(\"baz\"));\n      log.info(\"Loaded {}  using {}\", getDict().size(), this.getClass().getClassLoader());\n      \n      // if we get here we have seen the data from the blob and all we need is to test that two collections\n      // are able to see the same object..\n      return new TestObject();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/ResourceSharingTestComponent.DumbCsvDecoder#decode(InputStream).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/ResourceSharingTestComponent.DumbCsvDecoder#decode(InputStream).mjava","sourceNew":"    @Override\n    public TestObject decode(InputStream inputStream) {\n      // loading a tiny csv like:\n      // \n      // foo,bar\n      // baz,bam\n\n      try (Stream<String> lines = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(\"UTF-8\"))).lines()) {\n          lines.forEach(this::processSimpleCsvRow);\n      } catch (Exception e) {\n        log.error(\"failed to read dictionary {}\", getResourceName() );\n        throw new RuntimeException(\"Cannot load  dictionary \" , e);\n      }\n      \n      assertEquals(\"bar\", dict.get(\"foo\"));\n      assertEquals(\"bam\", dict.get(\"baz\"));\n      if (log.isInfoEnabled()) {\n        log.info(\"Loaded {}  using {}\", getDict().size(), this.getClass().getClassLoader());\n      }\n      \n      // if we get here we have seen the data from the blob and all we need is to test that two collections\n      // are able to see the same object..\n      return new TestObject();\n    }\n\n","sourceOld":"    @Override\n    public TestObject decode(InputStream inputStream) {\n      // loading a tiny csv like:\n      // \n      // foo,bar\n      // baz,bam\n\n      try (Stream<String> lines = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(\"UTF-8\"))).lines()) {\n          lines.forEach(this::processSimpleCsvRow);\n      } catch (Exception e) {\n        log.error(\"failed to read dictionary {}\", getResourceName() );\n        throw new RuntimeException(\"Cannot load  dictionary \" , e);\n      }\n      \n      assertEquals(\"bar\", dict.get(\"foo\"));\n      assertEquals(\"bam\", dict.get(\"baz\"));\n      log.info(\"Loaded {}  using {}\", getDict().size(), this.getClass().getClassLoader());\n      \n      // if we get here we have seen the data from the blob and all we need is to test that two collections\n      // are able to see the same object..\n      return new TestObject();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"713122036535651642e6d4fe57ce12b449e18473":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}