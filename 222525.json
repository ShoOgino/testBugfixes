{"path":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","commits":[{"id":"78186e8256d3f75ec4673d08ff89841f1b6ed13a","date":1106177572,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery();\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["860d9cc0c963b5c0db351fb0473b6894b1d96020"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery();\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"78186e8256d3f75ec4673d08ff89841f1b6ed13a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["78186e8256d3f75ec4673d08ff89841f1b6ed13a"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"78186e8256d3f75ec4673d08ff89841f1b6ed13a":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78186e8256d3f75ec4673d08ff89841f1b6ed13a"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}