{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiSort().mjava","commits":[{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiSort().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests sorting on multiple sort fields */\n  public void testMultiSort() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"foo\")));\n    doc.add(new NumericDocValuesField(\"value2\", 0));\n    doc.add(newStringField(\"value1\", \"foo\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"bar\")));\n    doc.add(new NumericDocValuesField(\"value2\", 1));\n    doc.add(newStringField(\"value1\", \"bar\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"bar\")));\n    doc.add(new NumericDocValuesField(\"value2\", 0));\n    doc.add(newStringField(\"value1\", \"bar\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"foo\")));\n    doc.add(new NumericDocValuesField(\"value2\", 1));\n    doc.add(newStringField(\"value1\", \"foo\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(\n        new SortField(\"value1\", SortField.Type.STRING),\n        new SortField(\"value2\", SortField.Type.LONG));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value1\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value1\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[2].doc).get(\"value1\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[3].doc).get(\"value1\"));\n    // 0 comes before 1\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[0].doc).get(\"value2\"));\n    assertEquals(\"1\", searcher.doc(td.scoreDocs[1].doc).get(\"value2\"));\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[2].doc).get(\"value2\"));\n    assertEquals(\"1\", searcher.doc(td.scoreDocs[3].doc).get(\"value2\"));\n\n    // Now with overflow\n    td = searcher.search(new MatchAllDocsQuery(), 1, sort);\n    assertEquals(4, td.totalHits);\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value1\"));\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[0].doc).get(\"value2\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMultiSort().mjava","sourceNew":"  /** Tests sorting on multiple sort fields */\n  public void testMultiSort() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"foo\")));\n    doc.add(new NumericDocValuesField(\"value2\", 0));\n    doc.add(newStringField(\"value1\", \"foo\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"bar\")));\n    doc.add(new NumericDocValuesField(\"value2\", 1));\n    doc.add(newStringField(\"value1\", \"bar\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"bar\")));\n    doc.add(new NumericDocValuesField(\"value2\", 0));\n    doc.add(newStringField(\"value1\", \"bar\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"foo\")));\n    doc.add(new NumericDocValuesField(\"value2\", 1));\n    doc.add(newStringField(\"value1\", \"foo\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(\n        new SortField(\"value1\", SortField.Type.STRING),\n        new SortField(\"value2\", SortField.Type.LONG));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits.value);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value1\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value1\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[2].doc).get(\"value1\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[3].doc).get(\"value1\"));\n    // 0 comes before 1\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[0].doc).get(\"value2\"));\n    assertEquals(\"1\", searcher.doc(td.scoreDocs[1].doc).get(\"value2\"));\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[2].doc).get(\"value2\"));\n    assertEquals(\"1\", searcher.doc(td.scoreDocs[3].doc).get(\"value2\"));\n\n    // Now with overflow\n    td = searcher.search(new MatchAllDocsQuery(), 1, sort);\n    assertEquals(4, td.totalHits.value);\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value1\"));\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[0].doc).get(\"value2\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests sorting on multiple sort fields */\n  public void testMultiSort() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"foo\")));\n    doc.add(new NumericDocValuesField(\"value2\", 0));\n    doc.add(newStringField(\"value1\", \"foo\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"bar\")));\n    doc.add(new NumericDocValuesField(\"value2\", 1));\n    doc.add(newStringField(\"value1\", \"bar\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"bar\")));\n    doc.add(new NumericDocValuesField(\"value2\", 0));\n    doc.add(newStringField(\"value1\", \"bar\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"0\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new SortedDocValuesField(\"value1\", new BytesRef(\"foo\")));\n    doc.add(new NumericDocValuesField(\"value2\", 1));\n    doc.add(newStringField(\"value1\", \"foo\", Field.Store.YES));\n    doc.add(newStringField(\"value2\", \"1\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(\n        new SortField(\"value1\", SortField.Type.STRING),\n        new SortField(\"value2\", SortField.Type.LONG));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(4, td.totalHits);\n    // 'bar' comes before 'foo'\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value1\"));\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[1].doc).get(\"value1\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[2].doc).get(\"value1\"));\n    assertEquals(\"foo\", searcher.doc(td.scoreDocs[3].doc).get(\"value1\"));\n    // 0 comes before 1\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[0].doc).get(\"value2\"));\n    assertEquals(\"1\", searcher.doc(td.scoreDocs[1].doc).get(\"value2\"));\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[2].doc).get(\"value2\"));\n    assertEquals(\"1\", searcher.doc(td.scoreDocs[3].doc).get(\"value2\"));\n\n    // Now with overflow\n    td = searcher.search(new MatchAllDocsQuery(), 1, sort);\n    assertEquals(4, td.totalHits);\n    assertEquals(\"bar\", searcher.doc(td.scoreDocs[0].doc).get(\"value1\"));\n    assertEquals(\"0\", searcher.doc(td.scoreDocs[0].doc).get(\"value2\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["901e951cec2e6af4e503209a6721c8834db23279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901e951cec2e6af4e503209a6721c8834db23279"],"901e951cec2e6af4e503209a6721c8834db23279":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}