{"path":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","commits":[{"id":"0e10d5539266ae943f9fa6befa6ac3481a2419c8","date":1371692194,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given an SolrCore, asserts that each segment in the (searchable) index \n   * has a compound file status that matches the expected input.\n   */\n  public static void assertCompoundSegments(SolrCore core, boolean compound) {\n    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();\n    try {\n      assertCompoundSegments(searcherRef.get().getIndexReader(), compound);\n    } finally {\n      searcherRef.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given an SolrCore, asserts that each segment in the (searchable) index \n   * has a compound file status that matches the expected input.\n   */\n  public static void assertCompoundSegments(SolrCore core, boolean compound) {\n    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();\n    try {\n      assertCompoundSegments(searcherRef.get().getIndexReader(), compound);\n    } finally {\n      searcherRef.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30b6ad849a21206db510322a3f583ca70ae20a2f","date":1399996150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","sourceNew":"  /**\n   * Given an SolrCore, asserts that each segment in the (searchable) index \n   * has a compound file status that matches the expected input.\n   */\n  public static void assertCompoundSegments(SolrCore core, boolean compound) {\n    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();\n    try {\n      assertCompoundSegments(searcherRef.get().getRawReader(), compound);\n    } finally {\n      searcherRef.decref();\n    }\n  }\n\n","sourceOld":"  /**\n   * Given an SolrCore, asserts that each segment in the (searchable) index \n   * has a compound file status that matches the expected input.\n   */\n  public static void assertCompoundSegments(SolrCore core, boolean compound) {\n    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();\n    try {\n      assertCompoundSegments(searcherRef.get().getIndexReader(), compound);\n    } finally {\n      searcherRef.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","sourceNew":"  /**\n   * Given an SolrCore, asserts that each segment in the (searchable) index \n   * has a compound file status that matches the expected input.\n   */\n  public static void assertCompoundSegments(SolrCore core, boolean compound) {\n    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();\n    try {\n      assertCompoundSegments(searcherRef.get().getRawReader(), compound);\n    } finally {\n      searcherRef.decref();\n    }\n  }\n\n","sourceOld":"  /**\n   * Given an SolrCore, asserts that each segment in the (searchable) index \n   * has a compound file status that matches the expected input.\n   */\n  public static void assertCompoundSegments(SolrCore core, boolean compound) {\n    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();\n    try {\n      assertCompoundSegments(searcherRef.get().getIndexReader(), compound);\n    } finally {\n      searcherRef.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#assertCompoundSegments(SolrCore,boolean).mjava","sourceNew":"  /**\n   * Given an SolrCore, asserts that each segment in the (searchable) index \n   * has a compound file status that matches the expected input.\n   */\n  public static void assertCompoundSegments(SolrCore core, boolean compound) {\n    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();\n    try {\n      assertCompoundSegments(searcherRef.get().getRawReader(), compound);\n    } finally {\n      searcherRef.decref();\n    }\n  }\n\n","sourceOld":"  /**\n   * Given an SolrCore, asserts that each segment in the (searchable) index \n   * has a compound file status that matches the expected input.\n   */\n  public static void assertCompoundSegments(SolrCore core, boolean compound) {\n    RefCounted<SolrIndexSearcher> searcherRef = core.getRegisteredSearcher();\n    try {\n      assertCompoundSegments(searcherRef.get().getIndexReader(), compound);\n    } finally {\n      searcherRef.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["0e10d5539266ae943f9fa6befa6ac3481a2419c8","30b6ad849a21206db510322a3f583ca70ae20a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30b6ad849a21206db510322a3f583ca70ae20a2f":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"56572ec06f1407c066d6b7399413178b33176cd8":["0e10d5539266ae943f9fa6befa6ac3481a2419c8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"30b6ad849a21206db510322a3f583ca70ae20a2f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","93dd449115a9247533e44bab47e8429e5dccbc6d","30b6ad849a21206db510322a3f583ca70ae20a2f","56572ec06f1407c066d6b7399413178b33176cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}