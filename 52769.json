{"path":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"/dev/null","sourceNew":"        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16024e64f4aa1abeb987f7689664afe70baa4058","date":1239706163,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, analyzer, false,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory.WriterThread#run().mjava","sourceNew":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","sourceOld":"        @Override\n        public void run() {\n            IndexWriter writer = null;\n            for(int i=0;i<this.numIteration;i++) {\n                try {\n                    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n                } catch (IOException e) {\n                    if (e.toString().indexOf(\" timed out:\") == -1) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: creation hit unexpected IOException: \" + e.toString());\n                        e.printStackTrace(System.out);\n                    } else {\n                        // lock obtain timed out\n                        // NOTE: we should at some point\n                        // consider this a failure?  The lock\n                        // obtains, across IndexReader &\n                        // IndexWriters should be \"fair\" (ie\n                        // FIFO).\n                    }\n                } catch (Exception e) {\n                    hitException = true;\n                    System.out.println(\"Stress Test Index Writer: creation hit unexpected exception: \" + e.toString());\n                    e.printStackTrace(System.out);\n                    break;\n                }\n                if (writer != null) {\n                    try {\n                        addDoc(writer);\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: addDoc hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    try {\n                        writer.close();\n                    } catch (IOException e) {\n                        hitException = true;\n                        System.out.println(\"Stress Test Index Writer: close hit unexpected exception: \" + e.toString());\n                        e.printStackTrace(System.out);\n                        break;\n                    }\n                    writer = null;\n                }\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["16024e64f4aa1abeb987f7689664afe70baa4058"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16024e64f4aa1abeb987f7689664afe70baa4058":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["16024e64f4aa1abeb987f7689664afe70baa4058"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"16024e64f4aa1abeb987f7689664afe70baa4058":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}