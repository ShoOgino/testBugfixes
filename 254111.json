{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterReanalysis#testWithoutIndexSearcher().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterReanalysis#testWithoutIndexSearcher().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithoutIndexSearcher() throws IOException {\n    String text = \"This is a test. Just a test highlighting without a searcher. Feel free to ignore.\";\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"highlighting\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"title\", \"test\")), BooleanClause.Occur.SHOULD)\n        .build();\n\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(null, indexAnalyzer);\n    String snippet = highlighter.highlightWithoutSearcher(\"body\", query, text, 1).toString();\n\n    assertEquals(\"Just a test <b>highlighting</b> without a searcher. \", snippet);\n\n    assertEquals(\"test single space\", \" \", highlighter.highlightWithoutSearcher(\"body\", query, \" \", 1));\n\n    assertEquals(\"Hello\", highlighter.highlightWithoutSearcher(\"nonexistent\", query, \"Hello\", 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterReanalysis#testWithoutIndexSearcher().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithoutIndexSearcher() throws IOException {\n    String text = \"This is a test. Just a test highlighting without a searcher. Feel free to ignore.\";\n    BooleanQuery query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"body\", \"highlighting\")), BooleanClause.Occur.SHOULD)\n        .add(new TermQuery(new Term(\"title\", \"test\")), BooleanClause.Occur.SHOULD)\n        .build();\n\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(null, indexAnalyzer);\n    String snippet = highlighter.highlightWithoutSearcher(\"body\", query, text, 1).toString();\n\n    assertEquals(\"Just a test <b>highlighting</b> without a searcher. \", snippet);\n\n    assertEquals(\"test single space\", \" \", highlighter.highlightWithoutSearcher(\"body\", query, \" \", 1));\n\n    assertEquals(\"Hello\", highlighter.highlightWithoutSearcher(\"nonexistent\", query, \"Hello\", 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}