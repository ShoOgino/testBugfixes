{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","commits":[{"id":"1068799b5537c6408504cf7e15cb90ba57491440","date":1392577122,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testStratQueryEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","sourceNew":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    second = generator.gen(args2);//now should be different\n    assertNotSame(args1, args2);\n  }\n\n","sourceOld":"  private void testStratQueryEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first = generator.gen(args1);\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    second = generator.gen(args2);//now should be different\n    assertNotSame(args1, args2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","sourceNew":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertNotSame(args1, args2);\n    second = generator.gen(args2);//now should be different\n    assertNotSame(first, second);\n    assertNotSame(first.hashCode(), second.hashCode());\n  }\n\n","sourceOld":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    second = generator.gen(args2);//now should be different\n    assertNotSame(args1, args2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","sourceNew":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","sourceOld":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertNotSame(args1, args2);\n    second = generator.gen(args2);//now should be different\n    assertNotSame(first, second);\n    assertNotSame(first.hashCode(), second.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","sourceNew":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","sourceOld":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/QueryEqualsHashCodeTest#testEqualsHashcode(SpatialArgs,SpatialArgs,ObjGenerator).mjava","sourceNew":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","sourceOld":"  private void testEqualsHashcode(SpatialArgs args1, SpatialArgs args2, ObjGenerator generator) {\n    Object first;\n    try {\n      first = generator.gen(args1);\n    } catch (UnsupportedOperationException e) {\n      return;\n    }\n    if (first == null)\n      return;//unsupported op?\n    Object second = generator.gen(args1);//should be the same\n    assertEquals(first, second);\n    assertEquals(first.hashCode(), second.hashCode());\n    assertTrue(args1.equals(args2) == false);\n    second = generator.gen(args2);//now should be different\n    assertTrue(first.equals(second) == false);\n    assertTrue(first.hashCode() != second.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1068799b5537c6408504cf7e15cb90ba57491440":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["11e8ea32003f6ccf3282ad6c05ca47eec277e928","112d77ac8d3e10a362516ad834c9a11d35c94234"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["0521546db127e358ced1772a9d696dbdd255b203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"0521546db127e358ced1772a9d696dbdd255b203":["1068799b5537c6408504cf7e15cb90ba57491440"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"1068799b5537c6408504cf7e15cb90ba57491440":["0521546db127e358ced1772a9d696dbdd255b203"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1068799b5537c6408504cf7e15cb90ba57491440"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0521546db127e358ced1772a9d696dbdd255b203":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}