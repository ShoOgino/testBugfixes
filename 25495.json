{"path":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new IllegalArgumentException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"583596a9662157d0b1a004cc19c70f54e6201e51","date":1326672050,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new IllegalArgumentException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd27945df2678ed67d34f79f52ef576002e32637","date":1328115715,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"583596a9662157d0b1a004cc19c70f54e6201e51":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bd27945df2678ed67d34f79f52ef576002e32637"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd27945df2678ed67d34f79f52ef576002e32637":["583596a9662157d0b1a004cc19c70f54e6201e51"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"583596a9662157d0b1a004cc19c70f54e6201e51":["bd27945df2678ed67d34f79f52ef576002e32637"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"bd27945df2678ed67d34f79f52ef576002e32637":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["583596a9662157d0b1a004cc19c70f54e6201e51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}