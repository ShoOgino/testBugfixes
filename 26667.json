{"path":"backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (null != ramCalc) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize(ramCalc);\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<Integer, CacheEntry>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<ReaderField, Integer>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<ReaderField>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (null != ramCalc) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize(ramCalc);\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<Integer, CacheEntry>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<ReaderField, Integer>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<ReaderField>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (null != ramCalc) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize(ramCalc);\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<Integer, CacheEntry>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<ReaderField, Integer>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<ReaderField>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}