{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","commits":[{"id":"a32c7218952a3082e8be4be1a325fd217603f365","date":1363034315,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  codePointAt(buffer, i)), buffer, i);\n     }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["351d8e1baf1e4706b2b44ea0c652e856ebc9d336"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","sourceNew":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public final void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  codePointAt(buffer, i, limit)), buffer, i);\n     }\n  }\n\n","sourceOld":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  codePointAt(buffer, i)), buffer, i);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","sourceNew":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public static void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  Character.codePointAt(buffer, i, limit)), buffer, i);\n     }\n  }\n\n","sourceOld":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public final void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  codePointAt(buffer, i, limit)), buffer, i);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","sourceNew":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public static void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  Character.codePointAt(buffer, i, limit)), buffer, i);\n     }\n  }\n\n","sourceOld":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public final void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  codePointAt(buffer, i, limit)), buffer, i);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/CharacterUtils#toLowerCase(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","sourceNew":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public static void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  Character.codePointAt(buffer, i, limit)), buffer, i);\n     }\n  }\n\n","sourceOld":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public static void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  Character.codePointAt(buffer, i, limit)), buffer, i);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/CharacterUtils#toLowerCase(char[],int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts each unicode codepoint to lowerCase via {@link Character#toLowerCase(int)} starting \n   * at the given offset.\n   * @param buffer the char buffer to lowercase\n   * @param offset the offset to start at\n   * @param limit the max char in the buffer to lower case\n   */\n  public final void toLowerCase(final char[] buffer, final int offset, final int limit) {\n    assert buffer.length >= limit;\n    assert offset <=0 && offset <= buffer.length;\n    for (int i = offset; i < limit;) {\n      i += Character.toChars(\n              Character.toLowerCase(\n                  codePointAt(buffer, i, limit)), buffer, i);\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["a32c7218952a3082e8be4be1a325fd217603f365"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"a32c7218952a3082e8be4be1a325fd217603f365":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a32c7218952a3082e8be4be1a325fd217603f365":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a32c7218952a3082e8be4be1a325fd217603f365"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}