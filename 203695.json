{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testStreamableInputDocFormat().mjava","commits":[{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testStreamableInputDocFormat().mjava","pathOld":"/dev/null","sourceNew":"  //this format accepts a 1:1 mapping of the json format and javabin format\n  public void testStreamableInputDocFormat() throws IOException {\n    Map m = Utils.makeMap(\"id\",\"1\",\"desc\" ,\"The desc 1\");\n    m.put(CHILDDOC, (MapWriter) ew -> {\n      ew.put(\"id\",\"1.1\");\n      ew.put(\"desc\" ,\"The desc 1.1\");\n      ew.put(CHILDDOC, (IteratorWriter) iw -> {\n        iw.add(Utils.makeMap(\"id\", \"1.1.1\",\"desc\",\"The desc 1.1.1\"));\n        iw.add((MapWriter) ew1 -> {\n          ew1.put(\"id\", \"1.1.2\");\n          ew1.put(\"desc\", \"The desc 1.1.2\");\n        });\n      });\n    });\n    MapWriter m2 = ew -> {\n      ew.put(\"id\", \"2\");\n      ew.put(\"des\", \"The desc 2\");\n    };\n\n    List l = new ArrayList();\n    l.add(m);\n    l.add(m2);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(l.iterator(), baos);\n\n    List<SolrInputDocument>  l2 = new ArrayList();\n\n    new JavaBinUpdateRequestCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()), (document, req, commitWithin, override) -> l2.add(document));\n\n   assertEquals(l2.get(0).getChildDocuments().size(), 1);\n\n   Object o = Utils.fromJSONString(Utils.writeJson(l.get(0), new StringWriter(), true).toString());\n   Object cdoc = Utils.getObjectByPath(o, false, CHILDDOC);\n   assertEquals(Utils.writeJson(cdoc, new StringWriter(), true).toString(),\n       Utils.writeJson(l2.get(0).getChildDocuments().get(0) ,new StringWriter(), true).toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testStreamableInputDocFormat().mjava","pathOld":"/dev/null","sourceNew":"  //this format accepts a 1:1 mapping of the json format and javabin format\n  public void testStreamableInputDocFormat() throws IOException {\n    Map m = Utils.makeMap(\"id\",\"1\",\"desc\" ,\"The desc 1\");\n    m.put(CHILDDOC, (MapWriter) ew -> {\n      ew.put(\"id\",\"1.1\");\n      ew.put(\"desc\" ,\"The desc 1.1\");\n      ew.put(CHILDDOC, (IteratorWriter) iw -> {\n        iw.add(Utils.makeMap(\"id\", \"1.1.1\",\"desc\",\"The desc 1.1.1\"));\n        iw.add((MapWriter) ew1 -> {\n          ew1.put(\"id\", \"1.1.2\");\n          ew1.put(\"desc\", \"The desc 1.1.2\");\n        });\n      });\n    });\n    MapWriter m2 = ew -> {\n      ew.put(\"id\", \"2\");\n      ew.put(\"des\", \"The desc 2\");\n    };\n\n    List l = new ArrayList();\n    l.add(m);\n    l.add(m2);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(l.iterator(), baos);\n\n    List<SolrInputDocument>  l2 = new ArrayList();\n\n    new JavaBinUpdateRequestCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()), (document, req, commitWithin, override) -> l2.add(document));\n\n   assertEquals(l2.get(0).getChildDocuments().size(), 1);\n\n   Object o = Utils.fromJSONString(Utils.writeJson(l.get(0), new StringWriter(), true).toString());\n   Object cdoc = Utils.getObjectByPath(o, false, CHILDDOC);\n   assertEquals(Utils.writeJson(cdoc, new StringWriter(), true).toString(),\n       Utils.writeJson(l2.get(0).getChildDocuments().get(0) ,new StringWriter(), true).toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testStreamableInputDocFormat().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testStreamableInputDocFormat().mjava","sourceNew":"  //this format accepts a 1:1 mapping of the json format and javabin format\n  @SuppressWarnings({\"unchecked\"})\n  public void testStreamableInputDocFormat() throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = Utils.makeMap(\"id\",\"1\",\"desc\" ,\"The desc 1\");\n    m.put(CHILDDOC, (MapWriter) ew -> {\n      ew.put(\"id\",\"1.1\");\n      ew.put(\"desc\" ,\"The desc 1.1\");\n      ew.put(CHILDDOC, (IteratorWriter) iw -> {\n        iw.add(Utils.makeMap(\"id\", \"1.1.1\",\"desc\",\"The desc 1.1.1\"));\n        iw.add((MapWriter) ew1 -> {\n          ew1.put(\"id\", \"1.1.2\");\n          ew1.put(\"desc\", \"The desc 1.1.2\");\n        });\n      });\n    });\n    MapWriter m2 = ew -> {\n      ew.put(\"id\", \"2\");\n      ew.put(\"des\", \"The desc 2\");\n    };\n\n    @SuppressWarnings({\"rawtypes\"})\n    List l = new ArrayList();\n    l.add(m);\n    l.add(m2);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(l.iterator(), baos);\n\n    List<SolrInputDocument>  l2 = new ArrayList<>();\n\n    new JavaBinUpdateRequestCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()), (document, req, commitWithin, override) -> l2.add(document));\n\n   assertEquals(l2.get(0).getChildDocuments().size(), 1);\n\n   Object o = Utils.fromJSONString(Utils.writeJson(l.get(0), new StringWriter(), true).toString());\n   Object cdoc = Utils.getObjectByPath(o, false, CHILDDOC);\n   assertEquals(Utils.writeJson(cdoc, new StringWriter(), true).toString(),\n       Utils.writeJson(l2.get(0).getChildDocuments().get(0) ,new StringWriter(), true).toString());\n\n  }\n\n","sourceOld":"  //this format accepts a 1:1 mapping of the json format and javabin format\n  public void testStreamableInputDocFormat() throws IOException {\n    Map m = Utils.makeMap(\"id\",\"1\",\"desc\" ,\"The desc 1\");\n    m.put(CHILDDOC, (MapWriter) ew -> {\n      ew.put(\"id\",\"1.1\");\n      ew.put(\"desc\" ,\"The desc 1.1\");\n      ew.put(CHILDDOC, (IteratorWriter) iw -> {\n        iw.add(Utils.makeMap(\"id\", \"1.1.1\",\"desc\",\"The desc 1.1.1\"));\n        iw.add((MapWriter) ew1 -> {\n          ew1.put(\"id\", \"1.1.2\");\n          ew1.put(\"desc\", \"The desc 1.1.2\");\n        });\n      });\n    });\n    MapWriter m2 = ew -> {\n      ew.put(\"id\", \"2\");\n      ew.put(\"des\", \"The desc 2\");\n    };\n\n    List l = new ArrayList();\n    l.add(m);\n    l.add(m2);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(l.iterator(), baos);\n\n    List<SolrInputDocument>  l2 = new ArrayList();\n\n    new JavaBinUpdateRequestCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()), (document, req, commitWithin, override) -> l2.add(document));\n\n   assertEquals(l2.get(0).getChildDocuments().size(), 1);\n\n   Object o = Utils.fromJSONString(Utils.writeJson(l.get(0), new StringWriter(), true).toString());\n   Object cdoc = Utils.getObjectByPath(o, false, CHILDDOC);\n   assertEquals(Utils.writeJson(cdoc, new StringWriter(), true).toString(),\n       Utils.writeJson(l2.get(0).getChildDocuments().get(0) ,new StringWriter(), true).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["074c4e385ea7c9ae29556e95c886ea0ccc614029","b0b597c65628ca9e73913a07e81691f8229bae35"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["9ba1b632c041956c93c41aa1143d16a567014891","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}