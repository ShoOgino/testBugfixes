{"path":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCustomAttribute().mjava","commits":[{"id":"77e6111c8c695bcab271a048bf5aae6b05cf415b","date":1450974359,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCustomAttribute().mjava","pathOld":"/dev/null","sourceNew":"  @Test //See SOLR-8460\n  public void testCustomAttribute() throws Exception {\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"skutype1\");\n    request.setFieldValue(\"hi, 3456-12 a Test\");\n    request.setShowMatch(false);\n    FieldType fieldType = new TextField();\n    Analyzer analyzer = new TokenizerChain(\n        new TokenizerFactory(Collections.emptyMap()) {\n          @Override\n          public Tokenizer create(AttributeFactory factory) {\n            return new CustomTokenizer(factory);\n          }\n        },\n        new TokenFilterFactory[] {\n            new TokenFilterFactory(Collections.emptyMap()) {\n              @Override\n              public TokenStream create(TokenStream input) {\n                return new CustomTokenFilter(input);\n              }\n            }\n        }\n    );\n    fieldType.setIndexAnalyzer(analyzer);\n\n    NamedList<NamedList> result = handler.analyzeValues(request, fieldType, \"fieldNameUnused\");\n    // just test that we see \"900\" in the flags attribute here\n    List<NamedList> tokenInfoList = (List<NamedList>) result.findRecursive(\"index\", CustomTokenFilter.class.getName());\n    // '1' from CustomTokenFilter plus 900 from CustomFlagsAttributeImpl.\n    assertEquals(901, tokenInfoList.get(0).get(\"org.apache.lucene.analysis.tokenattributes.FlagsAttribute#flags\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCustomAttribute().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testCustomAttribute().mjava","sourceNew":"  @Test //See SOLR-8460\n  public void testCustomAttribute() throws Exception {\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"skutype1\");\n    request.setFieldValue(\"hi, 3456-12 a Test\");\n    request.setShowMatch(false);\n    FieldType fieldType = new TextField();\n    Analyzer analyzer = new TokenizerChain(\n        new TokenizerFactory(Collections.emptyMap()) {\n          @Override\n          public Tokenizer create(AttributeFactory factory) {\n            return new CustomTokenizer(factory);\n          }\n        },\n        new TokenFilterFactory[] {\n            new TokenFilterFactory(Collections.emptyMap()) {\n              @Override\n              public TokenStream create(TokenStream input) {\n                return new CustomTokenFilter(input);\n              }\n            }\n        }\n    );\n    fieldType.setIndexAnalyzer(analyzer);\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList<NamedList> result = handler.analyzeValues(request, fieldType, \"fieldNameUnused\");\n    // just test that we see \"900\" in the flags attribute here\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<NamedList> tokenInfoList = (List<NamedList>) result.findRecursive(\"index\", CustomTokenFilter.class.getName());\n    // '1' from CustomTokenFilter plus 900 from CustomFlagsAttributeImpl.\n    assertEquals(901, tokenInfoList.get(0).get(\"org.apache.lucene.analysis.tokenattributes.FlagsAttribute#flags\"));\n  }\n\n","sourceOld":"  @Test //See SOLR-8460\n  public void testCustomAttribute() throws Exception {\n    FieldAnalysisRequest request = new FieldAnalysisRequest();\n    request.addFieldType(\"skutype1\");\n    request.setFieldValue(\"hi, 3456-12 a Test\");\n    request.setShowMatch(false);\n    FieldType fieldType = new TextField();\n    Analyzer analyzer = new TokenizerChain(\n        new TokenizerFactory(Collections.emptyMap()) {\n          @Override\n          public Tokenizer create(AttributeFactory factory) {\n            return new CustomTokenizer(factory);\n          }\n        },\n        new TokenFilterFactory[] {\n            new TokenFilterFactory(Collections.emptyMap()) {\n              @Override\n              public TokenStream create(TokenStream input) {\n                return new CustomTokenFilter(input);\n              }\n            }\n        }\n    );\n    fieldType.setIndexAnalyzer(analyzer);\n\n    NamedList<NamedList> result = handler.analyzeValues(request, fieldType, \"fieldNameUnused\");\n    // just test that we see \"900\" in the flags attribute here\n    List<NamedList> tokenInfoList = (List<NamedList>) result.findRecursive(\"index\", CustomTokenFilter.class.getName());\n    // '1' from CustomTokenFilter plus 900 from CustomFlagsAttributeImpl.\n    assertEquals(901, tokenInfoList.get(0).get(\"org.apache.lucene.analysis.tokenattributes.FlagsAttribute#flags\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77e6111c8c695bcab271a048bf5aae6b05cf415b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["77e6111c8c695bcab271a048bf5aae6b05cf415b"]},"commit2Childs":{"77e6111c8c695bcab271a048bf5aae6b05cf415b":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77e6111c8c695bcab271a048bf5aae6b05cf415b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}