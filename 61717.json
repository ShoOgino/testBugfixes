{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","commits":[{"id":"587bce86f07b072818f585d0fd32bb3fc7a1c647","date":1366063632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n\n        final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n        newCollections.remove(collection);\n\n        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return newState;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n\n//        final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n//        newCollections.remove(collection);\n\n//        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n\n        final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n        newCollections.remove(collection);\n\n        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return newState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n\n//        final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n//        newCollections.remove(collection);\n\n//        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n\n        final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n        newCollections.remove(collection);\n\n        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return newState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n        checkCollection(message, collection);\n\n//        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n\n//        final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n//        newCollections.remove(collection);\n\n//        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df412542f3e2161f4bc2b13357b4a973195bfb7","date":1394040511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n        checkCollection(message, collection);\n\n//        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n\n        final String collection = message.getStr(\"name\");\n\n//        final Map<String, DocCollection> newCollections = new LinkedHashMap<String,DocCollection>(clusterState.getCollectionStates()); // shallow copy\n//        newCollections.remove(collection);\n\n//        ClusterState newState = new ClusterState(clusterState.getLiveNodes(), newCollections);\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n        DocCollection coll = clusterState.getCollectionOrNull(collection);\n        if(coll !=null) {\n          isClusterStateModified = true;\n          if(coll.isExternal()){\n            try {\n              log.info(\"Deleting state for collection : {}\", collection);\n              zkClient.delete(ZkStateReader.getCollectionPath(collection),-1,true);\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Unable to remove collection state :\"+collection);\n\n            }\n            return clusterState;\n          } else{\n            return clusterState.copyWith(singletonMap(collection,(DocCollection)null));\n          }\n        }\n        return clusterState;\n      }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n\n        return clusterState.copyWith(singletonMap(collection, (DocCollection)null));\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n        DocCollection coll = clusterState.getCollectionOrNull(collection);\n        if(coll !=null) {\n          return clusterState.copyWith(singletonMap(collection,(DocCollection)null));\n        }\n        return clusterState;\n      }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n        DocCollection coll = clusterState.getCollectionOrNull(collection);\n        if(coll !=null) {\n          isClusterStateModified = true;\n          if(coll.isExternal()){\n            try {\n              log.info(\"Deleting state for collection : {}\", collection);\n              zkClient.delete(ZkStateReader.getCollectionPath(collection),-1,true);\n            } catch (Exception e) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Unable to remove collection state :\"+collection);\n\n            }\n            return clusterState;\n          } else{\n            return clusterState.copyWith(singletonMap(collection,(DocCollection)null));\n          }\n        }\n        return clusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection from cloudstate\n     */\n    private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(\"name\");\n      if (!checkKeyExistence(message, \"name\")) return clusterState;\n      DocCollection coll = clusterState.getCollectionOrNull(collection);\n      if(coll !=null) {\n        isClusterStateModified = true;\n        if(coll.getStateFormat()>1){\n          try {\n            log.info(\"Deleting state for collection : {}\", collection);\n            zkClient.delete(ZkStateReader.getCollectionPath(collection),-1,true);\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Unable to remove collection state :\"+collection);\n\n          }\n          return clusterState;\n        } else{\n          return clusterState.copyWith(singletonMap(collection,(DocCollection)null));\n        }\n      }\n      return clusterState;\n    }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n        DocCollection coll = clusterState.getCollectionOrNull(collection);\n        if(coll !=null) {\n          return clusterState.copyWith(singletonMap(collection,(DocCollection)null));\n        }\n        return clusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n        DocCollection coll = clusterState.getCollectionOrNull(collection);\n        if(coll !=null) {\n          return clusterState.copyWith(singletonMap(collection,(DocCollection)null));\n        }\n        return clusterState;\n      }\n\n","sourceOld":"    /*\n     * Remove collection from cloudstate\n     */\n    private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(\"name\");\n      if (!checkKeyExistence(message, \"name\")) return clusterState;\n      DocCollection coll = clusterState.getCollectionOrNull(collection);\n      if(coll !=null) {\n        isClusterStateModified = true;\n        if(coll.getStateFormat()>1){\n          try {\n            log.info(\"Deleting state for collection : {}\", collection);\n            zkClient.delete(ZkStateReader.getCollectionPath(collection),-1,true);\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Unable to remove collection state :\"+collection);\n\n          }\n          return clusterState;\n        } else{\n          return clusterState.copyWith(singletonMap(collection,(DocCollection)null));\n        }\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection from cloudstate\n     */\n    private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(\"name\");\n      if (!checkKeyExistence(message, \"name\")) return clusterState;\n      DocCollection coll = clusterState.getCollectionOrNull(collection);\n      if(coll == null) return  clusterState;\n\n      isClusterStateModified = true;\n      if (coll.getStateFormat() > 1) {\n        try {\n          log.info(\"Deleting state for collection : {}\", collection);\n          zkClient.delete(ZkStateReader.getCollectionPath(collection), -1, true);\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to remove collection state :\" + collection);\n        }\n      }\n      return newState(clusterState, singletonMap(coll.getName(),(DocCollection) null));\n    }\n\n","sourceOld":"      /*\n       * Remove collection from cloudstate\n       */\n      private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n        final String collection = message.getStr(\"name\");\n        if (!checkKeyExistence(message, \"name\")) return clusterState;\n        DocCollection coll = clusterState.getCollectionOrNull(collection);\n        if(coll !=null) {\n          return clusterState.copyWith(singletonMap(collection,(DocCollection)null));\n        }\n        return clusterState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"    /*\n     * Remove collection from cloudstate\n     */\n    private ZkWriteCommand removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n      return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n    }\n\n","sourceOld":"    /*\n     * Remove collection from cloudstate\n     */\n    private ClusterState removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n      final String collection = message.getStr(\"name\");\n      if (!checkKeyExistence(message, \"name\")) return clusterState;\n      DocCollection coll = clusterState.getCollectionOrNull(collection);\n      if(coll == null) return  clusterState;\n\n      isClusterStateModified = true;\n      if (coll.getStateFormat() > 1) {\n        try {\n          log.info(\"Deleting state for collection : {}\", collection);\n          zkClient.delete(ZkStateReader.getCollectionPath(collection), -1, true);\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to remove collection state :\" + collection);\n        }\n      }\n      return newState(clusterState, singletonMap(coll.getName(),(DocCollection) null));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f6fef27e0d27edc875c720e6ce5db17480a562","date":1417277285,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#removeCollection(ClusterState,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    /*\n     * Remove collection from cloudstate\n     */\n    private ZkWriteCommand removeCollection(final ClusterState clusterState, ZkNodeProps message) {\n      return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"587bce86f07b072818f585d0fd32bb3fc7a1c647":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["587bce86f07b072818f585d0fd32bb3fc7a1c647","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03f6fef27e0d27edc875c720e6ce5db17480a562"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"587bce86f07b072818f585d0fd32bb3fc7a1c647":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["96ea64d994d340044e0d57aeb6a5871539d10ca5","29f5eaf296600e1665151e7929d42a3cbe22e481","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"9279b175e5e66258442d2123a50f052219a9cc1b":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"03f6fef27e0d27edc875c720e6ce5db17480a562":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["96ea64d994d340044e0d57aeb6a5871539d10ca5","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}