{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(TermFreqPayloadIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator tfit) throws IOException {\n    if (tfit.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    tfit = new SortedInputIterator(tfit, BytesRef.getUTF8SortedAsUTF16Comparator());\n\n    ArrayList<String> tokens = new ArrayList<String>();\n    ArrayList<Number> vals = new ArrayList<Number>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = tfit.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(tfit.weight()));\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqPayloadIterator tfit) throws IOException {\n    if (tfit.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    tfit = new SortedTermFreqPayloadIteratorWrapper(tfit, BytesRef.getUTF8SortedAsUTF16Comparator());\n\n    ArrayList<String> tokens = new ArrayList<String>();\n    ArrayList<Number> vals = new ArrayList<Number>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = tfit.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(tfit.weight()));\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<String>();\n    ArrayList<Number> vals = new ArrayList<Number>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator tfit) throws IOException {\n    if (tfit.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    tfit = new SortedInputIterator(tfit, BytesRef.getUTF8SortedAsUTF16Comparator());\n\n    ArrayList<String> tokens = new ArrayList<String>();\n    ArrayList<Number> vals = new ArrayList<Number>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = tfit.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(tfit.weight()));\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<String>();\n    ArrayList<Number> vals = new ArrayList<Number>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRefBuilder charsSpare = new CharsRefBuilder();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.copyUTF8Bytes(spare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRef charsSpare = new CharsRef();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","bugFix":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(tempDir, tempFileNamePrefix, iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRefBuilder charsSpare = new CharsRefBuilder();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.copyUTF8Bytes(spare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRefBuilder charsSpare = new CharsRefBuilder();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.copyUTF8Bytes(spare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(tempDir, tempFileNamePrefix, iterator, utf8SortedAsUTF16SortOrder);\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRefBuilder charsSpare = new CharsRefBuilder();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.copyUTF8Bytes(spare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(tempDir, tempFileNamePrefix, iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRefBuilder charsSpare = new CharsRefBuilder();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.copyUTF8Bytes(spare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(tempDir, tempFileNamePrefix, iterator, utf8SortedAsUTF16SortOrder);\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRefBuilder charsSpare = new CharsRefBuilder();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.copyUTF8Bytes(spare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    root = new TernaryTreeNode();\n\n    // make sure it's sorted and the comparator uses UTF16 sort order\n    iterator = new SortedInputIterator(tempDir, tempFileNamePrefix, iterator, BytesRef.getUTF8SortedAsUTF16Comparator());\n    count = 0;\n    ArrayList<String> tokens = new ArrayList<>();\n    ArrayList<Number> vals = new ArrayList<>();\n    BytesRef spare;\n    CharsRefBuilder charsSpare = new CharsRefBuilder();\n    while ((spare = iterator.next()) != null) {\n      charsSpare.copyUTF8Bytes(spare);\n      tokens.add(charsSpare.toString());\n      vals.add(Long.valueOf(iterator.weight()));\n      count++;\n    }\n    autocomplete.balancedTree(tokens.toArray(), vals.toArray(), 0, tokens.size() - 1, root);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"af2638813028b254a88b418ebeafb541afb49653":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}