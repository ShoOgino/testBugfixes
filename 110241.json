{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getCalcForField(SchemaField).mjava","commits":[{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getCalcForField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getRangeCounts().mjava","sourceNew":"  /**\n   * Helper method used in processor constructor\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   */\n  private static Calc getCalcForField(SchemaField sf) {\n    final FieldType ft = sf.getType();\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          return new FloatCalc(sf);\n        case DOUBLE:\n          return new DoubleCalc(sf);\n        case INTEGER:\n          return new IntCalc(sf);\n        case LONG:\n          return new LongCalc(sf);\n        case DATE:\n          return new DateCalc(sf, null);\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on numeric field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      return new CurrencyCalc(sf);\n    }\n\n    // if we made it this far, we have no idea what it is...\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                            \"Unable to range facet on field:\" + sf.getName());\n  }\n\n","sourceOld":"  private SimpleOrderedMap<Object> getRangeCounts() throws IOException {\n    final FieldType ft = sf.getType();\n\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          calc = new FloatCalc(sf);\n          break;\n        case DOUBLE:\n          calc = new DoubleCalc(sf);\n          break;\n        case INTEGER:\n          calc = new IntCalc(sf);\n          break;\n        case LONG:\n          calc = new LongCalc(sf);\n          break;\n        case DATE:\n          calc = new DateCalc(sf, null);\n          break;\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on tried field of unexpected type:\" + freq.field);\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      calc = new CurrencyCalc(sf);\n    } else {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Unable to range facet on field:\" + sf);\n    }\n\n    if (fcontext.facetInfo != null) {\n      return refineFacets();\n    }\n\n    createRangeList();\n    return getRangeCountsIndexed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getCalcForField(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method used in processor constructor\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   */\n  private static Calc getCalcForField(SchemaField sf) {\n    final FieldType ft = sf.getType();\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          return new FloatCalc(sf);\n        case DOUBLE:\n          return new DoubleCalc(sf);\n        case INTEGER:\n          return new IntCalc(sf);\n        case LONG:\n          return new LongCalc(sf);\n        case DATE:\n          return new DateCalc(sf, null);\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on numeric field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      return new CurrencyCalc(sf);\n    }\n\n    // if we made it this far, we have no idea what it is...\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                            \"Unable to range facet on field:\" + sf.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getCalcForField(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method used in processor constructor\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   */\n  private static Calc getCalcForField(SchemaField sf) {\n    final FieldType ft = sf.getType();\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          return new FloatCalc(sf);\n        case DOUBLE:\n          return new DoubleCalc(sf);\n        case INTEGER:\n          return new IntCalc(sf);\n        case LONG:\n          return new LongCalc(sf);\n        case DATE:\n          return new DateCalc(sf, null);\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on numeric field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      return new CurrencyCalc(sf);\n    }\n\n    // if we made it this far, we have no idea what it is...\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                            \"Unable to range facet on field:\" + sf.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b0066948e0de656266973a9b8ff51247a0c2da5","date":1580831800,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getCalcForField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getCalcForField(SchemaField).mjava","sourceNew":"  /**\n   * Helper method used in processor constructor\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   */\n  private static Calc getCalcForField(SchemaField sf) {\n    final FieldType ft = sf.getType();\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          return new FloatCalc(sf);\n        case DOUBLE:\n          return new DoubleCalc(sf);\n        case INTEGER:\n          return new IntCalc(sf);\n        case LONG:\n          return new LongCalc(sf);\n        case DATE:\n          return new DateCalc(sf, null);\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on numeric field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      return new CurrencyCalc(sf);\n    } else if (ft instanceof DateRangeField) {\n      return new DateCalc(sf, null);\n    }\n\n    // if we made it this far, we have no idea what it is...\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                            \"Unable to range facet on field:\" + sf.getName());\n  }\n\n","sourceOld":"  /**\n   * Helper method used in processor constructor\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   */\n  private static Calc getCalcForField(SchemaField sf) {\n    final FieldType ft = sf.getType();\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          return new FloatCalc(sf);\n        case DOUBLE:\n          return new DoubleCalc(sf);\n        case INTEGER:\n          return new IntCalc(sf);\n        case LONG:\n          return new LongCalc(sf);\n        case DATE:\n          return new DateCalc(sf, null);\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on numeric field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      return new CurrencyCalc(sf);\n    }\n\n    // if we made it this far, we have no idea what it is...\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                            \"Unable to range facet on field:\" + sf.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#getCalcForField(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getCalcForField(SchemaField).mjava","sourceNew":"  /**\n   * Helper method used in processor constructor\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   */\n  private static Calc getCalcForField(SchemaField sf) {\n    final FieldType ft = sf.getType();\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          return new FloatCalc(sf);\n        case DOUBLE:\n          return new DoubleCalc(sf);\n        case INTEGER:\n          return new IntCalc(sf);\n        case LONG:\n          return new LongCalc(sf);\n        case DATE:\n          return new DateCalc(sf, null);\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on numeric field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      return new CurrencyCalc(sf);\n    } else if (ft instanceof DateRangeField) {\n      return new DateCalc(sf, null);\n    }\n\n    // if we made it this far, we have no idea what it is...\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"Unable to range facet on field:\" + sf.getName());\n  }\n\n","sourceOld":"  /**\n   * Helper method used in processor constructor\n   * @return a <code>Calc</code> instance with {@link Calc#bitsToValue} and {@link Calc#bitsToSortableBits} methods suitable for the specified field.\n   */\n  private static Calc getCalcForField(SchemaField sf) {\n    final FieldType ft = sf.getType();\n    if (ft instanceof TrieField || ft.isPointField()) {\n      switch (ft.getNumberType()) {\n        case FLOAT:\n          return new FloatCalc(sf);\n        case DOUBLE:\n          return new DoubleCalc(sf);\n        case INTEGER:\n          return new IntCalc(sf);\n        case LONG:\n          return new LongCalc(sf);\n        case DATE:\n          return new DateCalc(sf, null);\n        default:\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Unable to range facet on numeric field of unexpected type:\" + sf.getName());\n      }\n    } else if (ft instanceof CurrencyFieldType) {\n      return new CurrencyCalc(sf);\n    } else if (ft instanceof DateRangeField) {\n      return new DateCalc(sf, null);\n    }\n\n    // if we made it this far, we have no idea what it is...\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                            \"Unable to range facet on field:\" + sf.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["7b0066948e0de656266973a9b8ff51247a0c2da5"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"],"7b0066948e0de656266973a9b8ff51247a0c2da5":["c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c05b634713ca09b2267477408773904d4c69dd9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7b0066948e0de656266973a9b8ff51247a0c2da5":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7b0066948e0de656266973a9b8ff51247a0c2da5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}