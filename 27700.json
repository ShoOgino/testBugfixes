{"path":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  SegmentReader(SegmentInfo si)\n       throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    fieldInfos = new FieldInfos(directory, segment + \".fnm\");\n    fieldsReader = new FieldsReader(directory, segment, fieldInfos);\n\n    tis = new TermInfosReader(directory, segment, fieldInfos);\n\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory, segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = directory.openFile(segment + \".frq\");\n    proxStream = directory.openFile(segment + \".prx\");\n    openNorms();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","sourceNew":"  SegmentReader(SegmentInfo si)\n       throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    // Use compound file directory for some files, if it exists\n    Directory cfsDir = directory;\n    if (directory.fileExists(segment + \".cfs\")) {\n        cfsReader = new CompoundFileReader(directory, segment + \".cfs\");\n        cfsDir = cfsReader;\n    }\n\n    // No compound file exists - use the multi-file format\n    fieldInfos = new FieldInfos(cfsDir, segment + \".fnm\");\n    fieldsReader = new FieldsReader(cfsDir, segment, fieldInfos);\n\n    tis = new TermInfosReader(cfsDir, segment, fieldInfos);\n\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory, segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = cfsDir.openFile(segment + \".frq\");\n    proxStream = cfsDir.openFile(segment + \".prx\");\n    openNorms(cfsDir);\n  }\n\n","sourceOld":"  SegmentReader(SegmentInfo si)\n       throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    fieldInfos = new FieldInfos(directory, segment + \".fnm\");\n    fieldsReader = new FieldsReader(directory, segment, fieldInfos);\n\n    tis = new TermInfosReader(directory, segment, fieldInfos);\n\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory, segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = directory.openFile(segment + \".frq\");\n    proxStream = directory.openFile(segment + \".prx\");\n    openNorms();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"434ea59dc096623cd1affa6bcf7471b98611cfbd","date":1066055154,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","sourceNew":"  SegmentReader(SegmentInfo si)\n    throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    // Use compound file directory for some files, if it exists\n    Directory cfsDir = directory;\n    if (directory.fileExists(segment + \".cfs\")) {\n      cfsReader = new CompoundFileReader(directory, segment + \".cfs\");\n      cfsDir = cfsReader;\n    }\n\n    // No compound file exists - use the multi-file format\n    fieldInfos = new FieldInfos(cfsDir, segment + \".fnm\");\n    fieldsReader = new FieldsReader(cfsDir, segment, fieldInfos);\n\n    tis = new TermInfosReader(cfsDir, segment, fieldInfos);\n\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory, segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = cfsDir.openFile(segment + \".frq\");\n    proxStream = cfsDir.openFile(segment + \".prx\");\n    openNorms(cfsDir);\n  }\n\n","sourceOld":"  SegmentReader(SegmentInfo si)\n       throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    // Use compound file directory for some files, if it exists\n    Directory cfsDir = directory;\n    if (directory.fileExists(segment + \".cfs\")) {\n        cfsReader = new CompoundFileReader(directory, segment + \".cfs\");\n        cfsDir = cfsReader;\n    }\n\n    // No compound file exists - use the multi-file format\n    fieldInfos = new FieldInfos(cfsDir, segment + \".fnm\");\n    fieldsReader = new FieldsReader(cfsDir, segment, fieldInfos);\n\n    tis = new TermInfosReader(cfsDir, segment, fieldInfos);\n\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory, segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = cfsDir.openFile(segment + \".frq\");\n    proxStream = cfsDir.openFile(segment + \".prx\");\n    openNorms(cfsDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7fb6d70db034a5456ae560175dd1b821eea9ff4","date":1066759157,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","sourceNew":"  SegmentReader(SegmentInfo si)\n    throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    // Use compound file directory for some files, if it exists\n    Directory cfsDir = directory();\n    if (directory().fileExists(segment + \".cfs\")) {\n      cfsReader = new CompoundFileReader(directory(), segment + \".cfs\");\n      cfsDir = cfsReader;\n    }\n\n    // No compound file exists - use the multi-file format\n    fieldInfos = new FieldInfos(cfsDir, segment + \".fnm\");\n    fieldsReader = new FieldsReader(cfsDir, segment, fieldInfos);\n\n    tis = new TermInfosReader(cfsDir, segment, fieldInfos);\n\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory(), segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = cfsDir.openFile(segment + \".frq\");\n    proxStream = cfsDir.openFile(segment + \".prx\");\n    openNorms(cfsDir);\n  }\n\n","sourceOld":"  SegmentReader(SegmentInfo si)\n    throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    // Use compound file directory for some files, if it exists\n    Directory cfsDir = directory;\n    if (directory.fileExists(segment + \".cfs\")) {\n      cfsReader = new CompoundFileReader(directory, segment + \".cfs\");\n      cfsDir = cfsReader;\n    }\n\n    // No compound file exists - use the multi-file format\n    fieldInfos = new FieldInfos(cfsDir, segment + \".fnm\");\n    fieldsReader = new FieldsReader(cfsDir, segment, fieldInfos);\n\n    tis = new TermInfosReader(cfsDir, segment, fieldInfos);\n\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory, segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = cfsDir.openFile(segment + \".frq\");\n    proxStream = cfsDir.openFile(segment + \".prx\");\n    openNorms(cfsDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","sourceNew":"  SegmentReader(SegmentInfo si)\n          throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    // Use compound file directory for some files, if it exists\n    Directory cfsDir = directory();\n    if (directory().fileExists(segment + \".cfs\")) {\n      cfsReader = new CompoundFileReader(directory(), segment + \".cfs\");\n      cfsDir = cfsReader;\n    }\n\n    // No compound file exists - use the multi-file format\n    fieldInfos = new FieldInfos(cfsDir, segment + \".fnm\");\n    fieldsReader = new FieldsReader(cfsDir, segment, fieldInfos);\n\n    tis = new TermInfosReader(cfsDir, segment, fieldInfos);\n\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory(), segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = cfsDir.openFile(segment + \".frq\");\n    proxStream = cfsDir.openFile(segment + \".prx\");\n    openNorms(cfsDir);\n\n    if (fieldInfos.hasVectors()) { // open term vector files only as needed\n      termVectorsReader = new TermVectorsReader(cfsDir, segment, fieldInfos);\n    }\n  }\n\n","sourceOld":"  SegmentReader(SegmentInfo si)\n    throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    // Use compound file directory for some files, if it exists\n    Directory cfsDir = directory();\n    if (directory().fileExists(segment + \".cfs\")) {\n      cfsReader = new CompoundFileReader(directory(), segment + \".cfs\");\n      cfsDir = cfsReader;\n    }\n\n    // No compound file exists - use the multi-file format\n    fieldInfos = new FieldInfos(cfsDir, segment + \".fnm\");\n    fieldsReader = new FieldsReader(cfsDir, segment, fieldInfos);\n\n    tis = new TermInfosReader(cfsDir, segment, fieldInfos);\n\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory(), segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = cfsDir.openFile(segment + \".frq\");\n    proxStream = cfsDir.openFile(segment + \".prx\");\n    openNorms(cfsDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","sourceNew":"  SegmentReader(SegmentInfo si) throws IOException {\n    super(si.dir);\n    initialize(si);\n  }\n\n","sourceOld":"  SegmentReader(SegmentInfo si)\n          throws IOException {\n    super(si.dir);\n    segment = si.name;\n\n    // Use compound file directory for some files, if it exists\n    Directory cfsDir = directory();\n    if (directory().fileExists(segment + \".cfs\")) {\n      cfsReader = new CompoundFileReader(directory(), segment + \".cfs\");\n      cfsDir = cfsReader;\n    }\n\n    // No compound file exists - use the multi-file format\n    fieldInfos = new FieldInfos(cfsDir, segment + \".fnm\");\n    fieldsReader = new FieldsReader(cfsDir, segment, fieldInfos);\n\n    tis = new TermInfosReader(cfsDir, segment, fieldInfos);\n\n    // NOTE: the bitvector is stored using the regular directory, not cfs\n    if (hasDeletions(si))\n      deletedDocs = new BitVector(directory(), segment + \".del\");\n\n    // make sure that all index files have been read or are kept open\n    // so that if an index update removes them we'll still have them\n    freqStream = cfsDir.openFile(segment + \".frq\");\n    proxStream = cfsDir.openFile(segment + \".prx\");\n    openNorms(cfsDir);\n\n    if (fieldInfos.hasVectors()) { // open term vector files only as needed\n      termVectorsReader = new TermVectorsReader(cfsDir, segment, fieldInfos);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo).mjava","sourceNew":null,"sourceOld":"  SegmentReader(SegmentInfo si) throws IOException {\n    super(si.dir);\n    initialize(si);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["434ea59dc096623cd1affa6bcf7471b98611cfbd"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"434ea59dc096623cd1affa6bcf7471b98611cfbd":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"434ea59dc096623cd1affa6bcf7471b98611cfbd":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["434ea59dc096623cd1affa6bcf7471b98611cfbd"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}