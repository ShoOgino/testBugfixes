{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","sourceNew":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case PATCHED:\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","sourceNew":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case PATCHED:\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","sourceNew":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case PATCHED_BITSET:\n      case PATCHED_TABLE:\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case PATCHED:\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsProducer#readEntry(FieldInfo,IndexInput).mjava","sourceNew":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case PATCHED_BITSET:\n      case PATCHED_TABLE:\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","sourceOld":"  private NormsEntry readEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NormsEntry entry = new NormsEntry();\n    entry.count = meta.readVInt();\n    entry.format = meta.readByte();\n    entry.offset = meta.readLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n      case UNCOMPRESSED:\n      case TABLE_COMPRESSED:\n      case DELTA_COMPRESSED:\n        break;\n      case PATCHED_BITSET:\n      case PATCHED_TABLE:\n      case INDIRECT:\n        if (meta.readVInt() != info.number) {\n          throw new CorruptIndexException(\"indirect norms entry for field: \" + info.name + \" is corrupt\", meta);\n        }\n        entry.nested = readEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0c3fae32338d82a0710e1756793faba13dcb598b"],"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["bc8f80fee115148a0e4a0574560be06b494de821"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"0c3fae32338d82a0710e1756793faba13dcb598b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["0c3fae32338d82a0710e1756793faba13dcb598b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}