{"path":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","commits":[{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link TermInSetQuery} from the given collection for\n   * a single field. It can contain duplicate terms.\n   */\n  public TermInSetQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[terms.size()]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    singleField = true;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#TermsQuery(String,Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Creates a new {@link TermInSetQuery} from the given collection for\n   * a single field. It can contain duplicate terms.\n   */\n  public TermInSetQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[terms.size()]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    singleField = true;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TermsQuery} from the given collection for\n   * a single field. It can contain duplicate terms.\n   */\n  public TermsQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[terms.size()]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    singleField = true;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"830a7b9be2f498e249b346796921c94cdd39d98f","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Creates a new {@link TermInSetQuery} from the given collection of terms.\n   */\n  public TermInSetQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[terms.size()]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    this.field = field;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TermInSetQuery} from the given collection for\n   * a single field. It can contain duplicate terms.\n   */\n  public TermInSetQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[terms.size()]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    singleField = true;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Creates a new {@link TermInSetQuery} from the given collection of terms.\n   */\n  public TermInSetQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[terms.size()]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    this.field = field;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TermInSetQuery} from the given collection for\n   * a single field. It can contain duplicate terms.\n   */\n  public TermInSetQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[terms.size()]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    singleField = true;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b6470bf9e2b7ad6479fd130cd96e0a1c21f37f8","date":1573839775,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermInSetQuery#TermInSetQuery(String,Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Creates a new {@link TermInSetQuery} from the given collection of terms.\n   */\n  public TermInSetQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[0]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    this.field = field;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TermInSetQuery} from the given collection of terms.\n   */\n  public TermInSetQuery(String field, Collection<BytesRef> terms) {\n    BytesRef[] sortedTerms = terms.toArray(new BytesRef[terms.size()]);\n    // already sorted if we are a SortedSet with natural order\n    boolean sorted = terms instanceof SortedSet && ((SortedSet<BytesRef>)terms).comparator() == null;\n    if (!sorted) {\n      ArrayUtil.timSort(sortedTerms);\n    }\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    for (BytesRef term : sortedTerms) {\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (previous.get().equals(term)) {\n        continue; // deduplicate\n      }\n      builder.add(field, term);\n      previous.copyBytes(term);\n    }\n    this.field = field;\n    termData = builder.finish();\n    termDataHashCode = termData.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"830a7b9be2f498e249b346796921c94cdd39d98f":["8d73510b39df24d6b65de48e56f8dccb136b9d01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9b6470bf9e2b7ad6479fd130cd96e0a1c21f37f8":["830a7b9be2f498e249b346796921c94cdd39d98f"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b6470bf9e2b7ad6479fd130cd96e0a1c21f37f8"],"302d34f2c66e8d489ee13078305c330cbf67b226":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","830a7b9be2f498e249b346796921c94cdd39d98f"]},"commit2Childs":{"830a7b9be2f498e249b346796921c94cdd39d98f":["9b6470bf9e2b7ad6479fd130cd96e0a1c21f37f8","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["830a7b9be2f498e249b346796921c94cdd39d98f","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"9b6470bf9e2b7ad6479fd130cd96e0a1c21f37f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}