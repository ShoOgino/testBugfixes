{"path":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testTransposition().mjava","commits":[{"id":"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab","date":1324934316,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testTransposition().mjava","pathOld":"/dev/null","sourceNew":"  // simple test that transpositions work, we suggest five for fvie with ed=1\n  public void testTransposition() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\n        \"numbers\", \"fvie\"), 1, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length);\n    assertEquals(\"five\", similar[0].string);\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testTransposition().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testTransposition().mjava","sourceNew":"  // simple test that transpositions work, we suggest five for fvie with ed=1\n  public void testTransposition() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\n        \"numbers\", \"fvie\"), 1, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length);\n    assertEquals(\"five\", similar[0].string);\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // simple test that transpositions work, we suggest five for fvie with ed=1\n  public void testTransposition() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\n        \"numbers\", \"fvie\"), 1, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length);\n    assertEquals(\"five\", similar[0].string);\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testTransposition().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testTransposition().mjava","sourceNew":"  // simple test that transpositions work, we suggest five for fvie with ed=1\n  public void testTransposition() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\n        \"numbers\", \"fvie\"), 1, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length);\n    assertEquals(\"five\", similar[0].string);\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // simple test that transpositions work, we suggest five for fvie with ed=1\n  public void testTransposition() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\n        \"numbers\", \"fvie\"), 1, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length);\n    assertEquals(\"five\", similar[0].string);\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}