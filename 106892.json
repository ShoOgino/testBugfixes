{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","commits":[{"id":"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052","date":1401862284,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"/dev/null","sourceNew":"    public void fetchStatus() {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          success = true;\n        }\n        stream.close();\n      } catch (Exception e) {\n        fail = e.getMessage();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n    }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d359645acebeba5edce0f1186d99aa81bbe546","date":1402921077,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find()) {\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","sourceOld":"    public void fetchStatus() {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          success = true;\n        }\n        stream.close();\n      } catch (Exception e) {\n        fail = e.getMessage();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n    }\n","bugFix":null,"bugIntro":["5b847bb03f0ad90d50073e48e452f3346df87482"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find()) {\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","sourceOld":"    public void fetchStatus() {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          success = true;\n        }\n        stream.close();\n      } catch (Exception e) {\n        fail = e.getMessage();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b847bb03f0ad90d50073e48e452f3346df87482","date":1413504427,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find()) {\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","bugFix":["34d359645acebeba5edce0f1186d99aa81bbe546"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find()) {\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + \"/replication?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH + \"?command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandlerBackup.CheckDeleteBackupStatus#fetchStatus().mjava","sourceNew":null,"sourceOld":"    public boolean fetchStatus() throws IOException {\n      String masterUrl = buildUrl(masterJetty.getLocalPort(), context) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH + \"?wt=xml&command=\" + ReplicationHandler.CMD_DETAILS;\n      URL url;\n      InputStream stream = null;\n      try {\n        url = new URL(masterUrl);\n        stream = url.openStream();\n        response = IOUtils.toString(stream, \"UTF-8\");\n        if(response.contains(\"<str name=\\\"status\\\">success</str>\")) {\n          Matcher m = p.matcher(response);\n          if(m.find() && (lastTimestamp == null || !lastTimestamp.equals(m.group(1)))) {\n            lastTimestamp = m.group(1);\n            return true;\n          }\n        } else if(response.contains(\"<str name=\\\"status\\\">Unable to delete snapshot: \" + backupName + \"</str>\" )) {\n          return false;\n        }\n        stream.close();\n      } finally {\n        IOUtils.closeQuietly(stream);\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"936cdd5882761db3b844afd6f84ab81cbb011a75":["71475d88ea48a7d9a847f209667255318b3ea4c7","ac1e7fa558287a811ea07634d815ee7b1c541284"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["5b847bb03f0ad90d50073e48e452f3346df87482"],"34d359645acebeba5edce0f1186d99aa81bbe546":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052"],"5b847bb03f0ad90d50073e48e452f3346df87482":["34d359645acebeba5edce0f1186d99aa81bbe546"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052","34d359645acebeba5edce0f1186d99aa81bbe546"],"a52341299179de5479672f7cf518bf4b173f34b3":["71475d88ea48a7d9a847f209667255318b3ea4c7","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["34d359645acebeba5edce0f1186d99aa81bbe546","5b847bb03f0ad90d50073e48e452f3346df87482"],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["a52341299179de5479672f7cf518bf4b173f34b3"],"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["71475d88ea48a7d9a847f209667255318b3ea4c7"]},"commit2Childs":{"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"34d359645acebeba5edce0f1186d99aa81bbe546":["5b847bb03f0ad90d50073e48e452f3346df87482","c6f080a2ab37c464dd98db173f6cbf10dc74f211","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"5b847bb03f0ad90d50073e48e452f3346df87482":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"a52341299179de5479672f7cf518bf4b173f34b3":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4dbfe3d3dc9ac9bda8ee276ce539e571f3125052":["34d359645acebeba5edce0f1186d99aa81bbe546","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4dbfe3d3dc9ac9bda8ee276ce539e571f3125052"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"71475d88ea48a7d9a847f209667255318b3ea4c7":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","71475d88ea48a7d9a847f209667255318b3ea4c7"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","c6f080a2ab37c464dd98db173f6cbf10dc74f211","0a22eafe3f72a4c2945eaad9547e6c78816978f4","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}