{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"    private FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        fst.toDot(ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"    private FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        fst.toDot(ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"/dev/null","sourceNew":"    private FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        fst.toDot(ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        Util.toDot(fst, ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    private FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        fst.toDot(ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        Util.toDot(fst, ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    private FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        fst.toDot(ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        Util.toDot(fst, ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    private FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        fst.toDot(ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c43006fcb55911ba617f27dc9235103a9bc4e421","date":1298301286,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        Util.toDot(fst, ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        Util.toDot(fst, ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        PrintStream ps = new PrintStream(\"out.dot\");\n        Util.toDot(fst, ps);\n        ps.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8136d8c9f128223389b731b2affdeccdbf1af3","date":1305220410,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          ((Builder<Object>) builder).add(pair.input, (Object) _outputs.get(twoLongs.first));\n          ((Builder<Object>) builder).add(pair.input, (Object) _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          ((Builder<Object>) builder).add(pair.input, (Object) _outputs.get(twoLongs.first));\n          ((Builder<Object>) builder).add(pair.input, (Object) _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2bc5d41a00d11350eb95259ec9aea193b46f3be","date":1305322165,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          ((Builder<Object>) builder).add(pair.input, (Object) _outputs.get(twoLongs.first));\n          ((Builder<Object>) builder).add(pair.input, (Object) _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          ((Builder<Object>) builder).add(pair.input, (Object) _outputs.get(twoLongs.first));\n          ((Builder<Object>) builder).add(pair.input, (Object) _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        builder.add(pair.input, pair.output);\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs.FSTTester#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.FSTTester#doTest(int,int).mjava","sourceNew":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","sourceOld":"    FST<T> doTest(int prune1, int prune2) throws IOException {\n      if (VERBOSE) {\n        System.out.println(\"TEST: prune1=\" + prune1 + \" prune2=\" + prune2);\n      }\n\n      final Builder<T> builder = new Builder<T>(inputMode == 0 ? FST.INPUT_TYPE.BYTE1 : FST.INPUT_TYPE.BYTE4,\n                                                prune1, prune2,\n                                                prune1==0 && prune2==0, outputs);\n\n      for(InputOutput<T> pair : pairs) {\n        if (pair.output instanceof UpToTwoPositiveIntOutputs.TwoLongs) {\n          final UpToTwoPositiveIntOutputs _outputs = (UpToTwoPositiveIntOutputs) outputs;\n          final UpToTwoPositiveIntOutputs.TwoLongs twoLongs = (UpToTwoPositiveIntOutputs.TwoLongs) pair.output;\n          @SuppressWarnings(\"unchecked\") final Builder<Object> builderObject = (Builder<Object>) builder;\n          builderObject.add(pair.input, _outputs.get(twoLongs.first));\n          builderObject.add(pair.input, _outputs.get(twoLongs.second));\n        } else {\n          builder.add(pair.input, pair.output);\n        }\n      }\n      FST<T> fst = builder.finish();\n\n      if (random.nextBoolean() && fst != null) {\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n        IndexInput in = dir.openInput(\"fst.bin\");\n        try {\n          fst = new FST<T>(in, outputs);\n        } finally {\n          in.close();\n          dir.deleteFile(\"fst.bin\");\n        }\n      }\n\n      if (VERBOSE && pairs.size() <= 20 && fst != null) {\n        Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n        Util.toDot(fst, w, false, false);\n        w.close();\n        System.out.println(\"SAVED out.dot\");\n      }\n\n      if (VERBOSE) {\n        if (fst == null) {\n          System.out.println(\"  fst has 0 nodes (fully pruned)\");\n        } else {\n          System.out.println(\"  fst has \" + fst.getNodeCount() + \" nodes and \" + fst.getArcCount() + \" arcs\");\n        }\n      }\n\n      if (prune1 == 0 && prune2 == 0) {\n        verifyUnPruned(inputMode, fst);\n      } else {\n        verifyPruned(inputMode, fst, prune1, prune2);\n      }\n\n      return fst;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["d2bc5d41a00d11350eb95259ec9aea193b46f3be"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"c43006fcb55911ba617f27dc9235103a9bc4e421":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","d2bc5d41a00d11350eb95259ec9aea193b46f3be"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","c43006fcb55911ba617f27dc9235103a9bc4e421"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c43006fcb55911ba617f27dc9235103a9bc4e421","d2bc5d41a00d11350eb95259ec9aea193b46f3be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea8136d8c9f128223389b731b2affdeccdbf1af3":["c43006fcb55911ba617f27dc9235103a9bc4e421"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","ea8136d8c9f128223389b731b2affdeccdbf1af3"],"d2bc5d41a00d11350eb95259ec9aea193b46f3be":["ea8136d8c9f128223389b731b2affdeccdbf1af3"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","c43006fcb55911ba617f27dc9235103a9bc4e421"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c3a8a449466c1ff7ce2274fe73dab487256964b4","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"c43006fcb55911ba617f27dc9235103a9bc4e421":["d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","ea8136d8c9f128223389b731b2affdeccdbf1af3","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","c43006fcb55911ba617f27dc9235103a9bc4e421","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"ea8136d8c9f128223389b731b2affdeccdbf1af3":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","d2bc5d41a00d11350eb95259ec9aea193b46f3be"],"d2bc5d41a00d11350eb95259ec9aea193b46f3be":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}