{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashRollupStream#HashRollupStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"1ecdfb266e7c129f6740243b70a053b96b0a1346","date":1551363608,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashRollupStream#HashRollupStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public HashRollupStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n    StreamExpressionNamedParameter overExpression = factory.getNamedOperand(expression, \"over\");\n\n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + metricExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    if(null == overExpression || !(overExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to rollup by but didn't find one\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    // Construct the buckets.\n    // Buckets are nothing more than equalitors (I think). We can use equalitors as helpers for creating the buckets, but because\n    // I feel I'm missing something wrt buckets I don't want to change the use of buckets in this class to instead be equalitors.\n    StreamEqualitor streamEqualitor = factory.constructEqualitor(((StreamExpressionValue)overExpression.getParameter()).getValue(), FieldEqualitor.class);\n    List<FieldEqualitor> flattenedEqualitors = flattenEqualitor(streamEqualitor);\n    Bucket[] buckets = new Bucket[flattenedEqualitors.size()];\n    for(int idx = 0; idx < flattenedEqualitors.size(); ++idx){\n      buckets[idx] = new Bucket(flattenedEqualitors.get(idx).getLeftFieldName());\n      // while we're using equalitors we don't support those of the form a=b. Only single field names.\n    }\n\n    init(factory.constructStream(streamExpressions.get(0)), buckets, metrics);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ecdfb266e7c129f6740243b70a053b96b0a1346":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ecdfb266e7c129f6740243b70a053b96b0a1346"]},"commit2Childs":{"1ecdfb266e7c129f6740243b70a053b96b0a1346":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ecdfb266e7c129f6740243b70a053b96b0a1346"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}