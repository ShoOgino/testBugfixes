{"path":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","commits":[{"id":"2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88","date":1546726477,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n\n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n          \"You should not use LATEST as luceneMatchVersion property: \"+\n              \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n              \"sizable changes may happen. If precise back compatibility is important \"+\n              \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n\n    return version;\n  }\n\n","sourceOld":"  //TODO belongs on SolrXmlConfig?\n  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n    \n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LATEST as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n\n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      if (log.isWarnEnabled()) {\n        log.warn(\n            \"You should not use LATEST as luceneMatchVersion property: \" +\n                \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \" +\n                \"sizable changes may happen. If precise back compatibility is important \" +\n                \"then you should instead explicitly specify an actual Lucene version.\");\n      }\n    }\n\n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n\n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n          \"You should not use LATEST as luceneMatchVersion property: \"+\n              \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n              \"sizable changes may happen. If precise back compatibility is important \"+\n              \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n\n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\"You should not use LATEST as luceneMatchVersion property: {}{}{}\"\n          , \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"\n          , \"sizable changes may happen. If precise back compatibility is important \"\n          , \"then you should instead explicitly specify an actual Lucene version.\");\n    }\n\n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n\n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      if (log.isWarnEnabled()) {\n        log.warn(\n            \"You should not use LATEST as luceneMatchVersion property: \" +\n                \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \" +\n                \"sizable changes may happen. If precise back compatibility is important \" +\n                \"then you should instead explicitly specify an actual Lucene version.\");\n      }\n    }\n\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n\n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\"You should not use LATEST as luceneMatchVersion property: \"\n          + \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"\n          + \"sizable changes may happen. If precise back compatibility is important \"\n          + \"then you should instead explicitly specify an actual Lucene version.\");\n    }\n\n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    final Version version;\n    try {\n      version = Version.parseLeniently(matchVersion);\n    } catch (ParseException pe) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Invalid luceneMatchVersion.  Should be of the form 'V.V.V' (e.g. 4.8.0)\", pe);\n    }\n\n    if (version == Version.LATEST && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\"You should not use LATEST as luceneMatchVersion property: {}{}{}\"\n          , \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"\n          , \"sizable changes may happen. If precise back compatibility is important \"\n          , \"then you should instead explicitly specify an actual Lucene version.\");\n    }\n\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"]},"commit2Childs":{"2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2eb89ed39d48c9dbf1ec6df65ed11f8cf5331e88"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}