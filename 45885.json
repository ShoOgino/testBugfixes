{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/IntTaxonomyFacets#rollup().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/IntTaxonomyFacets#rollup().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/IntTaxonomyFacets#rollup().mjava","sourceNew":"  protected void rollup() throws IOException {\n    // Rollup any necessary dims:\n    for(Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          values[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void rollup() throws IOException {\n    // Rollup any necessary dims:\n    for(Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          values[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b656cbf28fe2a4be7de3f0e561623ca39d06884","date":1388622204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/IntTaxonomyFacets#rollup().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/IntTaxonomyFacets#rollup().mjava","sourceNew":"  /** Rolls up any single-valued hierarchical dimensions. */\n  protected void rollup() throws IOException {\n    // Rollup any necessary dims:\n    for(Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          values[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void rollup() throws IOException {\n    // Rollup any necessary dims:\n    for(Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          values[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/IntTaxonomyFacets#rollup().mjava","pathOld":"/dev/null","sourceNew":"  /** Rolls up any single-valued hierarchical dimensions. */\n  protected void rollup() throws IOException {\n    // Rollup any necessary dims:\n    for(Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          values[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7","date":1509555533,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/IntTaxonomyFacets#rollup().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/IntTaxonomyFacets#rollup().mjava","sourceNew":"  /** Rolls up any single-valued hierarchical dimensions. */\n  protected void rollup() throws IOException {\n    // Rollup any necessary dims:\n    int[] children = null;\n    for(Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          if (children == null) {\n            // lazy init\n            children = getChildren();\n          }\n          increment(dimRootOrd, rollup(children[dimRootOrd]));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Rolls up any single-valued hierarchical dimensions. */\n  protected void rollup() throws IOException {\n    // Rollup any necessary dims:\n    for(Map.Entry<String,DimConfig> ent : config.getDimConfigs().entrySet()) {\n      String dim = ent.getKey();\n      DimConfig ft = ent.getValue();\n      if (ft.hierarchical && ft.multiValued == false) {\n        int dimRootOrd = taxoReader.getOrdinal(new FacetLabel(dim));\n        // It can be -1 if this field was declared in the\n        // config but never indexed:\n        if (dimRootOrd > 0) {\n          values[dimRootOrd] += rollup(children[dimRootOrd]);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10b1c9af2d877ca8d718a359a4e5b285fe33b6f7"],"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["10b1c9af2d877ca8d718a359a4e5b285fe33b6f7"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"10b1c9af2d877ca8d718a359a4e5b285fe33b6f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}