{"path":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","commits":[{"id":"56ae115caecba9e317b733b7d6f3403eb5ce68d9","date":1338798797,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e","date":1341842777,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c","date":1348235008,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", SolrTestCaseJ4.TEST_HOME() + \"/collection1\");\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245","date":1363106546,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n\n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n    \n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n      \n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    try {\n      File solrXmlFile = new File(solrHomeDirectory, \"solr.xml\");\n      BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(solrXmlFile), IOUtils.CHARSET_UTF_8));\n      out.write(EMPTY_SOLR_XML);\n      out.close();\n    } catch (IOException e) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n      throw e;\n    }\n\n    //init\n    System.setProperty(\"solr.solr.home\", solrHomeDirectory.getAbsolutePath());\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":["448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e","56ae115caecba9e317b733b7d6f3403eb5ce68d9","9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer.Initializer init = new CoreContainer.Initializer();\n    CoreContainer cores = null;\n    try {\n      cores = init.initialize();\n    }\n    catch(Exception e) {\n      fail(\"CoreContainer not created\" + e.getMessage());\n    }\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb2abaa052d4bc0c4a0b2ab1f674fe64adbad476","date":1385228876,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    SetUpHome(solrHomeDirectory, EMPTY_SOLR_XML);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n\n      assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n          \"/solr/cores[@transientCacheSize='32']\");\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName() + \"_noCores\");\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(dataDir, this.getClass().getName()\n        + \"_noCores\");\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()\n        + \"_noCores\");\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName() + \"_noCores\");\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":["56ae115caecba9e317b733b7d6f3403eb5ce68d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = new File(dataDir, this.getClass().getName()\n        + \"_noCores\");\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n      cores.register(newCore, false);\n      \n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      newCore.close();\n      cores.remove(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrCore ret = cores.remove(\"non_existent_core\");\n      assertNull(ret);\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir().toFile();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws Exception {\n\n    CoreContainer cores = init(CONFIGSETS_SOLR_XML);\n\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", \"collection1\", CoreDescriptor.CORE_CONFIGSET, \"minimal\");\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {\n    //create solrHome\n    File solrHomeDirectory = createTempDir().toFile();\n    \n    boolean oldSolrXml = random().nextBoolean();\n    \n    SetUpHome(solrHomeDirectory, oldSolrXml ? EMPTY_SOLR_XML : EMPTY_SOLR_XML2);\n    CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      FileUtils.copyDirectory(new File(SolrTestCaseJ4.TEST_HOME(), \"collection1\"), solrHomeDirectory);\n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", solrHomeDirectory.getAbsolutePath());\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      if (oldSolrXml) {\n        assertXmlFile(new File(solrHomeDirectory, \"solr.xml\"),\n            \"/solr/cores[@transientCacheSize='32']\");\n      }\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca230c35a9895012bbcad3f191934e3d45a2825b","date":1436678935,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws Exception {\n\n    CoreContainer cores = init(CONFIGSETS_SOLR_XML);\n\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", \"collection1\", CoreDescriptor.CORE_CONFIGSET, \"minimal\");\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n      // try and remove a null core\n      try {\n        cores.unload(null);\n        fail(\"Should have thrown an exception when unloading a null core\");\n      }\n      catch (Exception e) {\n        if (!(e instanceof SolrException)) {\n          fail(\"Should not have thrown SolrException but got \" + e);\n        }\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [null]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws Exception {\n\n    CoreContainer cores = init(CONFIGSETS_SOLR_XML);\n\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", \"collection1\", CoreDescriptor.CORE_CONFIGSET, \"minimal\");\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws Exception {\n\n    CoreContainer cores = init(CONFIGSETS_SOLR_XML);\n\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      cores.create(\"core1\", ImmutableMap.of(\"configSet\", \"minimal\"));\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n      // try and remove a null core\n      try {\n        cores.unload(null);\n        fail(\"Should have thrown an exception when unloading a null core\");\n      }\n      catch (Exception e) {\n        if (!(e instanceof SolrException)) {\n          fail(\"Should not have thrown SolrException but got \" + e);\n        }\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [null]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws Exception {\n\n    CoreContainer cores = init(CONFIGSETS_SOLR_XML);\n\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, \"core1\", \"collection1\", CoreDescriptor.CORE_CONFIGSET, \"minimal\");\n      SolrCore newCore = cores.create(coreDescriptor);\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n      // try and remove a null core\n      try {\n        cores.unload(null);\n        fail(\"Should have thrown an exception when unloading a null core\");\n      }\n      catch (Exception e) {\n        if (!(e instanceof SolrException)) {\n          fail(\"Should not have thrown SolrException but got \" + e);\n        }\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [null]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testNoCores().mjava","sourceNew":"  @Test\n  public void testNoCores() throws Exception {\n\n    CoreContainer cores = init(CONFIGSETS_SOLR_XML);\n\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      cores.create(\"core1\", ImmutableMap.of(\"configSet\", \"minimal\"));\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        cores.unload(\"non_existent_core\");\n      });\n      assertThat(thrown.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n\n\n      // try and remove a null core\n      thrown = expectThrows(SolrException.class, () -> {\n        cores.unload(null);\n      });\n      assertThat(thrown.getMessage(), containsString(\"Cannot unload non-existent core [null]\"));\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNoCores() throws Exception {\n\n    CoreContainer cores = init(CONFIGSETS_SOLR_XML);\n\n    try {\n      //assert zero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      //add a new core\n      cores.create(\"core1\", ImmutableMap.of(\"configSet\", \"minimal\"));\n\n      //assert one registered core\n\n      assertEquals(\"There core registered\", 1, cores.getCores().size());\n\n      cores.unload(\"core1\");\n      //assert cero cores\n      assertEquals(\"There should not be cores\", 0, cores.getCores().size());\n      \n      // try and remove a core that does not exist\n      try {\n        cores.unload(\"non_existent_core\");\n        fail(\"Should have thrown an exception when unloading a non-existent core\");\n      }\n      catch (SolrException e) {\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [non_existent_core]\"));\n      }\n\n      // try and remove a null core\n      try {\n        cores.unload(null);\n        fail(\"Should have thrown an exception when unloading a null core\");\n      }\n      catch (Exception e) {\n        if (!(e instanceof SolrException)) {\n          fail(\"Should not have thrown SolrException but got \" + e);\n        }\n        assertThat(e.getMessage(), containsString(\"Cannot unload non-existent core [null]\"));\n      }\n\n    } finally {\n      cores.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be","7116474e2e390259937401cf928323e0cbc75e60"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["f4abec28b874149a7223e32cc7a01704c27790de"],"2acf500f78aa12b92e371fd89c719291986b6b90":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["ca230c35a9895012bbcad3f191934e3d45a2825b"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["bb2abaa052d4bc0c4a0b2ab1f674fe64adbad476"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca230c35a9895012bbcad3f191934e3d45a2825b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c":["2acf500f78aa12b92e371fd89c719291986b6b90"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["56ae115caecba9e317b733b7d6f3403eb5ce68d9"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"56ae115caecba9e317b733b7d6f3403eb5ce68d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb2abaa052d4bc0c4a0b2ab1f674fe64adbad476"],"46d8ada1fff8d18cb197c38c7983225162599948":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","2acf500f78aa12b92e371fd89c719291986b6b90"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"bb2abaa052d4bc0c4a0b2ab1f674fe64adbad476":["7116474e2e390259937401cf928323e0cbc75e60"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["56ae115caecba9e317b733b7d6f3403eb5ce68d9","2acf500f78aa12b92e371fd89c719291986b6b90"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["85032ab568b3f50eabd577aaa994ba197db93758"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7116474e2e390259937401cf928323e0cbc75e60","bb2abaa052d4bc0c4a0b2ab1f674fe64adbad476"],"85032ab568b3f50eabd577aaa994ba197db93758":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"]},"commit2Childs":{"8b6f42dee5a60f46a3fdf3ab93b39aefb356e245":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","bb2abaa052d4bc0c4a0b2ab1f674fe64adbad476","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["85032ab568b3f50eabd577aaa994ba197db93758"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["ca230c35a9895012bbcad3f191934e3d45a2825b"],"2acf500f78aa12b92e371fd89c719291986b6b90":["69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56ae115caecba9e317b733b7d6f3403eb5ce68d9"],"ca230c35a9895012bbcad3f191934e3d45a2825b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"69c0b7c6f9804817f14bd78c3795cdd9f6ddae5c":["8b6f42dee5a60f46a3fdf3ab93b39aefb356e245"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"56ae115caecba9e317b733b7d6f3403eb5ce68d9":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"f4abec28b874149a7223e32cc7a01704c27790de":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"bb2abaa052d4bc0c4a0b2ab1f674fe64adbad476":["1416f9d09d016a6894cd17e1caac137dad2bba59","d0d579490a72f2e6297eaa648940611234c57cf1","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"2d629ca62e3b8ab6e29a127aebe213163d490413":["f4abec28b874149a7223e32cc7a01704c27790de"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"85032ab568b3f50eabd577aaa994ba197db93758":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}