{"path":"contrib/miscellaneous/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","commits":[{"id":"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a","date":1148592089,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","pathOld":"/dev/null","sourceNew":"  public void testSweetSpotTf() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n    \n    // tf equal\n\n    ss.setBaselineTfFactors(0.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"tf: i=\"+i,\n                   d.tf(i), s.tf(i), 0.0f);\n    }\n\n    // tf higher\n  \n    ss.setBaselineTfFactors(1.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : d=\"+d.tf(i)+\n                 \" < s=\"+s.tf(i),\n                 d.tf(i) < s.tf(i));\n    }\n\n    // tf flat\n  \n    ss.setBaselineTfFactors(1.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat1: i=\"+i, 1.0f, s.tf(i), 0.0f);\n    }\n    ss.setBaselineTfFactors(2.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat2: i=\"+i, 2.0f, s.tf(i), 0.0f);\n    }\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+s.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 s.tf(i) < d.tf(i));\n    }\n\n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testSweetSpotTf().mjava","sourceNew":"  public void testSweetSpotTf() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n    \n    // tf equal\n\n    ss.setBaselineTfFactors(0.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"tf: i=\"+i,\n                   d.tf(i), s.tf(i), 0.0f);\n    }\n\n    // tf higher\n  \n    ss.setBaselineTfFactors(1.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : d=\"+d.tf(i)+\n                 \" < s=\"+s.tf(i),\n                 d.tf(i) < s.tf(i));\n    }\n\n    // tf flat\n  \n    ss.setBaselineTfFactors(1.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat1: i=\"+i, 1.0f, s.tf(i), 0.0f);\n    }\n    ss.setBaselineTfFactors(2.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat2: i=\"+i, 2.0f, s.tf(i), 0.0f);\n    }\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+s.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 s.tf(i) < d.tf(i));\n    }\n\n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n  }\n\n","sourceOld":"  public void testSweetSpotTf() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity();\n\n    Similarity d = new DefaultSimilarity();\n    Similarity s = ss;\n    \n    // tf equal\n\n    ss.setBaselineTfFactors(0.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertEquals(\"tf: i=\"+i,\n                   d.tf(i), s.tf(i), 0.0f);\n    }\n\n    // tf higher\n  \n    ss.setBaselineTfFactors(1.0f, 0.0f);\n  \n    for (int i = 1; i < 1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : d=\"+d.tf(i)+\n                 \" < s=\"+s.tf(i),\n                 d.tf(i) < s.tf(i));\n    }\n\n    // tf flat\n  \n    ss.setBaselineTfFactors(1.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat1: i=\"+i, 1.0f, s.tf(i), 0.0f);\n    }\n    ss.setBaselineTfFactors(2.0f, 6.0f);\n    for (int i = 1; i <=6; i++) {\n      assertEquals(\"tf flat2: i=\"+i, 2.0f, s.tf(i), 0.0f);\n    }\n    for (int i = 6; i <=1000; i++) {\n      assertTrue(\"tf: i=\"+i+\" : s=\"+s.tf(i)+\n                 \" < d=\"+d.tf(i),\n                 s.tf(i) < d.tf(i));\n    }\n\n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["6f9cbf33fc4a562e686c8dc8f92b7856f051b90a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f9cbf33fc4a562e686c8dc8f92b7856f051b90a"],"6f9cbf33fc4a562e686c8dc8f92b7856f051b90a":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}