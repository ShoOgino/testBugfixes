{"path":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1214bb624eb41181e5c8e260e0050c7e973ba0f4","date":1487943042,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    return query(setDistribParams, p, null, null);\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","date":1487979822,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    return query(setDistribParams, p, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    if (shardCount == 0) {//mostly for temp debugging\n      return controlRsp;\n    }\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    if (shardCount == 0) {//mostly for temp debugging\n      return controlRsp;\n    }\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(boolean,SolrParams).mjava","sourceNew":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    if (shardCount == 0) {//mostly for temp debugging\n      return controlRsp;\n    }\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","sourceOld":"  /**\n   * Returns the QueryResponse from {@link #queryServer}  \n   */\n  protected QueryResponse query(boolean setDistribParams, SolrParams p) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams(p);\n\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    if (setDistribParams) setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrClient client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException | IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","2ab027bdfe663227636ccbeda13ae82add302939"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["bafca15d8e408346a67f4282ad1143b88023893b"],"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ab027bdfe663227636ccbeda13ae82add302939"],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1214bb624eb41181e5c8e260e0050c7e973ba0f4"],"b61ef53ee9899b83a89bf97542c28a4cfd0a64bf":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"1214bb624eb41181e5c8e260e0050c7e973ba0f4":["b61ef53ee9899b83a89bf97542c28a4cfd0a64bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}