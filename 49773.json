{"path":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f458fcb817a740e7906774b7ca2c54d37b34f24f","date":1319501743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["00743482822ec0841b0344a37944b666e6a0228d"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00743482822ec0841b0344a37944b666e6a0228d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["6620df8541b174097b1133a4fc370adb2e570524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00743482822ec0841b0344a37944b666e6a0228d"],"00743482822ec0841b0344a37944b666e6a0228d":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}