{"path":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.LFuncAcc#collect(int,int).mjava","commits":[{"id":"730fe41fb3af5691ad519dc6da96240c41ef187f","date":1504632797,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.LFuncAcc#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc, int slotNum) throws IOException {\n      long val = values.longVal(doc);\n      if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n      long currVal = result[slotNum];\n      if (currVal == 0 && !exists.get(slotNum)) {\n        exists.set(slotNum);\n        result[slotNum] = val;\n      } else if (Long.compare(val, currVal) * minmax < 0) {\n        result[slotNum] =  val;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.LFuncAcc#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc, int slotNum) throws IOException {\n      long val = values.longVal(doc);\n      if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n      long currVal = result[slotNum];\n      if (currVal == 0 && !exists.get(slotNum)) {\n        exists.set(slotNum);\n        result[slotNum] = val;\n      } else if (Long.compare(val, currVal) * minmax < 0) {\n        result[slotNum] =  val;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.LFuncAcc#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc, int slotNum) throws IOException {\n      long val = values.longVal(doc);\n      if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n      long currVal = result[slotNum];\n      if (currVal == 0 && !exists.get(slotNum)) {\n        exists.set(slotNum);\n        result[slotNum] = val;\n      } else if (Long.compare(val, currVal) * minmax < 0) {\n        result[slotNum] =  val;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.LFuncAcc#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void collect(int doc, int slotNum) throws IOException {\n      long val = values.longVal(doc);\n      if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n      long currVal = result[slotNum];\n      if (currVal == 0 && !exists.get(slotNum)) {\n        exists.set(slotNum);\n        result[slotNum] = val;\n      } else if (Long.compare(val, currVal) * minmax < 0) {\n        result[slotNum] =  val;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.LFuncAcc#collect(int,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MinMaxAgg.LFuncAcc#collect(int,int).mjava","sourceNew":"    @Override\n    public void collect(int doc, int slotNum, IntFunction<SlotContext> slotContext) throws IOException {\n      long val = values.longVal(doc);\n      if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n      long currVal = result[slotNum];\n      if (currVal == 0 && !exists.get(slotNum)) {\n        exists.set(slotNum);\n        result[slotNum] = val;\n      } else if (Long.compare(val, currVal) * minmax < 0) {\n        result[slotNum] =  val;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc, int slotNum) throws IOException {\n      long val = values.longVal(doc);\n      if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n      long currVal = result[slotNum];\n      if (currVal == 0 && !exists.get(slotNum)) {\n        exists.set(slotNum);\n        result[slotNum] = val;\n      } else if (Long.compare(val, currVal) * minmax < 0) {\n        result[slotNum] =  val;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","730fe41fb3af5691ad519dc6da96240c41ef187f"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"730fe41fb3af5691ad519dc6da96240c41ef187f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c705a0d590cf911e7c942df49563ca2ea176e22"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["2c705a0d590cf911e7c942df49563ca2ea176e22","685bd38810c206c93e9058f3c2cfa9827c086c27"],"730fe41fb3af5691ad519dc6da96240c41ef187f":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b21283ed01203901a7257aa4b7f0a0899c86e56e","685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","730fe41fb3af5691ad519dc6da96240c41ef187f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}