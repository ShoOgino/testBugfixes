{"path":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","commits":[{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex]);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd]);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd]);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex]);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd]);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd]);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex]);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd]);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd]);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader.getLiveDocs());\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs());\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs());\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex]);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd]);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd]);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader.getLiveDocs(), termContexts);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs(), termContexts);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs(), termContexts);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader.getLiveDocs());\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs());\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs());\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader().getLiveDocs(), termContexts);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader.getLiveDocs(), termContexts);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs(), termContexts);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs(), termContexts);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader().getLiveDocs(), termContexts);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader.getLiveDocs(), termContexts);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs(), termContexts);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader.getLiveDocs(), termContexts);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/MultiSpansWrapper#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader().getLiveDocs(), termContexts);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (leafOrd >= leaves.length) {\n      return false;\n    }\n\n    int subIndex = ReaderUtil.subIndex(target, leaves);\n    assert subIndex >= leafOrd;\n    if (subIndex != leafOrd) {\n      current = query.getSpans(leaves[subIndex], leaves[subIndex].reader().getLiveDocs(), termContexts);\n      leafOrd = subIndex;\n    } else if (current == null) {\n      current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n    }\n    while (true) {\n      if (current.skipTo(target - leaves[leafOrd].docBase)) {\n        return true;\n      }\n      if (++leafOrd < leaves.length) {\n        current = query.getSpans(leaves[leafOrd], leaves[leafOrd].reader().getLiveDocs(), termContexts);\n      } else {\n          current = null;\n          break;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c8323d210478d76a02372693d254b69aac614689"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a015474a0e3185be4c42ed156c0f1e88b90b1ace","a2ec9a9068164200de82395f0e8537a9d9302f3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["a2ec9a9068164200de82395f0e8537a9d9302f3f","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}