{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","date":1286712181,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new MockAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(\"\"+i);\n    }\n    Document d = new Document();\n    Field f = new Field(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n    \n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator();\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = t.docs(null, null);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2","date":1327858167,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicIndexReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicIndexReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    IndexReader r = w.getReader().getSequentialSubReaders()[0];\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexDivisor().mjava","sourceNew":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexDivisor() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    config.setTermIndexInterval(2);\n    IndexWriter w = new IndexWriter(dir, config);\n    StringBuilder s = new StringBuilder();\n    // must be > 256\n    for(int i=0;i<300;i++) {\n      s.append(' ').append(i);\n    }\n    Document d = new Document();\n    Field f = newField(\"field\", s.toString(), TextField.TYPE_UNSTORED);\n    d.add(f);\n    w.addDocument(d);\n\n    AtomicReader r = getOnlySegmentReader(w.getReader());\n    TermsEnum t = r.fields().terms(\"field\").iterator(null);\n    int count = 0;\n    while(t.next() != null) {\n      final DocsEnum docs = _TestUtil.docs(random, t, null, null, false);\n      assertEquals(0, docs.nextDoc());\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, docs.nextDoc());\n      count++;\n    }\n    assertEquals(300, count);\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["872cff1d3a554e0cd64014cd97f88d3002b0f491","da6d5ac19a80d65b1e864251f155d30960353b7e"],"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["2929ce110b8f9e8a7d82c45d6b6bc119fea035d2"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3cc749c053615f5871f3b95715fe292f34e70a53":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["5cab9a86bd67202d20b6adc463008c8e982b070a","b65b350ca9588f9fc76ce7d6804160d06c45ff42","2929ce110b8f9e8a7d82c45d6b6bc119fea035d2"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3cc749c053615f5871f3b95715fe292f34e70a53"],"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b65b350ca9588f9fc76ce7d6804160d06c45ff42","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}