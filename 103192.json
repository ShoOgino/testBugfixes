{"path":"solr/core/src/test/org/apache/solr/cloud/TestSegmentTerminateEarlyState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","commits":[{"id":"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b","date":1455308162,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentTerminateEarlyState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (TestMiniSolrCloudCluster.random().nextBoolean() ? null : new Boolean(TestMiniSolrCloudCluster.random().nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2cc4cc34bb16ef750f9e4be14637706977993e","date":1455320490,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentTerminateEarlyState#queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient).mjava","sourceNew":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (TestMiniSolrCloudCluster.random().nextBoolean() ? null : new Boolean(TestMiniSolrCloudCluster.random().nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","sourceOld":"  void queryTimestampDescendingSegmentTerminateEarlyYes(CloudSolrClient cloudSolrClient) throws Exception {\n    TestMiniSolrCloudCluster.assertFalse(maxTimestampDocKeys.isEmpty());\n    TestMiniSolrCloudCluster.assertTrue(\"numDocs=\"+numDocs+\" is not even\", (numDocs%2)==0);\n    final Long oddFieldValue = new Long(maxTimestampDocKeys.iterator().next().intValue()%2);\n    final SolrQuery query = new SolrQuery(oddField+\":\"+oddFieldValue);\n    query.setSort(timestampField, SolrQuery.ORDER.desc);\n    query.setFields(keyField, oddField, timestampField);\n    final int rowsWanted = 1;\n    query.setRows(rowsWanted);\n    final Boolean shardsInfoWanted = (TestMiniSolrCloudCluster.random().nextBoolean() ? null : new Boolean(TestMiniSolrCloudCluster.random().nextBoolean()));\n    if (shardsInfoWanted != null) {\n      query.set(ShardParams.SHARDS_INFO, shardsInfoWanted.booleanValue());\n    }\n    query.set(CommonParams.SEGMENT_TERMINATE_EARLY, true);\n    final QueryResponse rsp = cloudSolrClient.query(query);\n    // check correctness of the results count\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rowsWanted <= rsp.getResults().getNumFound());\n    TestMiniSolrCloudCluster.assertTrue(\"numFound\", rsp.getResults().getNumFound() <= numDocs/2);\n    // check correctness of the first result\n    if (rsp.getResults().getNumFound() > 0) {\n      final SolrDocument solrDocument0 = rsp.getResults().get(0);\n      TestMiniSolrCloudCluster.assertTrue(keyField+\" of (\"+solrDocument0+\") is not in maxTimestampDocKeys(\"+maxTimestampDocKeys+\")\",\n          maxTimestampDocKeys.contains(solrDocument0.getFieldValue(keyField)));\n      TestMiniSolrCloudCluster.assertEquals(oddField, oddFieldValue, rsp.getResults().get(0).getFieldValue(oddField));\n    }\n    // check segmentTerminatedEarly flag\n    TestMiniSolrCloudCluster.assertNotNull(\"responseHeader.segmentTerminatedEarly missing in \"+rsp.getResponseHeader(),\n        rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY));\n    TestMiniSolrCloudCluster.assertTrue(\"responseHeader.segmentTerminatedEarly missing/false in \"+rsp.getResponseHeader(),\n        Boolean.TRUE.equals(rsp.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY)));\n    // check shards info\n    final Object shardsInfo = rsp.getResponse().get(ShardParams.SHARDS_INFO);\n    if (!Boolean.TRUE.equals(shardsInfoWanted)) {\n      TestMiniSolrCloudCluster.assertNull(ShardParams.SHARDS_INFO, shardsInfo);\n    } else {\n      TestMiniSolrCloudCluster.assertNotNull(ShardParams.SHARDS_INFO, shardsInfo);\n      int segmentTerminatedEarlyShardsCount = 0;\n      for (Map.Entry<String, ?> si : (SimpleOrderedMap<?>)shardsInfo) {\n        if (Boolean.TRUE.equals(((SimpleOrderedMap)si.getValue()).get(SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY))) {\n          segmentTerminatedEarlyShardsCount += 1;\n        }\n      }\n      // check segmentTerminatedEarly flag within shards info\n      TestMiniSolrCloudCluster.assertTrue(segmentTerminatedEarlyShardsCount+\" shards reported \"+SolrQueryResponse.RESPONSE_HEADER_SEGMENT_TERMINATED_EARLY_KEY,\n          (0<segmentTerminatedEarlyShardsCount));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f2cc4cc34bb16ef750f9e4be14637706977993e":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f2cc4cc34bb16ef750f9e4be14637706977993e"]},"commit2Childs":{"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b":["3f2cc4cc34bb16ef750f9e4be14637706977993e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b"],"3f2cc4cc34bb16ef750f9e4be14637706977993e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}