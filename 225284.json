{"path":"src/test/org/apache/solr/analysis/TestDelimitedPayloadTokenFilterFactory#testDelim().mjava","commits":[{"id":"80da990083d39edae205245fa054b04cc8153990","date":1247751384,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestDelimitedPayloadTokenFilterFactory#testDelim().mjava","pathOld":"/dev/null","sourceNew":"  public void testDelim() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, FloatEncoder.class.getName());\n    args.put(DelimitedPayloadTokenFilterFactory.DELIMITER_ATTR, \"*\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = h.getCore().getResourceLoader();\n    factory.inform(loader);\n\n    TokenStream input = new WhitespaceTokenizer(new StringReader(\"the*0.1 quick*0.1 red*0.1\"));\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = (PayloadAttribute) tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().getData();\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d32aa039d84ab454629ee28b64c63d777b5c9ce3","date":1268237977,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestDelimitedPayloadTokenFilterFactory#testDelim().mjava","pathOld":"src/test/org/apache/solr/analysis/TestDelimitedPayloadTokenFilterFactory#testDelim().mjava","sourceNew":"  public void testDelim() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, FloatEncoder.class.getName());\n    args.put(DelimitedPayloadTokenFilterFactory.DELIMITER_ATTR, \"*\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    factory.inform(loader);\n\n    TokenStream input = new WhitespaceTokenizer(new StringReader(\"the*0.1 quick*0.1 red*0.1\"));\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = (PayloadAttribute) tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().getData();\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","sourceOld":"  public void testDelim() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, FloatEncoder.class.getName());\n    args.put(DelimitedPayloadTokenFilterFactory.DELIMITER_ATTR, \"*\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = h.getCore().getResourceLoader();\n    factory.inform(loader);\n\n    TokenStream input = new WhitespaceTokenizer(new StringReader(\"the*0.1 quick*0.1 red*0.1\"));\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = (PayloadAttribute) tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().getData();\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestDelimitedPayloadTokenFilterFactory#testDelim().mjava","pathOld":"src/test/org/apache/solr/analysis/TestDelimitedPayloadTokenFilterFactory#testDelim().mjava","sourceNew":"  public void testDelim() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, FloatEncoder.class.getName());\n    args.put(DelimitedPayloadTokenFilterFactory.DELIMITER_ATTR, \"*\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    factory.inform(loader);\n\n    TokenStream input = new WhitespaceTokenizer(new StringReader(\"the*0.1 quick*0.1 red*0.1\"));\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = (PayloadAttribute) tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().getData();\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","sourceOld":"  public void testDelim() throws Exception {\n    Map<String,String> args = new HashMap<String, String>();\n    args.put(DelimitedPayloadTokenFilterFactory.ENCODER_ATTR, FloatEncoder.class.getName());\n    args.put(DelimitedPayloadTokenFilterFactory.DELIMITER_ATTR, \"*\");\n    DelimitedPayloadTokenFilterFactory factory = new DelimitedPayloadTokenFilterFactory();\n    factory.init(args);\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    factory.inform(loader);\n\n    TokenStream input = new WhitespaceTokenizer(new StringReader(\"the*0.1 quick*0.1 red*0.1\"));\n    DelimitedPayloadTokenFilter tf = factory.create(input);\n    while (tf.incrementToken()){\n      PayloadAttribute payAttr = (PayloadAttribute) tf.getAttribute(PayloadAttribute.class);\n      assertTrue(\"payAttr is null and it shouldn't be\", payAttr != null);\n      byte[] payData = payAttr.getPayload().getData();\n      assertTrue(\"payData is null and it shouldn't be\", payData != null);\n      float payFloat = PayloadHelper.decodeFloat(payData);\n      assertTrue(payFloat + \" does not equal: \" + 0.1f, payFloat == 0.1f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d32aa039d84ab454629ee28b64c63d777b5c9ce3":["80da990083d39edae205245fa054b04cc8153990"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d32aa039d84ab454629ee28b64c63d777b5c9ce3"],"80da990083d39edae205245fa054b04cc8153990":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d32aa039d84ab454629ee28b64c63d777b5c9ce3":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["80da990083d39edae205245fa054b04cc8153990"],"80da990083d39edae205245fa054b04cc8153990":["d32aa039d84ab454629ee28b64c63d777b5c9ce3"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}