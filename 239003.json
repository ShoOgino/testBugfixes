{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","commits":[{"id":"ee3e166981e4369cdbdcd511dbbd33421aef3b6c","date":1093302461,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n     * </code>\n     * </pre>\n     * @param queries Queries strings to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String[] queries, String[] fields,\n        Analyzer analyzer) throws ParseException\n    {\n        if (queries.length != fields.length)\n            // TODO Exception handling\n            throw new ParseException(\"queries.length != fields.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(queries[i], fields[i], analyzer);\n            bQuery.add(q, false, false);\n        }\n        return bQuery;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2a35410e365d9b0027637c577b72b8a6f96ce85","date":1093643417,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n     * </code>\n     * </pre>\n     * @param queries Queries strings to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String[] queries, String[] fields,\n        Analyzer analyzer) throws ParseException\n    {\n        if (queries.length != fields.length)\n            // TODO Exception handling\n            throw new ParseException(\"queries.length != fields.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(queries[i], fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n     * </code>\n     * </pre>\n     * @param queries Queries strings to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String[] queries, String[] fields,\n        Analyzer analyzer) throws ParseException\n    {\n        if (queries.length != fields.length)\n            // TODO Exception handling\n            throw new ParseException(\"queries.length != fields.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(queries[i], fields[i], analyzer);\n            bQuery.add(q, false, false);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0","date":1102865269,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n     * </code>\n     * </pre>\n     * @param queries Queries strings to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @throws IllegalArgumentException if the length of the queries array differs\n     *  from the length of the fields array\n     */\n    public static Query parse(String[] queries, String[] fields,\n        Analyzer analyzer) throws ParseException\n    {\n        if (queries.length != fields.length)\n            throw new IllegalArgumentException(\"queries.length != fields.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(queries[i], fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n     * </code>\n     * </pre>\n     * @param queries Queries strings to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     */\n    public static Query parse(String[] queries, String[] fields,\n        Analyzer analyzer) throws ParseException\n    {\n        if (queries.length != fields.length)\n            // TODO Exception handling\n            throw new ParseException(\"queries.length != fields.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(queries[i], fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"006e70a9e04438ee808b8fe40a5217f7cfa28fbd","date":1121971459,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","sourceNew":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n     * </code>\n     * </pre>\n     * @param queries Queries strings to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @throws IllegalArgumentException if the length of the queries array differs\n     *  from the length of the fields array\n     */\n    public static Query parse(String[] queries, String[] fields,\n        Analyzer analyzer) throws ParseException\n    {\n        if (queries.length != fields.length)\n            throw new IllegalArgumentException(\"queries.length != fields.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            QueryParser qp = new QueryParser(fields[i], analyzer);\n            Query q = qp.parse(queries[i]);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n     * </code>\n     * </pre>\n     * @param queries Queries strings to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @throws IllegalArgumentException if the length of the queries array differs\n     *  from the length of the fields array\n     */\n    public static Query parse(String[] queries, String[] fields,\n        Analyzer analyzer) throws ParseException\n    {\n        if (queries.length != fields.length)\n            throw new IllegalArgumentException(\"queries.length != fields.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(queries[i], fields[i], analyzer);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aae9fe64c5e6de1908855356afc05d7eb82903f","date":1121973155,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws TokenMgrError if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      bQuery.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return bQuery;\n  }\n\n","sourceOld":"    /**\n     * <p>\n     * Parses a query which searches on the fields specified.\n     * <p>\n     * If x fields are specified, this effectively constructs:\n     * <pre>\n     * <code>\n     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n     * </code>\n     * </pre>\n     * @param queries Queries strings to parse\n     * @param fields Fields to search on\n     * @param analyzer Analyzer to use\n     * @throws ParseException if query parsing fails\n     * @throws TokenMgrError if query parsing fails\n     * @throws IllegalArgumentException if the length of the queries array differs\n     *  from the length of the fields array\n     */\n    public static Query parse(String[] queries, String[] fields,\n        Analyzer analyzer) throws ParseException\n    {\n        if (queries.length != fields.length)\n            throw new IllegalArgumentException(\"queries.length != fields.length\");\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            QueryParser qp = new QueryParser(fields[i], analyzer);\n            Query q = qp.parse(queries[i]);\n            bQuery.add(q, BooleanClause.Occur.SHOULD);\n        }\n        return bQuery;\n    }\n\n","bugFix":null,"bugIntro":["2f0c71979827275ab91caba7232e8de375b40dd5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51e6907659dec5f5f2e432c956bbc611c7d658e0","date":1147525022,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      bQuery.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws TokenMgrError if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      bQuery.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f0c71979827275ab91caba7232e8de375b40dd5","date":1182818420,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      bQuery.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return bQuery;\n  }\n\n","bugFix":["6aae9fe64c5e6de1908855356afc05d7eb82903f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(Version,String[],String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#parse(String[],String[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param matchVersion Lucene version to match; this is passed through to QueryParser.\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(Version matchVersion, String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(matchVersion, fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query which searches on the fields specified.\n   * <p>\n   * If x fields are specified, this effectively constructs:\n   * <pre>\n   * <code>\n   * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)\n   * </code>\n   * </pre>\n   * @param queries Queries strings to parse\n   * @param fields Fields to search on\n   * @param analyzer Analyzer to use\n   * @throws ParseException if query parsing fails\n   * @throws IllegalArgumentException if the length of the queries array differs\n   *  from the length of the fields array\n   */\n  public static Query parse(String[] queries, String[] fields,\n      Analyzer analyzer) throws ParseException\n  {\n    if (queries.length != fields.length)\n      throw new IllegalArgumentException(\"queries.length != fields.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n    for (int i = 0; i < fields.length; i++)\n    {\n      QueryParser qp = new QueryParser(fields[i], analyzer);\n      Query q = qp.parse(queries[i]);\n      if (q!=null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery)q).getClauses().length>0)) {\n        bQuery.add(q, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f0c71979827275ab91caba7232e8de375b40dd5":["51e6907659dec5f5f2e432c956bbc611c7d658e0"],"006e70a9e04438ee808b8fe40a5217f7cfa28fbd":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"6aae9fe64c5e6de1908855356afc05d7eb82903f":["006e70a9e04438ee808b8fe40a5217f7cfa28fbd"],"ee3e166981e4369cdbdcd511dbbd33421aef3b6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51e6907659dec5f5f2e432c956bbc611c7d658e0":["6aae9fe64c5e6de1908855356afc05d7eb82903f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["b2a35410e365d9b0027637c577b72b8a6f96ce85"],"b2a35410e365d9b0027637c577b72b8a6f96ce85":["ee3e166981e4369cdbdcd511dbbd33421aef3b6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["2f0c71979827275ab91caba7232e8de375b40dd5"]},"commit2Childs":{"2f0c71979827275ab91caba7232e8de375b40dd5":["ba1116b3450a9c1642c89445d131b37344055245"],"006e70a9e04438ee808b8fe40a5217f7cfa28fbd":["6aae9fe64c5e6de1908855356afc05d7eb82903f"],"6aae9fe64c5e6de1908855356afc05d7eb82903f":["51e6907659dec5f5f2e432c956bbc611c7d658e0"],"ee3e166981e4369cdbdcd511dbbd33421aef3b6c":["b2a35410e365d9b0027637c577b72b8a6f96ce85"],"51e6907659dec5f5f2e432c956bbc611c7d658e0":["2f0c71979827275ab91caba7232e8de375b40dd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee3e166981e4369cdbdcd511dbbd33421aef3b6c"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["006e70a9e04438ee808b8fe40a5217f7cfa28fbd"],"b2a35410e365d9b0027637c577b72b8a6f96ce85":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba1116b3450a9c1642c89445d131b37344055245":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}