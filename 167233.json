{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","sourceNew":null,"sourceOld":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    if (stopMerges)\n      return;\n\n    // Do not start new merges if we've hit OOME\n    if (hitOOM) {\n      return;\n    }\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ( spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge(spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}