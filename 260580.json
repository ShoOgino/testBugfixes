{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter#reverse(char[],int,int).mjava","commits":[{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter#reverse(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter#reverse(Version,char[],int,int).mjava","sourceNew":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer,\n      final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","sourceOld":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length.\n   * @param matchVersion compatibility version\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(Version matchVersion, final char[] buffer,\n      final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter#reverse(Version,char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter#reverse(char[],int,int).mjava","sourceNew":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length.\n   * @param matchVersion compatibility version\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(Version matchVersion, final char[] buffer,\n      final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","sourceOld":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer,\n      final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter#reverse(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/reverse/ReverseStringFilter#reverse(Version,char[],int,int).mjava","sourceNew":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length.\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(final char[] buffer,\n      final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","sourceOld":"  /**\n   * Partially reverses the given input buffer in-place from the given offset\n   * up to the given length.\n   * @param matchVersion compatibility version\n   * @param buffer the input char array to reverse\n   * @param start the offset from where to reverse the buffer\n   * @param len the length in the buffer up to where the\n   *        buffer should be reversed\n   */\n  public static void reverse(Version matchVersion, final char[] buffer,\n      final int start, final int len) {\n    /* modified version of Apache Harmony AbstractStringBuilder reverse0() */\n    if (len < 2)\n      return;\n    int end = (start + len) - 1;\n    char frontHigh = buffer[start];\n    char endLow = buffer[end];\n    boolean allowFrontSur = true, allowEndSur = true;\n    final int mid = start + (len >> 1);\n    for (int i = start; i < mid; ++i, --end) {\n      final char frontLow = buffer[i + 1];\n      final char endHigh = buffer[end - 1];\n      final boolean surAtFront = allowFrontSur\n          && Character.isSurrogatePair(frontHigh, frontLow);\n      if (surAtFront && (len < 3)) {\n        // nothing to do since surAtFront is allowed and 1 char left\n        return;\n      }\n      final boolean surAtEnd = allowEndSur\n          && Character.isSurrogatePair(endHigh, endLow);\n      allowFrontSur = allowEndSur = true;\n      if (surAtFront == surAtEnd) {\n        if (surAtFront) {\n          // both surrogates\n          buffer[end] = frontLow;\n          buffer[--end] = frontHigh;\n          buffer[i] = endHigh;\n          buffer[++i] = endLow;\n          frontHigh = buffer[i + 1];\n          endLow = buffer[end - 1];\n        } else {\n          // neither surrogates\n          buffer[end] = frontHigh;\n          buffer[i] = endLow;\n          frontHigh = frontLow;\n          endLow = endHigh;\n        }\n      } else {\n        if (surAtFront) {\n          // surrogate only at the front\n          buffer[end] = frontLow;\n          buffer[i] = endLow;\n          endLow = endHigh;\n          allowFrontSur = false;\n        } else {\n          // surrogate only at the end\n          buffer[end] = frontHigh;\n          buffer[i] = endHigh;\n          frontHigh = frontLow;\n          allowEndSur = false;\n        }\n      }\n    }\n    if ((len & 0x01) == 1 && !(allowFrontSur && allowEndSur)) {\n      // only if odd length\n      buffer[end] = allowFrontSur ? endLow : frontHigh;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}