{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","commits":[{"id":"9a57adc9bfabbc207ed17740dd86e0a2401ea385","date":1355507623,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    queue.add(ZkStateReader.toJSON(props));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    queue.add(ZkStateReader.toJSON(props));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null);\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    queue.add(ZkStateReader.toJSON(props));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null);\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    queue.add(ZkStateReader.toJSON(props));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null);\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null);\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          OverseerCollectionProcessor.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          OverseerCollectionProcessor.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          CollectionParams.CollectionAction.CREATE.toLower(),\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          CollectionParams.CollectionAction.CREATE.toLower(),\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerCollectionProcessor.CREATECOLLECTION,\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b22329006608bd6b95aeba7a59f28092cd7a5e","date":1419362789,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          CollectionParams.CollectionAction.CREATE.toLower(),\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          CollectionParams.CollectionAction.CREATE.toLower(),\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["6f26f74e4969851a019d28f10315cb1c77786f22"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"b7605579001505896d48b07160075a5c8b8e128e":["c986b1ea9768aff3c903f05a2c85b7b672b5c225","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"08b22329006608bd6b95aeba7a59f28092cd7a5e":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08b22329006608bd6b95aeba7a59f28092cd7a5e"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["dd45d4a2ee01a1932d33eec42f5272c2402da679","b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452","b7605579001505896d48b07160075a5c8b8e128e"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["08b22329006608bd6b95aeba7a59f28092cd7a5e"],"08b22329006608bd6b95aeba7a59f28092cd7a5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}