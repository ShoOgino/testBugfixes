{"path":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","commits":[{"id":"7581da3051efe8071ae92ac7eca27a270bc4611e","date":1373613227,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","pathOld":"/dev/null","sourceNew":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, 2);\n    assertEquals(2, bs, copy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","pathOld":"/dev/null","sourceNew":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, 2);\n    assertEquals(2, bs, copy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","sourceNew":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, TestUtil.nextInt(random(), 1, 10000));\n    assertEquals(2, bs, copy);\n  }\n\n","sourceOld":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, 2);\n    assertEquals(2, bs, copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","sourceNew":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, TestUtil.nextInt(random(), 1, 10000));\n    assertEquals(2, bs, copy);\n  }\n\n","sourceOld":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, 2);\n    assertEquals(2, bs, copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cd756794a4a9e33f786119818f9d56162965cf8","date":1412591300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","sourceNew":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, 2);\n    assertEquals(2, bs, copy);\n  }\n\n","sourceOld":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, TestUtil.nextInt(random(), 1, 10000));\n    assertEquals(2, bs, copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/BaseDocIdSetTestCase#test2Bits().mjava","sourceNew":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, 2);\n    assertEquals(2, bs, copy);\n  }\n\n","sourceOld":"  /** Test length=2. */\n  public void test2Bits() throws IOException {\n    final BitSet bs = new BitSet(2);\n    if (random().nextBoolean()) {\n      bs.set(0);\n    }\n    if (random().nextBoolean()) {\n      bs.set(1);\n    }\n    final T copy = copyOf(bs, TestUtil.nextInt(random(), 1, 10000));\n    assertEquals(2, bs, copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cd756794a4a9e33f786119818f9d56162965cf8":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","9cd756794a4a9e33f786119818f9d56162965cf8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7581da3051efe8071ae92ac7eca27a270bc4611e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["7581da3051efe8071ae92ac7eca27a270bc4611e","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["7581da3051efe8071ae92ac7eca27a270bc4611e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cd756794a4a9e33f786119818f9d56162965cf8"]},"commit2Childs":{"9cd756794a4a9e33f786119818f9d56162965cf8":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7581da3051efe8071ae92ac7eca27a270bc4611e"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"7581da3051efe8071ae92ac7eca27a270bc4611e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["9cd756794a4a9e33f786119818f9d56162965cf8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}