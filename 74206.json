{"path":"lucene/src/test-framework/org/apache/lucene/index/RandomCodecProvider#RandomCodecProvider(Random,boolean).mjava","commits":[{"id":"fdbabcdfbf0ec1640188c28570cd54fd30440942","date":1317820582,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomCodecProvider#RandomCodecProvider(Random,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomCodecProvider#RandomCodecProvider(Random).mjava","sourceNew":"  public RandomCodecProvider(Random random, boolean useNoMemoryExpensiveCodec) {\n    this.perFieldSeed = random.nextInt();\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    register(new StandardCodec(minItemsPerBlock, maxItemsPerBlock));\n    register(new PreFlexCodec());\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n    register(new PulsingCodec( 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock));\n    if (!useNoMemoryExpensiveCodec) {\n      register(new SimpleTextCodec());\n      register(new MemoryCodec());\n    }\n    Collections.shuffle(knownCodecs, random);\n  }\n\n","sourceOld":"  public RandomCodecProvider(Random random) {\n    this.perFieldSeed = random.nextInt();\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    register(new StandardCodec(minItemsPerBlock, maxItemsPerBlock));\n    register(new PreFlexCodec());\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n    register(new PulsingCodec( 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock));\n    register(new SimpleTextCodec());\n    register(new MemoryCodec());\n    Collections.shuffle(knownCodecs, random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/RandomCodec#RandomCodec(Random,boolean).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomCodecProvider#RandomCodecProvider(Random,boolean).mjava","sourceNew":"  public RandomCodec(Random random, boolean useNoMemoryExpensiveCodec) {\n    this.perFieldSeed = random.nextInt();\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    formats.add(new Lucene40PostingsFormat(minItemsPerBlock, maxItemsPerBlock));\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n    formats.add(new Pulsing40PostingsFormat(1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock));\n    formats.add(new MockSepPostingsFormat());\n    formats.add(new MockFixedIntBlockPostingsFormat(_TestUtil.nextInt(random, 1, 2000)));\n    formats.add(new MockVariableIntBlockPostingsFormat( _TestUtil.nextInt(random, 1, 127)));\n    formats.add(new MockRandomPostingsFormat(random));\n    formats.add(new NestedPulsingPostingsFormat());\n    formats.add(new Lucene40WithOrds());\n    if (!useNoMemoryExpensiveCodec) {\n      formats.add(new SimpleTextPostingsFormat());\n      formats.add(new MemoryPostingsFormat());\n    }\n    Collections.shuffle(formats, random);\n  }\n\n","sourceOld":"  public RandomCodecProvider(Random random, boolean useNoMemoryExpensiveCodec) {\n    this.perFieldSeed = random.nextInt();\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    register(new StandardCodec(minItemsPerBlock, maxItemsPerBlock));\n    register(new PreFlexCodec());\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n    register(new PulsingCodec( 1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock));\n    if (!useNoMemoryExpensiveCodec) {\n      register(new SimpleTextCodec());\n      register(new MemoryCodec());\n    }\n    Collections.shuffle(knownCodecs, random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdbabcdfbf0ec1640188c28570cd54fd30440942":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"fdbabcdfbf0ec1640188c28570cd54fd30440942":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}