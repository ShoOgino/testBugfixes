{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer.BloomFilteredTerms#iterator(TermsEnum).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer.BloomFilteredTerms#iterator(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer.BloomFilteredTerms#iterator(TermsEnum).mjava","sourceNew":"      @Override\n      public TermsEnum iterator(TermsEnum reuse) throws IOException {\n        TermsEnum result;\n        if ((reuse != null) && (reuse instanceof BloomFilteredTermsEnum)) {\n          // recycle the existing BloomFilteredTermsEnum by asking the delegate\n          // to recycle its contained TermsEnum\n          BloomFilteredTermsEnum bfte = (BloomFilteredTermsEnum) reuse;\n          if (bfte.filter == filter) {\n            bfte.delegateTermsEnum = delegateTerms\n                .iterator(bfte.delegateTermsEnum);\n            return bfte;\n          }\n        }\n        // We have been handed something we cannot reuse (either null, wrong\n        // class or wrong filter) so allocate a new object\n        result = new BloomFilteredTermsEnum(delegateTerms.iterator(reuse),\n            filter);\n        return result;\n      }\n\n","sourceOld":"      @Override\n      public TermsEnum iterator(TermsEnum reuse) throws IOException {\n        TermsEnum result;\n        if ((reuse != null) && (reuse instanceof BloomFilteredTermsEnum)) {\n          // recycle the existing BloomFilteredTermsEnum by asking the delegate\n          // to recycle its contained TermsEnum\n          BloomFilteredTermsEnum bfte = (BloomFilteredTermsEnum) reuse;\n          if (bfte.filter == filter) {\n            bfte.delegateTermsEnum = delegateTerms\n                .iterator(bfte.delegateTermsEnum);\n            return bfte;\n          }\n        }\n        // We have been handed something we cannot reuse (either null, wrong\n        // class or wrong filter) so allocate a new object\n        result = new BloomFilteredTermsEnum(delegateTerms.iterator(reuse),\n            filter);\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c70c64aed8c1aa9864b4b1a109b3b868226e3b02","date":1358429253,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer.BloomFilteredTerms#iterator(TermsEnum).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer.BloomFilteredTerms#iterator(TermsEnum).mjava","sourceNew":"      @Override\n      public TermsEnum iterator(TermsEnum reuse) throws IOException {\n        if ((reuse != null) && (reuse instanceof BloomFilteredTermsEnum)) {\n          // recycle the existing BloomFilteredTermsEnum by asking the delegate\n          // to recycle its contained TermsEnum\n          BloomFilteredTermsEnum bfte = (BloomFilteredTermsEnum) reuse;\n          if (bfte.filter == filter) {\n            bfte.reset(delegateTerms, bfte.delegateTermsEnum);\n            return bfte;\n          }\n        }\n        // We have been handed something we cannot reuse (either null, wrong\n        // class or wrong filter) so allocate a new object\n        return new BloomFilteredTermsEnum(delegateTerms, reuse, filter);\n      }\n\n","sourceOld":"      @Override\n      public TermsEnum iterator(TermsEnum reuse) throws IOException {\n        TermsEnum result;\n        if ((reuse != null) && (reuse instanceof BloomFilteredTermsEnum)) {\n          // recycle the existing BloomFilteredTermsEnum by asking the delegate\n          // to recycle its contained TermsEnum\n          BloomFilteredTermsEnum bfte = (BloomFilteredTermsEnum) reuse;\n          if (bfte.filter == filter) {\n            bfte.delegateTermsEnum = delegateTerms\n                .iterator(bfte.delegateTermsEnum);\n            return bfte;\n          }\n        }\n        // We have been handed something we cannot reuse (either null, wrong\n        // class or wrong filter) so allocate a new object\n        result = new BloomFilteredTermsEnum(delegateTerms.iterator(reuse),\n            filter);\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer.BloomFilteredTerms#iterator(TermsEnum).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer.BloomFilteredTerms#iterator(TermsEnum).mjava","sourceNew":"      @Override\n      public TermsEnum iterator(TermsEnum reuse) throws IOException {\n        if ((reuse != null) && (reuse instanceof BloomFilteredTermsEnum)) {\n          // recycle the existing BloomFilteredTermsEnum by asking the delegate\n          // to recycle its contained TermsEnum\n          BloomFilteredTermsEnum bfte = (BloomFilteredTermsEnum) reuse;\n          if (bfte.filter == filter) {\n            bfte.reset(delegateTerms, bfte.delegateTermsEnum);\n            return bfte;\n          }\n        }\n        // We have been handed something we cannot reuse (either null, wrong\n        // class or wrong filter) so allocate a new object\n        return new BloomFilteredTermsEnum(delegateTerms, reuse, filter);\n      }\n\n","sourceOld":"      @Override\n      public TermsEnum iterator(TermsEnum reuse) throws IOException {\n        TermsEnum result;\n        if ((reuse != null) && (reuse instanceof BloomFilteredTermsEnum)) {\n          // recycle the existing BloomFilteredTermsEnum by asking the delegate\n          // to recycle its contained TermsEnum\n          BloomFilteredTermsEnum bfte = (BloomFilteredTermsEnum) reuse;\n          if (bfte.filter == filter) {\n            bfte.delegateTermsEnum = delegateTerms\n                .iterator(bfte.delegateTermsEnum);\n            return bfte;\n          }\n        }\n        // We have been handed something we cannot reuse (either null, wrong\n        // class or wrong filter) so allocate a new object\n        result = new BloomFilteredTermsEnum(delegateTerms.iterator(reuse),\n            filter);\n        return result;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsProducer.BloomFilteredTerms#iterator(TermsEnum).mjava","sourceNew":null,"sourceOld":"      @Override\n      public TermsEnum iterator(TermsEnum reuse) throws IOException {\n        if ((reuse != null) && (reuse instanceof BloomFilteredTermsEnum)) {\n          // recycle the existing BloomFilteredTermsEnum by asking the delegate\n          // to recycle its contained TermsEnum\n          BloomFilteredTermsEnum bfte = (BloomFilteredTermsEnum) reuse;\n          if (bfte.filter == filter) {\n            bfte.reset(delegateTerms, bfte.delegateTermsEnum);\n            return bfte;\n          }\n        }\n        // We have been handed something we cannot reuse (either null, wrong\n        // class or wrong filter) so allocate a new object\n        return new BloomFilteredTermsEnum(delegateTerms, reuse, filter);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["c70c64aed8c1aa9864b4b1a109b3b868226e3b02"],"c70c64aed8c1aa9864b4b1a109b3b868226e3b02":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","c70c64aed8c1aa9864b4b1a109b3b868226e3b02"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c70c64aed8c1aa9864b4b1a109b3b868226e3b02":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["c70c64aed8c1aa9864b4b1a109b3b868226e3b02","c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}