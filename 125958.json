{"path":"solr/core/src/java/org/apache/solr/search/DocSetBuilder#DocSetBuilder(int,long).mjava","commits":[{"id":"16b25963ad38ed289ebf0f7af31269fa1ce80a11","date":1442083896,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetBuilder#DocSetBuilder(int,long).mjava","pathOld":"/dev/null","sourceNew":"  public DocSetBuilder(int maxDoc, long costEst) {\n    this.maxDoc = maxDoc;\n    // For ridiculously small sets, we'll just use a sorted int[]\n    // maxDoc >>> 7 is a good value if you want to save memory, lower values\n    // such as maxDoc >>> 11 should provide faster building but at the expense\n    // of using a full bitset even for quite sparse data\n    this.threshold = (maxDoc >>> 7) + 4; // the +4 is for better testing on small indexes\n\n    if (costEst > threshold) {\n      bitSet = new FixedBitSet(maxDoc);\n    } else {\n      this.buffer = new int[Math.max((int)costEst,1)];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"]},"commit2Childs":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}