{"path":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","commits":[{"id":"2f472c757c161e228505e389efda705e2cf3c09e","date":1501700089,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3126baf79b1adfd0260e762eca2b1314eba05da8","date":1507761032,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","sourceNew":"  @Test\n  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    // positive check of a HealthCheckRequest using http client\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1ff601a12d12d08405c7e451d64604d94292953","date":1507795721,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","sourceNew":"  @Test\n  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    // positive check of a HealthCheckRequest using http client\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1949be020da305d0d64d348458ac933994b52e8d","date":1586255171,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandlerSolrJ().mjava","sourceNew":"  @Test\n  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    // positive check of a HealthCheckRequest using http client\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHealthCheckHandlerSolrJ() throws IOException, SolrServerException {\n    // positive check of a HealthCheckRequest using http client\n    HealthCheckRequest req = new HealthCheckRequest();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      HealthCheckResponse rsp = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, rsp.getNodeStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f472c757c161e228505e389efda705e2cf3c09e"],"3126baf79b1adfd0260e762eca2b1314eba05da8":["2f472c757c161e228505e389efda705e2cf3c09e"],"1949be020da305d0d64d348458ac933994b52e8d":["e1ff601a12d12d08405c7e451d64604d94292953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1ff601a12d12d08405c7e451d64604d94292953":["2f472c757c161e228505e389efda705e2cf3c09e","3126baf79b1adfd0260e762eca2b1314eba05da8"],"2f472c757c161e228505e389efda705e2cf3c09e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1949be020da305d0d64d348458ac933994b52e8d"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"3126baf79b1adfd0260e762eca2b1314eba05da8":["e1ff601a12d12d08405c7e451d64604d94292953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","2f472c757c161e228505e389efda705e2cf3c09e"],"1949be020da305d0d64d348458ac933994b52e8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1ff601a12d12d08405c7e451d64604d94292953":["1949be020da305d0d64d348458ac933994b52e8d"],"2f472c757c161e228505e389efda705e2cf3c09e":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","3126baf79b1adfd0260e762eca2b1314eba05da8","e1ff601a12d12d08405c7e451d64604d94292953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}