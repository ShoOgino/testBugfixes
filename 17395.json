{"path":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","pathOld":"/dev/null","sourceNew":"    /** Increments the enumeration to the next element.  True if one exists. */\n    //@Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum!=null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm)) return true;\n        }\n      }\n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      if (rangeBounds.size() < 2) return false;\n      // close the current enum and read next bounds\n      if (actualEnum != null) {\n        actualEnum.close();\n        actualEnum = null;\n      }\n      final String lowerBound = (String)rangeBounds.removeFirst();\n      this.currentUpperBound = (String)rangeBounds.removeFirst();\n      // this call recursively uses next(), if no valid term in\n      // next enum found.\n      // if this behavior is changed/modified in the superclass,\n      // this enum will not work anymore!\n      setEnum(reader.terms(new Term(field, lowerBound)));\n      return (currentTerm != null);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","sourceNew":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum!=null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm)) return true;\n        }\n      }\n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      if (rangeBounds.size() < 2) return false;\n      // close the current enum and read next bounds\n      if (actualEnum != null) {\n        actualEnum.close();\n        actualEnum = null;\n      }\n      final String lowerBound = rangeBounds.removeFirst();\n      this.currentUpperBound = rangeBounds.removeFirst();\n      // this call recursively uses next(), if no valid term in\n      // next enum found.\n      // if this behavior is changed/modified in the superclass,\n      // this enum will not work anymore!\n      setEnum(reader.terms(new Term(field, lowerBound)));\n      return (currentTerm != null);\n    }\n\n","sourceOld":"    /** Increments the enumeration to the next element.  True if one exists. */\n    //@Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum!=null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm)) return true;\n        }\n      }\n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      if (rangeBounds.size() < 2) return false;\n      // close the current enum and read next bounds\n      if (actualEnum != null) {\n        actualEnum.close();\n        actualEnum = null;\n      }\n      final String lowerBound = (String)rangeBounds.removeFirst();\n      this.currentUpperBound = (String)rangeBounds.removeFirst();\n      // this call recursively uses next(), if no valid term in\n      // next enum found.\n      // if this behavior is changed/modified in the superclass,\n      // this enum will not work anymore!\n      setEnum(reader.terms(new Term(field, lowerBound)));\n      return (currentTerm != null);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b891cfc29a2de11abd2772987b8e138a5152f8a","date":1258804889,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","sourceNew":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum != null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm)) return true;\n        }\n      }\n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      if (rangeBounds.size() < 2) {\n        assert rangeBounds.size() == 0;\n        return false;\n      }\n      // close the current enum and read next bounds\n      if (actualEnum != null) {\n        actualEnum.close();\n        actualEnum = null;\n      }\n      final String lowerBound = rangeBounds.removeFirst();\n      this.currentUpperBound = rangeBounds.removeFirst();\n      // this call recursively uses next(), if no valid term in\n      // next enum found.\n      // if this behavior is changed/modified in the superclass,\n      // this enum will not work anymore!\n      setEnum(reader.terms(termTemplate.createTerm(lowerBound)));\n      return (currentTerm != null);\n    }\n\n","sourceOld":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum!=null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm)) return true;\n        }\n      }\n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      if (rangeBounds.size() < 2) return false;\n      // close the current enum and read next bounds\n      if (actualEnum != null) {\n        actualEnum.close();\n        actualEnum = null;\n      }\n      final String lowerBound = rangeBounds.removeFirst();\n      this.currentUpperBound = rangeBounds.removeFirst();\n      // this call recursively uses next(), if no valid term in\n      // next enum found.\n      // if this behavior is changed/modified in the superclass,\n      // this enum will not work anymore!\n      setEnum(reader.terms(new Term(field, lowerBound)));\n      return (currentTerm != null);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f4a12a87bd81a31dbc263791cb6882f0455d7d","date":1258832994,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","sourceNew":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum != null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm))\n            return true;\n        }\n      }\n      \n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      while (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n        // close the current enum and read next bounds\n        if (actualEnum != null) {\n          actualEnum.close();\n          actualEnum = null;\n        }\n        final String lowerBound = rangeBounds.removeFirst();\n        this.currentUpperBound = rangeBounds.removeFirst();\n        // create a new enum\n        actualEnum = reader.terms(termTemplate.createTerm(lowerBound));\n        currentTerm = actualEnum.term();\n        if (currentTerm != null && termCompare(currentTerm))\n          return true;\n        // clear the current term for next iteration\n        currentTerm = null;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0 && currentTerm == null;\n      return false;\n    }\n\n","sourceOld":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum != null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm)) return true;\n        }\n      }\n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      if (rangeBounds.size() < 2) {\n        assert rangeBounds.size() == 0;\n        return false;\n      }\n      // close the current enum and read next bounds\n      if (actualEnum != null) {\n        actualEnum.close();\n        actualEnum = null;\n      }\n      final String lowerBound = rangeBounds.removeFirst();\n      this.currentUpperBound = rangeBounds.removeFirst();\n      // this call recursively uses next(), if no valid term in\n      // next enum found.\n      // if this behavior is changed/modified in the superclass,\n      // this enum will not work anymore!\n      setEnum(reader.terms(termTemplate.createTerm(lowerBound)));\n      return (currentTerm != null);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","sourceNew":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum != null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm))\n            return true;\n        }\n      }\n      \n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      while (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n        // close the current enum and read next bounds\n        if (actualEnum != null) {\n          actualEnum.close();\n          actualEnum = null;\n        }\n        final String lowerBound = rangeBounds.removeFirst();\n        this.currentUpperBound = rangeBounds.removeFirst();\n        // create a new enum\n        actualEnum = reader.terms(termTemplate.createTerm(lowerBound));\n        currentTerm = actualEnum.term();\n        if (currentTerm != null && termCompare(currentTerm))\n          return true;\n        // clear the current term for next iteration\n        currentTerm = null;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0 && currentTerm == null;\n      return false;\n    }\n\n","sourceOld":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum != null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm))\n            return true;\n        }\n      }\n      \n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      while (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n        // close the current enum and read next bounds\n        if (actualEnum != null) {\n          actualEnum.close();\n          actualEnum = null;\n        }\n        final String lowerBound = rangeBounds.removeFirst();\n        this.currentUpperBound = rangeBounds.removeFirst();\n        // create a new enum\n        actualEnum = reader.terms(termTemplate.createTerm(lowerBound));\n        currentTerm = actualEnum.term();\n        if (currentTerm != null && termCompare(currentTerm))\n          return true;\n        // clear the current term for next iteration\n        currentTerm = null;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0 && currentTerm == null;\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b891cfc29a2de11abd2772987b8e138a5152f8a":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41f4a12a87bd81a31dbc263791cb6882f0455d7d":["3b891cfc29a2de11abd2772987b8e138a5152f8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["41f4a12a87bd81a31dbc263791cb6882f0455d7d"]},"commit2Childs":{"3b891cfc29a2de11abd2772987b8e138a5152f8a":["41f4a12a87bd81a31dbc263791cb6882f0455d7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["3b891cfc29a2de11abd2772987b8e138a5152f8a"],"53b6c192847de8643a5da505cc433cbf8476a175":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"41f4a12a87bd81a31dbc263791cb6882f0455d7d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}