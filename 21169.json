{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","commits":[{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be6882c3640246589df6f53088f29c232d920297","date":1320973666,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb","02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = MultiFields.getTerms(reader, field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicIndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicIndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n      protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n      protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, false);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["be6882c3640246589df6f53088f29c232d920297"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"382fe3a6ca9745891afebda9b9a57cc158305545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"be6882c3640246589df6f53088f29c232d920297":["382fe3a6ca9745891afebda9b9a57cc158305545"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["382fe3a6ca9745891afebda9b9a57cc158305545"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"382fe3a6ca9745891afebda9b9a57cc158305545":["be6882c3640246589df6f53088f29c232d920297"],"be6882c3640246589df6f53088f29c232d920297":["3cc749c053615f5871f3b95715fe292f34e70a53"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}