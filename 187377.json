{"path":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeHeader(int).mjava","commits":[{"id":"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","date":1373484264,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeHeader(int).mjava","pathOld":"/dev/null","sourceNew":"    void writeHeader(int cleanLength) throws IOException {\n      final int cleanLengthMinus2 = cleanLength - 2;\n      final int dirtyLengthMinus1 = dirtyWords.length - 1;\n      assert cleanLengthMinus2 >= 0;\n      assert dirtyLengthMinus1 >= 0;\n      int token = ((cleanLengthMinus2 & 0x07) << 4) | (dirtyLengthMinus1 & 0x07);\n      if (cleanLengthMinus2 > 0x07) {\n        token |= 1 << 7;\n      }\n      if (dirtyLengthMinus1 > 0x07) {\n        token |= 1 << 3;\n      }\n      out.writeByte((byte) token);\n      if (cleanLengthMinus2 > 0x07) {\n        out.writeVInt(cleanLengthMinus2 >>> 3);\n      }\n      if (dirtyLengthMinus1 > 0x07) {\n        out.writeVInt(dirtyLengthMinus1 >>> 3);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeHeader(int).mjava","pathOld":"/dev/null","sourceNew":"    void writeHeader(int cleanLength) throws IOException {\n      final int cleanLengthMinus2 = cleanLength - 2;\n      final int dirtyLengthMinus1 = dirtyWords.length - 1;\n      assert cleanLengthMinus2 >= 0;\n      assert dirtyLengthMinus1 >= 0;\n      int token = ((cleanLengthMinus2 & 0x07) << 4) | (dirtyLengthMinus1 & 0x07);\n      if (cleanLengthMinus2 > 0x07) {\n        token |= 1 << 7;\n      }\n      if (dirtyLengthMinus1 > 0x07) {\n        token |= 1 << 3;\n      }\n      out.writeByte((byte) token);\n      if (cleanLengthMinus2 > 0x07) {\n        out.writeVInt(cleanLengthMinus2 >>> 3);\n      }\n      if (dirtyLengthMinus1 > 0x07) {\n        out.writeVInt(dirtyLengthMinus1 >>> 3);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21fd82f9528d0f0c70205bd925dd0b0dce14fdab","date":1376071243,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeHeader(boolean,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeHeader(int).mjava","sourceNew":"    void writeHeader(boolean reverse, int cleanLength, int dirtyLength) throws IOException {\n      final int cleanLengthMinus2 = cleanLength - 2;\n      assert cleanLengthMinus2 >= 0;\n      assert dirtyLength >= 0;\n      int token = ((cleanLengthMinus2 & 0x03) << 4) | (dirtyLength & 0x07);\n      if (reverse) {\n        token |= 1 << 7;\n      }\n      if (cleanLengthMinus2 > 0x03) {\n        token |= 1 << 6;\n      }\n      if (dirtyLength > 0x07) {\n        token |= 1 << 3;\n      }\n      out.writeByte((byte) token);\n      if (cleanLengthMinus2 > 0x03) {\n        out.writeVInt(cleanLengthMinus2 >>> 2);\n      }\n      if (dirtyLength > 0x07) {\n        out.writeVInt(dirtyLength >>> 3);\n      }\n    }\n\n","sourceOld":"    void writeHeader(int cleanLength) throws IOException {\n      final int cleanLengthMinus2 = cleanLength - 2;\n      final int dirtyLengthMinus1 = dirtyWords.length - 1;\n      assert cleanLengthMinus2 >= 0;\n      assert dirtyLengthMinus1 >= 0;\n      int token = ((cleanLengthMinus2 & 0x07) << 4) | (dirtyLengthMinus1 & 0x07);\n      if (cleanLengthMinus2 > 0x07) {\n        token |= 1 << 7;\n      }\n      if (dirtyLengthMinus1 > 0x07) {\n        token |= 1 << 3;\n      }\n      out.writeByte((byte) token);\n      if (cleanLengthMinus2 > 0x07) {\n        out.writeVInt(cleanLengthMinus2 >>> 3);\n      }\n      if (dirtyLengthMinus1 > 0x07) {\n        out.writeVInt(dirtyLengthMinus1 >>> 3);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeHeader(boolean,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeHeader(int).mjava","sourceNew":"    void writeHeader(boolean reverse, int cleanLength, int dirtyLength) throws IOException {\n      final int cleanLengthMinus2 = cleanLength - 2;\n      assert cleanLengthMinus2 >= 0;\n      assert dirtyLength >= 0;\n      int token = ((cleanLengthMinus2 & 0x03) << 4) | (dirtyLength & 0x07);\n      if (reverse) {\n        token |= 1 << 7;\n      }\n      if (cleanLengthMinus2 > 0x03) {\n        token |= 1 << 6;\n      }\n      if (dirtyLength > 0x07) {\n        token |= 1 << 3;\n      }\n      out.writeByte((byte) token);\n      if (cleanLengthMinus2 > 0x03) {\n        out.writeVInt(cleanLengthMinus2 >>> 2);\n      }\n      if (dirtyLength > 0x07) {\n        out.writeVInt(dirtyLength >>> 3);\n      }\n    }\n\n","sourceOld":"    void writeHeader(int cleanLength) throws IOException {\n      final int cleanLengthMinus2 = cleanLength - 2;\n      final int dirtyLengthMinus1 = dirtyWords.length - 1;\n      assert cleanLengthMinus2 >= 0;\n      assert dirtyLengthMinus1 >= 0;\n      int token = ((cleanLengthMinus2 & 0x07) << 4) | (dirtyLengthMinus1 & 0x07);\n      if (cleanLengthMinus2 > 0x07) {\n        token |= 1 << 7;\n      }\n      if (dirtyLengthMinus1 > 0x07) {\n        token |= 1 << 3;\n      }\n      out.writeByte((byte) token);\n      if (cleanLengthMinus2 > 0x07) {\n        out.writeVInt(cleanLengthMinus2 >>> 3);\n      }\n      if (dirtyLengthMinus1 > 0x07) {\n        out.writeVInt(dirtyLengthMinus1 >>> 3);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21fd82f9528d0f0c70205bd925dd0b0dce14fdab":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["21fd82f9528d0f0c70205bd925dd0b0dce14fdab"]},"commit2Childs":{"794214a4691ccb0a156a9ea0dfd8663ab9f05bb4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21fd82f9528d0f0c70205bd925dd0b0dce14fdab"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["794214a4691ccb0a156a9ea0dfd8663ab9f05bb4","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"21fd82f9528d0f0c70205bd925dd0b0dce14fdab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}