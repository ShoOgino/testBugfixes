{"path":"sandbox/contributions/lucli/src/lucli/LuceneMethods#terms(String).mjava","commits":[{"id":"66a601acf439105252becef7e0f1cb6b2e296bce","date":1071108465,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#terms(String).mjava","pathOld":"/dev/null","sourceNew":"\t/** Provides a list of the top terms of the index.\n\t *\n\t * @param field  - the name of the command or null for all of them.\n\t */\n\tpublic void terms(String field) throws IOException {\n\t\tTreeMap termMap = new TreeMap();\n\t\tIndexReader indexReader = IndexReader.open(indexName);\n\t\tTermEnum terms = indexReader.terms();\n\t\twhile (terms.next()) {\n\t\t\tTerm term = terms.term();\n\t\t\t//message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n\t\t\t//if we're either not looking by field or we're matching the specific field\n\t\t\tif ((field == null) || field.equals(term.field()))\n\t\t\t\ttermMap.put(new Integer((0 - terms.docFreq())), term.field() + \":\" + term.text());\n\t\t}\n\n\t\tIterator termIterator = termMap.keySet().iterator();\n\t\tfor (int ii=0; termIterator.hasNext() && ii < 100; ii++) {\n\t\t\tInteger termFreq = (Integer) termIterator.next();\n\t\t\tString termDetails = (String) termMap.get(termFreq);\n\t\t\tmessage(termDetails + \": \" + termFreq);\n\t\t}\n\t\tindexReader.close();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8","date":1075080975,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#terms(String).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#terms(String).mjava","sourceNew":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), new Integer((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"\t/** Provides a list of the top terms of the index.\n\t *\n\t * @param field  - the name of the command or null for all of them.\n\t */\n\tpublic void terms(String field) throws IOException {\n\t\tTreeMap termMap = new TreeMap();\n\t\tIndexReader indexReader = IndexReader.open(indexName);\n\t\tTermEnum terms = indexReader.terms();\n\t\twhile (terms.next()) {\n\t\t\tTerm term = terms.term();\n\t\t\t//message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n\t\t\t//if we're either not looking by field or we're matching the specific field\n\t\t\tif ((field == null) || field.equals(term.field()))\n\t\t\t\ttermMap.put(new Integer((0 - terms.docFreq())), term.field() + \":\" + term.text());\n\t\t}\n\n\t\tIterator termIterator = termMap.keySet().iterator();\n\t\tfor (int ii=0; termIterator.hasNext() && ii < 100; ii++) {\n\t\t\tInteger termFreq = (Integer) termIterator.next();\n\t\t\tString termDetails = (String) termMap.get(termFreq);\n\t\t\tmessage(termDetails + \": \" + termFreq);\n\t\t}\n\t\tindexReader.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/LuceneMethods#terms(String).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#terms(String).mjava","sourceNew":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), new Integer((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  /** Provides a list of the top terms of the index.\n   *\n   * @param field  - the name of the command or null for all of them.\n   */\n  public void terms(String field) throws IOException {\n    TreeMap termMap = new TreeMap();\n    IndexReader indexReader = IndexReader.open(indexName);\n    TermEnum terms = indexReader.terms();\n    while (terms.next()) {\n      Term term = terms.term();\n      //message(term.field() + \":\" + term.text() + \" freq:\" + terms.docFreq());\n      //if we're either not looking by field or we're matching the specific field\n      if ((field == null) || field.equals(term.field()))\n        termMap.put(term.field() + \":\" + term.text(), new Integer((terms.docFreq())));\n    }\n\n    Iterator termIterator = termMap.keySet().iterator();\n    for (int ii = 0; termIterator.hasNext() && ii < 100; ii++) {\n      String termDetails = (String) termIterator.next();\n      Integer termFreq = (Integer) termMap.get(termDetails);\n      message(termDetails + \": \" + termFreq);\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"66a601acf439105252becef7e0f1cb6b2e296bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["66a601acf439105252becef7e0f1cb6b2e296bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66a601acf439105252becef7e0f1cb6b2e296bce"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66a601acf439105252becef7e0f1cb6b2e296bce":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}