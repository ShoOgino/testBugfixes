{"path":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    cache.getStrings(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    cache.getStrings(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    cache.getStrings(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(new SlowMultiReaderWrapper(readerX), \"theInt\");\n    cache.getBytes(new SlowMultiReaderWrapper(readerX), \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(SlowCompositeReaderWrapper.wrap(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(SlowCompositeReaderWrapper.wrap(readerX), \"theInt\");\n    cache.getBytes(SlowCompositeReaderWrapper.wrap(readerX), \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(new SlowMultiReaderWrapper(readerX), \"theInt\");\n    cache.getBytes(new SlowMultiReaderWrapper(readerX), \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abf0f6e62f1b52e3c166ff00d766463e0da8ef96","date":1327865982,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(SlowCompositeReaderWrapper.wrap(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(SlowCompositeReaderWrapper.wrap(readerX), \"theInt\");\n    cache.getBytes(SlowCompositeReaderWrapper.wrap(readerX), \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(new SlowMultiReaderWrapper(readerX), \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(new SlowMultiReaderWrapper(readerX), \"theInt\");\n    cache.getBytes(new SlowMultiReaderWrapper(readerX), \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"abf0f6e62f1b52e3c166ff00d766463e0da8ef96":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"382fe3a6ca9745891afebda9b9a57cc158305545":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["382fe3a6ca9745891afebda9b9a57cc158305545"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","abf0f6e62f1b52e3c166ff00d766463e0da8ef96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["382fe3a6ca9745891afebda9b9a57cc158305545"],"abf0f6e62f1b52e3c166ff00d766463e0da8ef96":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["abf0f6e62f1b52e3c166ff00d766463e0da8ef96"],"382fe3a6ca9745891afebda9b9a57cc158305545":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["386d1b0dcb065f1bfc494b1407cb41c536b95485","5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}