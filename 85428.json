{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02","b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02","7875fce026a0a335830cfc75abc3eb009eff9a73","7875fce026a0a335830cfc75abc3eb009eff9a73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      try {\n        zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE);\n      } catch (KeeperException e) {\n        // its okay if another beats us creating the node\n        if (e.code() != KeeperException.Code.NODEEXISTS) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      }\n      \n      createEphemeralLiveNode();\n      setUpCollectionsNode();\n      zkStateReader.makeCollectionsNodeWatches();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, null);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      syncNodeState();\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, null);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, null);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6","date":1330290166,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      syncNodeState();\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, null);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      syncNodeState();\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, null);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      syncNodeState();\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      syncNodeState();\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, null);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["88f39c3b3a16aebc5a91335341c7ad5b560e2277","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      syncNodeState();\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      localHostName = getHostAddress();\n      Matcher m = URL_POST.matcher(localHostName);\n\n      if (m.matches()) {\n        hostName = m.group(1);\n      } else {\n        log.error(\"Unrecognized host:\" + localHostName);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized host:\" + localHostName);\n      }\n      \n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context, null);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      Overseer.createClientNodes(zkClient, getNodeName());\n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      syncNodeState();\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkClient, zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32d5034e9ef94910c8cd2b01cc3c2be222453d0c","date":1342825337,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508","b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02","b550b9fe8a5610e9a206849fa6e2bde1e8a2cf02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n    registerAllCoresAsDown(registerOnReconnect);\n    \n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","sourceNew":null,"sourceOld":"  private void init() {\n\n    try {\n      // makes nodes zkNode\n      cmdExecutor.ensureExists(ZkStateReader.LIVE_NODES_ZKNODE, zkClient);\n      \n      createEphemeralLiveNode();\n      cmdExecutor.ensureExists(ZkStateReader.COLLECTIONS_ZKNODE, zkClient);\n\n      ShardHandler shardHandler;\n      String adminPath;\n      if (cc == null) {\n        shardHandler = new HttpShardHandlerFactory().getShardHandler();\n        adminPath = \"/admin/cores\";\n      } else {\n        shardHandler = cc.getShardHandlerFactory().getShardHandler();\n        adminPath = cc.getAdminPath();\n      }\n      \n      overseerElector = new LeaderElector(zkClient);\n      ElectionContext context = new OverseerElectionContext(shardHandler,\n          adminPath, getNodeName(), zkStateReader);\n      overseerElector.setup(context);\n      overseerElector.joinElection(context);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      \n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c560208bc8842ee884b76b08784ccb132f05b48","date":1585344697,"type":1,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#init().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#init(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void init() {\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer((HttpShardHandler) cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","sourceOld":"  private void init(CurrentCoreDescriptorProvider registerOnReconnect) {\n\n    try {\n      createClusterZkNodes(zkClient);\n      zkStateReader.createClusterStateWatchersAndUpdate();\n      this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);\n\n      checkForExistingEphemeralNode();\n      registerLiveNodesListener();\n\n      // start the overseer first as following code may need it's processing\n      if (!zkRunOnly) {\n        overseerElector = new LeaderElector(zkClient);\n        this.overseer = new Overseer((HttpShardHandler) cc.getShardHandlerFactory().getShardHandler(), cc.getUpdateShardHandler(),\n            CommonParams.CORES_HANDLER_PATH, zkStateReader, this, cloudConfig);\n        ElectionContext context = new OverseerElectionContext(zkClient,\n            overseer, getNodeName());\n        overseerElector.setup(context);\n        overseerElector.joinElection(context, false);\n      }\n\n      Stat stat = zkClient.exists(ZkStateReader.LIVE_NODES_ZKNODE, null, true);\n      if (stat != null && stat.getNumChildren() > 0) {\n        publishAndWaitForDownStates();\n      }\n\n      // Do this last to signal we're up.\n      createEphemeralLiveNode();\n    } catch (IOException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Can't create ZooKeeperController\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a5093a9e893633cc091cf2f729d7863671c2b715"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"1c560208bc8842ee884b76b08784ccb132f05b48":["32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["33d0ed80b7b47e34ad3ff033a77544563aba3085","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"32d5034e9ef94910c8cd2b01cc3c2be222453d0c":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c560208bc8842ee884b76b08784ccb132f05b48"]},"commit2Childs":{"9813dd0748537c429b7c0a9b4723ea1ba496c047":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","32d5034e9ef94910c8cd2b01cc3c2be222453d0c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"1c560208bc8842ee884b76b08784ccb132f05b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a5093a9e893633cc091cf2f729d7863671c2b715":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"32d5034e9ef94910c8cd2b01cc3c2be222453d0c":["1c560208bc8842ee884b76b08784ccb132f05b48","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}