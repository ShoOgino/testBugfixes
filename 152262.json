{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57cfa96e1cacc0f1f98d8732aa54935875187781","5639d0d5bffb5076883b28d9b3329fbd52812137"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matches(int doc) {\n            int val = intVal(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matchesValue(int doc) {\n            int val = intVal(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":3,"author":"yonik","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(reader, this) {\n          @Override\n          public boolean matches(int doc) {\n            int val = intVal(doc);\n            // only check for deleted if it's the default value\n            // if (val==0 && reader.isDeleted(doc)) return false;\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n    final Bits valid = DocValues.getDocsWithField(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return valid.get(doc);\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = intVal(doc);\n            mval.exists = valid.get(doc);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/EnumFieldSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final NumericDocValues arr = DocValues.getNumeric(readerContext.reader(), field);\n\n    return new IntDocValues(this) {\n      final MutableValueInt val = new MutableValueInt();\n\n      int lastDocID;\n\n      private int getValueForDoc(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new AssertionError(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs doc=\" + doc);\n        }\n        lastDocID = doc;\n        int curDocID = arr.docID();\n        if (doc > curDocID) {\n          curDocID = arr.advance(doc);\n        }\n        if (doc == curDocID) {\n          return (int) arr.longValue();\n        } else {\n          return 0;\n        }\n      }\n\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getValueForDoc(doc);\n      }\n\n      @Override\n      public String strVal(int doc) throws IOException {\n        Integer intValue = intVal(doc);\n        return intValueToStringValue(intValue);\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        getValueForDoc(doc);\n        return arr.docID() == doc;\n      }\n\n      @Override\n      public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n        Integer lower = stringValueToIntValue(lowerVal);\n        Integer upper = stringValueToIntValue(upperVal);\n\n        // instead of using separate comparison functions, adjust the endpoints.\n\n        if (lower == null) {\n          lower = Integer.MIN_VALUE;\n        } else {\n          if (!includeLower && lower < Integer.MAX_VALUE) lower++;\n        }\n\n        if (upper == null) {\n          upper = Integer.MAX_VALUE;\n        } else {\n          if (!includeUpper && upper > Integer.MIN_VALUE) upper--;\n        }\n\n        final int ll = lower;\n        final int uu = upper;\n\n        return new ValueSourceScorer(weight, readerContext, this) {\n          @Override\n          public boolean matches(int doc) throws IOException {\n            if (!exists(doc)) return false;\n            int val = intVal(doc);\n            return val >= ll && val <= uu;\n          }\n        };\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = intVal(doc);\n            mval.exists = arr.docID() == doc;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["57cfa96e1cacc0f1f98d8732aa54935875187781","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["57cfa96e1cacc0f1f98d8732aa54935875187781","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}