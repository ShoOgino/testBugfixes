{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","commits":[{"id":"a371aa649cc243e82cb8677ca960a1e0232ecedf","date":1393605574,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          return new TokenStreamComponents(components.getTokenizer(),\n                                           new EdgeNGramTokenFilter(matchVersion,\n                                                                    components.getTokenStream(),\n                                                                    1, minPrefixChars));\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter;\n          if (matchVersion.onOrAfter(Version.LUCENE_4_4)) {\n            filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          } else {\n            filter = new Lucene43EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          }\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          return new TokenStreamComponents(components.getTokenizer(),\n                                           new EdgeNGramTokenFilter(matchVersion,\n                                                                    components.getTokenStream(),\n                                                                    1, minPrefixChars));\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter;\n          if (matchVersion.onOrAfter(Version.LUCENE_4_4_0)) {\n            filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          } else {\n            filter = new Lucene43EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          }\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter;\n          if (matchVersion.onOrAfter(Version.LUCENE_4_4)) {\n            filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          } else {\n            filter = new Lucene43EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          }\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter;\n          if (matchVersion.onOrAfter(Version.LUCENE_4_4_0)) {\n            filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          } else {\n            filter = new Lucene43EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          }\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d31848ef598c839e93829db4cbab650e1b59430a","date":1498810024,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        if (fieldName.equals(\"textgrams\") && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a255765a5625ff80fba75863de5a16ea392015e","date":1528161860,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars, false);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars, false);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars, false);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fac252ef8e3d0bbff9303ffbf675e824a729dfaf","date":1537347776,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getGramAnalyzer().mjava","sourceNew":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars, false);\n          return new TokenStreamComponents(components.getSource(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private Analyzer getGramAnalyzer() {\n    return new AnalyzerWrapper(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected Analyzer getWrappedAnalyzer(String fieldName) {\n        return indexAnalyzer;\n      }\n\n      @Override\n      protected TokenStreamComponents wrapComponents(String fieldName, TokenStreamComponents components) {\n        assert !(fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars == 0) \n                : \"no need \\\"textgrams\\\" when minPrefixChars=\"+minPrefixChars;\n        if (fieldName.equals(TEXTGRAMS_FIELD_NAME) && minPrefixChars > 0) {\n          // TODO: should use an EdgeNGramTokenFilterFactory here\n          TokenFilter filter = new EdgeNGramTokenFilter(components.getTokenStream(), 1, minPrefixChars, false);\n          return new TokenStreamComponents(components.getTokenizer(), filter);\n        } else {\n          return components;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d31848ef598c839e93829db4cbab650e1b59430a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"8a255765a5625ff80fba75863de5a16ea392015e":["182384b20c064aa16998ddebe9f36e649279c5a6"],"057a1793765d068ea9302f1a29e21734ee58d41e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["057a1793765d068ea9302f1a29e21734ee58d41e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["71387d8cb6923eb831b17a8b734608ba2e21c653","182384b20c064aa16998ddebe9f36e649279c5a6"],"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["8a255765a5625ff80fba75863de5a16ea392015e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["71387d8cb6923eb831b17a8b734608ba2e21c653","d31848ef598c839e93829db4cbab650e1b59430a"],"b70042a8a492f7054d480ccdd2be9796510d4327":["182384b20c064aa16998ddebe9f36e649279c5a6","8a255765a5625ff80fba75863de5a16ea392015e"],"f592209545c71895260367152601e9200399776d":["182384b20c064aa16998ddebe9f36e649279c5a6","8a255765a5625ff80fba75863de5a16ea392015e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"]},"commit2Childs":{"d31848ef598c839e93829db4cbab650e1b59430a":["182384b20c064aa16998ddebe9f36e649279c5a6"],"8a255765a5625ff80fba75863de5a16ea392015e":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"057a1793765d068ea9302f1a29e21734ee58d41e":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a371aa649cc243e82cb8677ca960a1e0232ecedf":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["d31848ef598c839e93829db4cbab650e1b59430a","3a7809d1d753b67f48b1a706e17034bf8b624ea3","182384b20c064aa16998ddebe9f36e649279c5a6"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"182384b20c064aa16998ddebe9f36e649279c5a6":["8a255765a5625ff80fba75863de5a16ea392015e","3a7809d1d753b67f48b1a706e17034bf8b624ea3","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["057a1793765d068ea9302f1a29e21734ee58d41e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a371aa649cc243e82cb8677ca960a1e0232ecedf"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}