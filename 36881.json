{"path":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","commits":[{"id":"175da89dff77515cdda7604b3c6cf6de96d4ac23","date":1143444217,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testShouldsAndMust() throws Throwable\r\n\t{\r\n\t\tBooleanFilter booleanFilter = new BooleanFilter();\r\n\t\tbooleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\"),BooleanClause.Occur.SHOULD));\r\n\t\tbooleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\"),BooleanClause.Occur.SHOULD));\r\n\t\tbooleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\"),BooleanClause.Occur.MUST));\r\n\t\tBitSet bits = booleanFilter.bits(reader);\r\n\t\tassertEquals(\"Shoulds Ored but MUST\",3,bits.cardinality());\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","sourceNew":"\tpublic void testShouldsAndMust() throws Throwable\r\n\t{\r\n    for (int i = 0; i < 2; i++) {\r\n      boolean old = (i==0);\r\n      BooleanFilter booleanFilter = new BooleanFilter();\r\n      booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\", old),BooleanClause.Occur.SHOULD));\r\n      booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\", old),BooleanClause.Occur.SHOULD));\r\n      booleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\", old),BooleanClause.Occur.MUST));\r\n      tstFilterCard(\"Shoulds Ored but MUST\",3,booleanFilter);\r\n    }\r\n\t}\r\n\n","sourceOld":"\tpublic void testShouldsAndMust() throws Throwable\r\n\t{\r\n\t\tBooleanFilter booleanFilter = new BooleanFilter();\r\n\t\tbooleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\"),BooleanClause.Occur.SHOULD));\r\n\t\tbooleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\"),BooleanClause.Occur.SHOULD));\r\n\t\tbooleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\"),BooleanClause.Occur.MUST));\r\n\t\tBitSet bits = booleanFilter.bits(reader);\r\n\t\tassertEquals(\"Shoulds Ored but MUST\",3,bits.cardinality());\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff63a37d43d489d1c98a2f5eaed66fc6f27cdc0e","date":1211590092,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","sourceNew":"\tpublic void testShouldsAndMust() throws Throwable\n\t{\n    for (int i = 0; i < 2; i++) {\n      boolean old = (i==0);\n      BooleanFilter booleanFilter = new BooleanFilter();\n      booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\", old),BooleanClause.Occur.SHOULD));\n      booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\", old),BooleanClause.Occur.SHOULD));\n      booleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\", old),BooleanClause.Occur.MUST));\n      tstFilterCard(\"Shoulds Ored but MUST\",3,booleanFilter);\n    }\n\t}\n\n","sourceOld":"\tpublic void testShouldsAndMust() throws Throwable\r\n\t{\r\n    for (int i = 0; i < 2; i++) {\r\n      boolean old = (i==0);\r\n      BooleanFilter booleanFilter = new BooleanFilter();\r\n      booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\", old),BooleanClause.Occur.SHOULD));\r\n      booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\", old),BooleanClause.Occur.SHOULD));\r\n      booleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\", old),BooleanClause.Occur.MUST));\r\n      tstFilterCard(\"Shoulds Ored but MUST\",3,booleanFilter);\r\n    }\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bd365049a486e1ddff4a17c8aaab9b002969a0","date":1254951825,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","sourceNew":"\tpublic void testShouldsAndMust() throws Throwable\n\t{\n    BooleanFilter booleanFilter = new BooleanFilter();\n    booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\"),BooleanClause.Occur.SHOULD));\n    booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\"),BooleanClause.Occur.SHOULD));\n    booleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\"),BooleanClause.Occur.MUST));\n    tstFilterCard(\"Shoulds Ored but MUST\",3,booleanFilter);\n\t}\n\n","sourceOld":"\tpublic void testShouldsAndMust() throws Throwable\n\t{\n    for (int i = 0; i < 2; i++) {\n      boolean old = (i==0);\n      BooleanFilter booleanFilter = new BooleanFilter();\n      booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\", old),BooleanClause.Occur.SHOULD));\n      booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\", old),BooleanClause.Occur.SHOULD));\n      booleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\", old),BooleanClause.Occur.MUST));\n      tstFilterCard(\"Shoulds Ored but MUST\",3,booleanFilter);\n    }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#testShouldsAndMust().mjava","sourceNew":"\tpublic void testShouldsAndMust() throws Throwable\n\t{\n    BooleanFilter booleanFilter = new BooleanFilter();\n    booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\"),BooleanClause.Occur.SHOULD));\n    booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\"),BooleanClause.Occur.SHOULD));\n    booleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\"),BooleanClause.Occur.MUST));\n    tstFilterCard(\"Shoulds Ored but MUST\",3,booleanFilter);\n\t}\n\n","sourceOld":"\tpublic void testShouldsAndMust() throws Throwable\n\t{\n    BooleanFilter booleanFilter = new BooleanFilter();\n    booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"010\", \"020\"),BooleanClause.Occur.SHOULD));\n    booleanFilter.add(new FilterClause(getRangeFilter(\"price\",\"020\", \"030\"),BooleanClause.Occur.SHOULD));\n    booleanFilter.add(new FilterClause(getTermsFilter(\"accessRights\", \"admin\"),BooleanClause.Occur.MUST));\n    tstFilterCard(\"Shoulds Ored but MUST\",3,booleanFilter);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff63a37d43d489d1c98a2f5eaed66fc6f27cdc0e":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"175da89dff77515cdda7604b3c6cf6de96d4ac23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["175da89dff77515cdda7604b3c6cf6de96d4ac23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["ff63a37d43d489d1c98a2f5eaed66fc6f27cdc0e"]},"commit2Childs":{"ff63a37d43d489d1c98a2f5eaed66fc6f27cdc0e":["15bd365049a486e1ddff4a17c8aaab9b002969a0"],"175da89dff77515cdda7604b3c6cf6de96d4ac23":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["175da89dff77515cdda7604b3c6cf6de96d4ac23"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["ff63a37d43d489d1c98a2f5eaed66fc6f27cdc0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bd365049a486e1ddff4a17c8aaab9b002969a0":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}