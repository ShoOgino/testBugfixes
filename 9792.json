{"path":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#waitForBackupDeletionSuccess(String,TimeOut).mjava","commits":[{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#waitForBackupDeletionSuccess(String,TimeOut).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Polls the replication handler's status until the it reports that the specified backupName is\n   * deleted or either <code>\"Unable to delete\"</code> status is reported or the <code>timeOut</code> expires \n   * (in either case an assertion is thrown)\n   * \n   * <p>\n   * <b>NOTE:</b> this method is <em>NOT</em> suitable/safe to use in a test where multiple backups are \n   * being taken/deleted concurrently, because the replication handler API provides no reliable way to check\n   * the results of a specific backup before the results of another backup may overwrite them internally.\n   * </p>\n   * \n   * @param backupName to look for in status\n   * @param timeOut limiting how long we wait\n   * @see #checkBackupSuccess(String)\n   */\n  public void waitForBackupDeletionSuccess(final String backupName, final TimeOut timeOut) throws Exception {\n    assertNotNull(\"backumpName must not be null\", backupName);\n    while (!timeOut.hasTimedOut()) {\n      if (checkBackupDeletionSuccess(backupName)) {\n        return;\n      }\n      timeOut.sleep(50);\n    }\n    \n    // total TimeOut elapsed, so one last check or fail whole test.\n    assertTrue(backupName + \" was not reported as deleted before the TimeOut elapsed\",\n               checkBackupDeletionSuccess(backupName));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"]},"commit2Childs":{"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}