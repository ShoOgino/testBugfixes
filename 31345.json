{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compiles the given expression.\n   *\n   * @param expression The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public Expression compileExpression(String expression) throws ParseException {\n    try {\n      this.className = \"Expr\" + Long.toString(counter.incrementAndGet());\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(expression);\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = loader.define(EXPRESSION_CLASS_PREFIX + className, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(expression, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    } catch (IllegalAccessException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    } catch (NoSuchMethodException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    } catch (InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37d6b37d9aac54bcb228187c93c3ede63a974996","date":1379049687,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","sourceNew":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    try {\n      this.className = \"CompiledExpression\";\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = loader.define(EXPRESSION_CLASS_PREFIX + className, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @param expression The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  public Expression compileExpression(String expression) throws ParseException {\n    try {\n      this.className = \"Expr\" + Long.toString(counter.incrementAndGet());\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(expression);\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = loader.define(EXPRESSION_CLASS_PREFIX + className, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(expression, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    } catch (IllegalAccessException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    } catch (NoSuchMethodException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    } catch (InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff991bc1e4ede83dd48c3f349bbbc6e9e54378e","date":1379071362,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","sourceNew":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    final String className = EXPRESSION_CLASS_PREFIX + createClassName(sourceText);\n    // System.out.println(sourceText + \"|\" + className);\n    try {\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile(className);\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = loader.define(className, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    try {\n      this.className = \"CompiledExpression\";\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = loader.define(EXPRESSION_CLASS_PREFIX + className, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4840d86b4a8fb4132704815ad31ae0d146f20946","date":1379076869,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","sourceNew":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    try {\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile(sourceText);\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = loader.define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    final String className = EXPRESSION_CLASS_PREFIX + createClassName(sourceText);\n    // System.out.println(sourceText + \"|\" + className);\n    try {\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile(className);\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = loader.define(className, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + className + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dffbef04e79fd12ad78c42585f05d99b141f91aa","date":1379085023,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","sourceNew":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    try {\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile(sourceText);\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    try {\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile(sourceText);\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = loader.define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec67ff97c3c57929891e4aa3bfba1094ef497d68","date":1379085761,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression().mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#compileExpression(String).mjava","sourceNew":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression() throws ParseException {\n    try {\n      Tree antlrTree = getAntlrComputedExpressionTree();\n      \n      beginCompile();\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsMap.keySet().toArray(new String[externalsMap.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","sourceOld":"  /**\n   * Compiles the given expression.\n   *\n   * @param sourceText The expression to compile\n   * @return A new compiled expression\n   * @throws ParseException on failure to compile\n   */\n  private Expression compileExpression(String sourceText) throws ParseException {\n    if (sourceText == null) {\n      throw new NullPointerException();\n    }\n    try {\n      externalsMap = new HashMap<String, Integer>();\n      externalsList = new ArrayList<String>();\n      \n      Tree antlrTree = getAntlrComputedExpressionTree(sourceText);\n      \n      beginCompile(sourceText);\n      recursiveCompile(antlrTree, ComputedType.DOUBLE);\n      endCompile();\n      \n      Class<? extends Expression> evaluatorClass = new Loader(getClass().getClassLoader())\n        .define(COMPILED_EXPRESSION_CLASS, classWriter.toByteArray());\n      Constructor<? extends Expression> constructor = evaluatorClass.getConstructor(String.class, String[].class);\n      return constructor.newInstance(sourceText, externalsList.toArray(new String[externalsList.size()]));\n    } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException exception) {\n      throw new IllegalStateException(\"An internal error occurred attempting to compile the expression (\" + sourceText + \").\", exception);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4840d86b4a8fb4132704815ad31ae0d146f20946":["dff991bc1e4ede83dd48c3f349bbbc6e9e54378e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dffbef04e79fd12ad78c42585f05d99b141f91aa":["4840d86b4a8fb4132704815ad31ae0d146f20946"],"37d6b37d9aac54bcb228187c93c3ede63a974996":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec67ff97c3c57929891e4aa3bfba1094ef497d68":["dffbef04e79fd12ad78c42585f05d99b141f91aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dff991bc1e4ede83dd48c3f349bbbc6e9e54378e":["37d6b37d9aac54bcb228187c93c3ede63a974996"]},"commit2Childs":{"4840d86b4a8fb4132704815ad31ae0d146f20946":["dffbef04e79fd12ad78c42585f05d99b141f91aa"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["37d6b37d9aac54bcb228187c93c3ede63a974996"],"dffbef04e79fd12ad78c42585f05d99b141f91aa":["ec67ff97c3c57929891e4aa3bfba1094ef497d68"],"37d6b37d9aac54bcb228187c93c3ede63a974996":["dff991bc1e4ede83dd48c3f349bbbc6e9e54378e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec67ff97c3c57929891e4aa3bfba1094ef497d68":[],"dff991bc1e4ede83dd48c3f349bbbc6e9e54378e":["4840d86b4a8fb4132704815ad31ae0d146f20946"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ec67ff97c3c57929891e4aa3bfba1094ef497d68","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}