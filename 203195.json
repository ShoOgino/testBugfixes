{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(TermFreqPayloadIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator tfit) throws IOException {\n    if (tfit.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqPayloadIterator tfit) throws IOException {\n    if (tfit.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    count = 0;\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = iterator.next()) != null) {\n      final long weight = iterator.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n      count++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator tfit) throws IOException {\n    if (tfit.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = tfit.next()) != null) {\n      final long weight = tfit.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = iterator.next()) != null) {\n      final long weight = iterator.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n      count++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    count = 0;\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = iterator.next()) != null) {\n      final long weight = iterator.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRefBuilder charsSpare = new CharsRefBuilder();\n\n    while ((spare = iterator.next()) != null) {\n      final long weight = iterator.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.copyUTF8Bytes(spare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n      count++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRef charsSpare = new CharsRef();\n\n    while ((spare = iterator.next()) != null) {\n      final long weight = iterator.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.grow(spare.length);\n      UnicodeUtil.UTF8toUTF16(spare.bytes, spare.offset, spare.length, charsSpare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n      count++;\n    }\n  }\n\n","bugFix":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRefBuilder charsSpare = new CharsRefBuilder();\n\n    while ((spare = iterator.next()) != null) {\n      final long weight = iterator.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.copyUTF8Bytes(spare);\n      trie.put(charsSpare.toString(), weight);\n      count++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    trie = new JaspellTernarySearchTrie();\n    trie.setMatchAlmostDiff(editDistance);\n    BytesRef spare;\n    final CharsRefBuilder charsSpare = new CharsRefBuilder();\n\n    while ((spare = iterator.next()) != null) {\n      final long weight = iterator.weight();\n      if (spare.length == 0) {\n        continue;\n      }\n      charsSpare.copyUTF8Bytes(spare);\n      trie.put(charsSpare.toString(), Long.valueOf(weight));\n      count++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}