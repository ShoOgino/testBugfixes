{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.DefaultElevationProvider#DefaultElevationProvider(TrieSubsetMatcher.Builder[String,Elevation],Map[ElevatingQuery,ElevationBuilder]).mjava","commits":[{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.DefaultElevationProvider#DefaultElevationProvider(TrieSubsetMatcher.Builder[String,Elevation],Map[ElevatingQuery,ElevationBuilder]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @param subsetMatcherBuilder The {@link TrieSubsetMatcher.Builder} to build the {@link TrieSubsetMatcher}.\n     * @param elevationBuilderMap The map of elevation rules.\n     */\n    protected DefaultElevationProvider(TrieSubsetMatcher.Builder<String, Elevation> subsetMatcherBuilder,\n                                       Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap) {\n      exactMatchElevationMap = new LinkedHashMap<>();\n      Collection<String> queryTerms = new ArrayList<>();\n      Consumer<CharSequence> termsConsumer = term -> queryTerms.add(term.toString());\n      StringBuilder concatTerms = new StringBuilder();\n      Consumer<CharSequence> concatConsumer = concatTerms::append;\n      for (Map.Entry<ElevatingQuery, ElevationBuilder> entry : elevationBuilderMap.entrySet()) {\n        ElevatingQuery elevatingQuery = entry.getKey();\n        Elevation elevation = entry.getValue().build();\n        if (elevatingQuery.subsetMatch) {\n          queryTerms.clear();\n          analyzeQuery(elevatingQuery.queryString, termsConsumer);\n          subsetMatcherBuilder.addSubset(queryTerms, elevation);\n        } else {\n          concatTerms.setLength(0);\n          analyzeQuery(elevatingQuery.queryString, concatConsumer);\n          exactMatchElevationMap.put(concatTerms.toString(), elevation);\n        }\n      }\n      this.subsetMatcher = subsetMatcherBuilder.build();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.DefaultElevationProvider#DefaultElevationProvider(TrieSubsetMatcher.Builder[String,Elevation],Map[ElevatingQuery,ElevationBuilder]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @param subsetMatcherBuilder The {@link TrieSubsetMatcher.Builder} to build the {@link TrieSubsetMatcher}.\n     * @param elevationBuilderMap The map of elevation rules.\n     */\n    protected DefaultElevationProvider(TrieSubsetMatcher.Builder<String, Elevation> subsetMatcherBuilder,\n                                       Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap) {\n      exactMatchElevationMap = new LinkedHashMap<>();\n      Collection<String> queryTerms = new ArrayList<>();\n      Consumer<CharSequence> termsConsumer = term -> queryTerms.add(term.toString());\n      StringBuilder concatTerms = new StringBuilder();\n      Consumer<CharSequence> concatConsumer = concatTerms::append;\n      for (Map.Entry<ElevatingQuery, ElevationBuilder> entry : elevationBuilderMap.entrySet()) {\n        ElevatingQuery elevatingQuery = entry.getKey();\n        Elevation elevation = entry.getValue().build();\n        if (elevatingQuery.subsetMatch) {\n          queryTerms.clear();\n          analyzeQuery(elevatingQuery.queryString, termsConsumer);\n          subsetMatcherBuilder.addSubset(queryTerms, elevation);\n        } else {\n          concatTerms.setLength(0);\n          analyzeQuery(elevatingQuery.queryString, concatConsumer);\n          exactMatchElevationMap.put(concatTerms.toString(), elevation);\n        }\n      }\n      this.subsetMatcher = subsetMatcherBuilder.build();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6046c615b67e878b7c0ab9257d01dd759493f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}