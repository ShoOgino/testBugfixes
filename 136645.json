{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"fab88842367a77ce26aedb47e9ea666beea01cf9","date":1391433372,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT) );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n    handleResponse(CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT),new ZkNodeProps(props),rsp);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b","date":1392108367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n    handleResponse(CLUSTERPROP.toLower(),new ZkNodeProps(props),rsp);\n\n  }\n\n","sourceOld":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT) );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n    handleResponse(CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT),new ZkNodeProps(props),rsp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","date":1392108948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT) );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n    handleResponse(CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT),new ZkNodeProps(props),rsp);\n\n  }\n\n","sourceOld":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n    handleResponse(CLUSTERPROP.toLower(),new ZkNodeProps(props),rsp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props)) ;\n  }\n\n","sourceOld":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT) );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n    handleResponse(CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT),new ZkNodeProps(props),rsp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props)) ;\n  }\n\n","sourceOld":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT) );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n    handleResponse(CollectionAction.CLUSTERPROP.toString().toLowerCase(Locale.ROOT),new ZkNodeProps(props),rsp);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(NAME);\n    String name = req.getParams().get(NAME);\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        NAME,\n        \"val\");\n\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props)) ;\n  }\n\n","sourceOld":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props)) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(NAME);\n    String name = req.getParams().get(NAME);\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        NAME,\n        \"val\");\n\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props)) ;\n  }\n\n","sourceOld":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(\"name\");\n    String name = req.getParams().get(\"name\");\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        \"name\",\n        \"val\");\n\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props)) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6398c01b0e06ba3aa3a96d549077877414f9f8","date":1429701153,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(NAME);\n    String name = req.getParams().get(NAME);\n    String val = req.getParams().get(VALUE_LONG);\n    coreContainer.getZkController().getZkStateReader().setClusterProperty(name, val);\n  }\n\n","sourceOld":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(NAME);\n    String name = req.getParams().get(NAME);\n    if(!OverseerCollectionProcessor.KNOWN_CLUSTER_PROPS.contains(name)){\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Not a known cluster property \"+ name);\n    }\n\n    Map<String,Object> props = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CLUSTERPROP.toLower() );\n    copyIfNotNull(req.getParams(),props,\n        NAME,\n        \"val\");\n\n    Overseer.getInQueue(coreContainer.getZkController().getZkClient()).offer(ZkStateReader.toJSON(props)) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleProp(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {\n    req.getParams().required().check(NAME);\n    String name = req.getParams().get(NAME);\n    String val = req.getParams().get(VALUE_LONG);\n    coreContainer.getZkController().getZkStateReader().setClusterProperty(name, val);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fab88842367a77ce26aedb47e9ea666beea01cf9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","1390137e395d2f07f9ba5b8c43d293befe84d563"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["3b6398c01b0e06ba3aa3a96d549077877414f9f8"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["1390137e395d2f07f9ba5b8c43d293befe84d563"]},"commit2Childs":{"fab88842367a77ce26aedb47e9ea666beea01cf9":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","3b6398c01b0e06ba3aa3a96d549077877414f9f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}