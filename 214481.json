{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","commits":[{"id":"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","date":1402094642,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(assertSolrDocumentEquals(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f50fec5dadda9f0c72e0e8fe342b6438178a459","date":1402575501,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","sourceNew":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(compareSolrDocument(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(assertSolrDocumentEquals(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","bugFix":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","sourceNew":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(compareSolrDocument(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(assertSolrDocumentEquals(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","sourceNew":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    try (JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };)\n    {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(compareSolrDocument(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(compareSolrDocument(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","sourceNew":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    try (JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };)\n    {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(compareSolrDocument(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(compareSolrDocument(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec#testBackCompatForSolrDocumentWithChildDocs().mjava","sourceNew":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    try (JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };)\n    {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(compareSolrDocument(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBackCompatForSolrDocumentWithChildDocs() throws IOException {\n    JavaBinCodec javabin = new JavaBinCodec(){\n      @Override\n      public List<Object> readIterator(DataInputInputStream fis) throws IOException {\n        return super.readIterator(fis);\n      }\n    };\n    try {\n      InputStream is = getClass().getResourceAsStream(SOLRJ_JAVABIN_BACKCOMPAT_BIN_CHILD_DOCS);\n      SolrDocument sdoc = (SolrDocument) javabin.unmarshal(is);\n      SolrDocument matchSolrDoc = generateSolrDocumentWithChildDocs();\n      assertTrue(compareSolrDocument(sdoc, matchSolrDoc));\n    } catch (IOException e) {\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1","3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"28288370235ed02234a64753cdbf0c6ec096304a":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a862f08ffeb00b03b4c641de86b167b1d6f7cd1"],"9a862f08ffeb00b03b4c641de86b167b1d6f7cd1":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","c6f080a2ab37c464dd98db173f6cbf10dc74f211","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}