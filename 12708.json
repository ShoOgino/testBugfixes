{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      ClusterState clusterState = zkStateReader.getClusterState();     \n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : clusterState.getActiveSlices(collection)) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrServer.RouteResponse) {\n      NamedList routes = ((CloudSolrServer.RouteResponse)resp).getRouteResponses();      \n      ClusterState clusterState = zkStateReader.getClusterState();     \n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : clusterState.getActiveSlices(collection)) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlices()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      ClusterState clusterState = zkStateReader.getClusterState();     \n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : clusterState.getActiveSlices(collection)) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlices()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      ClusterState clusterState = zkStateReader.getClusterState();     \n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : clusterState.getActiveSlices(collection)) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlices()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"727bb765ff2542275f6d31f67be18d7104bae148":["bafca15d8e408346a67f4282ad1143b88023893b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"c84df91ca6a2e8d6f26f185663112546a27f6b45":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["c84df91ca6a2e8d6f26f185663112546a27f6b45","727bb765ff2542275f6d31f67be18d7104bae148"],"bafca15d8e408346a67f4282ad1143b88023893b":["727bb765ff2542275f6d31f67be18d7104bae148","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}