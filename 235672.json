{"path":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"/dev/null","sourceNew":"  void finish() {\n    assert docIDs.length == norms.length;\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = fieldState.boost * docState.similarity.lengthNorm(fieldInfo.name, fieldState.length);\n      norms[upto] = Similarity.encodeNorm(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41ab32fc87982eab82a896cee390971b5c08fd2","date":1225735438,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  void finish() {\n    assert docIDs.length == norms.length;\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.encodeNorm(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  void finish() {\n    assert docIDs.length == norms.length;\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = fieldState.boost * docState.similarity.lengthNorm(fieldInfo.name, fieldState.length);\n      norms[upto] = Similarity.encodeNorm(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    assert docIDs.length == norms.length;\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.encodeNorm(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  void finish() {\n    assert docIDs.length == norms.length;\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.encodeNorm(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    assert docIDs.length == norms.length;\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    assert docIDs.length == norms.length;\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.encodeNorm(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    assert docIDs.length == norms.length;\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/NormsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","sourceOld":"  @Override\n  void finish() {\n    if (fieldInfo.isIndexed && !fieldInfo.omitNorms) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1+upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1+upto);\n      }\n      final float norm = docState.similarity.computeNorm(fieldInfo.name, fieldState);\n      norms[upto] = Similarity.getDefault().encodeNormValue(norm);\n      docIDs[upto] = docState.docID;\n      upto++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["5350389bf83287111f7760b9e3db3af8e3648474"],"8a9e385641d717e641408d8fbbc62be8fc766357":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["8a9e385641d717e641408d8fbbc62be8fc766357"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"]},"commit2Childs":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"5350389bf83287111f7760b9e3db3af8e3648474":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}