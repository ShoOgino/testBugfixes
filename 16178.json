{"path":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","commits":[{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be6882c3640246589df6f53088f29c232d920297","date":1320973666,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator();\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, false);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb","02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, false);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd6ecb8250c497ed227653279d6a4f470bfbb31","date":1326814483,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = reader.terms(entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, false);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = MultiFields.getTerms(reader, entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, false);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(AtomicIndexReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicIndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = reader.terms(entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, false);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = reader.terms(entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, false);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(AtomicReader,Entry,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCacheImpl.DocTermsIndexCache#createValue(IndexReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = reader.terms(entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, false);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(IndexReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n        throws IOException {\n\n      Terms terms = reader.terms(entryKey.field);\n\n      final boolean fasterButMoreRAM = ((Boolean) entryKey.custom).booleanValue();\n\n      final PagedBytes bytes = new PagedBytes(15);\n\n      int startBytesBPV;\n      int startTermsBPV;\n      int startNumUniqueTerms;\n\n      int maxDoc = reader.maxDoc();\n      final int termCountHardLimit;\n      if (maxDoc == Integer.MAX_VALUE) {\n        termCountHardLimit = Integer.MAX_VALUE;\n      } else {\n        termCountHardLimit = maxDoc+1;\n      }\n\n      if (terms != null) {\n        // Try for coarse estimate for number of bits; this\n        // should be an underestimate most of the time, which\n        // is fine -- GrowableWriter will reallocate as needed\n        long numUniqueTerms = 0;\n        try {\n          numUniqueTerms = terms.getUniqueTermCount();\n        } catch (UnsupportedOperationException uoe) {\n          numUniqueTerms = -1;\n        }\n        if (numUniqueTerms != -1) {\n\n          if (numUniqueTerms > termCountHardLimit) {\n            // app is misusing the API (there is more than\n            // one term per doc); in this case we make best\n            // effort to load what we can (see LUCENE-2142)\n            numUniqueTerms = termCountHardLimit;\n          }\n\n          startBytesBPV = PackedInts.bitsRequired(numUniqueTerms*4);\n          startTermsBPV = PackedInts.bitsRequired(numUniqueTerms);\n\n          startNumUniqueTerms = (int) numUniqueTerms;\n        } else {\n          startBytesBPV = 1;\n          startTermsBPV = 1;\n          startNumUniqueTerms = 1;\n        }\n      } else {\n        startBytesBPV = 1;\n        startTermsBPV = 1;\n        startNumUniqueTerms = 1;\n      }\n\n      GrowableWriter termOrdToBytesOffset = new GrowableWriter(startBytesBPV, 1+startNumUniqueTerms, fasterButMoreRAM);\n      final GrowableWriter docToTermOrd = new GrowableWriter(startTermsBPV, maxDoc, fasterButMoreRAM);\n\n      // 0 is reserved for \"unset\"\n      bytes.copyUsingLengthPrefix(new BytesRef());\n      int termOrd = 1;\n\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (termOrd >= termCountHardLimit) {\n            break;\n          }\n\n          if (termOrd == termOrdToBytesOffset.size()) {\n            // NOTE: this code only runs if the incoming\n            // reader impl doesn't implement\n            // getUniqueTermCount (which should be uncommon)\n            termOrdToBytesOffset = termOrdToBytesOffset.resize(ArrayUtil.oversize(1+termOrd, 1));\n          }\n          termOrdToBytesOffset.set(termOrd, bytes.copyUsingLengthPrefix(term));\n          docs = termsEnum.docs(null, docs, false);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docToTermOrd.set(docID, termOrd);\n          }\n          termOrd++;\n        }\n\n        if (termOrdToBytesOffset.size() > termOrd) {\n          termOrdToBytesOffset = termOrdToBytesOffset.resize(termOrd);\n        }\n      }\n\n      // maybe an int-only impl?\n      return new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["be6882c3640246589df6f53088f29c232d920297"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"382fe3a6ca9745891afebda9b9a57cc158305545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"be6882c3640246589df6f53088f29c232d920297":["382fe3a6ca9745891afebda9b9a57cc158305545"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["2dd6ecb8250c497ed227653279d6a4f470bfbb31","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["382fe3a6ca9745891afebda9b9a57cc158305545"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"382fe3a6ca9745891afebda9b9a57cc158305545":["be6882c3640246589df6f53088f29c232d920297"],"be6882c3640246589df6f53088f29c232d920297":["3cc749c053615f5871f3b95715fe292f34e70a53"],"2dd6ecb8250c497ed227653279d6a4f470bfbb31":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}