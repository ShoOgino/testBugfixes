{"path":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","commits":[{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than or equal to\n   * {@code totalHitsThreshold} then its value is a lower bound of the hit\n   * count. A value of {@link Integer#MAX_VALUE} will make the hit count\n   * accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold <= 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be > 0, got \" + totalHitsThreshold);\n    }\n\n    if (after == null) {\n      return new SimpleTopScoreDocCollector(numHits, totalHitsThreshold);\n    } else {\n      return new PagingTopScoreDocCollector(numHits, after);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and whether the total hit count\n   * is needed.\n   *\n   * <p><b>NOTE</b>: If {@code trackTotalHits} is {@code false} then the\n   * {@link TopDocs#totalHits} of the returned {@link TopDocs} will be an\n   * approximation and may be completely off.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, boolean trackTotalHits) {\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (after == null) {\n      return new SimpleTopScoreDocCollector(numHits, trackTotalHits);\n    } else {\n      return new PagingTopScoreDocCollector(numHits, after);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5003664d14ef48a0557ce1d8a684b15d62efe912","date":1539883534,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than or equal to\n   * {@code totalHitsThreshold} then its value is a lower bound of the hit\n   * count. A value of {@link Integer#MAX_VALUE} will make the hit count\n   * accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold <= 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be > 0, got \" + totalHitsThreshold);\n    }\n\n    if (after == null) {\n      return new SimpleTopScoreDocCollector(numHits, totalHitsThreshold);\n    } else {\n      return new PagingTopScoreDocCollector(numHits, after, totalHitsThreshold);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than or equal to\n   * {@code totalHitsThreshold} then its value is a lower bound of the hit\n   * count. A value of {@link Integer#MAX_VALUE} will make the hit count\n   * accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold <= 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be > 0, got \" + totalHitsThreshold);\n    }\n\n    if (after == null) {\n      return new SimpleTopScoreDocCollector(numHits, totalHitsThreshold);\n    } else {\n      return new PagingTopScoreDocCollector(numHits, after);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5374ec368ef9441d694af8df95b2ffbae3d7f03b","date":1548748689,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than or exactly\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than {@code totalHitsThreshold}\n   * then its value is a lower bound of the hit count. A value of {@link Integer#MAX_VALUE}\n   * will make the hit count accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    if (after == null) {\n      return new SimpleTopScoreDocCollector(numHits, totalHitsThreshold);\n    } else {\n      return new PagingTopScoreDocCollector(numHits, after, totalHitsThreshold);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than or equal to\n   * {@code totalHitsThreshold} then its value is a lower bound of the hit\n   * count. A value of {@link Integer#MAX_VALUE} will make the hit count\n   * accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold <= 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be > 0, got \" + totalHitsThreshold);\n    }\n\n    if (after == null) {\n      return new SimpleTopScoreDocCollector(numHits, totalHitsThreshold);\n    } else {\n      return new PagingTopScoreDocCollector(numHits, after, totalHitsThreshold);\n    }\n  }\n\n","bugFix":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19eef45a852c3316ae52fdf941731448ece967a","date":1567670879,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than or exactly\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than {@code totalHitsThreshold}\n   * then its value is a lower bound of the hit count. A value of {@link Integer#MAX_VALUE}\n   * will make the hit count accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n    return create(numHits, after, HitsThresholdChecker.create(totalHitsThreshold));\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than or exactly\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than {@code totalHitsThreshold}\n   * then its value is a lower bound of the hit count. A value of {@link Integer#MAX_VALUE}\n   * will make the hit count accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    if (totalHitsThreshold < 0) {\n      throw new IllegalArgumentException(\"totalHitsThreshold must be >= 0, got \" + totalHitsThreshold);\n    }\n\n    if (after == null) {\n      return new SimpleTopScoreDocCollector(numHits, totalHitsThreshold);\n    } else {\n      return new PagingTopScoreDocCollector(numHits, after, totalHitsThreshold);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09bee0b4882762434fd0b5095fc34ee6058442e1","date":1569398789,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than or exactly\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than {@code totalHitsThreshold}\n   * then its value is a lower bound of the hit count. A value of {@link Integer#MAX_VALUE}\n   * will make the hit count accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n    return create(numHits, after, HitsThresholdChecker.create(totalHitsThreshold), null);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than or exactly\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than {@code totalHitsThreshold}\n   * then its value is a lower bound of the hit count. A value of {@link Integer#MAX_VALUE}\n   * will make the hit count accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n    return create(numHits, after, HitsThresholdChecker.create(totalHitsThreshold));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60a97329527e682292497dd2f6fae1c519840bae","date":1587668642,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,int).mjava","sourceNew":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than or exactly\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than {@code totalHitsThreshold}\n   * then its value is a lower bound of the hit count. A value of {@link Integer#MAX_VALUE}\n   * will make the hit count accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n    return create(numHits, after, HitsThresholdChecker.create(Math.max(totalHitsThreshold, numHits)), null);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and the number of hits to count\n   * accurately.\n   *\n   * <p><b>NOTE</b>: If the total hit count of the top docs is less than or exactly\n   * {@code totalHitsThreshold} then this value is accurate. On the other hand,\n   * if the {@link TopDocs#totalHits} value is greater than {@code totalHitsThreshold}\n   * then its value is a lower bound of the hit count. A value of {@link Integer#MAX_VALUE}\n   * will make the hit count accurate but will also likely make query processing slower.\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, int totalHitsThreshold) {\n    return create(numHits, after, HitsThresholdChecker.create(totalHitsThreshold), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e19eef45a852c3316ae52fdf941731448ece967a":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"60a97329527e682292497dd2f6fae1c519840bae":["09bee0b4882762434fd0b5095fc34ee6058442e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5374ec368ef9441d694af8df95b2ffbae3d7f03b":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60a97329527e682292497dd2f6fae1c519840bae"],"09bee0b4882762434fd0b5095fc34ee6058442e1":["e19eef45a852c3316ae52fdf941731448ece967a"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e19eef45a852c3316ae52fdf941731448ece967a":["09bee0b4882762434fd0b5095fc34ee6058442e1"],"60a97329527e682292497dd2f6fae1c519840bae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"5374ec368ef9441d694af8df95b2ffbae3d7f03b":["e19eef45a852c3316ae52fdf941731448ece967a"],"5003664d14ef48a0557ce1d8a684b15d62efe912":["5374ec368ef9441d694af8df95b2ffbae3d7f03b"],"09bee0b4882762434fd0b5095fc34ee6058442e1":["60a97329527e682292497dd2f6fae1c519840bae"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["5003664d14ef48a0557ce1d8a684b15d62efe912"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}