{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","commits":[{"id":"d9a4952b035bd0644022bb7f553db72494001efa","date":1460684366,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testSortStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n        \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d","date":1460703694,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testSortStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n        \n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","sourceOld":"  private void testSortStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n        \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","sourceOld":"  private void testSortStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n        \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","sourceOld":"  private void testSortStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n        \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","sourceOld":"  private void testSortStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n    indexr(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\");\n    commit();\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n        \n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTION + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b28ad83652f81775fa37359636d0bfe523590199","date":1490892787,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0, 1, 5, 2, 3, 4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c3f4197ce8687fa9dc92965c98136ebbc430430","date":1490968656,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0, 1, 5, 2, 3, 4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,1,5,2,3,4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      StreamFactory factory = new StreamFactory()\n          .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n          .withFunctionName(\"search\", CloudSolrStream.class)\n          .withFunctionName(\"sort\", SortStream.class);\n\n      // Basic test\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 1, 5, 2, 3, 4);\n\n      // Basic test desc\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 4, 3, 2, 1, 5, 0);\n\n      // Basic w/multi comp\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 5, 1, 2, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0, 1, 5, 2, 3, 4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      StreamFactory factory = new StreamFactory()\n          .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n          .withFunctionName(\"search\", CloudSolrStream.class)\n          .withFunctionName(\"sort\", SortStream.class);\n\n      // Basic test\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 1, 5, 2, 3, 4);\n\n      // Basic test desc\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 4, 3, 2, 1, 5, 0);\n\n      // Basic w/multi comp\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 5, 1, 2, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"sort\", SortStream.class);\n    \n    // Basic test\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0, 1, 5, 2, 3, 4);\n\n    // Basic test desc\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 4,3,2,1,5,0);\n    \n    // Basic w/multi comp\n    stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n    tuples = getTuples(stream);\n    assert(tuples.size() == 6);\n    assertOrder(tuples, 0,5,1,2,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testSortStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSortStream().mjava","sourceNew":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      StreamFactory factory = new StreamFactory()\n          .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n          .withFunctionName(\"search\", CloudSolrStream.class)\n          .withFunctionName(\"sort\", SortStream.class);\n\n      // Basic test\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 1, 5, 2, 3, 4);\n\n      // Basic test desc\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 4, 3, 2, 1, 5, 0);\n\n      // Basic w/multi comp\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 5, 1, 2, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"2\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      StreamFactory factory = new StreamFactory()\n          .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n          .withFunctionName(\"search\", CloudSolrStream.class)\n          .withFunctionName(\"sort\", SortStream.class);\n\n      // Basic test\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 1, 5, 2, 3, 4);\n\n      // Basic test desc\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i desc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 4, 3, 2, 1, 5, 0);\n\n      // Basic w/multi comp\n      stream = factory.constructStream(\"sort(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"), by=\\\"a_i asc, a_f desc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 6);\n      assertOrder(tuples, 0, 5, 1, 2, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6c3f4197ce8687fa9dc92965c98136ebbc430430"],"6c3f4197ce8687fa9dc92965c98136ebbc430430":["8c969f15cd04d31e520319c619a445ae21f02d72"],"d9a4952b035bd0644022bb7f553db72494001efa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73450c0955930295d34703e7ddbfc6973b7a121a":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d","b940572a59da1b42b6c20ab5278155b12816807a"],"b28ad83652f81775fa37359636d0bfe523590199":["8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["b28ad83652f81775fa37359636d0bfe523590199"],"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9a4952b035bd0644022bb7f553db72494001efa"],"b940572a59da1b42b6c20ab5278155b12816807a":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"6c3f4197ce8687fa9dc92965c98136ebbc430430":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"d9a4952b035bd0644022bb7f553db72494001efa":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"b28ad83652f81775fa37359636d0bfe523590199":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a4952b035bd0644022bb7f553db72494001efa","0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["6c3f4197ce8687fa9dc92965c98136ebbc430430","b28ad83652f81775fa37359636d0bfe523590199","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}