{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","commits":[{"id":"1968cf314c92553389d1be3954a802eea38e2d89","date":1201185406,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the specified docId, then, falls back to\n   * using the passed in {@link org.apache.lucene.document.Document} to retrieve the TokenStream.  This is useful when\n   * you already have the document, but would prefer to use the vector first.\n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the {@link org.apache.lucene.document.Fieldable} on the {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId, String field, Document doc, Analyzer analyzer) throws IOException{\n    TokenStream ts=null;\n\n\t\tTermFreqVector tfv=(TermFreqVector) reader.getTermFreqVector(docId,field);\n\t\tif(tfv!=null)\n\t\t{\n\t\t    if(tfv instanceof TermPositionVector)\n\t\t    {\n\t\t        ts=getTokenStream((TermPositionVector) tfv);\n\t\t    }\n\t\t}\n\t\t//No token info stored so fall back to analyzing raw content\n\t\tif(ts==null)\n\t\t{\n\t\t    ts=getTokenStream(doc,field,analyzer);\n\t\t}\n\t\treturn ts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the specified docId, then, falls back to\n   * using the passed in {@link org.apache.lucene.document.Document} to retrieve the TokenStream.  This is useful when\n   * you already have the document, but would prefer to use the vector first.\n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the {@link org.apache.lucene.document.Fieldable} on the {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId, String field, Document doc, Analyzer analyzer) throws IOException{\n    TokenStream ts=null;\n\n\t\tTermFreqVector tfv = reader.getTermFreqVector(docId,field);\n\t\tif(tfv!=null)\n\t\t{\n\t\t    if(tfv instanceof TermPositionVector)\n\t\t    {\n\t\t        ts=getTokenStream((TermPositionVector) tfv);\n\t\t    }\n\t\t}\n\t\t//No token info stored so fall back to analyzing raw content\n\t\tif(ts==null)\n\t\t{\n\t\t    ts=getTokenStream(doc,field,analyzer);\n\t\t}\n\t\treturn ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the specified docId, then, falls back to\n   * using the passed in {@link org.apache.lucene.document.Document} to retrieve the TokenStream.  This is useful when\n   * you already have the document, but would prefer to use the vector first.\n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the {@link org.apache.lucene.document.Fieldable} on the {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId, String field, Document doc, Analyzer analyzer) throws IOException{\n    TokenStream ts=null;\n\n\t\tTermFreqVector tfv=(TermFreqVector) reader.getTermFreqVector(docId,field);\n\t\tif(tfv!=null)\n\t\t{\n\t\t    if(tfv instanceof TermPositionVector)\n\t\t    {\n\t\t        ts=getTokenStream((TermPositionVector) tfv);\n\t\t    }\n\t\t}\n\t\t//No token info stored so fall back to analyzing raw content\n\t\tif(ts==null)\n\t\t{\n\t\t    ts=getTokenStream(doc,field,analyzer);\n\t\t}\n\t\treturn ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafd002a407d38098f1f0edf4365f971102ae0ef","date":1262804916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.document.Fieldable} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    TermFreqVector tfv = reader.getTermFreqVector(docId, field);\n    if (tfv != null) {\n      if (tfv instanceof TermPositionVector) {\n        ts = getTokenStream((TermPositionVector) tfv);\n      }\n    }\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the specified docId, then, falls back to\n   * using the passed in {@link org.apache.lucene.document.Document} to retrieve the TokenStream.  This is useful when\n   * you already have the document, but would prefer to use the vector first.\n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the {@link org.apache.lucene.document.Fieldable} on the {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId, String field, Document doc, Analyzer analyzer) throws IOException{\n    TokenStream ts=null;\n\n\t\tTermFreqVector tfv = reader.getTermFreqVector(docId,field);\n\t\tif(tfv!=null)\n\t\t{\n\t\t    if(tfv instanceof TermPositionVector)\n\t\t    {\n\t\t        ts=getTokenStream((TermPositionVector) tfv);\n\t\t    }\n\t\t}\n\t\t//No token info stored so fall back to analyzing raw content\n\t\tif(ts==null)\n\t\t{\n\t\t    ts=getTokenStream(doc,field,analyzer);\n\t\t}\n\t\treturn ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenSources#getAnyTokenStream(IndexReader,int,String,Document,Analyzer).mjava","sourceNew":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.document.Fieldable} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    TermFreqVector tfv = reader.getTermFreqVector(docId, field);\n    if (tfv != null) {\n      if (tfv instanceof TermPositionVector) {\n        ts = getTokenStream((TermPositionVector) tfv);\n      }\n    }\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","sourceOld":"  /**\n   * A convenience method that tries to first get a TermPositionVector for the\n   * specified docId, then, falls back to using the passed in\n   * {@link org.apache.lucene.document.Document} to retrieve the TokenStream.\n   * This is useful when you already have the document, but would prefer to use\n   * the vector first.\n   * \n   * @param reader The {@link org.apache.lucene.index.IndexReader} to use to try\n   *        and get the vector from\n   * @param docId The docId to retrieve.\n   * @param field The field to retrieve on the document\n   * @param doc The document to fall back on\n   * @param analyzer The analyzer to use for creating the TokenStream if the\n   *        vector doesn't exist\n   * @return The {@link org.apache.lucene.analysis.TokenStream} for the\n   *         {@link org.apache.lucene.document.Fieldable} on the\n   *         {@link org.apache.lucene.document.Document}\n   * @throws IOException if there was an error loading\n   */\n  public static TokenStream getAnyTokenStream(IndexReader reader, int docId,\n      String field, Document doc, Analyzer analyzer) throws IOException {\n    TokenStream ts = null;\n\n    TermFreqVector tfv = reader.getTermFreqVector(docId, field);\n    if (tfv != null) {\n      if (tfv instanceof TermPositionVector) {\n        ts = getTokenStream((TermPositionVector) tfv);\n      }\n    }\n    // No token info stored so fall back to analyzing raw content\n    if (ts == null) {\n      ts = getTokenStream(doc, field, analyzer);\n    }\n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["1968cf314c92553389d1be3954a802eea38e2d89"],"fafd002a407d38098f1f0edf4365f971102ae0ef":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"1968cf314c92553389d1be3954a802eea38e2d89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fafd002a407d38098f1f0edf4365f971102ae0ef"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["fafd002a407d38098f1f0edf4365f971102ae0ef"],"fafd002a407d38098f1f0edf4365f971102ae0ef":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1968cf314c92553389d1be3954a802eea38e2d89":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1968cf314c92553389d1be3954a802eea38e2d89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}