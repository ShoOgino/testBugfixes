{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object,Object).mjava","commits":[{"id":"9e0b0bd2390447c6bd25cf9e62be59a117394eab","date":1504711924,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a IntegerDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    IntegerDistribution d = (IntegerDistribution) first;\n    Number predictOver = (Number) second;\n    return d.probability(predictOver.intValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a IntegerDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    IntegerDistribution d = (IntegerDistribution) first;\n    Number predictOver = (Number) second;\n    return d.probability(predictOver.intValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a IntegerDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    IntegerDistribution d = (IntegerDistribution) first;\n    Number predictOver = (Number) second;\n    return d.probability(predictOver.intValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eedfdeb748f47574ced45245973cdb5931d5cf1","date":1511749925,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object,Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a IntegerDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    IntegerDistribution d = (IntegerDistribution) first;\n    Number predictOver = (Number) second;\n    return d.probability(predictOver.intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ProbabilityEvaluator#doWork(Object,Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof IntegerDistribution)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a IntegerDistribution\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof Number)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a Number\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    IntegerDistribution d = (IntegerDistribution) first;\n    Number predictOver = (Number) second;\n    return d.probability(predictOver.intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2eedfdeb748f47574ced45245973cdb5931d5cf1":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","2eedfdeb748f47574ced45245973cdb5931d5cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"]},"commit2Childs":{"2eedfdeb748f47574ced45245973cdb5931d5cf1":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["2eedfdeb748f47574ced45245973cdb5931d5cf1","685bd38810c206c93e9058f3c2cfa9827c086c27","f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}