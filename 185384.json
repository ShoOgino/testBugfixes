{"path":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","sourceOld":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","sourceOld":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","sourceOld":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39c13c15172a8b9d27019144ee871d39e4d42a0a","date":1311302849,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","sourceOld":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = builder.parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) xpath.evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/BaseTestHarness#validateXPath(String,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateXPath(String,String...).mjava","sourceNew":"  /**\n   * A helper method which validates a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n      throws XPathExpressionException, SAXException {\n\n    if (tests==null || tests.length == 0) return null;\n\n    Document document = null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n          (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n\n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document, XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * A helper method which valides a String against an array of XPath test\n   * strings.\n   *\n   * @param xml The xml String to validate\n   * @param tests Array of XPath strings to test (in boolean mode) on the xml\n   * @return null if all good, otherwise the first test that fails.\n   */\n  public String validateXPath(String xml, String... tests)\n    throws XPathExpressionException, SAXException {\n        \n    if (tests==null || tests.length == 0) return null;\n                \n    Document document=null;\n    try {\n      document = getXmlDocumentBuilder().parse(new ByteArrayInputStream\n                               (xml.getBytes(\"UTF-8\")));\n    } catch (UnsupportedEncodingException e1) {\n      throw new RuntimeException(\"Totally weird UTF-8 exception\", e1);\n    } catch (IOException e2) {\n      throw new RuntimeException(\"Totally weird io exception\", e2);\n    }\n                \n    for (String xp : tests) {\n      xp=xp.trim();\n      Boolean bool = (Boolean) getXpath().evaluate(xp, document,\n                                              XPathConstants.BOOLEAN);\n\n      if (!bool) {\n        return xp;\n      }\n    }\n    return null;\n                \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39c13c15172a8b9d27019144ee871d39e4d42a0a":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["39c13c15172a8b9d27019144ee871d39e4d42a0a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"]},"commit2Childs":{"39c13c15172a8b9d27019144ee871d39e4d42a0a":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["39c13c15172a8b9d27019144ee871d39e4d42a0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}