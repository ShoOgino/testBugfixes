{"path":"backwards/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"/dev/null","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    writer.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestOmitTf#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    writer.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term freq:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    writer.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    _TestUtil.checkIndex(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}