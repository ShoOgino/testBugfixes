{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex2().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex2().mjava","pathOld":"/dev/null","sourceNew":"    // Simulate a corrupt index by removing one of the cfs\n    // files and make sure we get an IOException trying to\n    // open the index:\n    public void testSimulatedCorruptIndex2() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String[] files = dir.listAll();\n        for(int i=0;i<files.length;i++) {\n          if (files[i].endsWith(\".cfs\")) {\n            dir.deleteFile(files[i]);\n            break;\n          }\n        }\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex2().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testSimulatedCorruptIndex2().mjava","sourceNew":"    // Simulate a corrupt index by removing one of the cfs\n    // files and make sure we get an IOException trying to\n    // open the index:\n    public void testSimulatedCorruptIndex2() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String[] files = dir.listAll();\n        for(int i=0;i<files.length;i++) {\n          if (files[i].endsWith(\".cfs\")) {\n            dir.deleteFile(files[i]);\n            break;\n          }\n        }\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","sourceOld":"    // Simulate a corrupt index by removing one of the cfs\n    // files and make sure we get an IOException trying to\n    // open the index:\n    public void testSimulatedCorruptIndex2() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n        // add 100 documents\n        for (int i = 0; i < 100; i++) {\n            addDoc(writer);\n        }\n\n        // close\n        writer.close();\n\n        long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n        assertTrue(\"segment generation should be > 1 but got \" + gen, gen > 1);\n\n        String[] files = dir.listAll();\n        for(int i=0;i<files.length;i++) {\n          if (files[i].endsWith(\".cfs\")) {\n            dir.deleteFile(files[i]);\n            break;\n          }\n        }\n\n        IndexReader reader = null;\n        try {\n          reader = IndexReader.open(dir, true);\n          fail(\"reader did not hit IOException on opening a corrupt index\");\n        } catch (Exception e) {\n        }\n        if (reader != null) {\n          reader.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}