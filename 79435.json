{"path":"lucene/src/java/org/apache/lucene/util/TermContext#get(int).mjava","commits":[{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#get(int).mjava","sourceNew":"  /**\n   * Returns the {@link TermState} for an leaf ordinal or <code>null</code> if no\n   * {@link TermState} for the ordinal was registered.\n   * \n   * @param ord\n   *          the readers leaf ordinal to get the {@link TermState} for.\n   * @return the {@link TermState} for the given readers ord or <code>null</code> if no\n   *         {@link TermState} for the reader was registered\n   */\n  public TermState get(int ord) {\n    assert ord >= 0 && ord < states.length;\n    return states[ord];\n  }\n\n","sourceOld":"  /**\n   * Returns the {@link TermState} for an leaf ordinal or <code>null</code> if no\n   * {@link TermState} for the ordinal was registered.\n   * \n   * @param ord\n   *          the readers leaf ordinal to get the {@link TermState} for.\n   * @return the {@link TermState} for the given readers ord or <code>null</code> if no\n   *         {@link TermState} for the reader was registered\n   */\n  public TermState get(int ord) {\n    assert ord >= 0 && ord < states.length;\n    return states[ord];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#get(int).mjava","sourceNew":"  /**\n   * Returns the {@link TermState} for an leaf ordinal or <code>null</code> if no\n   * {@link TermState} for the ordinal was registered.\n   * \n   * @param ord\n   *          the readers leaf ordinal to get the {@link TermState} for.\n   * @return the {@link TermState} for the given readers ord or <code>null</code> if no\n   *         {@link TermState} for the reader was registered\n   */\n  public TermState get(int ord) {\n    assert ord >= 0 && ord < states.length;\n    return states[ord];\n  }\n\n","sourceOld":"  /**\n   * Returns the {@link TermState} for an leaf ordinal or <code>null</code> if no\n   * {@link TermState} for the ordinal was registered.\n   * \n   * @param ord\n   *          the readers leaf ordinal to get the {@link TermState} for.\n   * @return the {@link TermState} for the given readers ord or <code>null</code> if no\n   *         {@link TermState} for the reader was registered\n   */\n  public TermState get(int ord) {\n    assert ord >= 0 && ord < states.length;\n    return states[ord];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/TermContext#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PerReaderTermState#get(int).mjava","sourceNew":"  /**\n   * Returns the {@link TermState} for an leaf ordinal or <code>null</code> if no\n   * {@link TermState} for the ordinal was registered.\n   * \n   * @param ord\n   *          the readers leaf ordinal to get the {@link TermState} for.\n   * @return the {@link TermState} for the given readers ord or <code>null</code> if no\n   *         {@link TermState} for the reader was registered\n   */\n  public TermState get(int ord) {\n    assert ord >= 0 && ord < states.length;\n    return states[ord];\n  }\n\n","sourceOld":"  /**\n   * Returns the {@link TermState} for an leaf ordinal or <code>null</code> if no\n   * {@link TermState} for the ordinal was registered.\n   * \n   * @param ord\n   *          the readers leaf ordinal to get the {@link TermState} for.\n   * @return the {@link TermState} for the given readers ord or <code>null</code> if no\n   *         {@link TermState} for the reader was registered\n   */\n  public TermState get(int ord) {\n    assert ord >= 0 && ord < states.length;\n    return states[ord];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#get(int).mjava","sourceNew":"  /**\n   * Returns the {@link TermState} for an leaf ordinal or <code>null</code> if no\n   * {@link TermState} for the ordinal was registered.\n   * \n   * @param ord\n   *          the readers leaf ordinal to get the {@link TermState} for.\n   * @return the {@link TermState} for the given readers ord or <code>null</code> if no\n   *         {@link TermState} for the reader was registered\n   */\n  public TermState get(int ord) {\n    assert ord >= 0 && ord < states.length;\n    return states[ord];\n  }\n\n","sourceOld":"  /**\n   * Returns the {@link TermState} for an leaf ordinal or <code>null</code> if no\n   * {@link TermState} for the ordinal was registered.\n   * \n   * @param ord\n   *          the readers leaf ordinal to get the {@link TermState} for.\n   * @return the {@link TermState} for the given readers ord or <code>null</code> if no\n   *         {@link TermState} for the reader was registered\n   */\n  public TermState get(int ord) {\n    assert ord >= 0 && ord < states.length;\n    return states[ord];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}