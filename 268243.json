{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws IOException {\n    StandardTokenizer tokenStream = new StandardTokenizer(new StringReader(input));\n    GermanStemFilter filter = new GermanStemFilter(tokenStream);\n    final Token reusableToken = new Token();\n    Token nextToken = filter.next(reusableToken);\n    if (nextToken == null)\n      fail();\n    assertEquals(expected, nextToken.term());\n    filter.close();\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws IOException {\n    StandardTokenizer tokenStream = new StandardTokenizer(new StringReader(input));\n    GermanStemFilter filter = new GermanStemFilter(tokenStream);\n    final Token reusableToken = new Token();\n    Token nextToken = filter.next(reusableToken);\n    if (nextToken == null)\n      fail();\n    assertEquals(expected, nextToken.term());\n    filter.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws IOException {\n    StandardTokenizer tokenStream = new StandardTokenizer(new StringReader(input));\n    GermanStemFilter filter = new GermanStemFilter(tokenStream);\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(expected, termAtt.term());\n    filter.close();\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws IOException {\n    StandardTokenizer tokenStream = new StandardTokenizer(new StringReader(input));\n    GermanStemFilter filter = new GermanStemFilter(tokenStream);\n    final Token reusableToken = new Token();\n    Token nextToken = filter.next(reusableToken);\n    if (nextToken == null)\n      fail();\n    assertEquals(expected, nextToken.term());\n    filter.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45b06c3ff8a4d9d3d751dd311e51c59303c2719c","date":1250600126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws IOException {\n    Analyzer a = new GermanAnalyzer();\n    TokenStream tokenStream = a.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute termAtt = (TermAttribute) tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(expected, termAtt.term());\n    tokenStream.close();\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws IOException {\n    StandardTokenizer tokenStream = new StandardTokenizer(new StringReader(input));\n    GermanStemFilter filter = new GermanStemFilter(tokenStream);\n    TermAttribute termAtt = (TermAttribute) filter.getAttribute(TermAttribute.class);\n    assertTrue(filter.incrementToken());\n    assertEquals(expected, termAtt.term());\n    filter.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new GermanAnalyzer(), input, expected);\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws IOException {\n    Analyzer a = new GermanAnalyzer();\n    TokenStream tokenStream = a.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute termAtt = (TermAttribute) tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(expected, termAtt.term());\n    tokenStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","sourceNew":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new GermanAnalyzer(Version.LUCENE_CURRENT), input, expected);\n  }\n\n","sourceOld":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new GermanAnalyzer(), input, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2877c077c0dc229ee9871dc196b2a62442df599","date":1265411146,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#check(String,String).mjava","sourceNew":null,"sourceOld":"  private void check(final String input, final String expected) throws Exception {\n    checkOneTerm(new GermanAnalyzer(Version.LUCENE_CURRENT), input, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2877c077c0dc229ee9871dc196b2a62442df599":["ba1116b3450a9c1642c89445d131b37344055245"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2877c077c0dc229ee9871dc196b2a62442df599"],"ba1116b3450a9c1642c89445d131b37344055245":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"c2877c077c0dc229ee9871dc196b2a62442df599":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["c2877c077c0dc229ee9871dc196b2a62442df599"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}