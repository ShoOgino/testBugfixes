{"path":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.IndexIterator#next().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.IndexIterator#next().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.IndexIterator#next().mjava","sourceNew":"    public int next() {\n      // Save the last index visited\n      lastIndex = index;\n\n      // next the index\n      index = next[index];\n\n      // if the next index points to the 'Ground' it means we're done with\n      // the current hash entry and we need to jump to the next one. This\n      // is done until all the hash entries had been visited.\n      while (index == 0 && ++baseHashIndex < baseHash.length) {\n        index = baseHash[baseHashIndex];\n      }\n\n      return lastIndex;\n    }\n\n","sourceOld":"    public int next() {\n      // Save the last index visited\n      lastIndex = index;\n\n      // next the index\n      index = next[index];\n\n      // if the next index points to the 'Ground' it means we're done with\n      // the current hash entry and we need to jump to the next one. This\n      // is done until all the hash entries had been visited.\n      while (index == 0 && ++baseHashIndex < baseHash.length) {\n        index = baseHash[baseHashIndex];\n      }\n\n      return lastIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.IndexIterator#next().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.IndexIterator#next().mjava","sourceNew":"    @Override\n    public int next() {\n      // Save the last index visited\n      lastIndex = index;\n\n      // next the index\n      index = next[index];\n\n      // if the next index points to the 'Ground' it means we're done with\n      // the current hash entry and we need to jump to the next one. This\n      // is done until all the hash entries had been visited.\n      while (index == 0 && ++baseHashIndex < baseHash.length) {\n        index = baseHash[baseHashIndex];\n      }\n\n      return lastIndex;\n    }\n\n","sourceOld":"    public int next() {\n      // Save the last index visited\n      lastIndex = index;\n\n      // next the index\n      index = next[index];\n\n      // if the next index points to the 'Ground' it means we're done with\n      // the current hash entry and we need to jump to the next one. This\n      // is done until all the hash entries had been visited.\n      while (index == 0 && ++baseHashIndex < baseHash.length) {\n        index = baseHash[baseHashIndex];\n      }\n\n      return lastIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.IndexIterator#next().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.IndexIterator#next().mjava","sourceNew":"    @Override\n    public int next() {\n      // Save the last index visited\n      lastIndex = index;\n\n      // next the index\n      index = next[index];\n\n      // if the next index points to the 'Ground' it means we're done with\n      // the current hash entry and we need to jump to the next one. This\n      // is done until all the hash entries had been visited.\n      while (index == 0 && ++baseHashIndex < baseHash.length) {\n        index = baseHash[baseHashIndex];\n      }\n\n      return lastIndex;\n    }\n\n","sourceOld":"    public int next() {\n      // Save the last index visited\n      lastIndex = index;\n\n      // next the index\n      index = next[index];\n\n      // if the next index points to the 'Ground' it means we're done with\n      // the current hash entry and we need to jump to the next one. This\n      // is done until all the hash entries had been visited.\n      while (index == 0 && ++baseHashIndex < baseHash.length) {\n        index = baseHash[baseHashIndex];\n      }\n\n      return lastIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/ObjectToIntMap.IndexIterator#next().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/ObjectToIntMap.IndexIterator#next().mjava","sourceNew":"    @Override\n    public int next() {\n      // Save the last index visited\n      lastIndex = index;\n\n      // next the index\n      index = next[index];\n\n      // if the next index points to the 'Ground' it means we're done with\n      // the current hash entry and we need to jump to the next one. This\n      // is done until all the hash entries had been visited.\n      while (index == 0 && ++baseHashIndex < baseHash.length) {\n        index = baseHash[baseHashIndex];\n      }\n\n      return lastIndex;\n    }\n\n","sourceOld":"    @Override\n    public int next() {\n      // Save the last index visited\n      lastIndex = index;\n\n      // next the index\n      index = next[index];\n\n      // if the next index points to the 'Ground' it means we're done with\n      // the current hash entry and we need to jump to the next one. This\n      // is done until all the hash entries had been visited.\n      while (index == 0 && ++baseHashIndex < baseHash.length) {\n        index = baseHash[baseHashIndex];\n      }\n\n      return lastIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}