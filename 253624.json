{"path":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testHealthCheckHandler().mjava","commits":[{"id":"1949be020da305d0d64d348458ac933994b52e8d","date":1586255171,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testHealthCheckHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HealthCheckHandlerTest#testHealthCheckHandler().mjava","sourceNew":"  @Test\n  public void testHealthCheckHandler() throws Exception {\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    // positive check that our only existing \"healthy\" node works with cloud client\n    // NOTE: this is using GenericSolrRequest, not HealthCheckRequest which is why it passes\n    // as compared with testHealthCheckHandlerWithCloudClient\n    // (Not sure if that's actaully a good thing -- but it's how the existing test worked)\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    // positive check that our exiting \"healthy\" node works with direct http client\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    // successfully create a dummy collection\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    // add a new node for the purpose of negative testing\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      // now \"break\" our (new) node\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      // negative check of our (new) \"broken\" node that we deliberately put into an unhealth state\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    // add a new node for the purpose of negative testing\n    // negative check that if core container is not available at the node\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      // shutdown the core container of new node\n      newJetty.getCoreContainer().shutdown();\n\n      // api shouldn't unreachable\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    // (redundent) positive check that our (previously) exiting \"healthy\" node (still) works\n    // after getting negative results from our broken node and failed core container\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testHealthCheckHandler() throws Exception {\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    // positive check that our only existing \"healthy\" node works with cloud client\n    // NOTE: this is using GenericSolrRequest, not HealthCheckRequest which is why it passes\n    // as compared with testHealthCheckHandlerWithCloudClient\n    // (Not sure if that's actaully a good thing -- but it's how the existing test worked)\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    // positive check that our exiting \"healthy\" node works with direct http client\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    // successfully create a dummy collection\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    // add a new node for the purpose of negative testing\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      // now \"break\" our (new) node\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      // negative check of our (new) \"broken\" node that we deliberately put into an unhealth state\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    // add a new node for the purpose of negative testing\n    // negative check that if core container is not available at the node\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      // shutdown the core container of new node\n      newJetty.getCoreContainer().shutdown();\n\n      // api shouldn't unreachable\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    // (redundent) positive check that our (previously) exiting \"healthy\" node (still) works\n    // after getting negative results from our broken node and failed core container\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testHealthCheckHandler().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/HealthCheckHandlerTest#testHealthCheckHandler().mjava","sourceNew":"  @Test\n  public void testHealthCheckHandler() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    // positive check that our only existing \"healthy\" node works with cloud client\n    // NOTE: this is using GenericSolrRequest, not HealthCheckRequest which is why it passes\n    // as compared with testHealthCheckHandlerWithCloudClient\n    // (Not sure if that's actaully a good thing -- but it's how the existing test worked)\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    // positive check that our exiting \"healthy\" node works with direct http client\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    // successfully create a dummy collection\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    // add a new node for the purpose of negative testing\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      // now \"break\" our (new) node\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      // negative check of our (new) \"broken\" node that we deliberately put into an unhealth state\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    // add a new node for the purpose of negative testing\n    // negative check that if core container is not available at the node\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      // shutdown the core container of new node\n      newJetty.getCoreContainer().shutdown();\n\n      // api shouldn't unreachable\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    // (redundent) positive check that our (previously) exiting \"healthy\" node (still) works\n    // after getting negative results from our broken node and failed core container\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testHealthCheckHandler() throws Exception {\n    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());\n\n    // positive check that our only existing \"healthy\" node works with cloud client\n    // NOTE: this is using GenericSolrRequest, not HealthCheckRequest which is why it passes\n    // as compared with testHealthCheckHandlerWithCloudClient\n    // (Not sure if that's actaully a good thing -- but it's how the existing test worked)\n    assertEquals(CommonParams.OK,\n        req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));\n\n    // positive check that our exiting \"healthy\" node works with direct http client\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    }\n\n    // successfully create a dummy collection\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n      CollectionAdminResponse collectionAdminResponse = CollectionAdminRequest.createCollection(\"test\", \"_default\", 1, 1)\n          .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n          .process(httpSolrClient);\n      assertEquals(0, collectionAdminResponse.getStatus());\n      SolrResponse response = req.process(httpSolrClient);\n      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.deleteAllConfigSets();\n    }\n\n    // add a new node for the purpose of negative testing\n    JettySolrRunner newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      // now \"break\" our (new) node\n      newJetty.getCoreContainer().getZkController().getZkClient().close();\n\n      // negative check of our (new) \"broken\" node that we deliberately put into an unhealth state\n      BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () ->\n      {\n        req.process(httpSolrClient);\n      });\n      assertTrue(e.getMessage(), e.getMessage().contains(\"Host Unavailable\"));\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());\n    } finally {\n      newJetty.stop();\n    }\n\n    // add a new node for the purpose of negative testing\n    // negative check that if core container is not available at the node\n    newJetty = cluster.startJettySolrRunner();\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {\n\n      // postive check that our (new) \"healthy\" node works with direct http client\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n\n      // shutdown the core container of new node\n      newJetty.getCoreContainer().shutdown();\n\n      // api shouldn't unreachable\n      SolrException thrown = expectThrows(SolrException.class, () -> {\n        req.process(httpSolrClient).getResponse().get(CommonParams.STATUS);\n        fail(\"API shouldn't be available, and fail at above request\");\n      });\n      assertEquals(\"Exception code should be 404\", 404, thrown.code());\n      assertTrue(\"Should have seen an exception containing the an error\", thrown.getMessage().contains(\n          \"Error processing the request. CoreContainer is either not initialized or shutting down.\"));\n    } finally {\n      newJetty.stop();\n    }\n\n    // (redundent) positive check that our (previously) exiting \"healthy\" node (still) works\n    // after getting negative results from our broken node and failed core container\n    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {\n\n      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1949be020da305d0d64d348458ac933994b52e8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1949be020da305d0d64d348458ac933994b52e8d"]},"commit2Childs":{"1949be020da305d0d64d348458ac933994b52e8d":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1949be020da305d0d64d348458ac933994b52e8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}