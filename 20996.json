{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLowCardinalityLeafBlockPackedValues(DataOutput,int[],int,IntFunction[BytesRef]).mjava","commits":[{"id":"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b","date":1561536972,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLowCardinalityLeafBlockPackedValues(DataOutput,int[],int,IntFunction[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void writeLowCardinalityLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, IntFunction<BytesRef> packedValues) throws IOException {\n    if (numIndexDims != 1) {\n      writeActualBounds(out, commonPrefixLengths, count, packedValues);\n    }\n    BytesRef value = packedValues.apply(0);\n    System.arraycopy(value.bytes, value.offset, scratch1, 0, packedBytesLength);\n    int cardinality = 1;\n    for (int i = 1; i < count; i++) {\n      value = packedValues.apply(i);\n      for(int dim = 0; dim < numDataDims; dim++) {\n        final int start = dim * bytesPerDim + commonPrefixLengths[dim];\n        final int end = dim * bytesPerDim + bytesPerDim;\n        if (Arrays.mismatch(value.bytes, value.offset + start, value.offset + end, scratch1, start, end) != -1) {\n          out.writeVInt(cardinality);\n          for (int j = 0; j < numDataDims; j++) {\n            out.writeBytes(scratch1, j * bytesPerDim + commonPrefixLengths[j], bytesPerDim - commonPrefixLengths[j]);\n          }\n          System.arraycopy(value.bytes, value.offset, scratch1, 0, packedBytesLength);\n          cardinality = 1;\n          break;\n        } else if (dim == numDataDims - 1){\n          cardinality++;\n        }\n      }\n    }\n    out.writeVInt(cardinality);\n    for (int i = 0; i < numDataDims; i++) {\n      out.writeBytes(scratch1, i * bytesPerDim + commonPrefixLengths[i], bytesPerDim - commonPrefixLengths[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLowCardinalityLeafBlockPackedValues(DataOutput,int[],int,IntFunction[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeLowCardinalityLeafBlockPackedValues(DataOutput,int[],int,IntFunction[BytesRef]).mjava","sourceNew":"  private void writeLowCardinalityLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, IntFunction<BytesRef> packedValues) throws IOException {\n    if (config.numIndexDims != 1) {\n      writeActualBounds(out, commonPrefixLengths, count, packedValues);\n    }\n    BytesRef value = packedValues.apply(0);\n    System.arraycopy(value.bytes, value.offset, scratch1, 0, config.packedBytesLength);\n    int cardinality = 1;\n    for (int i = 1; i < count; i++) {\n      value = packedValues.apply(i);\n      for(int dim = 0; dim < config.numDims; dim++) {\n        final int start = dim * config.bytesPerDim + commonPrefixLengths[dim];\n        final int end = dim * config.bytesPerDim + config.bytesPerDim;\n        if (Arrays.mismatch(value.bytes, value.offset + start, value.offset + end, scratch1, start, end) != -1) {\n          out.writeVInt(cardinality);\n          for (int j = 0; j < config.numDims; j++) {\n            out.writeBytes(scratch1, j * config.bytesPerDim + commonPrefixLengths[j], config.bytesPerDim - commonPrefixLengths[j]);\n          }\n          System.arraycopy(value.bytes, value.offset, scratch1, 0, config.packedBytesLength);\n          cardinality = 1;\n          break;\n        } else if (dim == config.numDims - 1){\n          cardinality++;\n        }\n      }\n    }\n    out.writeVInt(cardinality);\n    for (int i = 0; i < config.numDims; i++) {\n      out.writeBytes(scratch1, i * config.bytesPerDim + commonPrefixLengths[i], config.bytesPerDim - commonPrefixLengths[i]);\n    }\n  }\n\n","sourceOld":"  private void writeLowCardinalityLeafBlockPackedValues(DataOutput out, int[] commonPrefixLengths, int count, IntFunction<BytesRef> packedValues) throws IOException {\n    if (numIndexDims != 1) {\n      writeActualBounds(out, commonPrefixLengths, count, packedValues);\n    }\n    BytesRef value = packedValues.apply(0);\n    System.arraycopy(value.bytes, value.offset, scratch1, 0, packedBytesLength);\n    int cardinality = 1;\n    for (int i = 1; i < count; i++) {\n      value = packedValues.apply(i);\n      for(int dim = 0; dim < numDataDims; dim++) {\n        final int start = dim * bytesPerDim + commonPrefixLengths[dim];\n        final int end = dim * bytesPerDim + bytesPerDim;\n        if (Arrays.mismatch(value.bytes, value.offset + start, value.offset + end, scratch1, start, end) != -1) {\n          out.writeVInt(cardinality);\n          for (int j = 0; j < numDataDims; j++) {\n            out.writeBytes(scratch1, j * bytesPerDim + commonPrefixLengths[j], bytesPerDim - commonPrefixLengths[j]);\n          }\n          System.arraycopy(value.bytes, value.offset, scratch1, 0, packedBytesLength);\n          cardinality = 1;\n          break;\n        } else if (dim == numDataDims - 1){\n          cardinality++;\n        }\n      }\n    }\n    out.writeVInt(cardinality);\n    for (int i = 0; i < numDataDims; i++) {\n      out.writeBytes(scratch1, i * bytesPerDim + commonPrefixLengths[i], bytesPerDim - commonPrefixLengths[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}