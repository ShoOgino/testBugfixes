{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = !\"Lucene3x\".equals(w.w.getConfig().getCodec().getName());\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"1\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"2\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some more random textual data\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"3\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new Field(\"content\", \"some random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"4\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"some more random text\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"5\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"content\", \"random blob\", TextField.TYPE_UNSTORED));\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new Field(\"content\", \"random word stuck in alot of other text\", TextField.TYPE_STORED));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new Field(\"id\", \"6\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n        // nocommit DocValues.Type.FLOAT_64,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"652059ecdc1285b15d7c22489eacd661e905ef72","date":1359411181,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n        // nocommit DocValues.Type.FLOAT_64,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValues.Type[] dvTypes = new DocValues.Type[]{\n        DocValues.Type.VAR_INTS,\n        DocValues.Type.FLOAT_64,\n        DocValues.Type.BYTES_VAR_STRAIGHT,\n        DocValues.Type.BYTES_VAR_SORTED\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValues.Type dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d1c58e9d1ed4b363d0b00ad5209e1b01c418347","date":1399827661,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7d9cc55f861840a92a2bda7a9985ec2e2485902","date":1399828429,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    DocValuesType[] dvTypes = new DocValuesType[]{\n        DocValuesType.NUMERIC,\n        DocValuesType.BINARY,\n        DocValuesType.SORTED,\n    };\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    boolean canUseDV = true;\n    DocValuesType dvType = canUseDV ? dvTypes[random.nextInt(dvTypes.length)] : null;\n\n    Document doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\", dvType);\n    addField(doc, countField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3\n    doc = new Document();\n    addField(doc, groupField, \"2\", dvType);\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\", dvType);\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\", dvType);\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs =  distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(dvType, new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField, dvType);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.shutdown();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, AbstractDistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    AbstractFirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    AbstractDistinctValuesCollector<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<? extends AbstractDistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, groupField, \"1\");\n    addField(doc, countField, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, groupField, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, groupField, \"3\");\n    addField(doc, countField, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, countField, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), groupField, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, groupField, countField);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> cmp = (groupCount1, groupCount2) -> {\n      if (groupCount1.groupValue == null) {\n        if (groupCount2.groupValue == null) {\n          return 0;\n        }\n        return -1;\n      } else if (groupCount2.groupValue == null) {\n        return 1;\n      } else {\n        return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n      }\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>, Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> cmp = (groupCount1, groupCount2) -> {\n      if (groupCount1.groupValue == null) {\n        if (groupCount2.groupValue == null) {\n          return 0;\n        }\n        return -1;\n      } else if (groupCount2.groupValue == null) {\n        return 1;\n      } else {\n        return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n      }\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>, Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    Random random = random();\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random,\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    Document doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"1\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 1\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 2\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"1\");\n    addField(doc, COUNT_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some more random textual data\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"3\", Field.Store.NO));\n    w.addDocument(doc);\n    w.commit(); // To ensure a second segment\n\n    // 3 -- no count field\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"2\");\n    doc.add(new TextField(\"content\", \"some random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"4\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 4\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"some more random text\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"5\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 5\n    doc = new Document();\n    addField(doc, GROUP_FIELD, \"3\");\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new TextField(\"content\", \"random blob\", Field.Store.NO));\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // 6 -- no author field\n    doc = new Document();\n    doc.add(new TextField(\"content\", \"random word stuck in alot of other text\", Field.Store.YES));\n    addField(doc, COUNT_FIELD, \"1\");\n    doc.add(new StringField(\"id\", \"6\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexSearcher indexSearcher = newSearcher(w.getReader());\n    w.close();\n\n    Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>> cmp = new Comparator<DistinctValuesCollector.GroupCount<Comparable<Object>>>() {\n\n      @Override\n      public int compare(DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount1, DistinctValuesCollector.GroupCount<Comparable<Object>> groupCount2) {\n        if (groupCount1.groupValue == null) {\n          if (groupCount2.groupValue == null) {\n            return 0;\n          }\n          return -1;\n        } else if (groupCount2.groupValue == null) {\n          return 1;\n        } else {\n          return groupCount1.groupValue.compareTo(groupCount2.groupValue);\n        }\n      }\n\n    };\n\n    // === Search for content:random\n    FirstPassGroupingCollector<Comparable<Object>> firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), firstCollector);\n    DistinctValuesCollector<Comparable<Object>> distinctValuesCollector\n        = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"random\")), distinctValuesCollector);\n\n    List<DistinctValuesCollector.GroupCount<Comparable<Object>>> gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(4, gcs.size());\n\n    compareNull(gcs.get(0).groupValue);\n    List<Comparable<?>> countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"1\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    Collections.sort(countValues, nullComparator);\n    assertEquals(2, countValues.size());\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(3).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(3).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    // === Search for content:some\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"some\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(3, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    assertEquals(2, countValues.size());\n    Collections.sort(countValues, nullComparator);\n    compare(\"1\", countValues.get(0));\n    compare(\"2\", countValues.get(1));\n\n    compare(\"2\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compareNull(countValues.get(0));\n\n    compare(\"3\", gcs.get(2).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(2).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n     // === Search for content:blob\n    firstCollector = createRandomFirstPassCollector(new Sort(), GROUP_FIELD, 10);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), firstCollector);\n    distinctValuesCollector = createDistinctCountCollector(firstCollector, GROUP_FIELD, COUNT_FIELD);\n    indexSearcher.search(new TermQuery(new Term(\"content\", \"blob\")), distinctValuesCollector);\n\n    gcs = distinctValuesCollector.getGroups();\n    Collections.sort(gcs, cmp);\n    assertEquals(2, gcs.size());\n\n    compare(\"1\", gcs.get(0).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(0).uniqueValues);\n    // B/c the only one document matched with blob inside the author 1 group\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    compare(\"3\", gcs.get(1).groupValue);\n    countValues = new ArrayList<Comparable<?>>(gcs.get(1).uniqueValues);\n    assertEquals(1, countValues.size());\n    compare(\"1\", countValues.get(0));\n\n    indexSearcher.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["04f07771a2a7dd3a395700665ed839c3dae2def2","7530de27b87b961b51f01bd1299b7004d46e8823"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6f20fd35e3055a0c5b387df0b986a68d65d86441"],"5de502b5478255493125e7e801411ba17a6682ec":["20e94e61fe5291647346b70437617e6b6c370408"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"20e94e61fe5291647346b70437617e6b6c370408":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"652059ecdc1285b15d7c22489eacd661e905ef72":["0837ab0472feecb3a54260729d845f839e1cbd72"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["20e94e61fe5291647346b70437617e6b6c370408"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["d0ef034a4f10871667ae75181537775ddcf8ade4","20e94e61fe5291647346b70437617e6b6c370408"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d1c58e9d1ed4b363d0b00ad5209e1b01c418347":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","652059ecdc1285b15d7c22489eacd661e905ef72"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","d7d9cc55f861840a92a2bda7a9985ec2e2485902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d7d9cc55f861840a92a2bda7a9985ec2e2485902":["6d1c58e9d1ed4b363d0b00ad5209e1b01c418347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["5de502b5478255493125e7e801411ba17a6682ec"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["0837ab0472feecb3a54260729d845f839e1cbd72"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"5de502b5478255493125e7e801411ba17a6682ec":["7ae958a739da1866696f442384393ba2f13e33e5"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"20e94e61fe5291647346b70437617e6b6c370408":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"652059ecdc1285b15d7c22489eacd661e905ef72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"6d1c58e9d1ed4b363d0b00ad5209e1b01c418347":["d7d9cc55f861840a92a2bda7a9985ec2e2485902"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"0837ab0472feecb3a54260729d845f839e1cbd72":["652059ecdc1285b15d7c22489eacd661e905ef72"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["56572ec06f1407c066d6b7399413178b33176cd8","6d1c58e9d1ed4b363d0b00ad5209e1b01c418347","93dd449115a9247533e44bab47e8429e5dccbc6d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"d7d9cc55f861840a92a2bda7a9985ec2e2485902":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}