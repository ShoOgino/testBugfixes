{"path":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","commits":[{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Add this text into the set */\n  public void add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;i++)\n        text[i] = Character.toLowerCase(text[i]);\n    int code = getHashCode(text, text.length);\n    int pos = code & mask;\n    char[] text2 = entries[pos];\n    if (text2 != null) {\n      final int inc = code*1347|1;\n      do {\n        code += inc;\n        pos = code & mask;\n        text2 = entries[pos];\n      } while (text2 != null);\n    }\n    entries[pos] = text;\n    count++;\n\n    if (((double) count)/entries.length > MAX_LOAD_FACTOR) {\n      rehash();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95fcbec956d64aff326919be88d27ba5b60c046e","date":1187017143,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","sourceNew":"  /** Add this text into the set */\n  public void add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;i++)\n        text[i] = Character.toLowerCase(text[i]);\n    int code = getHashCode(text, text.length);\n    int pos = code & mask;\n    char[] text2 = entries[pos];\n    if (text2 != null) {\n      final int inc = ((code>>8)+code)|1;\n      do {\n        code += inc;\n        pos = code & mask;\n        text2 = entries[pos];\n      } while (text2 != null);\n    }\n    entries[pos] = text;\n    count++;\n\n    if (((double) count)/entries.length > MAX_LOAD_FACTOR) {\n      rehash();\n    }\n  }\n\n","sourceOld":"  /** Add this text into the set */\n  public void add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;i++)\n        text[i] = Character.toLowerCase(text[i]);\n    int code = getHashCode(text, text.length);\n    int pos = code & mask;\n    char[] text2 = entries[pos];\n    if (text2 != null) {\n      final int inc = code*1347|1;\n      do {\n        code += inc;\n        pos = code & mask;\n        text2 = entries[pos];\n      } while (text2 != null);\n    }\n    entries[pos] = text;\n    count++;\n\n    if (((double) count)/entries.length > MAX_LOAD_FACTOR) {\n      rehash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"050b03edbe9b8423ff4c09685c6f03d900e86b83","date":1195514584,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","sourceNew":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;i++)\n        text[i] = Character.toLowerCase(text[i]);\n    int slot = getSlot(text, 0, text.length);\n    if (entries[slot] != null) return false;\n    entries[slot] = text;\n    count++;\n\n    if (count > entries.length + (entries.length>>2) ) {\n      rehash();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Add this text into the set */\n  public void add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;i++)\n        text[i] = Character.toLowerCase(text[i]);\n    int code = getHashCode(text, text.length);\n    int pos = code & mask;\n    char[] text2 = entries[pos];\n    if (text2 != null) {\n      final int inc = ((code>>8)+code)|1;\n      do {\n        code += inc;\n        pos = code & mask;\n        text2 = entries[pos];\n      } while (text2 != null);\n    }\n    entries[pos] = text;\n    count++;\n\n    if (((double) count)/entries.length > MAX_LOAD_FACTOR) {\n      rehash();\n    }\n  }\n\n","bugFix":null,"bugIntro":["a641490b95646f21afda39cc9998d6bbd89187d5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a641490b95646f21afda39cc9998d6bbd89187d5","date":1195568590,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","sourceNew":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;i++)\n        text[i] = Character.toLowerCase(text[i]);\n    int slot = getSlot(text, 0, text.length);\n    if (entries[slot] != null) return false;\n    entries[slot] = text;\n    count++;\n\n    if (count + (count>>2) > entries.length) {\n      rehash();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;i++)\n        text[i] = Character.toLowerCase(text[i]);\n    int slot = getSlot(text, 0, text.length);\n    if (entries[slot] != null) return false;\n    entries[slot] = text;\n    count++;\n\n    if (count > entries.length + (entries.length>>2) ) {\n      rehash();\n    }\n\n    return true;\n  }\n\n","bugFix":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","sourceNew":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;){\n        i += Character.toChars(\n              Character.toLowerCase(\n                  charUtils.codePointAt(text, i)), text, i);\n      }\n    int slot = getSlot(text, 0, text.length);\n    if (entries[slot] != null) return false;\n    entries[slot] = text;\n    count++;\n\n    if (count + (count>>2) > entries.length) {\n      rehash();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;i++)\n        text[i] = Character.toLowerCase(text[i]);\n    int slot = getSlot(text, 0, text.length);\n    if (entries[slot] != null) return false;\n    entries[slot] = text;\n    count++;\n\n    if (count + (count>>2) > entries.length) {\n      rehash();\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","sourceNew":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    return map.put(text, PLACEHOLDER) == null;\n  }\n\n","sourceOld":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    if (ignoreCase)\n      for(int i=0;i<text.length;){\n        i += Character.toChars(\n              Character.toLowerCase(\n                  charUtils.codePointAt(text, i)), text, i);\n      }\n    int slot = getSlot(text, 0, text.length);\n    if (entries[slot] != null) return false;\n    entries[slot] = text;\n    count++;\n\n    if (count + (count>>2) > entries.length) {\n      rehash();\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","pathOld":"src/java/org/apache/lucene/analysis/CharArraySet#add(char[]).mjava","sourceNew":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    return map.put(text, PLACEHOLDER) == null;\n  }\n\n","sourceOld":"  /** Add this char[] directly to the set.\n   * If ignoreCase is true for this Set, the text array will be directly modified.\n   * The user should never modify this text array after calling this method.\n   */\n  public boolean add(char[] text) {\n    return map.put(text, PLACEHOLDER) == null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95fcbec956d64aff326919be88d27ba5b60c046e":["6864413dbc0c12104c978c05456f3da1d45adb03"],"6864413dbc0c12104c978c05456f3da1d45adb03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c09067bd60a59f680992d62794689898c0148ac":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a641490b95646f21afda39cc9998d6bbd89187d5":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["95fcbec956d64aff326919be88d27ba5b60c046e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3c09067bd60a59f680992d62794689898c0148ac"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["a641490b95646f21afda39cc9998d6bbd89187d5"]},"commit2Childs":{"95fcbec956d64aff326919be88d27ba5b60c046e":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"6864413dbc0c12104c978c05456f3da1d45adb03":["95fcbec956d64aff326919be88d27ba5b60c046e"],"3c09067bd60a59f680992d62794689898c0148ac":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6864413dbc0c12104c978c05456f3da1d45adb03"],"a641490b95646f21afda39cc9998d6bbd89187d5":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["a641490b95646f21afda39cc9998d6bbd89187d5"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["3c09067bd60a59f680992d62794689898c0148ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}