{"path":"src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","commits":[{"id":"9a236d0a42282eae04d64b7a3cf43919e31191f4","date":1263680893,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws IOException {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(\n        new File(getClass().getResource(\"porterTestData.zip\").getFile()));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7810e7317b4490969777007fcc0b80ab89abf6d3","date":1263740135,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","sourceNew":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(\n        new File(getClass().getResource(\"porterTestData.zip\").toURI()));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","sourceOld":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws IOException {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(\n        new File(getClass().getResource(\"porterTestData.zip\").getFile()));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","sourceNew":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(getDataFile(\"porterTestData.zip\"));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","sourceOld":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(\n        new File(getClass().getResource(\"porterTestData.zip\").toURI()));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPorterStemFilter#testPorterStemFilter().mjava","sourceNew":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(getDataFile(\"porterTestData.zip\"));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","sourceOld":"  /**\n   * Run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  public void testPorterStemFilter() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenStream filter = new PorterStemFilter(tokenizer);   \n    ZipFile zipFile = new ZipFile(getDataFile(\"porterTestData.zip\"));\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(\"voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(\"output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { expectedWord });\n    }\n    vocReader.close();\n    outputReader.close();\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a236d0a42282eae04d64b7a3cf43919e31191f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d16275d75dfe0b780ed62df4c811d083187c71a":["7810e7317b4490969777007fcc0b80ab89abf6d3"],"7810e7317b4490969777007fcc0b80ab89abf6d3":["9a236d0a42282eae04d64b7a3cf43919e31191f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"]},"commit2Childs":{"9a236d0a42282eae04d64b7a3cf43919e31191f4":["7810e7317b4490969777007fcc0b80ab89abf6d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a236d0a42282eae04d64b7a3cf43919e31191f4"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7810e7317b4490969777007fcc0b80ab89abf6d3":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}