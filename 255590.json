{"path":"solr/src/java/org/apache/solr/search/function/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/DocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    IndexSearcher searcher = (IndexSearcher)context.get(\"searcher\");\n    int docfreq = searcher.docFreq(new Term(indexedField, indexedBytes));\n    return new ConstIntDocValues(docfreq, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220849f876de24a79f756f65b3eb045db59f63f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c220849f876de24a79f756f65b3eb045db59f63f","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c220849f876de24a79f756f65b3eb045db59f63f","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}