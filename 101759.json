{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,Membership...).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,Membership...).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean intersects(Plane plane, Membership... bounds)\n    {\n        // We look for an intersection with any of the exterior edges of the path.\n        // We also have to look for intersections with the cones described by the endpoints.\n        // Return \"true\" if any such intersections are found.\n\n        // For plane intersections, the basic idea is to come up with an equation of the line that is\n        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n        // any of the intersection points are within the bounds, then we've detected an intersection.\n        \n        for (SegmentEndpoint pathPoint : points) {\n            if (pathPoint.intersects(plane, bounds))\n                return true;\n        }\n        for (PathSegment pathSegment : segments) {\n            if (pathSegment.intersects(plane, bounds))\n                return true;\n        }\n\n        return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,Membership...).mjava","sourceNew":"    @Override\n    public boolean intersects(final Plane plane, final Membership... bounds)\n    {\n        // We look for an intersection with any of the exterior edges of the path.\n        // We also have to look for intersections with the cones described by the endpoints.\n        // Return \"true\" if any such intersections are found.\n\n        // For plane intersections, the basic idea is to come up with an equation of the line that is\n        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n        // any of the intersection points are within the bounds, then we've detected an intersection.\n        // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n        // But that's an edge case and we won't be optimizing for it.\n        \n        for (int i = 0; i < points.size(); i++) {\n            final SegmentEndpoint pathPoint = points.get(i);\n            Membership previousEndBound = null;\n            Membership nextStartBound = null;\n            if (i > 0)\n                previousEndBound = segments.get(i-1).invertedEndCutoffPlane;\n            if (i < segments.size())\n                nextStartBound = segments.get(i).invertedStartCutoffPlane;\n            if (pathPoint.intersects(plane, bounds, previousEndBound, nextStartBound)) {\n                return true;\n            }\n        }\n\n        for (PathSegment pathSegment : segments) {\n            if (pathSegment.intersects(plane, bounds)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean intersects(Plane plane, Membership... bounds)\n    {\n        // We look for an intersection with any of the exterior edges of the path.\n        // We also have to look for intersections with the cones described by the endpoints.\n        // Return \"true\" if any such intersections are found.\n\n        // For plane intersections, the basic idea is to come up with an equation of the line that is\n        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n        // any of the intersection points are within the bounds, then we've detected an intersection.\n        \n        for (SegmentEndpoint pathPoint : points) {\n            if (pathPoint.intersects(plane, bounds))\n                return true;\n        }\n        for (PathSegment pathSegment : segments) {\n            if (pathSegment.intersects(plane, bounds))\n                return true;\n        }\n\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,GeoPoint[],Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#intersects(Plane,Membership...).mjava","sourceNew":"    @Override\n    public boolean intersects(final Plane plane, final GeoPoint[] notablePoints, final Membership... bounds)\n    {\n        // We look for an intersection with any of the exterior edges of the path.\n        // We also have to look for intersections with the cones described by the endpoints.\n        // Return \"true\" if any such intersections are found.\n\n        // For plane intersections, the basic idea is to come up with an equation of the line that is\n        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n        // any of the intersection points are within the bounds, then we've detected an intersection.\n        // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n        // But that's an edge case and we won't be optimizing for it.\n        \n        for (final SegmentEndpoint pathPoint : points) {\n            if (pathPoint.intersects(plane, notablePoints, bounds)) {\n                return true;\n            }\n        }\n\n        for (final PathSegment pathSegment : segments) {\n            if (pathSegment.intersects(plane, notablePoints, bounds)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean intersects(final Plane plane, final Membership... bounds)\n    {\n        // We look for an intersection with any of the exterior edges of the path.\n        // We also have to look for intersections with the cones described by the endpoints.\n        // Return \"true\" if any such intersections are found.\n\n        // For plane intersections, the basic idea is to come up with an equation of the line that is\n        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If\n        // any of the intersection points are within the bounds, then we've detected an intersection.\n        // Well, sort of.  We can detect intersections also due to overlap of segments with each other.\n        // But that's an edge case and we won't be optimizing for it.\n        \n        for (int i = 0; i < points.size(); i++) {\n            final SegmentEndpoint pathPoint = points.get(i);\n            Membership previousEndBound = null;\n            Membership nextStartBound = null;\n            if (i > 0)\n                previousEndBound = segments.get(i-1).invertedEndCutoffPlane;\n            if (i < segments.size())\n                nextStartBound = segments.get(i).invertedStartCutoffPlane;\n            if (pathPoint.intersects(plane, bounds, previousEndBound, nextStartBound)) {\n                return true;\n            }\n        }\n\n        for (PathSegment pathSegment : segments) {\n            if (pathSegment.intersects(plane, bounds)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["851e4197476b684154a7b65f996f535522e67400","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"851e4197476b684154a7b65f996f535522e67400":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}