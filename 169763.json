{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","commits":[{"id":"1c215be2eed9175b15dc0027a12e6f3a6ace25f8","date":1483848648,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","pathOld":"/dev/null","sourceNew":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(content, query, 9));\n    assertEquals( \"barely two sent\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(content, query, 10));\n    assertEquals(\"long goal\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(content, query, 17 + random().nextInt(20)));\n\n    // at some word not at start of passage\n    query = query(\"dd\");\n    assertEquals(\"short goal\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(content, query, random().nextInt(5)));\n    assertEquals(\"almost two sent\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(content, query, 10));\n    assertEquals(\"barely two sent\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(content, query, 11));\n    assertEquals(\"long goal\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(content, query, 12 + random().nextInt(20)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","pathOld":"/dev/null","sourceNew":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(content, query, 9));\n    assertEquals( \"barely two sent\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(content, query, 10));\n    assertEquals(\"long goal\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(content, query, 17 + random().nextInt(20)));\n\n    // at some word not at start of passage\n    query = query(\"dd\");\n    assertEquals(\"short goal\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(content, query, random().nextInt(5)));\n    assertEquals(\"almost two sent\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(content, query, 10));\n    assertEquals(\"barely two sent\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(content, query, 11));\n    assertEquals(\"long goal\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(content, query, 12 + random().nextInt(20)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","sourceNew":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 9));\n    assertEquals( \"barely two sent\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(CONTENT, query, 10));\n    assertEquals(\"long goal\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20)));\n\n    // at some word not at start of passage\n    query = query(\"dd\");\n    assertEquals(\"short goal\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, random().nextInt(5)));\n    assertEquals(\"almost two sent\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, 10));\n    assertEquals(\"barely two sent\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 11));\n    assertEquals(\"long goal\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 12 + random().nextInt(20)));\n  }\n\n","sourceOld":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(content, query, 9));\n    assertEquals( \"barely two sent\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(content, query, 10));\n    assertEquals(\"long goal\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(content, query, 17 + random().nextInt(20)));\n\n    // at some word not at start of passage\n    query = query(\"dd\");\n    assertEquals(\"short goal\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(content, query, random().nextInt(5)));\n    assertEquals(\"almost two sent\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(content, query, 10));\n    assertEquals(\"barely two sent\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(content, query, 11));\n    assertEquals(\"long goal\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(content, query, 12 + random().nextInt(20)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","sourceNew":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 9));\n    assertEquals( \"barely two sent\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(CONTENT, query, 10));\n    assertEquals(\"long goal\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20)));\n\n    // at some word not at start of passage\n    query = query(\"dd\");\n    assertEquals(\"short goal\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, random().nextInt(5)));\n    assertEquals(\"almost two sent\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, 10));\n    assertEquals(\"barely two sent\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 11));\n    assertEquals(\"long goal\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 12 + random().nextInt(20)));\n  }\n\n","sourceOld":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(content, query, 9));\n    assertEquals( \"barely two sent\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(content, query, 10));\n    assertEquals(\"long goal\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(content, query, 17 + random().nextInt(20)));\n\n    // at some word not at start of passage\n    query = query(\"dd\");\n    assertEquals(\"short goal\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(content, query, random().nextInt(5)));\n    assertEquals(\"almost two sent\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(content, query, 10));\n    assertEquals(\"barely two sent\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(content, query, 11));\n    assertEquals(\"long goal\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(content, query, 12 + random().nextInt(20)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab9796b8ce55058e483d2f195ac9b1942fcf478","date":1577858220,"type":3,"author":"Nándor Mátravölgyi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","sourceNew":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent A\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 7, 0.f));\n    assertEquals(\"almost two sent B\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 15, 0.5f));\n    assertEquals(\"almost two sent C\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 64, 1.f));\n    assertEquals(\"barely two sent A\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(CONTENT, query, 8, 0.f));\n    assertEquals(\"barely two sent B\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(CONTENT, query, 16, 0.5f));\n    assertEquals(\"long goal A\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(CONTENT, query, 14 + random().nextInt(20), 0.f));\n    assertEquals(\"long goal B\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(CONTENT, query, 28 + random().nextInt(20), 0.5f));\n    // at some word not at start of passage\n    query = query(\"dd\");\n    for (float align : ALIGNS) {\n      // alignment is not meaningful if fragsize is shorter than or closer to match-fragment boundaries\n      assertEquals(\"short goal \" + align,\n          \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, random().nextInt(4), align));\n    }\n    // preceding/following inclusion by alignment parameter\n    assertEquals(\"barely two sent A\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 11, 0.f));\n    assertEquals(\"barely two sent B\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 11, 0.5f));\n    assertEquals(\"barely two sent C\",\n        \"Aa bb. Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, 11, 1.f));\n    assertEquals(\"long goal A\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 0.f));\n    assertEquals(\"long goal B\",\n        \"Aa bb. Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 0.5f));\n    assertEquals(\"long goal C\",\n        \"Aa bb. Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 1.f));\n\n    query = query(\"ddxyzee\");\n    assertEquals(\"test fragment search from the middle of the match; almost including\",\n        \"<b>ddxyzee</b> \", highlightClosestToLen(CONTENT3, query, 7, 0.5f, 1, ' '));\n    assertEquals(\"test fragment search from the middle of the match; barely including\",\n        \"bbcc <b>ddxyzee</b> ffgg \", highlightClosestToLen(CONTENT3, query, 14, 0.5f, 1, ' '));\n  }\n\n","sourceOld":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 9));\n    assertEquals( \"barely two sent\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(CONTENT, query, 10));\n    assertEquals(\"long goal\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20)));\n\n    // at some word not at start of passage\n    query = query(\"dd\");\n    assertEquals(\"short goal\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, random().nextInt(5)));\n    assertEquals(\"almost two sent\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, 10));\n    assertEquals(\"barely two sent\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 11));\n    assertEquals(\"long goal\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 12 + random().nextInt(20)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testTargetLen().mjava","sourceNew":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent A\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 7, 0.f));\n    assertEquals(\"almost two sent B\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 15, 0.5f));\n    assertEquals(\"almost two sent C\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 64, 1.f));\n    assertEquals(\"barely two sent A\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(CONTENT, query, 8, 0.f));\n    assertEquals(\"barely two sent B\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(CONTENT, query, 16, 0.5f));\n    assertEquals(\"long goal A\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(CONTENT, query, 14 + random().nextInt(20), 0.f));\n    assertEquals(\"long goal B\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(CONTENT, query, 28 + random().nextInt(20), 0.5f));\n    // at some word not at start of passage\n    query = query(\"dd\");\n    for (float align : ALIGNS) {\n      // alignment is not meaningful if fragsize is shorter than or closer to match-fragment boundaries\n      assertEquals(\"short goal \" + align,\n          \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, random().nextInt(4), align));\n    }\n    // preceding/following inclusion by alignment parameter\n    assertEquals(\"barely two sent A\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 11, 0.f));\n    assertEquals(\"barely two sent B\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 11, 0.5f));\n    assertEquals(\"barely two sent C\",\n        \"Aa bb. Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, 11, 1.f));\n    assertEquals(\"long goal A\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 0.f));\n    assertEquals(\"long goal B\",\n        \"Aa bb. Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 0.5f));\n    assertEquals(\"long goal C\",\n        \"Aa bb. Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20), 1.f));\n\n    query = query(\"ddxyzee\");\n    assertEquals(\"test fragment search from the middle of the match; almost including\",\n        \"<b>ddxyzee</b> \", highlightClosestToLen(CONTENT3, query, 7, 0.5f, 1, ' '));\n    assertEquals(\"test fragment search from the middle of the match; barely including\",\n        \"bbcc <b>ddxyzee</b> ffgg \", highlightClosestToLen(CONTENT3, query, 14, 0.5f, 1, ' '));\n  }\n\n","sourceOld":"  public void testTargetLen() throws IOException {\n    // \"goal\" means target length goal to find closest break\n\n    // at first word:\n    Query query = query(\"aa\");\n    assertEquals(\"almost two sent\",\n        \"<b>Aa</b> bb.\", highlightClosestToLen(CONTENT, query, 9));\n    assertEquals( \"barely two sent\",\n        \"<b>Aa</b> bb. Cc dd.\", highlightClosestToLen(CONTENT, query, 10));\n    assertEquals(\"long goal\",\n        \"<b>Aa</b> bb. Cc dd. Ee ff\", highlightClosestToLen(CONTENT, query, 17 + random().nextInt(20)));\n\n    // at some word not at start of passage\n    query = query(\"dd\");\n    assertEquals(\"short goal\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, random().nextInt(5)));\n    assertEquals(\"almost two sent\",\n        \" Cc <b>dd</b>.\", highlightClosestToLen(CONTENT, query, 10));\n    assertEquals(\"barely two sent\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 11));\n    assertEquals(\"long goal\",\n        \" Cc <b>dd</b>. Ee ff\", highlightClosestToLen(CONTENT, query, 12 + random().nextInt(20)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["5de502b5478255493125e7e801411ba17a6682ec"],"5de502b5478255493125e7e801411ba17a6682ec":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":["5de502b5478255493125e7e801411ba17a6682ec","9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"1c215be2eed9175b15dc0027a12e6f3a6ace25f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c215be2eed9175b15dc0027a12e6f3a6ace25f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ab9796b8ce55058e483d2f195ac9b1942fcf478"]},"commit2Childs":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5de502b5478255493125e7e801411ba17a6682ec":["9ab9796b8ce55058e483d2f195ac9b1942fcf478","c606b777c4250f3f3f6f66d659c7c4c403679b71"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"1c215be2eed9175b15dc0027a12e6f3a6ace25f8":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c215be2eed9175b15dc0027a12e6f3a6ace25f8","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","6f20fd35e3055a0c5b387df0b986a68d65d86441","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}