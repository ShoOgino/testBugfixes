{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9cef9edf6786c51f767f53339f5be3ccb5e1a491","a6378064655e76cd7b908b1cab4ce425b384b508","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdcfaad06285c26ba5a59613dcb29870585850f0","date":1327533997,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cac1842fc0bca2ff75e452bf1f6075aaabc9485d","date":1329433480,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      SolrCore core = null;\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#runLeaderProcess(String,boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement, SolrCore startupCore)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        // the first time we are run, we will get a startupCore - after\n        // we will get null and must use cc.getCore\n        if (startupCore == null) {\n          core = cc.getCore(coreName);\n        } else {\n          core = startupCore;\n        }\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null && startupCore == null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement, startupCore);\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement)\n      throws KeeperException, InterruptedException, IOException {\n    if (cc != null) {\n      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);\n      SolrCore core = null;\n      try {\n        core = cc.getCore(coreName);\n        if (core == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Core not found:\" + coreName);\n        }\n        // should I be leader?\n        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {\n          // System.out.println(\"there is a better leader candidate it appears\");\n          rejoinLeaderElection(leaderSeqPath, core);\n          return;\n        }\n        \n        if (weAreReplacement) {\n          if (zkClient.exists(leaderPath, true)) {\n            zkClient.delete(leaderPath, -1, true);\n          }\n//          System.out.println(\"I may be the new Leader:\" + leaderPath\n//              + \" - I need to try and sync\");\n          boolean success = syncStrategy.sync(zkController, core, leaderProps);\n          if (!success) {\n            // TODO: what if no one can be the leader in a loop?\n            // perhaps we look down the list and if no one is active, we\n            // accept leader role anyhow\n            core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n            \n            rejoinLeaderElection(leaderSeqPath, core);\n            return;\n          } \n        }\n        \n        // If I am going to be the leader I have to be active\n        \n        core.getUpdateHandler().getSolrCoreState().cancelRecovery();\n        zkController.publish(core, ZkStateReader.ACTIVE);\n        \n      } finally {\n        if (core != null) {\n          core.close();\n        }\n      }\n      \n    }\n    \n    super.runLeaderProcess(leaderSeqPath, weAreReplacement);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","fdcfaad06285c26ba5a59613dcb29870585850f0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdcfaad06285c26ba5a59613dcb29870585850f0":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","fdcfaad06285c26ba5a59613dcb29870585850f0"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cac1842fc0bca2ff75e452bf1f6075aaabc9485d":["fdcfaad06285c26ba5a59613dcb29870585850f0"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["cac1842fc0bca2ff75e452bf1f6075aaabc9485d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a80994db3380cd78c6f65b84515e2e931b6b3da"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fdcfaad06285c26ba5a59613dcb29870585850f0":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","cac1842fc0bca2ff75e452bf1f6075aaabc9485d"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","fdcfaad06285c26ba5a59613dcb29870585850f0","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cac1842fc0bca2ff75e452bf1f6075aaabc9485d":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}