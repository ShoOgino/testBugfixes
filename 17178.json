{"path":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","commits":[{"id":"d04b321158481d3895702b3cbf6821a3083e6c15","date":1120530543,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","pathOld":"/dev/null","sourceNew":"  public SpanQuery makeSpanNearClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = (SpanQuery) sqi.next();\n      sq.setBoost(((Float)weightBySpanQuery.get(sq)).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    /* CHECKME: Does the underlying implementation of SpanQuery need sorting? */\n    if (false) /* true when sorting needed */\n      Arrays.sort(spanQueries, new Comparator() { \n        public int compare(Object o1, Object o2) {\n          SpanQuery sq1 = (SpanQuery) o1;\n          SpanQuery sq2 = (SpanQuery) o2;\n          /* compare the text of the first term of each SpanQuery */\n          return  ((Term)sq1.getTerms().iterator().next()).text().compareTo(\n                  ((Term)sq2.getTerms().iterator().next()).text());\n        }\n        public boolean equals(Object o) {return false;}\n      });\n       \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0cfdc7b4a89aacd76fec3a10c278e6d4f314b4","date":1144266930,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","sourceNew":"  public SpanQuery makeSpanNearClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = (SpanQuery) sqi.next();\n      sq.setBoost(((Float)weightBySpanQuery.get(sq)).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","sourceOld":"  public SpanQuery makeSpanNearClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = (SpanQuery) sqi.next();\n      sq.setBoost(((Float)weightBySpanQuery.get(sq)).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    /* CHECKME: Does the underlying implementation of SpanQuery need sorting? */\n    if (false) /* true when sorting needed */\n      Arrays.sort(spanQueries, new Comparator() { \n        public int compare(Object o1, Object o2) {\n          SpanQuery sq1 = (SpanQuery) o1;\n          SpanQuery sq2 = (SpanQuery) o2;\n          /* compare the text of the first term of each SpanQuery */\n          return  ((Term)sq1.getTerms().iterator().next()).text().compareTo(\n                  ((Term)sq2.getTerms().iterator().next()).text());\n        }\n        public boolean equals(Object o) {return false;}\n      });\n       \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","sourceNew":"  public SpanQuery makeSpanNearClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = sqi.next();\n      sq.setBoost(weightBySpanQuery.get(sq).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","sourceOld":"  public SpanQuery makeSpanNearClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = (SpanQuery) sqi.next();\n      sq.setBoost(((Float)weightBySpanQuery.get(sq)).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","pathOld":"contrib/surround/src/java/org/apache/lucene/queryParser/surround/query/SpanNearClauseFactory#makeSpanNearClause().mjava","sourceNew":"  public SpanQuery makeSpanNearClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = sqi.next();\n      sq.setBoost(weightBySpanQuery.get(sq).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","sourceOld":"  public SpanQuery makeSpanNearClause() {\n    SpanQuery [] spanQueries = new SpanQuery[size()];\n    Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();\n    int i = 0;\n    while (sqi.hasNext()) {\n      SpanQuery sq = sqi.next();\n      sq.setBoost(weightBySpanQuery.get(sq).floatValue());\n      spanQueries[i++] = sq;\n    }\n    \n    if (spanQueries.length == 1)\n      return spanQueries[0];\n    else\n      return new SpanOrQuery(spanQueries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["5f0cfdc7b4a89aacd76fec3a10c278e6d4f314b4"],"d04b321158481d3895702b3cbf6821a3083e6c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f0cfdc7b4a89aacd76fec3a10c278e6d4f314b4":["d04b321158481d3895702b3cbf6821a3083e6c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d04b321158481d3895702b3cbf6821a3083e6c15":["5f0cfdc7b4a89aacd76fec3a10c278e6d4f314b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d04b321158481d3895702b3cbf6821a3083e6c15"],"5f0cfdc7b4a89aacd76fec3a10c278e6d4f314b4":["60cdc0e643184821eb066795a8791cd82559f46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}