{"path":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","commits":[{"id":"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03","date":1237412151,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleBinaryRoundTrip() {\n    byte[] binary = new byte[] \n      { (byte)0x23, (byte)0x98, (byte)0x13, (byte)0xE4, (byte)0x76, (byte)0x41,\n        (byte)0xB2, (byte)0xC9, (byte)0x7F, (byte)0x0A, (byte)0xA6, (byte)0xD8 };\n\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    CharBuffer encoded = IndexableBinaryStringTools.encode(binaryBuf);\n    ByteBuffer decoded = IndexableBinaryStringTools.decode(encoded);\n    assertEquals(\"Round trip decode/decode returned different results:\"\n                 + System.getProperty(\"line.separator\")\n                 + \"original: \" + binaryDump(binaryBuf)\n                 + System.getProperty(\"line.separator\")\n                 + \" encoded: \" + charArrayDump(encoded)\n                 + System.getProperty(\"line.separator\")\n                 + \" decoded: \" + binaryDump(decoded),\n                 binaryBuf, decoded);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb6255bc49ccd64debd0b43ca8d2f835df0faa07","date":1262510560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","sourceNew":"  public void testSingleBinaryRoundTrip() {\n    byte[] binary = new byte[] { (byte) 0x23, (byte) 0x98, (byte) 0x13,\n        (byte) 0xE4, (byte) 0x76, (byte) 0x41, (byte) 0xB2, (byte) 0xC9,\n        (byte) 0x7F, (byte) 0x0A, (byte) 0xA6, (byte) 0xD8 };\n\n    int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n        binary.length);\n    char encoded[] = new char[encodedLen];\n    IndexableBinaryStringTools.encode(binary, 0, binary.length, encoded, 0,\n        encoded.length);\n\n    int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n        encoded.length);\n    byte decoded[] = new byte[decodedLen];\n    IndexableBinaryStringTools.decode(encoded, 0, encoded.length, decoded, 0,\n        decoded.length);\n\n    assertEquals(\"Round trip decode/decode returned different results:\"\n        + System.getProperty(\"line.separator\") + \"original: \"\n        + binaryDump(binary, binary.length)\n        + System.getProperty(\"line.separator\") + \" encoded: \"\n        + charArrayDump(encoded, encoded.length)\n        + System.getProperty(\"line.separator\") + \" decoded: \"\n        + binaryDump(decoded, decoded.length),\n        binaryDump(binary, binary.length), binaryDump(decoded, decoded.length));\n  }\n\n","sourceOld":"  public void testSingleBinaryRoundTrip() {\n    byte[] binary = new byte[] \n      { (byte)0x23, (byte)0x98, (byte)0x13, (byte)0xE4, (byte)0x76, (byte)0x41,\n        (byte)0xB2, (byte)0xC9, (byte)0x7F, (byte)0x0A, (byte)0xA6, (byte)0xD8 };\n\n    ByteBuffer binaryBuf = ByteBuffer.wrap(binary);\n    CharBuffer encoded = IndexableBinaryStringTools.encode(binaryBuf);\n    ByteBuffer decoded = IndexableBinaryStringTools.decode(encoded);\n    assertEquals(\"Round trip decode/decode returned different results:\"\n                 + System.getProperty(\"line.separator\")\n                 + \"original: \" + binaryDump(binaryBuf)\n                 + System.getProperty(\"line.separator\")\n                 + \" encoded: \" + charArrayDump(encoded)\n                 + System.getProperty(\"line.separator\")\n                 + \" decoded: \" + binaryDump(decoded),\n                 binaryBuf, decoded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","pathOld":"src/test/org/apache/lucene/util/TestIndexableBinaryStringTools#testSingleBinaryRoundTrip().mjava","sourceNew":"  public void testSingleBinaryRoundTrip() {\n    byte[] binary = new byte[] { (byte) 0x23, (byte) 0x98, (byte) 0x13,\n        (byte) 0xE4, (byte) 0x76, (byte) 0x41, (byte) 0xB2, (byte) 0xC9,\n        (byte) 0x7F, (byte) 0x0A, (byte) 0xA6, (byte) 0xD8 };\n\n    int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n        binary.length);\n    char encoded[] = new char[encodedLen];\n    IndexableBinaryStringTools.encode(binary, 0, binary.length, encoded, 0,\n        encoded.length);\n\n    int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n        encoded.length);\n    byte decoded[] = new byte[decodedLen];\n    IndexableBinaryStringTools.decode(encoded, 0, encoded.length, decoded, 0,\n        decoded.length);\n\n    assertEquals(\"Round trip decode/decode returned different results:\"\n        + System.getProperty(\"line.separator\") + \"original: \"\n        + binaryDump(binary, binary.length)\n        + System.getProperty(\"line.separator\") + \" encoded: \"\n        + charArrayDump(encoded, encoded.length)\n        + System.getProperty(\"line.separator\") + \" decoded: \"\n        + binaryDump(decoded, decoded.length),\n        binaryDump(binary, binary.length), binaryDump(decoded, decoded.length));\n  }\n\n","sourceOld":"  public void testSingleBinaryRoundTrip() {\n    byte[] binary = new byte[] { (byte) 0x23, (byte) 0x98, (byte) 0x13,\n        (byte) 0xE4, (byte) 0x76, (byte) 0x41, (byte) 0xB2, (byte) 0xC9,\n        (byte) 0x7F, (byte) 0x0A, (byte) 0xA6, (byte) 0xD8 };\n\n    int encodedLen = IndexableBinaryStringTools.getEncodedLength(binary, 0,\n        binary.length);\n    char encoded[] = new char[encodedLen];\n    IndexableBinaryStringTools.encode(binary, 0, binary.length, encoded, 0,\n        encoded.length);\n\n    int decodedLen = IndexableBinaryStringTools.getDecodedLength(encoded, 0,\n        encoded.length);\n    byte decoded[] = new byte[decodedLen];\n    IndexableBinaryStringTools.decode(encoded, 0, encoded.length, decoded, 0,\n        decoded.length);\n\n    assertEquals(\"Round trip decode/decode returned different results:\"\n        + System.getProperty(\"line.separator\") + \"original: \"\n        + binaryDump(binary, binary.length)\n        + System.getProperty(\"line.separator\") + \" encoded: \"\n        + charArrayDump(encoded, encoded.length)\n        + System.getProperty(\"line.separator\") + \" decoded: \"\n        + binaryDump(decoded, decoded.length),\n        binaryDump(binary, binary.length), binaryDump(decoded, decoded.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["14f9435cf56ea1dc1185ffc60bcc94728ff9bf03"],"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"]},"commit2Childs":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"14f9435cf56ea1dc1185ffc60bcc94728ff9bf03":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14f9435cf56ea1dc1185ffc60bcc94728ff9bf03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}