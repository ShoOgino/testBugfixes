{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/TestSpanQueryParserSimpleSample#testBasicDemo().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/TestSpanQueryParserSimpleSample#testBasicDemo().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/spans/TestSpanQueryParserSimpleSample#testBasicDemo().mjava","sourceNew":"  public void testBasicDemo() throws Exception {\n    SyntaxParser queryParser = new StandardSyntaxParser();\n\n    // convert the CharSequence into a QueryNode tree\n    QueryNode queryTree = queryParser.parse(\"body:text\", null);\n\n    // create a config handler with a attribute used in\n    // UniqueFieldQueryNodeProcessor\n    QueryConfigHandler spanQueryConfigHandler = new SpansQueryConfigHandler();\n    spanQueryConfigHandler.set(SpansQueryConfigHandler.UNIQUE_FIELD, \"index\");\n\n    // set up the processor pipeline with the ConfigHandler\n    // and create the pipeline for this simple demo\n    QueryNodeProcessorPipeline spanProcessorPipeline = new QueryNodeProcessorPipeline(\n        spanQueryConfigHandler);\n    // @see SpansValidatorQueryNodeProcessor\n    spanProcessorPipeline.add(new SpansValidatorQueryNodeProcessor());\n    // @see UniqueFieldQueryNodeProcessor\n    spanProcessorPipeline.add(new UniqueFieldQueryNodeProcessor());\n\n    // print to show out the QueryNode tree before being processed\n    if (VERBOSE) System.out.println(queryTree);\n\n    // Process the QueryTree using our new Processors\n    queryTree = spanProcessorPipeline.process(queryTree);\n\n    // print to show out the QueryNode tree after being processed\n    if (VERBOSE) System.out.println(queryTree);\n\n    // create a instance off the Builder\n    SpansQueryTreeBuilder spansQueryTreeBuilder = new SpansQueryTreeBuilder();\n\n    // convert QueryNode tree to span query Objects\n    SpanQuery spanquery = spansQueryTreeBuilder.build(queryTree);\n\n    assertTrue(spanquery instanceof SpanTermQuery);\n    assertEquals(spanquery.toString(), \"index:text\");\n\n  }\n\n","sourceOld":"  public void testBasicDemo() throws Exception {\n    SyntaxParser queryParser = new StandardSyntaxParser();\n\n    // convert the CharSequence into a QueryNode tree\n    QueryNode queryTree = queryParser.parse(\"body:text\", null);\n\n    // create a config handler with a attribute used in\n    // UniqueFieldQueryNodeProcessor\n    QueryConfigHandler spanQueryConfigHandler = new SpansQueryConfigHandler();\n    spanQueryConfigHandler.set(SpansQueryConfigHandler.UNIQUE_FIELD, \"index\");\n\n    // set up the processor pipeline with the ConfigHandler\n    // and create the pipeline for this simple demo\n    QueryNodeProcessorPipeline spanProcessorPipeline = new QueryNodeProcessorPipeline(\n        spanQueryConfigHandler);\n    // @see SpansValidatorQueryNodeProcessor\n    spanProcessorPipeline.add(new SpansValidatorQueryNodeProcessor());\n    // @see UniqueFieldQueryNodeProcessor\n    spanProcessorPipeline.add(new UniqueFieldQueryNodeProcessor());\n\n    // print to show out the QueryNode tree before being processed\n    if (VERBOSE) System.out.println(queryTree);\n\n    // Process the QueryTree using our new Processors\n    queryTree = spanProcessorPipeline.process(queryTree);\n\n    // print to show out the QueryNode tree after being processed\n    if (VERBOSE) System.out.println(queryTree);\n\n    // create a instance off the Builder\n    SpansQueryTreeBuilder spansQueryTreeBuilder = new SpansQueryTreeBuilder();\n\n    // convert QueryNode tree to span query Objects\n    SpanQuery spanquery = spansQueryTreeBuilder.build(queryTree);\n\n    assertTrue(spanquery instanceof SpanTermQuery);\n    assertEquals(spanquery.toString(), \"index:text\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/TestSpanQueryParserSimpleSample#testBasicDemo().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/spans/TestSpanQueryParserSimpleSample#testBasicDemo().mjava","sourceNew":"  public void testBasicDemo() throws Exception {\n    SyntaxParser queryParser = new StandardSyntaxParser();\n\n    // convert the CharSequence into a QueryNode tree\n    QueryNode queryTree = queryParser.parse(\"body:text\", null);\n\n    // create a config handler with a attribute used in\n    // UniqueFieldQueryNodeProcessor\n    QueryConfigHandler spanQueryConfigHandler = new SpansQueryConfigHandler();\n    spanQueryConfigHandler.set(SpansQueryConfigHandler.UNIQUE_FIELD, \"index\");\n\n    // set up the processor pipeline with the ConfigHandler\n    // and create the pipeline for this simple demo\n    QueryNodeProcessorPipeline spanProcessorPipeline = new QueryNodeProcessorPipeline(\n        spanQueryConfigHandler);\n    // @see SpansValidatorQueryNodeProcessor\n    spanProcessorPipeline.add(new SpansValidatorQueryNodeProcessor());\n    // @see UniqueFieldQueryNodeProcessor\n    spanProcessorPipeline.add(new UniqueFieldQueryNodeProcessor());\n\n    // print to show out the QueryNode tree before being processed\n    if (VERBOSE) System.out.println(queryTree);\n\n    // Process the QueryTree using our new Processors\n    queryTree = spanProcessorPipeline.process(queryTree);\n\n    // print to show out the QueryNode tree after being processed\n    if (VERBOSE) System.out.println(queryTree);\n\n    // create a instance off the Builder\n    SpansQueryTreeBuilder spansQueryTreeBuilder = new SpansQueryTreeBuilder();\n\n    // convert QueryNode tree to span query Objects\n    SpanQuery spanquery = spansQueryTreeBuilder.build(queryTree);\n\n    assertTrue(spanquery instanceof SpanTermQuery);\n    assertEquals(spanquery.toString(), \"index:text\");\n\n  }\n\n","sourceOld":"  public void testBasicDemo() throws Exception {\n    SyntaxParser queryParser = new StandardSyntaxParser();\n\n    // convert the CharSequence into a QueryNode tree\n    QueryNode queryTree = queryParser.parse(\"body:text\", null);\n\n    // create a config handler with a attribute used in\n    // UniqueFieldQueryNodeProcessor\n    QueryConfigHandler spanQueryConfigHandler = new SpansQueryConfigHandler();\n    spanQueryConfigHandler.set(SpansQueryConfigHandler.UNIQUE_FIELD, \"index\");\n\n    // set up the processor pipeline with the ConfigHandler\n    // and create the pipeline for this simple demo\n    QueryNodeProcessorPipeline spanProcessorPipeline = new QueryNodeProcessorPipeline(\n        spanQueryConfigHandler);\n    // @see SpansValidatorQueryNodeProcessor\n    spanProcessorPipeline.add(new SpansValidatorQueryNodeProcessor());\n    // @see UniqueFieldQueryNodeProcessor\n    spanProcessorPipeline.add(new UniqueFieldQueryNodeProcessor());\n\n    // print to show out the QueryNode tree before being processed\n    if (VERBOSE) System.out.println(queryTree);\n\n    // Process the QueryTree using our new Processors\n    queryTree = spanProcessorPipeline.process(queryTree);\n\n    // print to show out the QueryNode tree after being processed\n    if (VERBOSE) System.out.println(queryTree);\n\n    // create a instance off the Builder\n    SpansQueryTreeBuilder spansQueryTreeBuilder = new SpansQueryTreeBuilder();\n\n    // convert QueryNode tree to span query Objects\n    SpanQuery spanquery = spansQueryTreeBuilder.build(queryTree);\n\n    assertTrue(spanquery instanceof SpanTermQuery);\n    assertEquals(spanquery.toString(), \"index:text\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}