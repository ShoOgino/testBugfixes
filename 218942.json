{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(double[],double[],int,int,Node,boolean).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(double[],double[],int,int,Node,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(Polygon,int,int,Node).mjava","sourceNew":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final double[] x, final double[] y, int index, int vertexIndex, final Node lastNode, boolean isGeo) {\n    final Node node = new Node(x, y, index, vertexIndex, isGeo);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.next;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","sourceOld":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final Polygon polygon, int index, int vertexIndex, final Node lastNode) {\n    final Node node = new Node(polygon, index, vertexIndex);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.next;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#insertNode(double[],double[],int,int,Node,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(double[],double[],int,int,Node,boolean).mjava","sourceNew":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final double[] x, final double[] y, int index, int vertexIndex, final Node lastNode, boolean isGeo) {\n    final Node node = new Node(x, y, index, vertexIndex, isGeo);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.next;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","sourceOld":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final double[] x, final double[] y, int index, int vertexIndex, final Node lastNode, boolean isGeo) {\n    final Node node = new Node(x, y, index, vertexIndex, isGeo);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.next;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}