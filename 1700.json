{"path":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testTruncatedFileThrowsCorruptIndexException().mjava","commits":[{"id":"34a1e1a1a2514cde835c2bf4371e3f561d13b3cd","date":1494952317,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testTruncatedFileThrowsCorruptIndexException().mjava","pathOld":"/dev/null","sourceNew":"  public void testTruncatedFileThrowsCorruptIndexException() throws IOException {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    CorruptIndexException e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.checksumEntireFile(input));\n    assertEquals(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource=RAMInputStream(name=file))\", e.getMessage());\n    e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.retrieveChecksum(input));\n    assertEquals(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource=RAMInputStream(name=file))\", e.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testTruncatedFileThrowsCorruptIndexException().mjava","pathOld":"/dev/null","sourceNew":"  public void testTruncatedFileThrowsCorruptIndexException() throws IOException {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    CorruptIndexException e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.checksumEntireFile(input));\n    assertEquals(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource=RAMInputStream(name=file))\", e.getMessage());\n    e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.retrieveChecksum(input));\n    assertEquals(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource=RAMInputStream(name=file))\", e.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testTruncatedFileThrowsCorruptIndexException().mjava","pathOld":"/dev/null","sourceNew":"  public void testTruncatedFileThrowsCorruptIndexException() throws IOException {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    CorruptIndexException e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.checksumEntireFile(input));\n    assertEquals(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource=RAMInputStream(name=file))\", e.getMessage());\n    e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.retrieveChecksum(input));\n    assertEquals(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource=RAMInputStream(name=file))\", e.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testTruncatedFileThrowsCorruptIndexException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testTruncatedFileThrowsCorruptIndexException().mjava","sourceNew":"  public void testTruncatedFileThrowsCorruptIndexException() throws IOException {\n    ByteBuffersDataOutput out = new ByteBuffersDataOutput();\n    IndexOutput output = new ByteBuffersIndexOutput(out, \"temp\", \"temp\");\n    output.close();\n\n    IndexInput input = new ByteBuffersIndexInput(out.toDataInput(), \"temp\");\n    \n    CorruptIndexException e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.checksumEntireFile(input));\n    assertTrue(e.getMessage(), e.getMessage().contains(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource\"));\n\n    e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.retrieveChecksum(input));\n    assertTrue(e.getMessage(), e.getMessage().contains(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource\"));\n  }\n\n","sourceOld":"  public void testTruncatedFileThrowsCorruptIndexException() throws IOException {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    CorruptIndexException e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.checksumEntireFile(input));\n    assertEquals(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource=RAMInputStream(name=file))\", e.getMessage());\n    e = expectThrows(CorruptIndexException.class,\n        () -> CodecUtil.retrieveChecksum(input));\n    assertEquals(\"misplaced codec footer (file truncated?): length=0 but footerLength==16 (resource=RAMInputStream(name=file))\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","34a1e1a1a2514cde835c2bf4371e3f561d13b3cd"],"34a1e1a1a2514cde835c2bf4371e3f561d13b3cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","34a1e1a1a2514cde835c2bf4371e3f561d13b3cd"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["e9017cf144952056066919f1ebc7897ff9bd71b1","409da428f28953cf35fddd5c9ff5c7e4f5439863"],"34a1e1a1a2514cde835c2bf4371e3f561d13b3cd":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}