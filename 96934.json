{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#cloneToNewSession(SolrCloudManager).mjava","commits":[{"id":"7b0249ced9c25c3b173d20c3ca74160b9eade78c","date":1591787635,"type":0,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#cloneToNewSession(SolrCloudManager).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Given a session (this one), creates a new one for placement simulations that retains all the relevant information,\n     * whether or not that info already made it to Zookeeper.\n     */\n    public Session cloneToNewSession(SolrCloudManager cloudManager) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      ClusterStateProvider clusterStateProvider = cloudManager.getClusterStateProvider();\n\n      List<String> nodes = new ArrayList<>(clusterStateProvider.getLiveNodes());\n\n      // Copy all collections from old session, even those not yet in ZK state\n      Set<String> collections = new HashSet<>(this.collections);\n\n      // (shallow) copy the expanded clauses\n      List<Clause> expandedClauses = new ArrayList<>(this.expandedClauses);\n\n      List<Row> matrix = new ArrayList<>(nodes.size());\n      Map<String, Row> copyNodes = new HashMap<>();\n      for (Row oldRow: this.matrix) {\n        copyNodes.put(oldRow.node, oldRow.copy());\n      }\n      for (String node : nodes) {\n        // Do we have a row for that node in this session? If yes, reuse without trying to fetch from cluster state (latest changes might not be there)\n        Row newRow = copyNodes.get(node);\n        if (newRow == null) {\n          // Dealing with a node that doesn't exist in this Session. Need to create related data from scratch.\n          // We pass null for the Session in purpose. The current (this) session in not the correct one for this Row.\n          // The correct session will be set when we build the new Session instance at the end of this method.\n          newRow = new Row(node, this.policy.getParams(), this.policy.getPerReplicaAttributes(), null, nodeStateProvider, cloudManager);\n          // Get info for collections on that node\n          Set<String> collectionsOnNewNode = nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet();\n          collections.addAll(collectionsOnNewNode);\n\n          // Adjust policies to take into account new collections\n          for (String collection : collectionsOnNewNode) {\n            // We pass this.policy but it is not modified so will not impact this session being cloned\n            addClausesForCollection(this.policy, expandedClauses, clusterStateProvider, collection);\n          }\n        }\n        matrix.add(newRow);\n      }\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      Collections.sort(expandedClauses);\n\n      Session newSession = new Session(nodes, cloudManager, matrix, collections, expandedClauses,\n          nodeStateProvider, this.policy, this.transaction);\n      newSession.applyRules();\n\n      return newSession;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#cloneToNewSession(SolrCloudManager).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#cloneToNewSession(SolrCloudManager).mjava","sourceNew":"    /**\n     * Given a session (this one), creates a new one for placement simulations that retains all the relevant information,\n     * whether or not that info already made it to Zookeeper.\n     */\n    public Session cloneToNewSession(SolrCloudManager cloudManager) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      ClusterStateProvider clusterStateProvider = cloudManager.getClusterStateProvider();\n\n      List<String> nodes = new ArrayList<>(clusterStateProvider.getLiveNodes());\n\n      // Copy all collections from old session, even those not yet in ZK state\n      Set<String> collections = new HashSet<>(this.collections);\n\n      // (shallow) copy the expanded clauses\n      List<Clause> expandedClauses = new ArrayList<>(this.expandedClauses);\n\n      List<Row> matrix = new ArrayList<>(nodes.size());\n      Map<String, Row> copyNodes = new HashMap<>();\n      for (Row oldRow: this.matrix) {\n        copyNodes.put(oldRow.node, oldRow.copy());\n      }\n      for (String node : nodes) {\n        // Do we have a row for that node in this session? If yes, reuse without trying to fetch from cluster state (latest changes might not be there)\n        Row newRow = copyNodes.get(node);\n        if (newRow == null) {\n          // Dealing with a node that doesn't exist in this Session. Need to create related data from scratch.\n          // We pass null for the Session in purpose. The current (this) session in not the correct one for this Row.\n          // The correct session will be set when we build the new Session instance at the end of this method.\n          newRow = new Row(node, this.policy.getParams(), this.policy.getPerReplicaAttributes(), null, nodeStateProvider, cloudManager);\n          // Get info for collections on that node\n          Set<String> collectionsOnNewNode = nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet();\n          collections.addAll(collectionsOnNewNode);\n\n          // Adjust policies to take into account new collections\n          for (String collection : collectionsOnNewNode) {\n            // We pass this.policy but it is not modified so will not impact this session being cloned\n            addClausesForCollection(this.policy, expandedClauses, clusterStateProvider, collection);\n          }\n        }\n        matrix.add(newRow);\n      }\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          @SuppressWarnings({\"unchecked\"})\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            @SuppressWarnings({\"unchecked\"})\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      Collections.sort(expandedClauses);\n\n      Session newSession = new Session(nodes, cloudManager, matrix, collections, expandedClauses,\n          nodeStateProvider, this.policy, this.transaction);\n      newSession.applyRules();\n\n      return newSession;\n    }\n\n","sourceOld":"    /**\n     * Given a session (this one), creates a new one for placement simulations that retains all the relevant information,\n     * whether or not that info already made it to Zookeeper.\n     */\n    public Session cloneToNewSession(SolrCloudManager cloudManager) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      ClusterStateProvider clusterStateProvider = cloudManager.getClusterStateProvider();\n\n      List<String> nodes = new ArrayList<>(clusterStateProvider.getLiveNodes());\n\n      // Copy all collections from old session, even those not yet in ZK state\n      Set<String> collections = new HashSet<>(this.collections);\n\n      // (shallow) copy the expanded clauses\n      List<Clause> expandedClauses = new ArrayList<>(this.expandedClauses);\n\n      List<Row> matrix = new ArrayList<>(nodes.size());\n      Map<String, Row> copyNodes = new HashMap<>();\n      for (Row oldRow: this.matrix) {\n        copyNodes.put(oldRow.node, oldRow.copy());\n      }\n      for (String node : nodes) {\n        // Do we have a row for that node in this session? If yes, reuse without trying to fetch from cluster state (latest changes might not be there)\n        Row newRow = copyNodes.get(node);\n        if (newRow == null) {\n          // Dealing with a node that doesn't exist in this Session. Need to create related data from scratch.\n          // We pass null for the Session in purpose. The current (this) session in not the correct one for this Row.\n          // The correct session will be set when we build the new Session instance at the end of this method.\n          newRow = new Row(node, this.policy.getParams(), this.policy.getPerReplicaAttributes(), null, nodeStateProvider, cloudManager);\n          // Get info for collections on that node\n          Set<String> collectionsOnNewNode = nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet();\n          collections.addAll(collectionsOnNewNode);\n\n          // Adjust policies to take into account new collections\n          for (String collection : collectionsOnNewNode) {\n            // We pass this.policy but it is not modified so will not impact this session being cloned\n            addClausesForCollection(this.policy, expandedClauses, clusterStateProvider, collection);\n          }\n        }\n        matrix.add(newRow);\n      }\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      Collections.sort(expandedClauses);\n\n      Session newSession = new Session(nodes, cloudManager, matrix, collections, expandedClauses,\n          nodeStateProvider, this.policy, this.transaction);\n      newSession.applyRules();\n\n      return newSession;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#cloneToNewSession(SolrCloudManager).mjava","sourceNew":null,"sourceOld":"    /**\n     * Given a session (this one), creates a new one for placement simulations that retains all the relevant information,\n     * whether or not that info already made it to Zookeeper.\n     */\n    public Session cloneToNewSession(SolrCloudManager cloudManager) {\n      NodeStateProvider nodeStateProvider = cloudManager.getNodeStateProvider();\n      ClusterStateProvider clusterStateProvider = cloudManager.getClusterStateProvider();\n\n      List<String> nodes = new ArrayList<>(clusterStateProvider.getLiveNodes());\n\n      // Copy all collections from old session, even those not yet in ZK state\n      Set<String> collections = new HashSet<>(this.collections);\n\n      // (shallow) copy the expanded clauses\n      List<Clause> expandedClauses = new ArrayList<>(this.expandedClauses);\n\n      List<Row> matrix = new ArrayList<>(nodes.size());\n      Map<String, Row> copyNodes = new HashMap<>();\n      for (Row oldRow: this.matrix) {\n        copyNodes.put(oldRow.node, oldRow.copy());\n      }\n      for (String node : nodes) {\n        // Do we have a row for that node in this session? If yes, reuse without trying to fetch from cluster state (latest changes might not be there)\n        Row newRow = copyNodes.get(node);\n        if (newRow == null) {\n          // Dealing with a node that doesn't exist in this Session. Need to create related data from scratch.\n          // We pass null for the Session in purpose. The current (this) session in not the correct one for this Row.\n          // The correct session will be set when we build the new Session instance at the end of this method.\n          newRow = new Row(node, this.policy.getParams(), this.policy.getPerReplicaAttributes(), null, nodeStateProvider, cloudManager);\n          // Get info for collections on that node\n          Set<String> collectionsOnNewNode = nodeStateProvider.getReplicaInfo(node, Collections.emptyList()).keySet();\n          collections.addAll(collectionsOnNewNode);\n\n          // Adjust policies to take into account new collections\n          for (String collection : collectionsOnNewNode) {\n            // We pass this.policy but it is not modified so will not impact this session being cloned\n            addClausesForCollection(this.policy, expandedClauses, clusterStateProvider, collection);\n          }\n        }\n        matrix.add(newRow);\n      }\n\n      if (nodes.size() > 0) {\n        //if any collection has 'withCollection' irrespective of the node, the NodeStateProvider returns a map value\n        Map<String, Object> vals = nodeStateProvider.getNodeValues(nodes.get(0), Collections.singleton(\"withCollection\"));\n        if (!vals.isEmpty() && vals.get(\"withCollection\") != null) {\n          @SuppressWarnings({\"unchecked\"})\n          Map<String, String> withCollMap = (Map<String, String>) vals.get(\"withCollection\");\n          if (!withCollMap.isEmpty()) {\n            @SuppressWarnings({\"unchecked\"})\n            Clause withCollClause = new Clause((Map<String,Object>)Utils.fromJSONString(\"{withCollection:'*' , node: '#ANY'}\") ,\n                new Condition(NODE.tagName, \"#ANY\", Operand.EQUAL, null, null),\n                new Condition(WITH_COLLECTION.tagName,\"*\" , Operand.EQUAL, null, null), true, null, false\n            );\n            expandedClauses.add(withCollClause);\n          }\n        }\n      }\n\n      Collections.sort(expandedClauses);\n\n      Session newSession = new Session(nodes, cloudManager, matrix, collections, expandedClauses,\n          nodeStateProvider, this.policy, this.transaction);\n      newSession.applyRules();\n\n      return newSession;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"7b0249ced9c25c3b173d20c3ca74160b9eade78c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b0249ced9c25c3b173d20c3ca74160b9eade78c"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"7b0249ced9c25c3b173d20c3ca74160b9eade78c":["527adea7ce767368d7317339023e18e39702132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}