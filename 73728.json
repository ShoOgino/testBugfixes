{"path":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","commits":[{"id":"153701bb378c0b9de64258596aed764ae5775910","date":1360430359,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      CoreDescriptor dcore1 = new CoreDescriptor(h.getCoreContainer(), \"split1\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore1.setDataDir(indexDir1.getAbsolutePath());\n      dcore1.setSchemaName(\"schema12.xml\");\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = new CoreDescriptor(h.getCoreContainer(), \"split2\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore2.setDataDir(indexDir2.getAbsolutePath());\n      dcore2.setSchemaName(\"schema12.xml\");\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a5cd9341c578f132de886964218bbefe52bdcd83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5cd9341c578f132de886964218bbefe52bdcd83","date":1368036656,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      CoreDescriptor dcore1 = new CoreDescriptor(h.getCoreContainer(), \"split1\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore1.setDataDir(indexDir1.getAbsolutePath());\n      dcore1.setSchemaName(\"schema12.xml\");\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = new CoreDescriptor(h.getCoreContainer(), \"split2\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore2.setDataDir(indexDir2.getAbsolutePath());\n      dcore2.setSchemaName(\"schema12.xml\");\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter());\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      CoreDescriptor dcore1 = new CoreDescriptor(h.getCoreContainer(), \"split1\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore1.setDataDir(indexDir1.getAbsolutePath());\n      dcore1.setSchemaName(\"schema12.xml\");\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = new CoreDescriptor(h.getCoreContainer(), \"split2\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore2.setDataDir(indexDir2.getAbsolutePath());\n      dcore2.setSchemaName(\"schema12.xml\");\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","bugFix":["153701bb378c0b9de64258596aed764ae5775910"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","date":1370818281,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      CoreDescriptor dcore1 = new CoreDescriptor(h.getCoreContainer(), \"split1\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore1.setDataDir(indexDir1.getAbsolutePath());\n      dcore1.setSchemaName(\"schema12.xml\");\n      \n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      \n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = new CoreDescriptor(h.getCoreContainer(), \"split2\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore2.setDataDir(indexDir2.getAbsolutePath());\n      dcore2.setSchemaName(\"schema12.xml\");\n      \n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter());\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      CoreDescriptor dcore1 = new CoreDescriptor(h.getCoreContainer(), \"split1\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore1.setDataDir(indexDir1.getAbsolutePath());\n      dcore1.setSchemaName(\"schema12.xml\");\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = new CoreDescriptor(h.getCoreContainer(), \"split2\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore2.setDataDir(indexDir2.getAbsolutePath());\n      dcore2.setSchemaName(\"schema12.xml\");\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter());\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter());\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      CoreDescriptor dcore1 = new CoreDescriptor(h.getCoreContainer(), \"split1\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore1.setDataDir(indexDir1.getAbsolutePath());\n      dcore1.setSchemaName(\"schema12.xml\");\n      \n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      \n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = new CoreDescriptor(h.getCoreContainer(), \"split2\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore2.setDataDir(indexDir2.getAbsolutePath());\n      dcore2.setSchemaName(\"schema12.xml\");\n      \n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter());\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter());\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      CoreDescriptor dcore1 = new CoreDescriptor(h.getCoreContainer(), \"split1\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore1.setDataDir(indexDir1.getAbsolutePath());\n      dcore1.setSchemaName(\"schema12.xml\");\n      \n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      \n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = new CoreDescriptor(h.getCoreContainer(), \"split2\", h.getCore().getCoreDescriptor().getInstanceDir());\n      dcore2.setDataDir(indexDir2.getAbsolutePath());\n      dcore2.setSchemaName(\"schema12.xml\");\n      \n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter());\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1816753738ff1f27f11b38030e83c0ded050b7a4","date":1380106089,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter());\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8b2974b783dfe1b0160f39e4de0315fa51adb","date":1382029739,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      core1 = h.getCoreContainer().create(dcore1);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      core2 = h.getCoreContainer().create(dcore2);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore1);\n      }\n      core1 = h.getCoreContainer().create(dcore1);\n      h.getCoreContainer().register(core1, false);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      if (h.getCoreContainer().getZkController() != null) {\n        h.getCoreContainer().preRegisterInZk(dcore2);\n      }\n      core2 = h.getCoreContainer().create(dcore2);\n      h.getCoreContainer().register(core2, false);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      core1 = h.getCoreContainer().create(dcore1);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      core2 = h.getCoreContainer().create(dcore2);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().unload(\"split2\");\n      h.getCoreContainer().unload(\"split1\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      core1 = h.getCoreContainer().create(dcore1);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      core2 = h.getCoreContainer().create(dcore2);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().remove(\"split2\");\n      h.getCoreContainer().remove(\"split1\");\n      if (core2 != null) core2.close();\n      if (core1 != null) core1.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n\n      core1 = h.getCoreContainer().create(\"split1\",\n          ImmutableMap.of(\"dataDir\", indexDir1.getAbsolutePath(), \"configSet\", \"minimal\"));\n      core2 = h.getCoreContainer().create(\"split2\",\n          ImmutableMap.of(\"dataDir\", indexDir2.getAbsolutePath(), \"configSet\", \"minimal\"));\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().unload(\"split2\");\n      h.getCoreContainer().unload(\"split1\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n      String instanceDir = h.getCore().getCoreDescriptor().getInstanceDir();\n\n      CoreDescriptor dcore1 = buildCoreDescriptor(h.getCoreContainer(), \"split1\", instanceDir)\n          .withDataDir(indexDir1.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      core1 = h.getCoreContainer().create(dcore1);\n\n      CoreDescriptor dcore2 = buildCoreDescriptor(h.getCoreContainer(), \"split2\", instanceDir)\n          .withDataDir(indexDir2.getAbsolutePath()).withSchema(\"schema12.xml\").build();\n      core2 = h.getCoreContainer().create(dcore2);\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().unload(\"split2\");\n      h.getCoreContainer().unload(\"split1\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n\n      core1 = h.getCoreContainer().create(\"split1\",\n          ImmutableMap.of(\"dataDir\", indexDir1.getAbsolutePath(), \"configSet\", \"minimal\"));\n      core2 = h.getCoreContainer().create(\"split2\",\n          ImmutableMap.of(\"dataDir\", indexDir2.getAbsolutePath(), \"configSet\", \"minimal\"));\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      @SuppressWarnings(\"resource\")\n      final EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      @SuppressWarnings(\"resource\")\n      final EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().unload(\"split2\");\n      h.getCoreContainer().unload(\"split1\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n\n      core1 = h.getCoreContainer().create(\"split1\",\n          ImmutableMap.of(\"dataDir\", indexDir1.getAbsolutePath(), \"configSet\", \"minimal\"));\n      core2 = h.getCoreContainer().create(\"split2\",\n          ImmutableMap.of(\"dataDir\", indexDir2.getAbsolutePath(), \"configSet\", \"minimal\"));\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().unload(\"split2\");\n      h.getCoreContainer().unload(\"split1\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitByCores().mjava","sourceNew":"  @Test\n  public void testSplitByCores() throws Exception {\n    doTestSplitByCores(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","sourceOld":"  @Test\n  public void testSplitByCores() throws Exception {\n    // add two docs\n    String id1 = \"dorothy\";\n    assertU(adoc(\"id\", id1));\n    String id2 = \"kansas\";\n    assertU(adoc(\"id\", id2));\n    assertU(commit());\n    assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n    List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n    SolrCore core1 = null, core2 = null;\n    try {\n\n      core1 = h.getCoreContainer().create(\"split1\",\n          ImmutableMap.of(\"dataDir\", indexDir1.getAbsolutePath(), \"configSet\", \"minimal\"));\n      core2 = h.getCoreContainer().create(\"split2\",\n          ImmutableMap.of(\"dataDir\", indexDir2.getAbsolutePath(), \"configSet\", \"minimal\"));\n\n      LocalSolrQueryRequest request = null;\n      try {\n        request = lrf.makeRequest(\"q\", \"dummy\");\n\n        SplitIndexCommand command = new SplitIndexCommand(request, null, Lists.newArrayList(core1, core2), ranges, new PlainIdRouter(), null, null);\n        new SolrIndexSplitter(command).split();\n      } finally {\n        if (request != null) request.close();\n      }\n      @SuppressWarnings(\"resource\")\n      final EmbeddedSolrServer server1 = new EmbeddedSolrServer(h.getCoreContainer(), \"split1\");\n      @SuppressWarnings(\"resource\")\n      final EmbeddedSolrServer server2 = new EmbeddedSolrServer(h.getCoreContainer(), \"split2\");\n      server1.commit(true, true);\n      server2.commit(true, true);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, server1.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should not be present in split index1\", 0, server1.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n      assertEquals(\"id:dorothy should not be present in split index2\", 0, server2.query(new SolrQuery(\"id:dorothy\")).getResults().getNumFound());\n      assertEquals(\"id:kansas should be present in split index2\", 1, server2.query(new SolrQuery(\"id:kansas\")).getResults().getNumFound());\n    } finally {\n      h.getCoreContainer().unload(\"split2\");\n      h.getCoreContainer().unload(\"split1\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbe8b2974b783dfe1b0160f39e4de0315fa51adb":["1816753738ff1f27f11b38030e83c0ded050b7a4"],"1816753738ff1f27f11b38030e83c0ded050b7a4":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["a5cd9341c578f132de886964218bbefe52bdcd83"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"a5cd9341c578f132de886964218bbefe52bdcd83":["153701bb378c0b9de64258596aed764ae5775910"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d629ca62e3b8ab6e29a127aebe213163d490413":["85032ab568b3f50eabd577aaa994ba197db93758"],"153701bb378c0b9de64258596aed764ae5775910":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"85032ab568b3f50eabd577aaa994ba197db93758":["fbe8b2974b783dfe1b0160f39e4de0315fa51adb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20c968c14aace7cf49843bf2c1fafc7fd3845659"]},"commit2Childs":{"fbe8b2974b783dfe1b0160f39e4de0315fa51adb":["85032ab568b3f50eabd577aaa994ba197db93758"],"1816753738ff1f27f11b38030e83c0ded050b7a4":["fbe8b2974b783dfe1b0160f39e4de0315fa51adb"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"a5cd9341c578f132de886964218bbefe52bdcd83":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["153701bb378c0b9de64258596aed764ae5775910"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"153701bb378c0b9de64258596aed764ae5775910":["a5cd9341c578f132de886964218bbefe52bdcd83"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["1816753738ff1f27f11b38030e83c0ded050b7a4","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"85032ab568b3f50eabd577aaa994ba197db93758":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}