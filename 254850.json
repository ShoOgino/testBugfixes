{"path":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#limitTest().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#limitTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void limitTest() throws Exception { \n\n    String longLimit = getFacetXML(response, \"lr\", \"fieldFacets\", \"long_ld\");\n    Collection<Double> lon = (ArrayList<Double>)xmlToList(longLimit, \"double\", \"mean\");\n    assertEquals(lon.size(),5);\n    String floatLimit = getFacetXML(response, \"lr\", \"fieldFacets\", \"float_fd\");\n    Collection<Double> flo = (ArrayList<Double>)xmlToList(floatLimit, \"double\", \"median\");\n    assertEquals(flo.size(),3);\n    String doubleLimit = getFacetXML(response, \"lr\", \"fieldFacets\", \"double_dd\");\n    Collection<Long> doub = (ArrayList<Long>)xmlToList(doubleLimit, \"long\", \"count\");\n    assertEquals(doub.size(),7);\n    String stringLimit = getFacetXML(response, \"lr\", \"fieldFacets\", \"string_sd\");   \n    Collection<Integer> string = (ArrayList<Integer>)xmlToList(stringLimit, \"int\", \"percentile_20\");\n    assertEquals(string.size(),1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c0586e0570de2261142e339891d57c0f36f45c6","date":1385565864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#limitTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#limitTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void limitTest() throws Exception { \n\n    Collection<Double> lon = getDoubleList(\"lr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),5);\n    Collection<Double> flo = getDoubleList(\"lr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    assertEquals(getRawResponse(), flo.size(),3);\n    Collection<Long> doub = getLongList(\"lr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    assertEquals(getRawResponse(), doub.size(),7);\n    Collection<Integer> string = getIntegerList(\"lr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    assertEquals(getRawResponse(), string.size(),1);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void limitTest() throws Exception { \n\n    String longLimit = getFacetXML(response, \"lr\", \"fieldFacets\", \"long_ld\");\n    Collection<Double> lon = (ArrayList<Double>)xmlToList(longLimit, \"double\", \"mean\");\n    assertEquals(lon.size(),5);\n    String floatLimit = getFacetXML(response, \"lr\", \"fieldFacets\", \"float_fd\");\n    Collection<Double> flo = (ArrayList<Double>)xmlToList(floatLimit, \"double\", \"median\");\n    assertEquals(flo.size(),3);\n    String doubleLimit = getFacetXML(response, \"lr\", \"fieldFacets\", \"double_dd\");\n    Collection<Long> doub = (ArrayList<Long>)xmlToList(doubleLimit, \"long\", \"count\");\n    assertEquals(doub.size(),7);\n    String stringLimit = getFacetXML(response, \"lr\", \"fieldFacets\", \"string_sd\");   \n    Collection<Integer> string = (ArrayList<Integer>)xmlToList(stringLimit, \"int\", \"percentile_20\");\n    assertEquals(string.size(),1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#limitTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void limitTest() throws Exception { \n\n    Collection<Double> lon = getDoubleList(\"lr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),5);\n    Collection<Double> flo = getDoubleList(\"lr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    assertEquals(getRawResponse(), flo.size(),3);\n    Collection<Long> doub = getLongList(\"lr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    assertEquals(getRawResponse(), doub.size(),7);\n    Collection<Integer> string = getIntegerList(\"lr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    assertEquals(getRawResponse(), string.size(),1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#limitTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetExtrasTest#limitTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void limitTest() throws Exception { \n\n    Collection<Double> lon = getDoubleList(\"lr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),5);\n    Collection<Double> flo = getDoubleList(\"lr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    assertEquals(getRawResponse(), flo.size(),3);\n    Collection<Long> doub = getLongList(\"lr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    assertEquals(getRawResponse(), doub.size(),7);\n    Collection<Integer> string = getIntegerList(\"lr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    assertEquals(getRawResponse(), string.size(),1);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void limitTest() throws Exception { \n\n    Collection<Double> lon = getDoubleList(\"lr\", \"fieldFacets\", \"long_ld\", \"double\", \"mean\");\n    assertEquals(getRawResponse(), lon.size(),5);\n    Collection<Double> flo = getDoubleList(\"lr\", \"fieldFacets\", \"float_fd\", \"double\", \"median\");\n    assertEquals(getRawResponse(), flo.size(),3);\n    Collection<Long> doub = getLongList(\"lr\", \"fieldFacets\", \"double_dd\", \"long\", \"count\");\n    assertEquals(getRawResponse(), doub.size(),7);\n    Collection<Integer> string = getIntegerList(\"lr\", \"fieldFacets\", \"string_sd\", \"int\", \"percentile_20\");\n    assertEquals(getRawResponse(), string.size(),1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c0586e0570de2261142e339891d57c0f36f45c6"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["1c0586e0570de2261142e339891d57c0f36f45c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"1c0586e0570de2261142e339891d57c0f36f45c6":["ff403346522eaa9de75403763e297e83a3ea585c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["1c0586e0570de2261142e339891d57c0f36f45c6"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c0586e0570de2261142e339891d57c0f36f45c6":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}