{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","pathOld":"/dev/null","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  context), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  context), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  context), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["4b103252dee6afa1b6d7a622c773d178788eb85a","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["4b103252dee6afa1b6d7a622c773d178788eb85a","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}