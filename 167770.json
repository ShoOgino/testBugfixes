{"path":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRandomAccessWrites().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRandomAccessWrites().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandomAccessWrites() throws IOException {\n    int i = 0;\n    try {\n      Set<String> names = new HashSet<String>();\n      for (; i< 10; i++) {\n        Directory fsDir = new RAMDirectory();\n        String name = getName();\n        System.out.println(\"Working on pass [\" + i  +\"] contains [\" + names.contains(name) + \"]\");\n        names.add(name);\n        createFile(name,fsDir,directory);\n        assertInputsEquals(name,fsDir,directory);\n        fsDir.close();\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Test failed on pass [\" + i + \"]\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fdbb2d7b07573c332489edac481964e5eea41990"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRandomAccessWrites().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandomAccessWrites() throws IOException {\n    int i = 0;\n    try {\n      Set<String> names = new HashSet<String>();\n      for (; i< 10; i++) {\n        Directory fsDir = new RAMDirectory();\n        String name = getName();\n        System.out.println(\"Working on pass [\" + i  +\"] contains [\" + names.contains(name) + \"]\");\n        names.add(name);\n        createFile(name,fsDir,directory);\n        assertInputsEquals(name,fsDir,directory);\n        fsDir.close();\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Test failed on pass [\" + i + \"]\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRandomAccessWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRandomAccessWrites().mjava","sourceNew":"  @Test\n  public void testRandomAccessWrites() throws IOException {\n    int i = 0;\n    try {\n      Set<String> names = new HashSet<>();\n      for (; i< 10; i++) {\n        Directory fsDir = new RAMDirectory();\n        String name = getName();\n        System.out.println(\"Working on pass [\" + i  +\"] contains [\" + names.contains(name) + \"]\");\n        names.add(name);\n        createFile(name,fsDir,directory);\n        assertInputsEquals(name,fsDir,directory);\n        fsDir.close();\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Test failed on pass [\" + i + \"]\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomAccessWrites() throws IOException {\n    int i = 0;\n    try {\n      Set<String> names = new HashSet<String>();\n      for (; i< 10; i++) {\n        Directory fsDir = new RAMDirectory();\n        String name = getName();\n        System.out.println(\"Working on pass [\" + i  +\"] contains [\" + names.contains(name) + \"]\");\n        names.add(name);\n        createFile(name,fsDir,directory);\n        assertInputsEquals(name,fsDir,directory);\n        fsDir.close();\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Test failed on pass [\" + i + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdbb2d7b07573c332489edac481964e5eea41990","date":1536340741,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRandomAccessWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRandomAccessWrites().mjava","sourceNew":"  @Test\n  public void testRandomAccessWrites() throws IOException {\n    int i = 0;\n    try {\n      Set<String> names = new HashSet<>();\n      for (; i< 10; i++) {\n        Directory fsDir = new ByteBuffersDirectory();\n        String name = getName();\n        System.out.println(\"Working on pass [\" + i  +\"] contains [\" + names.contains(name) + \"]\");\n        names.add(name);\n        createFile(name,fsDir,directory);\n        assertInputsEquals(name,fsDir,directory);\n        fsDir.close();\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Test failed on pass [\" + i + \"]\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomAccessWrites() throws IOException {\n    int i = 0;\n    try {\n      Set<String> names = new HashSet<>();\n      for (; i< 10; i++) {\n        Directory fsDir = new RAMDirectory();\n        String name = getName();\n        System.out.println(\"Working on pass [\" + i  +\"] contains [\" + names.contains(name) + \"]\");\n        names.add(name);\n        createFile(name,fsDir,directory);\n        assertInputsEquals(name,fsDir,directory);\n        fsDir.close();\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Test failed on pass [\" + i + \"]\");\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fdbb2d7b07573c332489edac481964e5eea41990":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fdbb2d7b07573c332489edac481964e5eea41990"]},"commit2Childs":{"fdbb2d7b07573c332489edac481964e5eea41990":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fdbb2d7b07573c332489edac481964e5eea41990"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}