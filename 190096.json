{"path":"lucene/contrib/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","commits":[{"id":"185d73416ce4b3eaac6886de46a0a95eafbb01da","date":1272892809,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertBreaksTo(BreakIterator iterator, String sourceText, String tokens[]) {\n    char text[] = sourceText.toCharArray();\n    CharArrayIterator ci = new CharArrayIterator();\n    ci.setText(text, 0, text.length);\n    iterator.setText(ci);\n    \n    for (int i = 0; i < tokens.length; i++) {\n      int start, end;\n      do {\n        start = iterator.current();\n        end = iterator.next();\n      } while (end != BreakIterator.DONE && !isWord(text, start, end));\n      assertTrue(start != BreakIterator.DONE);\n      assertTrue(end != BreakIterator.DONE);\n      assertEquals(tokens[i], new String(text, start, end - start));\n    }\n    \n    assertTrue(iterator.next() == BreakIterator.DONE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b441220ceb933f50f32318ab45acc05d5943f3aa","date":1274352360,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","pathOld":"lucene/contrib/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestLaoBreakIterator#assertBreaksTo(BreakIterator,String,String[]).mjava","sourceNew":"  private void assertBreaksTo(BreakIterator iterator, String sourceText, String tokens[]) {\n    char text[] = sourceText.toCharArray();\n    CharArrayIterator ci = new CharArrayIterator();\n    ci.setText(text, 0, text.length);\n    iterator.setText(ci);\n    \n    for (int i = 0; i < tokens.length; i++) {\n      int start, end;\n      do {\n        start = iterator.current();\n        end = iterator.next();\n      } while (end != BreakIterator.DONE && !isWord(text, start, end));\n      assertTrue(start != BreakIterator.DONE);\n      assertTrue(end != BreakIterator.DONE);\n      assertEquals(tokens[i], new String(text, start, end - start));\n    }\n    \n    assertTrue(iterator.next() == BreakIterator.DONE);\n  }\n\n","sourceOld":"  private void assertBreaksTo(BreakIterator iterator, String sourceText, String tokens[]) {\n    char text[] = sourceText.toCharArray();\n    CharArrayIterator ci = new CharArrayIterator();\n    ci.setText(text, 0, text.length);\n    iterator.setText(ci);\n    \n    for (int i = 0; i < tokens.length; i++) {\n      int start, end;\n      do {\n        start = iterator.current();\n        end = iterator.next();\n      } while (end != BreakIterator.DONE && !isWord(text, start, end));\n      assertTrue(start != BreakIterator.DONE);\n      assertTrue(end != BreakIterator.DONE);\n      assertEquals(tokens[i], new String(text, start, end - start));\n    }\n    \n    assertTrue(iterator.next() == BreakIterator.DONE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b441220ceb933f50f32318ab45acc05d5943f3aa":["185d73416ce4b3eaac6886de46a0a95eafbb01da"],"185d73416ce4b3eaac6886de46a0a95eafbb01da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b441220ceb933f50f32318ab45acc05d5943f3aa"]},"commit2Childs":{"b441220ceb933f50f32318ab45acc05d5943f3aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"185d73416ce4b3eaac6886de46a0a95eafbb01da":["b441220ceb933f50f32318ab45acc05d5943f3aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["185d73416ce4b3eaac6886de46a0a95eafbb01da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}