{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","commits":[{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore)\n      throws IOException {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      if (trackMaxScore) {\n        return new ScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new ScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new NonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param docsScoredInOrder\n   *          specifies whether documents are scored in doc Id order or not by\n   *          the given {@link Scorer} in {@link LeafCollector#setScorer(Scorer)}.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore,\n      boolean docsScoredInOrder)\n      throws IOException {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      if (docsScoredInOrder) {\n        if (trackMaxScore) {\n          return new ScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new ScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new NonScoringCollector(queue, numHits, fillFields);\n        }\n      } else {\n        if (trackMaxScore) {\n          return new OutOfOrderScoringMaxScoreCollector(queue, numHits, fillFields);\n        } else if (trackDocScores) {\n          return new OutOfOrderScoringNoMaxScoreCollector(queue, numHits, fillFields);\n        } else {\n          return new OutOfOrderNonScoringCollector(queue, numHits, fillFields);\n        }\n      }\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore)\n      throws IOException {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      if (trackMaxScore) {\n        return new ScoringMaxScoreCollector(sort, queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new ScoringNoMaxScoreCollector(sort, queue, numHits, fillFields);\n      } else {\n        return new NonScoringCollector(sort, queue, numHits, fillFields);\n      }\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore)\n      throws IOException {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      if (trackMaxScore) {\n        return new ScoringMaxScoreCollector(queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new ScoringNoMaxScoreCollector(queue, numHits, fillFields);\n      } else {\n        return new NonScoringCollector(queue, numHits, fillFields);\n      }\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","bugFix":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ef4d3aeb733ae886f562af3b735f50503926a12","date":1438854939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore)\n      throws IOException {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore)\n      throws IOException {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      if (trackMaxScore) {\n        return new ScoringMaxScoreCollector(sort, queue, numHits, fillFields);\n      } else if (trackDocScores) {\n        return new ScoringNoMaxScoreCollector(sort, queue, numHits, fillFields);\n      } else {\n        return new NonScoringCollector(sort, queue, numHits, fillFields);\n      }\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore)\n      throws IOException {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore)\n      throws IOException {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore, trackTotalHits);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore, trackTotalHits);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   *          <code>trackDocScores</code> to true as well.\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackTotalHits);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   * @param trackMaxScore\n   *          specifies whether the query's maxScore should be tracked and set\n   *          on the resulting {@link TopDocs}. Note that if set to false,\n   *          {@link TopDocs#getMaxScore()} returns Float.NaN. Setting this to\n   *          true affects performance as it incurs the score computation on\n   *          each result. Also, setting this true automatically sets\n   *          <code>trackDocScores</code> to true as well.\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackMaxScore, boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackMaxScore, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackMaxScore, trackTotalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   *          <code>trackDocScores</code> to true as well.\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackTotalHits);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector#create(Sort,int,FieldDoc,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   *          <code>trackDocScores</code> to true as well.\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean trackDocScores, boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, trackDocScores, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, trackDocScores, trackTotalHits);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopFieldCollector} from the given\n   * arguments.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>.\n   *\n   * @param sort\n   *          the sort criteria (SortFields).\n   * @param numHits\n   *          the number of results to collect.\n   * @param after\n   *          only hits after this FieldDoc will be collected\n   * @param fillFields\n   *          specifies whether the actual field values should be returned on\n   *          the results (FieldDoc).\n   * @param trackDocScores\n   *          specifies whether document scores should be tracked and set on the\n   *          results. Note that if set to false, then the results' scores will\n   *          be set to Float.NaN. Setting this to true affects performance, as\n   *          it incurs the score computation on each competitive result.\n   *          Therefore if document scores are not required by the application,\n   *          it is recommended to set it to false.\n   *          <code>trackDocScores</code> to true as well.\n   * @param trackTotalHits\n   *          specifies whether the total number of hits should be tracked. If\n   *          set to false, the value of {@link TopFieldDocs#totalHits} will be\n   *          approximated.\n   * @return a {@link TopFieldCollector} instance which will sort the results by\n   *         the sort criteria.\n   */\n  public static TopFieldCollector create(Sort sort, int numHits, FieldDoc after,\n      boolean fillFields, boolean trackDocScores, boolean trackTotalHits) {\n\n    if (sort.fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n\n    FieldValueHitQueue<Entry> queue = FieldValueHitQueue.create(sort.fields, numHits);\n\n    if (after == null) {\n      return new SimpleFieldCollector(sort, queue, numHits, fillFields, trackDocScores, trackTotalHits);\n    } else {\n      if (after.fields == null) {\n        throw new IllegalArgumentException(\"after.fields wasn't set; you must pass fillFields=true for the previous search\");\n      }\n\n      if (after.fields.length != sort.getSort().length) {\n        throw new IllegalArgumentException(\"after.fields has \" + after.fields.length + \" values but sort has \" + sort.getSort().length);\n      }\n\n      return new PagingFieldCollector(sort, queue, after, numHits, fillFields, trackDocScores, trackTotalHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["03e38c6374c23083c93e212a9498ff0a9c255476","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1aad05eeff7818b0833c02ac6b743aa72054963b","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"404d1ab7f6f396235047017c88d545fec15dafb7":["03e38c6374c23083c93e212a9498ff0a9c255476"],"03e38c6374c23083c93e212a9498ff0a9c255476":["0ef4d3aeb733ae886f562af3b735f50503926a12"],"0ef4d3aeb733ae886f562af3b735f50503926a12":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["0ef4d3aeb733ae886f562af3b735f50503926a12","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04c370507e5521b2eb998530736f1c19b851ed5a"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"03e38c6374c23083c93e212a9498ff0a9c255476":["1aad05eeff7818b0833c02ac6b743aa72054963b","404d1ab7f6f396235047017c88d545fec15dafb7","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"0ef4d3aeb733ae886f562af3b735f50503926a12":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["0ef4d3aeb733ae886f562af3b735f50503926a12"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"04c370507e5521b2eb998530736f1c19b851ed5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","04c370507e5521b2eb998530736f1c19b851ed5a"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}