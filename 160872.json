{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(acceptDocs,\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#getSpans(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Spans getSpans(final AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    final IndexReader reader = context.reader;\n    final DocsAndPositionsEnum postings = reader.termPositionsEnum(acceptDocs,\n                                                                   term.field(),\n                                                                   term.bytes());\n\n    if (postings != null) {\n      return new TermSpans(postings, term);\n    } else {\n      if (reader.termDocsEnum(reader.getLiveDocs(), term.field(), term.bytes()) != null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n      } else {\n        // term does not exist\n        return TermSpans.EMPTY_TERM_SPANS;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}