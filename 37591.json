{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#ScoreNodesStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","date":1467828398,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#ScoreNodesStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ScoreNodesStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nodeFreqParam = factory.getNamedOperand(expression, \"termFreq\");\n\n    String docFreqField = \"count(*)\";\n    if(nodeFreqParam != null) {\n      docFreqField = nodeFreqParam.getParameter().toString();\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    zkHost = factory.getDefaultZkHost();\n\n    if(null == zkHost){\n      throw new IOException(\"zkHost not found\");\n    }\n\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n\n    init(stream, docFreqField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#ScoreNodesStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public ScoreNodesStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nodeFreqParam = factory.getNamedOperand(expression, \"termFreq\");\n\n    String docFreqField = \"count(*)\";\n    if(nodeFreqParam != null) {\n      docFreqField = nodeFreqParam.getParameter().toString();\n    }\n\n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }\n\n    zkHost = factory.getDefaultZkHost();\n\n    if(null == zkHost){\n      throw new IOException(\"zkHost not found\");\n    }\n\n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n\n    init(stream, docFreqField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}