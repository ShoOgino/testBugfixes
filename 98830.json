{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testSloppyPhraseVersusBooleanAnd().mjava","commits":[{"id":"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf","date":1331559369,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testSloppyPhraseVersusBooleanAnd().mjava","pathOld":"/dev/null","sourceNew":"  /** \"A B\"~∞ = +A +B if A != B */\n  public void testSloppyPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = null;\n    // semantics differ from SpanNear: SloppyPhrase handles repeats,\n    // so we must ensure t1 != t2\n    do {\n      t2 = randomTerm();\n    } while (t1.equals(t2));\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2);\n    q1.setSlop(Integer.MAX_VALUE);\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testSloppyPhraseVersusBooleanAnd().mjava","pathOld":"/dev/null","sourceNew":"  /** \"A B\"~∞ = +A +B if A != B */\n  public void testSloppyPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = null;\n    // semantics differ from SpanNear: SloppyPhrase handles repeats,\n    // so we must ensure t1 != t2\n    do {\n      t2 = randomTerm();\n    } while (t1.equals(t2));\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2);\n    q1.setSlop(Integer.MAX_VALUE);\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testSloppyPhraseVersusBooleanAnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testSloppyPhraseVersusBooleanAnd().mjava","sourceNew":"  /** \"A B\"~∞ = +A +B if A != B */\n  public void testSloppyPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = null;\n    // semantics differ from SpanNear: SloppyPhrase handles repeats,\n    // so we must ensure t1 != t2\n    do {\n      t2 = randomTerm();\n    } while (t1.equals(t2));\n    PhraseQuery q1 = new PhraseQuery(Integer.MAX_VALUE, t1.field(), t1.bytes(), t2.bytes());\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":"  /** \"A B\"~∞ = +A +B if A != B */\n  public void testSloppyPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = null;\n    // semantics differ from SpanNear: SloppyPhrase handles repeats,\n    // so we must ensure t1 != t2\n    do {\n      t2 = randomTerm();\n    } while (t1.equals(t2));\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2);\n    q1.setSlop(Integer.MAX_VALUE);\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testSloppyPhraseVersusBooleanAnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testSloppyPhraseVersusBooleanAnd().mjava","sourceNew":"  /** \"A B\"~∞ = +A +B if A != B */\n  public void testSloppyPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = null;\n    // semantics differ from SpanNear: SloppyPhrase handles repeats,\n    // so we must ensure t1 != t2\n    do {\n      t2 = randomTerm();\n    } while (t1.equals(t2));\n    PhraseQuery q1 = new PhraseQuery(Integer.MAX_VALUE, t1.field(), t1.bytes(), t2.bytes());\n    BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSameSet(q1, q2.build());\n  }\n\n","sourceOld":"  /** \"A B\"~∞ = +A +B if A != B */\n  public void testSloppyPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = null;\n    // semantics differ from SpanNear: SloppyPhrase handles repeats,\n    // so we must ensure t1 != t2\n    do {\n      t2 = randomTerm();\n    } while (t1.equals(t2));\n    PhraseQuery q1 = new PhraseQuery(Integer.MAX_VALUE, t1.field(), t1.bytes(), t2.bytes());\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf":["38e3b736c7ca086d61b7dbb841c905ee115490da","e9e1499c5d26c936238506df90a3c02c76707722"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}