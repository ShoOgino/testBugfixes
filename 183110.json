{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OLSRegressionEvaluator#doWork(Object...).mjava","commits":[{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OLSRegressionEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for olsRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for olsRegress should be outcome array. \");\n    }\n\n    double[][] observationData = observations.getData();\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    OLSMultipleLinearRegression multipleLinearRegression = (OLSMultipleLinearRegression)regress(observationData, outcomeData);\n\n    Map map = new HashMap();\n\n    map.put(\"regressandVariance\", multipleLinearRegression.estimateRegressandVariance());\n    map.put(\"regressionParameters\", list(multipleLinearRegression.estimateRegressionParameters()));\n    map.put(\"RSquared\", multipleLinearRegression.calculateRSquared());\n    map.put(\"adjustedRSquared\", multipleLinearRegression.calculateAdjustedRSquared());\n    map.put(\"residualSumSquares\", multipleLinearRegression.calculateResidualSumOfSquares());\n\n    try {\n      map.put(\"regressionParametersStandardErrors\", list(multipleLinearRegression.estimateRegressionParametersStandardErrors()));\n      map.put(\"regressionParametersVariance\", new Matrix(multipleLinearRegression.estimateRegressionParametersVariance()));\n    } catch (Exception e) {\n      //Exception is thrown if the matrix is singular\n    }\n\n    return new MultipleRegressionTuple(multipleLinearRegression, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OLSRegressionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/OLSRegressionEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public Object doWork(Object ... values) throws IOException {\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for olsRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for olsRegress should be outcome array. \");\n    }\n\n    double[][] observationData = observations.getData();\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    OLSMultipleLinearRegression multipleLinearRegression = (OLSMultipleLinearRegression)regress(observationData, outcomeData);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = new HashMap();\n\n    map.put(\"regressandVariance\", multipleLinearRegression.estimateRegressandVariance());\n    map.put(\"regressionParameters\", list(multipleLinearRegression.estimateRegressionParameters()));\n    map.put(\"RSquared\", multipleLinearRegression.calculateRSquared());\n    map.put(\"adjustedRSquared\", multipleLinearRegression.calculateAdjustedRSquared());\n    map.put(\"residualSumSquares\", multipleLinearRegression.calculateResidualSumOfSquares());\n\n    try {\n      map.put(\"regressionParametersStandardErrors\", list(multipleLinearRegression.estimateRegressionParametersStandardErrors()));\n      map.put(\"regressionParametersVariance\", new Matrix(multipleLinearRegression.estimateRegressionParametersVariance()));\n    } catch (Exception e) {\n      //Exception is thrown if the matrix is singular\n    }\n\n    return new MultipleRegressionTuple(multipleLinearRegression, map);\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException {\n\n    Matrix observations = null;\n    List<Number> outcomes = null;\n\n    if(values[0] instanceof Matrix) {\n      observations = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for olsRegress should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof List) {\n      outcomes = (List) values[1];\n    } else {\n      throw new IOException(\"The second parameter for olsRegress should be outcome array. \");\n    }\n\n    double[][] observationData = observations.getData();\n    double[] outcomeData = new double[outcomes.size()];\n    for(int i=0; i<outcomeData.length; i++) {\n      outcomeData[i] = outcomes.get(i).doubleValue();\n    }\n\n    OLSMultipleLinearRegression multipleLinearRegression = (OLSMultipleLinearRegression)regress(observationData, outcomeData);\n\n    Map map = new HashMap();\n\n    map.put(\"regressandVariance\", multipleLinearRegression.estimateRegressandVariance());\n    map.put(\"regressionParameters\", list(multipleLinearRegression.estimateRegressionParameters()));\n    map.put(\"RSquared\", multipleLinearRegression.calculateRSquared());\n    map.put(\"adjustedRSquared\", multipleLinearRegression.calculateAdjustedRSquared());\n    map.put(\"residualSumSquares\", multipleLinearRegression.calculateResidualSumOfSquares());\n\n    try {\n      map.put(\"regressionParametersStandardErrors\", list(multipleLinearRegression.estimateRegressionParametersStandardErrors()));\n      map.put(\"regressionParametersVariance\", new Matrix(multipleLinearRegression.estimateRegressionParametersVariance()));\n    } catch (Exception e) {\n      //Exception is thrown if the matrix is singular\n    }\n\n    return new MultipleRegressionTuple(multipleLinearRegression, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}