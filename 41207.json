{"path":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#next(Token).mjava","commits":[{"id":"976d98a0401f84b6ea0d80eb0066fd081c51107d","date":1224355104,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Token next(Token in) throws IOException {\n    if (!remainingTokens.isEmpty()) {\n      return remainingTokens.removeFirst();\n    }\n\n    Token t = input.next(in);\n    if (t != null) {\n      if (inject) {\n        remainingTokens.addLast(t);\n      }\n\n      boolean isPhonetic = false;\n      String v = new String(t.termBuffer(), 0, t.termLength());\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      if (primaryPhoneticValue.length() > 0) {\n        Token token = (Token) t.clone();\n        if( inject ) {\n          token.setPositionIncrement( 0 );\n        }\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(primaryPhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n      if (alternatePhoneticValue.length() > 0\n          && !primaryPhoneticValue.equals(alternatePhoneticValue)) {\n        Token token = (Token) t.clone();\n        token.setPositionIncrement( 0 );\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(alternatePhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n      \n      // If we did not add something, then go to the next one...\n      if( !isPhonetic ) {\n        t = next(in);\n        if( t != null ) {\n          t.setPositionIncrement( t.getPositionIncrement()+1 ); \n        }\n        return t;\n      }\n    }\n\n    return remainingTokens.isEmpty() ? null : remainingTokens.removeFirst();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b3a163d1ad8979885e462981c79047c4069da9e7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3a163d1ad8979885e462981c79047c4069da9e7","date":1233954260,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#next(Token).mjava","pathOld":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#next(Token).mjava","sourceNew":"  @Override\n  public final Token next(Token in) throws IOException {\n    if (!remainingTokens.isEmpty()) {\n      return remainingTokens.removeFirst();\n    }\n\n    Token t = input.next(in);\n    if (t != null && t.termLength() > 0) {\n      if (inject) {\n        remainingTokens.addLast(t);\n      }\n\n      boolean isPhonetic = false;\n      String v = new String(t.termBuffer(), 0, t.termLength());\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      if (primaryPhoneticValue.length() > 0) {\n        Token token = (Token) t.clone();\n        if( inject ) {\n          token.setPositionIncrement( 0 );\n        }\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(primaryPhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n      if (alternatePhoneticValue.length() > 0\n          && !primaryPhoneticValue.equals(alternatePhoneticValue)) {\n        Token token = (Token) t.clone();\n        token.setPositionIncrement( 0 );\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(alternatePhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n      \n      // If we did not add something, then go to the next one...\n      if( !isPhonetic ) {\n        t = next(in);\n        if( t != null ) {\n          t.setPositionIncrement( t.getPositionIncrement()+1 ); \n        }\n        return t;\n      }\n    }\n\n    return remainingTokens.isEmpty() ? null : remainingTokens.removeFirst();\n  }\n\n","sourceOld":"  @Override\n  public final Token next(Token in) throws IOException {\n    if (!remainingTokens.isEmpty()) {\n      return remainingTokens.removeFirst();\n    }\n\n    Token t = input.next(in);\n    if (t != null) {\n      if (inject) {\n        remainingTokens.addLast(t);\n      }\n\n      boolean isPhonetic = false;\n      String v = new String(t.termBuffer(), 0, t.termLength());\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      if (primaryPhoneticValue.length() > 0) {\n        Token token = (Token) t.clone();\n        if( inject ) {\n          token.setPositionIncrement( 0 );\n        }\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(primaryPhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n      if (alternatePhoneticValue.length() > 0\n          && !primaryPhoneticValue.equals(alternatePhoneticValue)) {\n        Token token = (Token) t.clone();\n        token.setPositionIncrement( 0 );\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(alternatePhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n      \n      // If we did not add something, then go to the next one...\n      if( !isPhonetic ) {\n        t = next(in);\n        if( t != null ) {\n          t.setPositionIncrement( t.getPositionIncrement()+1 ); \n        }\n        return t;\n      }\n    }\n\n    return remainingTokens.isEmpty() ? null : remainingTokens.removeFirst();\n  }\n\n","bugFix":["976d98a0401f84b6ea0d80eb0066fd081c51107d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb9e6bedabb32b626ec01144759078072e88c61","date":1250187052,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#next(Token).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final Token next(Token in) throws IOException {\n    if (!remainingTokens.isEmpty()) {\n      return remainingTokens.removeFirst();\n    }\n\n    Token t = input.next(in);\n    if (t != null && t.termLength() > 0) {\n      if (inject) {\n        remainingTokens.addLast(t);\n      }\n\n      boolean isPhonetic = false;\n      String v = new String(t.termBuffer(), 0, t.termLength());\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      if (primaryPhoneticValue.length() > 0) {\n        Token token = (Token) t.clone();\n        if( inject ) {\n          token.setPositionIncrement( 0 );\n        }\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(primaryPhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n      if (alternatePhoneticValue.length() > 0\n          && !primaryPhoneticValue.equals(alternatePhoneticValue)) {\n        Token token = (Token) t.clone();\n        token.setPositionIncrement( 0 );\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(alternatePhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n      \n      // If we did not add something, then go to the next one...\n      if( !isPhonetic ) {\n        t = next(in);\n        if( t != null ) {\n          t.setPositionIncrement( t.getPositionIncrement()+1 ); \n        }\n        return t;\n      }\n    }\n\n    return remainingTokens.isEmpty() ? null : remainingTokens.removeFirst();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3a163d1ad8979885e462981c79047c4069da9e7":["976d98a0401f84b6ea0d80eb0066fd081c51107d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bb9e6bedabb32b626ec01144759078072e88c61":["b3a163d1ad8979885e462981c79047c4069da9e7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"976d98a0401f84b6ea0d80eb0066fd081c51107d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b3a163d1ad8979885e462981c79047c4069da9e7":["4bb9e6bedabb32b626ec01144759078072e88c61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4bb9e6bedabb32b626ec01144759078072e88c61":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["976d98a0401f84b6ea0d80eb0066fd081c51107d"],"976d98a0401f84b6ea0d80eb0066fd081c51107d":["b3a163d1ad8979885e462981c79047c4069da9e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4bb9e6bedabb32b626ec01144759078072e88c61","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}