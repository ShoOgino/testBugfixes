{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":null,"sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}