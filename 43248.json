{"path":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#reset(byte[],int,int).mjava","commits":[{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#reset(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    void reset(byte[] bytes, int off, int len) {\n      Objects.checkFromIndexSize(off, len, bytes.length);\n      if (end - base < chainTable.length) {\n        // The last call to compress was done on less than 64kB, let's not reset\n        // the hashTable and only reset the relevant parts of the chainTable.\n        // This helps avoid slowing down calling compress() many times on short\n        // inputs.\n        int startOffset = base & MASK;\n        int endOffset = end == 0 ? 0 : ((end - 1) & MASK) + 1;\n        if (startOffset < endOffset) {\n          Arrays.fill(chainTable, startOffset, endOffset, (short) 0xFFFF);\n        } else {\n          Arrays.fill(chainTable, 0, endOffset, (short) 0xFFFF);\n          Arrays.fill(chainTable, startOffset, chainTable.length, (short) 0xFFFF);\n        }\n      } else {\n        // The last call to compress was done on a large enough amount of data\n        // that it's fine to reset both tables\n        Arrays.fill(hashTable, -1);\n        Arrays.fill(chainTable, (short) 0xFFFF);\n      }\n      assert assertReset();\n      this.bytes = bytes;\n      this.base = off;\n      this.next = off;\n      this.end = off + len;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f23a2de93b387aeffe7df370c84823b7249701","date":1580229943,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#reset(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/compress/LZ4.HighCompressionHashTable#reset(byte[],int,int).mjava","sourceNew":"    @Override\n    void reset(byte[] bytes, int off, int len) {\n      Objects.checkFromIndexSize(off, len, bytes.length);\n      if (end - base < chainTable.length) {\n        // The last call to compress was done on less than 64kB, let's not reset\n        // the hashTable and only reset the relevant parts of the chainTable.\n        // This helps avoid slowing down calling compress() many times on short\n        // inputs.\n        int startOffset = base & MASK;\n        int endOffset = end == 0 ? 0 : ((end - 1) & MASK) + 1;\n        if (startOffset < endOffset) {\n          Arrays.fill(chainTable, startOffset, endOffset, (short) 0xFFFF);\n        } else {\n          Arrays.fill(chainTable, 0, endOffset, (short) 0xFFFF);\n          Arrays.fill(chainTable, startOffset, chainTable.length, (short) 0xFFFF);\n        }\n      } else {\n        // The last call to compress was done on a large enough amount of data\n        // that it's fine to reset both tables\n        Arrays.fill(hashTable, -1);\n        Arrays.fill(chainTable, (short) 0xFFFF);\n      }\n      this.bytes = bytes;\n      this.base = off;\n      this.next = off;\n      this.end = off + len;\n    }\n\n","sourceOld":"    @Override\n    void reset(byte[] bytes, int off, int len) {\n      Objects.checkFromIndexSize(off, len, bytes.length);\n      if (end - base < chainTable.length) {\n        // The last call to compress was done on less than 64kB, let's not reset\n        // the hashTable and only reset the relevant parts of the chainTable.\n        // This helps avoid slowing down calling compress() many times on short\n        // inputs.\n        int startOffset = base & MASK;\n        int endOffset = end == 0 ? 0 : ((end - 1) & MASK) + 1;\n        if (startOffset < endOffset) {\n          Arrays.fill(chainTable, startOffset, endOffset, (short) 0xFFFF);\n        } else {\n          Arrays.fill(chainTable, 0, endOffset, (short) 0xFFFF);\n          Arrays.fill(chainTable, startOffset, chainTable.length, (short) 0xFFFF);\n        }\n      } else {\n        // The last call to compress was done on a large enough amount of data\n        // that it's fine to reset both tables\n        Arrays.fill(hashTable, -1);\n        Arrays.fill(chainTable, (short) 0xFFFF);\n      }\n      assert assertReset();\n      this.bytes = bytes;\n      this.base = off;\n      this.next = off;\n      this.end = off + len;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7f23a2de93b387aeffe7df370c84823b7249701":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7f23a2de93b387aeffe7df370c84823b7249701"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9407318969e8504257b4c5764c65755a043e5404"],"9407318969e8504257b4c5764c65755a043e5404":["a7f23a2de93b387aeffe7df370c84823b7249701"],"a7f23a2de93b387aeffe7df370c84823b7249701":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}