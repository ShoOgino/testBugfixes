{"path":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","commits":[{"id":"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","date":1309197122,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9111961f74f9b2246dc88c481eda8be7e7ff084f","date":1309287219,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","sourceNew":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","sourceNew":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","sourceNew":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFiltering#testRandomFiltering().mjava","sourceNew":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomFiltering() throws Exception {\n    int indexIter=5 * RANDOM_MULTIPLIER;\n    int queryIter=250 * RANDOM_MULTIPLIER;\n    Model model = new Model();\n\n    for (int iiter = 0; iiter<indexIter; iiter++) {\n      model.indexSize = random.nextInt(20 * RANDOM_MULTIPLIER) + 1;\n      clearIndex();\n\n      for (int i=0; i<model.indexSize; i++) {\n        String val = Integer.toString(i);\n\n        assertU(adoc(\"id\",val,f,val));\n        if (random.nextInt(100) < 20) {\n          // duplicate doc 20% of the time (makes deletions)\n          assertU(adoc(\"id\",val,f,val));\n        }\n        if (random.nextInt(100) < 10) {\n          // commit 10% of the time (forces a new segment)\n          assertU(commit());\n        }\n      }\n      assertU(commit());\n\n      int totalMatches=0;\n      int nonZeros=0;\n      for (int qiter=0; qiter<queryIter; qiter++) {\n        model.clear();\n        List<String> params = new ArrayList<String>();\n        params.add(\"q\"); params.add(makeRandomQuery(model, true, false));\n\n        int nFilters = random.nextInt(5);\n        for (int i=0; i<nFilters; i++) {\n          params.add(\"fq\");  params.add(makeRandomQuery(model, false, false));\n        }\n\n        boolean facet = random.nextBoolean();\n        if (facet) {\n          // basic facet.query tests getDocListAndSet\n          params.add(\"facet\"); params.add(\"true\");\n          params.add(\"facet.query\"); params.add(\"*:*\");\n          params.add(\"facet.query\"); params.add(\"{!key=multiSelect ex=t}*:*\");\n\n          String facetQuery = makeRandomQuery(model, false, true);\n          if (facetQuery.startsWith(\"{!\")) {\n            facetQuery = \"{!key=facetQuery \" + facetQuery.substring(2);\n          } else {\n            facetQuery = \"{!key=facetQuery}\" + facetQuery;\n          }\n          params.add(\"facet.query\"); params.add(facetQuery);\n        }\n\n        if (random.nextInt(100) < 10) {\n          params.add(\"group\"); params.add(\"true\");\n          params.add(\"group.main\"); params.add(\"true\");\n          params.add(\"group.field\"); params.add(\"id\");\n          if (random.nextBoolean()) {\n            params.add(\"group.cache.percent\"); params.add(\"100\");\n          }\n        }\n\n        SolrQueryRequest sreq = req(params.toArray(new String[params.size()]));\n        long expected = model.answer.cardinality();\n        long expectedMultiSelect = model.multiSelect.cardinality();\n        long expectedFacetQuery = model.facetQuery.cardinality();\n\n        totalMatches += expected;\n        if (expected > 0) {\n          nonZeros++;\n        }\n\n        if (iiter==-1 && qiter==-1) {\n          // set breakpoint here to debug a specific issue\n          System.out.println(\"request=\"+params);\n        }\n\n        try {\n          assertJQ(sreq\n              ,\"/response/numFound==\" + expected\n              , facet ? \"/facet_counts/facet_queries/*:*/==\" + expected : null\n              , facet ? \"/facet_counts/facet_queries/multiSelect/==\" + expectedMultiSelect : null\n              , facet ? \"/facet_counts/facet_queries/facetQuery/==\" + expectedFacetQuery : null\n          );\n        } catch (Exception e) {\n          // show the indexIter and queryIter for easier debugging\n          SolrException.log(log, e);\n          String s= \"FAILURE: iiter=\" + iiter + \" qiter=\" + qiter + \" request=\"+params;\n          log.error(s);\n          fail(s);\n        }\n\n      }\n\n      // After making substantial changes to this test, make sure that we still get a\n      // decent number of queries that match some documents\n      // System.out.println(\"totalMatches=\" + totalMatches + \" nonZeroQueries=\"+nonZeros);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"c26f00b574427b55127e869b935845554afde1fa":["9111961f74f9b2246dc88c481eda8be7e7ff084f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["9111961f74f9b2246dc88c481eda8be7e7ff084f"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9111961f74f9b2246dc88c481eda8be7e7ff084f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9111961f74f9b2246dc88c481eda8be7e7ff084f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"9111961f74f9b2246dc88c481eda8be7e7ff084f":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["9111961f74f9b2246dc88c481eda8be7e7ff084f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9111961f74f9b2246dc88c481eda8be7e7ff084f":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}