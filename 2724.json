{"path":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,Sort).mjava","commits":[{"id":"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","date":1435865633,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,SortingMergePolicy).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @param mergePolicySort\n   *          the sort your {@link SortingMergePolicy} uses\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, Sort mergePolicySort) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicySort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicySort);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicySort = mergePolicySort;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, SortingMergePolicy mergePolicy) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicy) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicy.getSort());\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicy = mergePolicy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,Sort).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @param mergePolicySort\n   *          the sort your {@link SortingMergePolicy} uses\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, Sort mergePolicySort) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicySort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicySort);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicySort = mergePolicySort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,Sort).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @param mergePolicySort\n   *          the sort your {@link SortingMergePolicy} uses\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, Sort mergePolicySort) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicySort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicySort);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicySort = mergePolicySort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,Sort).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @param mergePolicySort\n   *          the sort your {@link SortingMergePolicy} uses\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, Sort mergePolicySort) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicySort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicySort);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicySort = mergePolicySort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,Sort).mjava","sourceNew":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @param mergePolicySort\n   *          the sort your {@link SortingMergePolicy} uses\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, Sort mergePolicySort) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicySort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicySort);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicySort = mergePolicySort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/search/EarlyTerminatingSortingCollector#EarlyTerminatingSortingCollector(Collector,Sort,int,Sort).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new {@link EarlyTerminatingSortingCollector} instance.\n   *\n   * @param in\n   *          the collector to wrap\n   * @param sort\n   *          the sort you are sorting the search results on\n   * @param numDocsToCollect\n   *          the number of documents to collect on each segment. When wrapping\n   *          a {@link TopDocsCollector}, this number should be the number of\n   *          hits.\n   * @param mergePolicySort\n   *          the sort your {@link SortingMergePolicy} uses\n   * @throws IllegalArgumentException if the sort order doesn't allow for early\n   *          termination with the given merge policy.\n   */\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, Sort mergePolicySort) {\n    super(in);\n    if (numDocsToCollect <= 0) {\n      throw new IllegalArgumentException(\"numDocsToCollect must always be > 0, got \" + numDocsToCollect);\n    }\n    if (canEarlyTerminate(sort, mergePolicySort) == false) {\n      throw new IllegalStateException(\"Cannot early terminate with sort order \" + sort + \" if segments are sorted with \" + mergePolicySort);\n    }\n    this.sort = sort;\n    this.numDocsToCollect = numDocsToCollect;\n    this.mergePolicySort = mergePolicySort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}