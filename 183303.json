{"path":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#getCategoryListMap(FacetArrays,int).mjava","sourceNew":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link Aggregator} and a {@link CategoryListIterator} for each\n   * and every {@link FacetRequest}. Generating a map, matching each\n   * categoryListIterator to its matching aggregator.\n   * <p>\n   * If two CategoryListIterators are served by the same aggregator, a single\n   * aggregator is returned for both.\n   * \n   * <b>NOTE: </b>If a given category list iterator is needed with two different\n   * aggregators (e.g counting and association) - an exception is thrown as this\n   * functionality is not supported at this time.\n   */\n  protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(FacetArrays facetArrays,\n      int partition) throws IOException {\n    \n    HashMap<CategoryListIterator, Aggregator> categoryLists = new HashMap<CategoryListIterator, Aggregator>();\n\n    for (FacetRequest facetRequest : searchParams.getFacetRequests()) {\n      Aggregator categoryAggregator = facetRequest.createAggregator(\n          isUsingComplements, facetArrays, indexReader,  taxonomyReader);\n\n      CategoryListIterator cli = \n        facetRequest.createCategoryListIterator(indexReader, taxonomyReader, searchParams, partition);\n      \n      // get the aggregator\n      Aggregator old = categoryLists.put(cli, categoryAggregator);\n\n      if (old != null && !old.equals(categoryAggregator)) {\n        // TODO (Facet): create a more meaningful RE class, and throw it.\n        throw new RuntimeException(\n        \"Overriding existing category list with different aggregator. THAT'S A NO NO!\");\n      }\n      // if the aggregator is the same we're covered\n    }\n\n    return categoryLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}