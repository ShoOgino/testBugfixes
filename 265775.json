{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#computeCardinality(int,int,int,int,int[]).mjava","commits":[{"id":"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b","date":1561536972,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#computeCardinality(int,int,int,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  public int computeCardinality(int from, int to, int numDataDims, int bytesPerDim, int[] commonPrefixLengths) {\n    assert packedBytesLength == numDataDims * bytesPerDim;\n    int leafCardinality = 1;\n    for (int i = from + 1; i < to; i++) {\n      for (int dim = 0; dim < numDataDims; dim++) {\n        final int start = dim * bytesPerDim + commonPrefixLengths[dim];\n        final int end = dim * bytesPerDim + bytesPerDim;\n        if (Arrays.mismatch(block, i * packedBytesLength + start, i * packedBytesLength + end,\n            block, (i - 1) * packedBytesLength  + start, (i - 1) * packedBytesLength + end) != -1) {\n          leafCardinality++;\n          break;\n        }\n      }\n    }\n    return leafCardinality;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#computeCardinality(int,int,int,int,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#computeCardinality(int,int,int,int,int[]).mjava","sourceNew":"  public int computeCardinality(int from, int to, int numDataDims, int bytesPerDim, int[] commonPrefixLengths) {\n    assert packedBytesLength == numDataDims * bytesPerDim;\n    int leafCardinality = 1;\n    for (int i = from + 1; i < to; i++) {\n      for (int dim = 0; dim < numDataDims; dim++) {\n        final int start = dim * bytesPerDim + commonPrefixLengths[dim];\n        final int end = dim * bytesPerDim + bytesPerDim;\n        if (Arrays.mismatch(block, i * packedBytesDocIDLength + start, i * packedBytesDocIDLength + end,\n            block, (i - 1) * packedBytesDocIDLength  + start, (i - 1) * packedBytesDocIDLength + end) != -1) {\n          leafCardinality++;\n          break;\n        }\n      }\n    }\n    return leafCardinality;\n  }\n\n","sourceOld":"  public int computeCardinality(int from, int to, int numDataDims, int bytesPerDim, int[] commonPrefixLengths) {\n    assert packedBytesLength == numDataDims * bytesPerDim;\n    int leafCardinality = 1;\n    for (int i = from + 1; i < to; i++) {\n      for (int dim = 0; dim < numDataDims; dim++) {\n        final int start = dim * bytesPerDim + commonPrefixLengths[dim];\n        final int end = dim * bytesPerDim + bytesPerDim;\n        if (Arrays.mismatch(block, i * packedBytesLength + start, i * packedBytesLength + end,\n            block, (i - 1) * packedBytesLength  + start, (i - 1) * packedBytesLength + end) != -1) {\n          leafCardinality++;\n          break;\n        }\n      }\n    }\n    return leafCardinality;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#computeCardinality(int,int,int,int,int[]).mjava","sourceNew":null,"sourceOld":"  public int computeCardinality(int from, int to, int numDataDims, int bytesPerDim, int[] commonPrefixLengths) {\n    assert packedBytesLength == numDataDims * bytesPerDim;\n    int leafCardinality = 1;\n    for (int i = from + 1; i < to; i++) {\n      for (int dim = 0; dim < numDataDims; dim++) {\n        final int start = dim * bytesPerDim + commonPrefixLengths[dim];\n        final int end = dim * bytesPerDim + bytesPerDim;\n        if (Arrays.mismatch(block, i * packedBytesDocIDLength + start, i * packedBytesDocIDLength + end,\n            block, (i - 1) * packedBytesDocIDLength  + start, (i - 1) * packedBytesDocIDLength + end) != -1) {\n          leafCardinality++;\n          break;\n        }\n      }\n    }\n    return leafCardinality;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["c7f06758793500ca773d0df1037290e6e404fb33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}