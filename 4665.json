{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharsRef chars = new CharsRef();\n    UnicodeUtil.UTF8toUTF16(utf8, 0, utf8.length, chars);   // TODO: this method currently oversizes the array\n    JSONParser parser = new JSONParser(chars.chars, chars.offset, chars.length);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharsRef chars = new CharsRef();\n    UnicodeUtil.UTF8toUTF16(utf8, 0, utf8.length, chars);   // TODO: this method currently oversizes the array\n    JSONParser parser = new JSONParser(chars.chars, chars.offset, chars.length);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharsRef chars = new CharsRef();\n    UnicodeUtil.UTF8toUTF16(utf8, 0, utf8.length, chars);   // TODO: this method currently oversizes the array\n    JSONParser parser = new JSONParser(chars.chars, chars.offset, chars.length);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b52553b383e6cf68c783d177daafd0b32d6347a","date":1327690866,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharsRef chars = new CharsRef();\n    UnicodeUtil.UTF8toUTF16(utf8, 0, utf8.length, chars);   // TODO: this method currently oversizes the array\n    JSONParser parser = new JSONParser(chars.chars, chars.offset, chars.length);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharsRef chars = new CharsRef();\n    UnicodeUtil.UTF8toUTF16(utf8, 0, utf8.length, chars);   // TODO: this method currently oversizes the array\n    JSONParser parser = new JSONParser(chars.chars, chars.offset, chars.length);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharsRef chars = new CharsRef();\n    UnicodeUtil.UTF8toUTF16(utf8, 0, utf8.length, chars);   // TODO: this method currently oversizes the array\n    JSONParser parser = new JSONParser(chars.chars, chars.offset, chars.length);\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#fromJSON(byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#fromJSON(byte[]).mjava","sourceNew":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","sourceOld":"  public static Object fromJSON(byte[] utf8) {\n    // convert directly from bytes to chars\n    // and parse directly from that instead of going through\n    // intermediate strings or readers\n    CharArr chars = new CharArr();\n    ByteUtils.UTF8toUTF16(utf8, 0, utf8.length, chars);\n    JSONParser parser = new JSONParser(chars.getArray(), chars.getStart(), chars.length());\n    try {\n      return ObjectBuilder.getVal(parser);\n    } catch (IOException e) {\n      throw new RuntimeException(e); // should never happen w/o using real IO\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1b52553b383e6cf68c783d177daafd0b32d6347a":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","1b52553b383e6cf68c783d177daafd0b32d6347a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["1b52553b383e6cf68c783d177daafd0b32d6347a"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","1b52553b383e6cf68c783d177daafd0b32d6347a"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"1b52553b383e6cf68c783d177daafd0b32d6347a":["fd92b8bcc88e969302510acf77bd6970da3994c4","b693a83132c9e45afcd564fd65a25b60ed80388b","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","1b52553b383e6cf68c783d177daafd0b32d6347a","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}