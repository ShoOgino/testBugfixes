{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n    int start = tokenBegin;\n    int len;\n\n    if (bufpos >= tokenBegin)\n    {\n      len = bufpos - tokenBegin + inBuf + 1;\n    }\n    else\n    {\n      len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n    }\n\n    int i = 0, j = 0, k = 0;\n    int nextColDiff = 0, columnDiff = 0;\n\n    while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n    {\n      bufline[j] = newLine;\n      nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n      bufcolumn[j] = newCol + columnDiff;\n      columnDiff = nextColDiff;\n      i++;\n    }\n\n    if (i < len)\n    {\n      bufline[j] = newLine++;\n      bufcolumn[j] = newCol + columnDiff;\n\n      while (i++ < len)\n      {\n        if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n          bufline[j] = newLine++;\n        else\n          bufline[j] = newLine;\n      }\n    }\n\n    line = bufline[j];\n    column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n    int start = tokenBegin;\n    int len;\n\n    if (bufpos >= tokenBegin)\n    {\n      len = bufpos - tokenBegin + inBuf + 1;\n    }\n    else\n    {\n      len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n    }\n\n    int i = 0, j = 0, k = 0;\n    int nextColDiff = 0, columnDiff = 0;\n\n    while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n    {\n      bufline[j] = newLine;\n      nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n      bufcolumn[j] = newCol + columnDiff;\n      columnDiff = nextColDiff;\n      i++;\n    }\n\n    if (i < len)\n    {\n      bufline[j] = newLine++;\n      bufcolumn[j] = newCol + columnDiff;\n\n      while (i++ < len)\n      {\n        if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n          bufline[j] = newLine++;\n        else\n          bufline[j] = newLine;\n      }\n    }\n\n    line = bufline[j];\n    column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\r\n   * Method to adjust line and column numbers for the start of a token.\r\n   */\r\n  public void adjustBeginLineColumn(int newLine, int newCol)\r\n  {\r\n     int start = tokenBegin;\r\n     int len;\r\n\r\n     if (bufpos >= tokenBegin)\r\n     {\r\n        len = bufpos - tokenBegin + inBuf + 1;\r\n     }\r\n     else\r\n     {\r\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\r\n     }\r\n\r\n     int i = 0, j = 0, k = 0;\r\n     int nextColDiff = 0, columnDiff = 0;\r\n\r\n     while (i < len &&\r\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\r\n     {\r\n        bufline[j] = newLine;\r\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\r\n        bufcolumn[j] = newCol + columnDiff;\r\n        columnDiff = nextColDiff;\r\n        i++;\r\n     }\r\n\r\n     if (i < len)\r\n     {\r\n        bufline[j] = newLine++;\r\n        bufcolumn[j] = newCol + columnDiff;\r\n\r\n        while (i++ < len)\r\n        {\r\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\r\n              bufline[j] = newLine++;\r\n           else\r\n              bufline[j] = newLine;\r\n        }\r\n     }\r\n\r\n     line = bufline[j];\r\n     column = bufcolumn[j];\r\n  }\r\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n    int start = tokenBegin;\n    int len;\n\n    if (bufpos >= tokenBegin)\n    {\n      len = bufpos - tokenBegin + inBuf + 1;\n    }\n    else\n    {\n      len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n    }\n\n    int i = 0, j = 0, k = 0;\n    int nextColDiff = 0, columnDiff = 0;\n\n    while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n    {\n      bufline[j] = newLine;\n      nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n      bufcolumn[j] = newCol + columnDiff;\n      columnDiff = nextColDiff;\n      i++;\n    }\n\n    if (i < len)\n    {\n      bufline[j] = newLine++;\n      bufcolumn[j] = newCol + columnDiff;\n\n      while (i++ < len)\n      {\n        if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n          bufline[j] = newLine++;\n        else\n          bufline[j] = newLine;\n      }\n    }\n\n    line = bufline[j];\n    column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\r\n   * Method to adjust line and column numbers for the start of a token.\r\n   */\r\n  public void adjustBeginLineColumn(int newLine, int newCol)\r\n  {\r\n     int start = tokenBegin;\r\n     int len;\r\n\r\n     if (bufpos >= tokenBegin)\r\n     {\r\n        len = bufpos - tokenBegin + inBuf + 1;\r\n     }\r\n     else\r\n     {\r\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\r\n     }\r\n\r\n     int i = 0, j = 0, k = 0;\r\n     int nextColDiff = 0, columnDiff = 0;\r\n\r\n     while (i < len &&\r\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\r\n     {\r\n        bufline[j] = newLine;\r\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\r\n        bufcolumn[j] = newCol + columnDiff;\r\n        columnDiff = nextColDiff;\r\n        i++;\r\n     }\r\n\r\n     if (i < len)\r\n     {\r\n        bufline[j] = newLine++;\r\n        bufcolumn[j] = newCol + columnDiff;\r\n\r\n        while (i++ < len)\r\n        {\r\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\r\n              bufline[j] = newLine++;\r\n           else\r\n              bufline[j] = newLine;\r\n        }\r\n     }\r\n\r\n     line = bufline[j];\r\n     column = bufcolumn[j];\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}