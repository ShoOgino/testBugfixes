{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#verifyEncoding(double,double,double,double,double,double).mjava","commits":[{"id":"2aeefba8262036d422d639e48c49d51316bea138","date":1545148224,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#verifyEncoding(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyEncoding(double alat, double alon, double blat, double blon, double clat, double clon) {\n    int[] original = new int[]{GeoEncodingUtils.encodeLatitude(alat),\n        GeoEncodingUtils.encodeLongitude(alon),\n        GeoEncodingUtils.encodeLatitude(blat),\n        GeoEncodingUtils.encodeLongitude(blon),\n        GeoEncodingUtils.encodeLatitude(clat),\n        GeoEncodingUtils.encodeLongitude(clon)};\n\n    //quantize the triangle\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, original[0], original[1], original[2], original[3], original[4], original[5]);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    double[] encodedQuantize = new double[] {GeoEncodingUtils.decodeLatitude(encoded[0]),\n        GeoEncodingUtils.decodeLongitude(encoded[1]),\n        GeoEncodingUtils.decodeLatitude(encoded[2]),\n        GeoEncodingUtils.decodeLongitude(encoded[3]),\n        GeoEncodingUtils.decodeLatitude(encoded[4]),\n        GeoEncodingUtils.decodeLongitude(encoded[5])};\n\n    int orientation = GeoUtils.orient(original[1], original[0], original[3], original[2], original[5], original[4]);\n    //quantize original\n    double[] originalQuantize;\n    //we need to change the orientation if CW\n    if (orientation == -1) {\n      originalQuantize = new double[] {GeoEncodingUtils.decodeLatitude(original[4]),\n          GeoEncodingUtils.decodeLongitude(original[5]),\n          GeoEncodingUtils.decodeLatitude(original[2]),\n          GeoEncodingUtils.decodeLongitude(original[3]),\n          GeoEncodingUtils.decodeLatitude(original[0]),\n          GeoEncodingUtils.decodeLongitude(original[1])};\n    } else {\n      originalQuantize = new double[] {GeoEncodingUtils.decodeLatitude(original[0]),\n          GeoEncodingUtils.decodeLongitude(original[1]),\n          GeoEncodingUtils.decodeLatitude(original[2]),\n          GeoEncodingUtils.decodeLongitude(original[3]),\n          GeoEncodingUtils.decodeLatitude(original[4]),\n          GeoEncodingUtils.decodeLongitude(original[5])};\n    }\n\n    for (int i =0; i < 100; i ++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      Polygon2D polygon2D = Polygon2D.create(polygon);\n      PointValues.Relation originalRelation = polygon2D.relateTriangle(originalQuantize[1], originalQuantize[0], originalQuantize[3], originalQuantize[2], originalQuantize[5], originalQuantize[4]);\n      PointValues.Relation encodedRelation = polygon2D.relateTriangle(encodedQuantize[1], encodedQuantize[0], encodedQuantize[3], encodedQuantize[2], encodedQuantize[5], encodedQuantize[4]);\n      assertTrue(originalRelation == encodedRelation);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a7c6b3c53318581ef3ddb386d90298695de120d","date":1550591901,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeEncoding#verifyEncoding(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#verifyEncoding(double,double,double,double,double,double).mjava","sourceNew":"  private void verifyEncoding(double alat, double alon, double blat, double blon, double clat, double clon) {\n    int[] original = new int[]{GeoEncodingUtils.encodeLatitude(alat),\n        GeoEncodingUtils.encodeLongitude(alon),\n        GeoEncodingUtils.encodeLatitude(blat),\n        GeoEncodingUtils.encodeLongitude(blon),\n        GeoEncodingUtils.encodeLatitude(clat),\n        GeoEncodingUtils.encodeLongitude(clon)};\n\n    //quantize the triangle\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, original[0], original[1], original[2], original[3], original[4], original[5]);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    double[] encodedQuantize = new double[] {GeoEncodingUtils.decodeLatitude(encoded[0]),\n        GeoEncodingUtils.decodeLongitude(encoded[1]),\n        GeoEncodingUtils.decodeLatitude(encoded[2]),\n        GeoEncodingUtils.decodeLongitude(encoded[3]),\n        GeoEncodingUtils.decodeLatitude(encoded[4]),\n        GeoEncodingUtils.decodeLongitude(encoded[5])};\n\n    int orientation = GeoUtils.orient(original[1], original[0], original[3], original[2], original[5], original[4]);\n    //quantize original\n    double[] originalQuantize;\n    //we need to change the orientation if CW\n    if (orientation == -1) {\n      originalQuantize = new double[] {GeoEncodingUtils.decodeLatitude(original[4]),\n          GeoEncodingUtils.decodeLongitude(original[5]),\n          GeoEncodingUtils.decodeLatitude(original[2]),\n          GeoEncodingUtils.decodeLongitude(original[3]),\n          GeoEncodingUtils.decodeLatitude(original[0]),\n          GeoEncodingUtils.decodeLongitude(original[1])};\n    } else {\n      originalQuantize = new double[] {GeoEncodingUtils.decodeLatitude(original[0]),\n          GeoEncodingUtils.decodeLongitude(original[1]),\n          GeoEncodingUtils.decodeLatitude(original[2]),\n          GeoEncodingUtils.decodeLongitude(original[3]),\n          GeoEncodingUtils.decodeLatitude(original[4]),\n          GeoEncodingUtils.decodeLongitude(original[5])};\n    }\n\n    for (int i =0; i < 100; i ++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      Polygon2D polygon2D = Polygon2D.create(polygon);\n      PointValues.Relation originalRelation = polygon2D.relateTriangle(originalQuantize[1], originalQuantize[0], originalQuantize[3], originalQuantize[2], originalQuantize[5], originalQuantize[4]);\n      PointValues.Relation encodedRelation = polygon2D.relateTriangle(encodedQuantize[1], encodedQuantize[0], encodedQuantize[3], encodedQuantize[2], encodedQuantize[5], encodedQuantize[4]);\n      assertTrue(originalRelation == encodedRelation);\n    }\n  }\n\n","sourceOld":"  private void verifyEncoding(double alat, double alon, double blat, double blon, double clat, double clon) {\n    int[] original = new int[]{GeoEncodingUtils.encodeLatitude(alat),\n        GeoEncodingUtils.encodeLongitude(alon),\n        GeoEncodingUtils.encodeLatitude(blat),\n        GeoEncodingUtils.encodeLongitude(blon),\n        GeoEncodingUtils.encodeLatitude(clat),\n        GeoEncodingUtils.encodeLongitude(clon)};\n\n    //quantize the triangle\n    byte[] b = new byte[7 * LatLonShape.BYTES];\n    LatLonShape.encodeTriangle(b, original[0], original[1], original[2], original[3], original[4], original[5]);\n    int[] encoded = new int[6];\n    LatLonShape.decodeTriangle(b, encoded);\n    double[] encodedQuantize = new double[] {GeoEncodingUtils.decodeLatitude(encoded[0]),\n        GeoEncodingUtils.decodeLongitude(encoded[1]),\n        GeoEncodingUtils.decodeLatitude(encoded[2]),\n        GeoEncodingUtils.decodeLongitude(encoded[3]),\n        GeoEncodingUtils.decodeLatitude(encoded[4]),\n        GeoEncodingUtils.decodeLongitude(encoded[5])};\n\n    int orientation = GeoUtils.orient(original[1], original[0], original[3], original[2], original[5], original[4]);\n    //quantize original\n    double[] originalQuantize;\n    //we need to change the orientation if CW\n    if (orientation == -1) {\n      originalQuantize = new double[] {GeoEncodingUtils.decodeLatitude(original[4]),\n          GeoEncodingUtils.decodeLongitude(original[5]),\n          GeoEncodingUtils.decodeLatitude(original[2]),\n          GeoEncodingUtils.decodeLongitude(original[3]),\n          GeoEncodingUtils.decodeLatitude(original[0]),\n          GeoEncodingUtils.decodeLongitude(original[1])};\n    } else {\n      originalQuantize = new double[] {GeoEncodingUtils.decodeLatitude(original[0]),\n          GeoEncodingUtils.decodeLongitude(original[1]),\n          GeoEncodingUtils.decodeLatitude(original[2]),\n          GeoEncodingUtils.decodeLongitude(original[3]),\n          GeoEncodingUtils.decodeLatitude(original[4]),\n          GeoEncodingUtils.decodeLongitude(original[5])};\n    }\n\n    for (int i =0; i < 100; i ++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      Polygon2D polygon2D = Polygon2D.create(polygon);\n      PointValues.Relation originalRelation = polygon2D.relateTriangle(originalQuantize[1], originalQuantize[0], originalQuantize[3], originalQuantize[2], originalQuantize[5], originalQuantize[4]);\n      PointValues.Relation encodedRelation = polygon2D.relateTriangle(encodedQuantize[1], encodedQuantize[0], encodedQuantize[3], encodedQuantize[2], encodedQuantize[5], encodedQuantize[4]);\n      assertTrue(originalRelation == encodedRelation);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a7c6b3c53318581ef3ddb386d90298695de120d":["2aeefba8262036d422d639e48c49d51316bea138"],"2aeefba8262036d422d639e48c49d51316bea138":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a7c6b3c53318581ef3ddb386d90298695de120d"]},"commit2Childs":{"0a7c6b3c53318581ef3ddb386d90298695de120d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2aeefba8262036d422d639e48c49d51316bea138":["0a7c6b3c53318581ef3ddb386d90298695de120d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2aeefba8262036d422d639e48c49d51316bea138"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}