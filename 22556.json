{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daeaac5f7b42498079f0fb7c3a91802e588fc21a","date":1493066118,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.split(\"_\")[3];\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests.count\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init.value\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.count.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b350cc7f6d61095957cf669171e69fb4fad5472","date":1501256356,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String coreNodeName = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4251b73be9d09c2f0ab17bc3925520f86b9bb4aa","date":1502760208,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39e9bb869848c7fd3f61e9d17825936e0be03b1a","date":1509470676,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      SolrClusterReporter sor = (SolrClusterReporter)reporter;\n      assertEquals(5, sor.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        SolrShardReporter srr = (SolrShardReporter)reporter;\n        assertEquals(5, srr.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85d08eb5e0605b54669b5498a5a5db3502fc932b","date":1511883595,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"test_collection\", 2, 4);\n    \n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 4));\n \n    // TODO this is no good\n    Thread.sleep(10000);\n    \n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    Thread.sleep(15000);\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f1db31862abc6f7722e72a2a933bcb7b601545a","date":1588045714,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"test_collection\", 2, 4);\n    \n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 4));\n \n    // TODO this is no good\n    Thread.sleep(10000);\n    \n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"test_collection\", 2, 4);\n    \n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 4));\n \n    // TODO this is no good\n    Thread.sleep(10000);\n    \n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update/json.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update/json.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testExplicitConfiguration().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"test_collection\", 2, 4);\n    \n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 4));\n \n    // TODO this is no good\n    Thread.sleep(10000);\n    \n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExplicitConfiguration() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr-solrreporter.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"test_collection\", 2, 4);\n    \n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 4));\n \n    // TODO this is no good\n    Thread.sleep(10000);\n    \n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      // verify registry names\n      for (String name : cc.getLoadedCoreNames()) {\n        SolrCore core = cc.getCore(name);\n        try {\n          String registryName = core.getCoreMetricManager().getRegistryName();\n          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();\n          String coreName = core.getName();\n          String collectionName = core.getCoreDescriptor().getCollectionName();\n          String replicaName = coreName.substring(coreName.indexOf(\"_replica_\") + 1);\n          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n\n          assertEquals(\"solr.core.\" + collectionName + \".\" + shardId + \".\" + replicaName, registryName);\n          assertEquals(\"solr.collection.\" + collectionName + \".\" + shardId + \".leader\", leaderRegistryName);\n\n        } finally {\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 1, reporters.size());\n      SolrMetricReporter reporter = reporters.get(\"test\");\n      assertNotNull(reporter);\n      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);\n      assertEquals(5, reporter.getPeriod());\n      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);\n      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;\n      assertNotNull(solrCoreContainerReporter.getCoreContainer());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());\n        reporter = null;\n        for (String name : reporters.keySet()) {\n          if (name.startsWith(\"test\")) {\n            reporter = reporters.get(name);\n          }\n        }\n        assertNotNull(reporter);\n        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);\n        assertEquals(5, reporter.getPeriod());\n        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);\n        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;\n        assertNotNull(solrCoreReporter.getCore());\n      }\n      for (String registryName : metricManager.registryNames(\".*\\\\.leader\")) {\n        leaderRegistries++;\n        reporters = metricManager.getReporters(registryName);\n        // no reporters registered for leader registry\n        assertEquals(reporters.toString(), 0, reporters.size());\n        // verify specific metrics\n        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();\n        String key = \"QUERY./select.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"UPDATE./update.requests\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n      if (metricManager.registryNames().contains(\"solr.cluster\")) {\n        clusterRegistries++;\n        Map<String,Metric> metrics = metricManager.registry(\"solr.cluster\").getMetrics();\n        String key = \"jvm.memory.heap.init\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n        key = \"leader.test_collection.shard1.UPDATE./update.requests.max\";\n        assertTrue(key, metrics.containsKey(key));\n        assertTrue(key, metrics.get(key) instanceof AggregateMetric);\n      }\n    });\n\n    assertEquals(\"leaderRegistries\", 2, leaderRegistries);\n    assertEquals(\"clusterRegistries\", 1, clusterRegistries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4251b73be9d09c2f0ab17bc3925520f86b9bb4aa"],"4251b73be9d09c2f0ab17bc3925520f86b9bb4aa":["6b350cc7f6d61095957cf669171e69fb4fad5472"],"6b350cc7f6d61095957cf669171e69fb4fad5472":["61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"3f1db31862abc6f7722e72a2a933bcb7b601545a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"85d08eb5e0605b54669b5498a5a5db3502fc932b":["39e9bb869848c7fd3f61e9d17825936e0be03b1a"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f1db31862abc6f7722e72a2a933bcb7b601545a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["39e9bb869848c7fd3f61e9d17825936e0be03b1a","85d08eb5e0605b54669b5498a5a5db3502fc932b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","61c45e99cf6676da48f19d7511c73712ad39402b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","6b350cc7f6d61095957cf669171e69fb4fad5472"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"39e9bb869848c7fd3f61e9d17825936e0be03b1a":["4251b73be9d09c2f0ab17bc3925520f86b9bb4aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"4251b73be9d09c2f0ab17bc3925520f86b9bb4aa":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","39e9bb869848c7fd3f61e9d17825936e0be03b1a"],"6b350cc7f6d61095957cf669171e69fb4fad5472":["4251b73be9d09c2f0ab17bc3925520f86b9bb4aa","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"61c45e99cf6676da48f19d7511c73712ad39402b":["6b350cc7f6d61095957cf669171e69fb4fad5472","e9017cf144952056066919f1ebc7897ff9bd71b1"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["3f1db31862abc6f7722e72a2a933bcb7b601545a"],"3f1db31862abc6f7722e72a2a933bcb7b601545a":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"85d08eb5e0605b54669b5498a5a5db3502fc932b":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"39e9bb869848c7fd3f61e9d17825936e0be03b1a":["85d08eb5e0605b54669b5498a5a5db3502fc932b","1aad05eeff7818b0833c02ac6b743aa72054963b"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}