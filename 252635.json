{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#setup().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#setup().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#setup().mjava","sourceNew":"  /**\n   * Loads terms and frequencies from Wikipedia (cached).\n   */\n  @BeforeClass\n  public static void setup() throws Exception {\n    assert false : \"disable assertions before running benchmarks!\";\n    List<TermFreq> input = readTop50KWiki();\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.dictionaryInput = input.toArray(new TermFreq [input.size()]);\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.benchmarkInput = input;\n  }\n\n","sourceOld":"  /**\n   * Loads terms and frequencies from Wikipedia (cached).\n   */\n  @BeforeClass\n  public static void setup() throws Exception {\n    assert false : \"disable assertions before running benchmarks!\";\n    List<TermFreq> input = readTop50KWiki();\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.dictionaryInput = input.toArray(new TermFreq [input.size()]);\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.benchmarkInput = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#setup().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#setup().mjava","sourceNew":"  /**\n   * Loads terms and frequencies from Wikipedia (cached).\n   */\n  @BeforeClass\n  public static void setup() throws Exception {\n    assert false : \"disable assertions before running benchmarks!\";\n    List<TermFreqPayload> input = readTop50KWiki();\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.dictionaryInput = input.toArray(new TermFreqPayload [input.size()]);\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.benchmarkInput = input;\n  }\n\n","sourceOld":"  /**\n   * Loads terms and frequencies from Wikipedia (cached).\n   */\n  @BeforeClass\n  public static void setup() throws Exception {\n    assert false : \"disable assertions before running benchmarks!\";\n    List<TermFreq> input = readTop50KWiki();\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.dictionaryInput = input.toArray(new TermFreq [input.size()]);\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.benchmarkInput = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#setup().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/LookupBenchmarkTest#setup().mjava","sourceNew":"  /**\n   * Loads terms and frequencies from Wikipedia (cached).\n   */\n  @BeforeClass\n  public static void setup() throws Exception {\n    assert false : \"disable assertions before running benchmarks!\";\n    List<Input> input = readTop50KWiki();\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.dictionaryInput = input.toArray(new Input [input.size()]);\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.benchmarkInput = input;\n  }\n\n","sourceOld":"  /**\n   * Loads terms and frequencies from Wikipedia (cached).\n   */\n  @BeforeClass\n  public static void setup() throws Exception {\n    assert false : \"disable assertions before running benchmarks!\";\n    List<TermFreqPayload> input = readTop50KWiki();\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.dictionaryInput = input.toArray(new TermFreqPayload [input.size()]);\n    Collections.shuffle(input, random);\n    LookupBenchmarkTest.benchmarkInput = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}