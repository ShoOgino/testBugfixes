{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","sourceNew":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","sourceOld":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0","date":1346181560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","sourceNew":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","sourceOld":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","sourceNew":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","sourceOld":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd86a6f83b714a27b74b3c352c35754a2da1eb92","date":1578867177,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","sourceNew":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","sourceOld":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","date":1578901035,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","sourceNew":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","sourceOld":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be14ec52c23374ac70e44448295e86c8ee6758ad","date":1580508250,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","sourceNew":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","sourceOld":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser#jj_add_error_token(int,int).mjava","sourceNew":"  private void jj_add_error_token(int kind, int pos) {\n     if (pos >= 100) {\n        return;\n     }\n\n     if (pos == jj_endpos + 1) {\n       jj_lasttokens[jj_endpos++] = kind;\n     } else if (jj_endpos != 0) {\n       jj_expentry = new int[jj_endpos];\n\n       for (int i = 0; i < jj_endpos; i++) {\n         jj_expentry[i] = jj_lasttokens[i];\n       }\n\n       for (int[] oldentry : jj_expentries) {\n         if (oldentry.length == jj_expentry.length) {\n           boolean isMatched = true;\n\n           for (int i = 0; i < jj_expentry.length; i++) {\n             if (oldentry[i] != jj_expentry[i]) {\n               isMatched = false;\n               break;\n             }\n\n           }\n           if (isMatched) {\n             jj_expentries.add(jj_expentry);\n             break;\n           }\n         }\n       }\n\n       if (pos != 0) {\n         jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n       }\n     }\n  }\n\n","sourceOld":"  private void jj_add_error_token(int kind, int pos) {\n    if (pos >= 100) return;\n    if (pos == jj_endpos + 1) {\n      jj_lasttokens[jj_endpos++] = kind;\n    } else if (jj_endpos != 0) {\n      jj_expentry = new int[jj_endpos];\n      for (int i = 0; i < jj_endpos; i++) {\n        jj_expentry[i] = jj_lasttokens[i];\n      }\n      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {\n        int[] oldentry = (int[])(it.next());\n        if (oldentry.length == jj_expentry.length) {\n          for (int i = 0; i < jj_expentry.length; i++) {\n            if (oldentry[i] != jj_expentry[i]) {\n              continue jj_entries_loop;\n            }\n          }\n          jj_expentries.add(jj_expentry);\n          break jj_entries_loop;\n        }\n      }\n      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":["bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0","fd86a6f83b714a27b74b3c352c35754a2da1eb92"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"be14ec52c23374ac70e44448295e86c8ee6758ad":["fd86a6f83b714a27b74b3c352c35754a2da1eb92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["be14ec52c23374ac70e44448295e86c8ee6758ad"],"bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0"],"fd86a6f83b714a27b74b3c352c35754a2da1eb92":["bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"]},"commit2Childs":{"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"be14ec52c23374ac70e44448295e86c8ee6758ad":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf4bdeb3c9738ba4edc07bca8118d44dbfa63bc0":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","05a14b2611ead08655a2b2bdc61632eb31316e57","fd86a6f83b714a27b74b3c352c35754a2da1eb92"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"fd86a6f83b714a27b74b3c352c35754a2da1eb92":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","be14ec52c23374ac70e44448295e86c8ee6758ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}