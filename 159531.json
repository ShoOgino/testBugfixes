{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","sourceNew":"    @Override\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup.GroupComparator#compare(MergedGroup[T],MergedGroup[T]).mjava","sourceNew":"    @Override\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public int compare(MergedGroup<T> group, MergedGroup<T> other) {\n      if (group == other) {\n        return 0;\n      }\n      //System.out.println(\"compare group=\" + group + \" other=\" + other);\n      final Object[] groupValues = group.topValues;\n      final Object[] otherValues = other.topValues;\n      //System.out.println(\"  groupValues=\" + groupValues + \" otherValues=\" + otherValues);\n      for (int compIDX = 0;compIDX < comparators.length; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareValues(groupValues[compIDX],\n                                                                             otherValues[compIDX]);\n        if (c != 0) {\n          return c;\n        }\n      }\n\n      // Tie break by min shard index:\n      assert group.minShardIndex != other.minShardIndex;\n      return group.minShardIndex - other.minShardIndex;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}