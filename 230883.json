{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","sourceNew":"  /**\n   * Test TaxonomyReader's child browsing method, getChildrenArrays()\n   * This only tests for correctness of the data on one example - we have\n   * below further tests on data refresh etc.\n   */\n  @Test\n  public void testChildrenArrays() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ChildrenArrays ca = tr.getChildrenArrays();\n    int[] youngestChildArray = ca.getYoungestChildArray();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.getOlderSiblingArray();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n    for (int i=0; i<expectedCategories.length; i++) {\n      // find expected children by looking at all expectedCategories\n      // for children\n      ArrayList<Integer> expectedChildren = new ArrayList<Integer>();\n      for (int j=expectedCategories.length-1; j>=0; j--) {\n        if (expectedCategories[j].length != expectedCategories[i].length+1) {\n          continue; // not longer by 1, so can't be a child\n        }\n        boolean ischild=true;\n        for (int k=0; k<expectedCategories[i].length; k++) {\n          if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {\n            ischild=false;\n            break;\n          }\n        }\n        if (ischild) {\n          expectedChildren.add(j);\n        }\n      }\n      // check that children and expectedChildren are the same, with the\n      // correct reverse (youngest to oldest) order:\n      if (expectedChildren.size()==0) {\n        assertEquals(TaxonomyReader.INVALID_ORDINAL, youngestChildArray[i]);\n      } else {\n        int child = youngestChildArray[i];\n        assertEquals(expectedChildren.get(0).intValue(),\n            child);\n        for (int j=1; j<expectedChildren.size(); j++) {\n          child = olderSiblingArray[child];\n          assertEquals(expectedChildren.get(j).intValue(),\n              child);\n          // if child is INVALID_ORDINAL we should stop, but\n          // assertEquals would fail in this case anyway.\n        }\n        // When we're done comparing, olderSiblingArray should now point\n        // to INVALID_ORDINAL, saying there are no more children. If it\n        // doesn't, we found too many children...\n        assertEquals(-1, olderSiblingArray[child]);\n      }\n    }\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test TaxonomyReader's child browsing method, getChildrenArrays()\n   * This only tests for correctness of the data on one example - we have\n   * below further tests on data refresh etc.\n   */\n  @Test\n  public void testChildrenArrays() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ChildrenArrays ca = tr.getChildrenArrays();\n    int[] youngestChildArray = ca.getYoungestChildArray();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.getOlderSiblingArray();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n    for (int i=0; i<expectedCategories.length; i++) {\n      // find expected children by looking at all expectedCategories\n      // for children\n      ArrayList<Integer> expectedChildren = new ArrayList<Integer>();\n      for (int j=expectedCategories.length-1; j>=0; j--) {\n        if (expectedCategories[j].length != expectedCategories[i].length+1) {\n          continue; // not longer by 1, so can't be a child\n        }\n        boolean ischild=true;\n        for (int k=0; k<expectedCategories[i].length; k++) {\n          if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {\n            ischild=false;\n            break;\n          }\n        }\n        if (ischild) {\n          expectedChildren.add(j);\n        }\n      }\n      // check that children and expectedChildren are the same, with the\n      // correct reverse (youngest to oldest) order:\n      if (expectedChildren.size()==0) {\n        assertEquals(TaxonomyReader.INVALID_ORDINAL, youngestChildArray[i]);\n      } else {\n        int child = youngestChildArray[i];\n        assertEquals(expectedChildren.get(0).intValue(),\n            child);\n        for (int j=1; j<expectedChildren.size(); j++) {\n          child = olderSiblingArray[child];\n          assertEquals(expectedChildren.get(j).intValue(),\n              child);\n          // if child is INVALID_ORDINAL we should stop, but\n          // assertEquals would fail in this case anyway.\n        }\n        // When we're done comparing, olderSiblingArray should now point\n        // to INVALID_ORDINAL, saying there are no more children. If it\n        // doesn't, we found too many children...\n        assertEquals(-1, olderSiblingArray[child]);\n      }\n    }\n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","sourceNew":"  /**\n   * Test TaxonomyReader's child browsing method, getChildrenArrays()\n   * This only tests for correctness of the data on one example - we have\n   * below further tests on data refresh etc.\n   */\n  @Test\n  public void testChildrenArrays() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ParallelTaxonomyArrays ca = tr.getParallelTaxonomyArrays();\n    int[] youngestChildArray = ca.children();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.siblings();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n    for (int i=0; i<expectedCategories.length; i++) {\n      // find expected children by looking at all expectedCategories\n      // for children\n      ArrayList<Integer> expectedChildren = new ArrayList<Integer>();\n      for (int j=expectedCategories.length-1; j>=0; j--) {\n        if (expectedCategories[j].length != expectedCategories[i].length+1) {\n          continue; // not longer by 1, so can't be a child\n        }\n        boolean ischild=true;\n        for (int k=0; k<expectedCategories[i].length; k++) {\n          if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {\n            ischild=false;\n            break;\n          }\n        }\n        if (ischild) {\n          expectedChildren.add(j);\n        }\n      }\n      // check that children and expectedChildren are the same, with the\n      // correct reverse (youngest to oldest) order:\n      if (expectedChildren.size()==0) {\n        assertEquals(TaxonomyReader.INVALID_ORDINAL, youngestChildArray[i]);\n      } else {\n        int child = youngestChildArray[i];\n        assertEquals(expectedChildren.get(0).intValue(),\n            child);\n        for (int j=1; j<expectedChildren.size(); j++) {\n          child = olderSiblingArray[child];\n          assertEquals(expectedChildren.get(j).intValue(),\n              child);\n          // if child is INVALID_ORDINAL we should stop, but\n          // assertEquals would fail in this case anyway.\n        }\n        // When we're done comparing, olderSiblingArray should now point\n        // to INVALID_ORDINAL, saying there are no more children. If it\n        // doesn't, we found too many children...\n        assertEquals(-1, olderSiblingArray[child]);\n      }\n    }\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test TaxonomyReader's child browsing method, getChildrenArrays()\n   * This only tests for correctness of the data on one example - we have\n   * below further tests on data refresh etc.\n   */\n  @Test\n  public void testChildrenArrays() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ChildrenArrays ca = tr.getChildrenArrays();\n    int[] youngestChildArray = ca.getYoungestChildArray();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.getOlderSiblingArray();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n    for (int i=0; i<expectedCategories.length; i++) {\n      // find expected children by looking at all expectedCategories\n      // for children\n      ArrayList<Integer> expectedChildren = new ArrayList<Integer>();\n      for (int j=expectedCategories.length-1; j>=0; j--) {\n        if (expectedCategories[j].length != expectedCategories[i].length+1) {\n          continue; // not longer by 1, so can't be a child\n        }\n        boolean ischild=true;\n        for (int k=0; k<expectedCategories[i].length; k++) {\n          if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {\n            ischild=false;\n            break;\n          }\n        }\n        if (ischild) {\n          expectedChildren.add(j);\n        }\n      }\n      // check that children and expectedChildren are the same, with the\n      // correct reverse (youngest to oldest) order:\n      if (expectedChildren.size()==0) {\n        assertEquals(TaxonomyReader.INVALID_ORDINAL, youngestChildArray[i]);\n      } else {\n        int child = youngestChildArray[i];\n        assertEquals(expectedChildren.get(0).intValue(),\n            child);\n        for (int j=1; j<expectedChildren.size(); j++) {\n          child = olderSiblingArray[child];\n          assertEquals(expectedChildren.get(j).intValue(),\n              child);\n          // if child is INVALID_ORDINAL we should stop, but\n          // assertEquals would fail in this case anyway.\n        }\n        // When we're done comparing, olderSiblingArray should now point\n        // to INVALID_ORDINAL, saying there are no more children. If it\n        // doesn't, we found too many children...\n        assertEquals(-1, olderSiblingArray[child]);\n      }\n    }\n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","sourceNew":"  /**\n   * Test TaxonomyReader's child browsing method, getChildrenArrays()\n   * This only tests for correctness of the data on one example - we have\n   * below further tests on data refresh etc.\n   */\n  @Test\n  public void testChildrenArrays() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ParallelTaxonomyArrays ca = tr.getParallelTaxonomyArrays();\n    int[] youngestChildArray = ca.children();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.siblings();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n    for (int i=0; i<expectedCategories.length; i++) {\n      // find expected children by looking at all expectedCategories\n      // for children\n      ArrayList<Integer> expectedChildren = new ArrayList<Integer>();\n      for (int j=expectedCategories.length-1; j>=0; j--) {\n        if (expectedCategories[j].length != expectedCategories[i].length+1) {\n          continue; // not longer by 1, so can't be a child\n        }\n        boolean ischild=true;\n        for (int k=0; k<expectedCategories[i].length; k++) {\n          if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {\n            ischild=false;\n            break;\n          }\n        }\n        if (ischild) {\n          expectedChildren.add(j);\n        }\n      }\n      // check that children and expectedChildren are the same, with the\n      // correct reverse (youngest to oldest) order:\n      if (expectedChildren.size()==0) {\n        assertEquals(TaxonomyReader.INVALID_ORDINAL, youngestChildArray[i]);\n      } else {\n        int child = youngestChildArray[i];\n        assertEquals(expectedChildren.get(0).intValue(),\n            child);\n        for (int j=1; j<expectedChildren.size(); j++) {\n          child = olderSiblingArray[child];\n          assertEquals(expectedChildren.get(j).intValue(),\n              child);\n          // if child is INVALID_ORDINAL we should stop, but\n          // assertEquals would fail in this case anyway.\n        }\n        // When we're done comparing, olderSiblingArray should now point\n        // to INVALID_ORDINAL, saying there are no more children. If it\n        // doesn't, we found too many children...\n        assertEquals(-1, olderSiblingArray[child]);\n      }\n    }\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test TaxonomyReader's child browsing method, getChildrenArrays()\n   * This only tests for correctness of the data on one example - we have\n   * below further tests on data refresh etc.\n   */\n  @Test\n  public void testChildrenArrays() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ChildrenArrays ca = tr.getChildrenArrays();\n    int[] youngestChildArray = ca.getYoungestChildArray();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.getOlderSiblingArray();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n    for (int i=0; i<expectedCategories.length; i++) {\n      // find expected children by looking at all expectedCategories\n      // for children\n      ArrayList<Integer> expectedChildren = new ArrayList<Integer>();\n      for (int j=expectedCategories.length-1; j>=0; j--) {\n        if (expectedCategories[j].length != expectedCategories[i].length+1) {\n          continue; // not longer by 1, so can't be a child\n        }\n        boolean ischild=true;\n        for (int k=0; k<expectedCategories[i].length; k++) {\n          if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {\n            ischild=false;\n            break;\n          }\n        }\n        if (ischild) {\n          expectedChildren.add(j);\n        }\n      }\n      // check that children and expectedChildren are the same, with the\n      // correct reverse (youngest to oldest) order:\n      if (expectedChildren.size()==0) {\n        assertEquals(TaxonomyReader.INVALID_ORDINAL, youngestChildArray[i]);\n      } else {\n        int child = youngestChildArray[i];\n        assertEquals(expectedChildren.get(0).intValue(),\n            child);\n        for (int j=1; j<expectedChildren.size(); j++) {\n          child = olderSiblingArray[child];\n          assertEquals(expectedChildren.get(j).intValue(),\n              child);\n          // if child is INVALID_ORDINAL we should stop, but\n          // assertEquals would fail in this case anyway.\n        }\n        // When we're done comparing, olderSiblingArray should now point\n        // to INVALID_ORDINAL, saying there are no more children. If it\n        // doesn't, we found too many children...\n        assertEquals(-1, olderSiblingArray[child]);\n      }\n    }\n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testChildrenArrays().mjava","sourceNew":"  /**\n   * Test TaxonomyReader's child browsing method, getChildrenArrays()\n   * This only tests for correctness of the data on one example - we have\n   * below further tests on data refresh etc.\n   */\n  @Test\n  public void testChildrenArrays() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ParallelTaxonomyArrays ca = tr.getParallelTaxonomyArrays();\n    int[] youngestChildArray = ca.children();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.siblings();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n    for (int i=0; i<expectedCategories.length; i++) {\n      // find expected children by looking at all expectedCategories\n      // for children\n      ArrayList<Integer> expectedChildren = new ArrayList<>();\n      for (int j=expectedCategories.length-1; j>=0; j--) {\n        if (expectedCategories[j].length != expectedCategories[i].length+1) {\n          continue; // not longer by 1, so can't be a child\n        }\n        boolean ischild=true;\n        for (int k=0; k<expectedCategories[i].length; k++) {\n          if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {\n            ischild=false;\n            break;\n          }\n        }\n        if (ischild) {\n          expectedChildren.add(j);\n        }\n      }\n      // check that children and expectedChildren are the same, with the\n      // correct reverse (youngest to oldest) order:\n      if (expectedChildren.size()==0) {\n        assertEquals(TaxonomyReader.INVALID_ORDINAL, youngestChildArray[i]);\n      } else {\n        int child = youngestChildArray[i];\n        assertEquals(expectedChildren.get(0).intValue(),\n            child);\n        for (int j=1; j<expectedChildren.size(); j++) {\n          child = olderSiblingArray[child];\n          assertEquals(expectedChildren.get(j).intValue(),\n              child);\n          // if child is INVALID_ORDINAL we should stop, but\n          // assertEquals would fail in this case anyway.\n        }\n        // When we're done comparing, olderSiblingArray should now point\n        // to INVALID_ORDINAL, saying there are no more children. If it\n        // doesn't, we found too many children...\n        assertEquals(-1, olderSiblingArray[child]);\n      }\n    }\n    tr.close();\n    indexDir.close();\n  }\n\n","sourceOld":"  /**\n   * Test TaxonomyReader's child browsing method, getChildrenArrays()\n   * This only tests for correctness of the data on one example - we have\n   * below further tests on data refresh etc.\n   */\n  @Test\n  public void testChildrenArrays() throws Exception {\n    Directory indexDir = newDirectory();\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    fillTaxonomy(tw);\n    tw.close();\n    TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    ParallelTaxonomyArrays ca = tr.getParallelTaxonomyArrays();\n    int[] youngestChildArray = ca.children();\n    assertEquals(tr.getSize(), youngestChildArray.length);\n    int[] olderSiblingArray = ca.siblings();\n    assertEquals(tr.getSize(), olderSiblingArray.length);\n    for (int i=0; i<expectedCategories.length; i++) {\n      // find expected children by looking at all expectedCategories\n      // for children\n      ArrayList<Integer> expectedChildren = new ArrayList<Integer>();\n      for (int j=expectedCategories.length-1; j>=0; j--) {\n        if (expectedCategories[j].length != expectedCategories[i].length+1) {\n          continue; // not longer by 1, so can't be a child\n        }\n        boolean ischild=true;\n        for (int k=0; k<expectedCategories[i].length; k++) {\n          if (!expectedCategories[j][k].equals(expectedCategories[i][k])) {\n            ischild=false;\n            break;\n          }\n        }\n        if (ischild) {\n          expectedChildren.add(j);\n        }\n      }\n      // check that children and expectedChildren are the same, with the\n      // correct reverse (youngest to oldest) order:\n      if (expectedChildren.size()==0) {\n        assertEquals(TaxonomyReader.INVALID_ORDINAL, youngestChildArray[i]);\n      } else {\n        int child = youngestChildArray[i];\n        assertEquals(expectedChildren.get(0).intValue(),\n            child);\n        for (int j=1; j<expectedChildren.size(); j++) {\n          child = olderSiblingArray[child];\n          assertEquals(expectedChildren.get(j).intValue(),\n              child);\n          // if child is INVALID_ORDINAL we should stop, but\n          // assertEquals would fail in this case anyway.\n        }\n        // When we're done comparing, olderSiblingArray should now point\n        // to INVALID_ORDINAL, saying there are no more children. If it\n        // doesn't, we found too many children...\n        assertEquals(-1, olderSiblingArray[child]);\n      }\n    }\n    tr.close();\n    indexDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3d58d08788c3fd51172ba34474cca42499d6391b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","3d58d08788c3fd51172ba34474cca42499d6391b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}