{"path":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T-extends-Comparable[#-super-T]]_getSorter(List[T]).mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T-extends-Comparable[#-super-T]]_getSorter(List[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Natural SorterTemplate */\n  private static <T extends Comparable<? super T>> SorterTemplate getSorter(final List<T> list) {\n    if (!(list instanceof RandomAccess))\n      throw new IllegalArgumentException(\"CollectionUtil can only sort random access lists in-place.\");\n    return new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        Collections.swap(list, i, j);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        return list.get(i).compareTo(list.get(j));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = list.get(i);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(list.get(j));\n      }\n      \n      private T pivot;\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T-extends-Comparable[#-super-T]]_getSorter(List[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Natural SorterTemplate */\n  private static <T extends Comparable<? super T>> SorterTemplate getSorter(final List<T> list) {\n    if (!(list instanceof RandomAccess))\n      throw new IllegalArgumentException(\"CollectionUtil can only sort random access lists in-place.\");\n    return new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        Collections.swap(list, i, j);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        return list.get(i).compareTo(list.get(j));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = list.get(i);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(list.get(j));\n      }\n      \n      private T pivot;\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T-extends-Comparable[#-super-T]]_getSorter(List[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Natural SorterTemplate */\n  private static <T extends Comparable<? super T>> SorterTemplate getSorter(final List<T> list) {\n    if (!(list instanceof RandomAccess))\n      throw new IllegalArgumentException(\"CollectionUtil can only sort random access lists in-place.\");\n    return new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        Collections.swap(list, i, j);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        return list.get(i).compareTo(list.get(j));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = list.get(i);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(list.get(j));\n      }\n      \n      private T pivot;\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CollectionUtil#[T-extends-Comparable[#-super-T]]_getSorter(List[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CollectionUtil#[T-extends-Comparable[#-super-T]]_getSorter(List[T]).mjava","sourceNew":"  /** Natural SorterTemplate */\n  private static <T extends Comparable<? super T>> SorterTemplate getSorter(final List<T> list) {\n    if (!(list instanceof RandomAccess))\n      throw new IllegalArgumentException(\"CollectionUtil can only sort random access lists in-place.\");\n    return new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        Collections.swap(list, i, j);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        return list.get(i).compareTo(list.get(j));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = list.get(i);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(list.get(j));\n      }\n      \n      private T pivot;\n    };\n  }\n\n","sourceOld":"  /** Natural SorterTemplate */\n  private static <T extends Comparable<? super T>> SorterTemplate getSorter(final List<T> list) {\n    if (!(list instanceof RandomAccess))\n      throw new IllegalArgumentException(\"CollectionUtil can only sort random access lists in-place.\");\n    return new SorterTemplate() {\n      @Override\n      protected void swap(int i, int j) {\n        Collections.swap(list, i, j);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        return list.get(i).compareTo(list.get(j));\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = list.get(i);\n      }\n  \n      @Override\n      protected int comparePivot(int j) {\n        return pivot.compareTo(list.get(j));\n      }\n      \n      private T pivot;\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}