{"path":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":"    @Override\n    public void seek(long pos) throws IOException {\n      buffer.position((int)pos);\n    }\n\n","sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      buffer.position((int)pos);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b4c6c95719e3020e407649a20b68538649beeb","date":1308055822,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L)\n          throw new IllegalArgumentException(\"Seeking to negative position\");\n        throw new IOException(\"seek past EOF\");\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L)\n          throw new IllegalArgumentException(\"Seeking to negative position\");\n        throw new IOException(\"seek past EOF\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      buffer.position((int)pos);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L)\n          throw new IllegalArgumentException(\"Seeking to negative position\");\n        throw new IOException(\"seek past EOF\");\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L)\n          throw new IllegalArgumentException(\"Seeking to negative position\");\n        throw new IOException(\"seek past EOF\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      buffer.position((int)pos);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new IOException(\"seek past EOF\");\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new IOException(\"seek past EOF: \" + this);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L)\n          throw new IllegalArgumentException(\"Seeking to negative position\");\n        throw new IOException(\"seek past EOF\");\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L)\n          throw new IllegalArgumentException(\"Seeking to negative position\");\n        throw new IOException(\"seek past EOF\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0b917a986a3f3db7d1038c139eb39a43e984cb","date":1322061230,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new IOException(\"seek past EOF\");\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new IOException(\"seek past EOF: \" + this);\n      } catch (NullPointerException npe) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new IOException(\"seek past EOF\");\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new IOException(\"seek past EOF: \" + this);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5090f41e198d9dd9374e99981f940b111973af2","date":1325969785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (NullPointerException npe) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new IOException(\"seek past EOF\");\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new IOException(\"seek past EOF: \" + this);\n      } catch (NullPointerException npe) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#seek(long).mjava","sourceNew":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (NullPointerException npe) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void seek(long pos) throws IOException {\n      // we use >> here to preserve negative, so we will catch AIOOBE:\n      final int bi = (int) (pos >> chunkSizePower);\n      try {\n        final ByteBuffer b = buffers[bi];\n        b.position((int) (pos & chunkSizeMask));\n        // write values, on exception all is unchanged\n        this.curBufIndex = bi;\n        this.curBuf = b;\n      } catch (ArrayIndexOutOfBoundsException aioobe) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (IllegalArgumentException iae) {\n        if (pos < 0L) {\n          throw new IllegalArgumentException(\"Seeking to negative position: \" + this);\n        }\n        throw new EOFException(\"seek past EOF: \" + this);\n      } catch (NullPointerException npe) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0b917a986a3f3db7d1038c139eb39a43e984cb":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"68b4c6c95719e3020e407649a20b68538649beeb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e5090f41e198d9dd9374e99981f940b111973af2"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["68b4c6c95719e3020e407649a20b68538649beeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5090f41e198d9dd9374e99981f940b111973af2":["0c0b917a986a3f3db7d1038c139eb39a43e984cb"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["9454a6510e2db155fb01faa5c049b06ece95fab9","68b4c6c95719e3020e407649a20b68538649beeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0b917a986a3f3db7d1038c139eb39a43e984cb":["e5090f41e198d9dd9374e99981f940b111973af2"],"68b4c6c95719e3020e407649a20b68538649beeb":["f1efe3edca215dd9891cb42af283fed96f792ca0","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["0c0b917a986a3f3db7d1038c139eb39a43e984cb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e5090f41e198d9dd9374e99981f940b111973af2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["68b4c6c95719e3020e407649a20b68538649beeb","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}