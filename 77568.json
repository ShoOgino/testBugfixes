{"path":"src/java/org/apache/solr/request/XMLWriter#writePrim(String,String,String,boolean).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/XMLWriter#writePrim(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  //\n  // OPT - specific writeInt, writeFloat, methods might be faster since\n  // there would be less write calls (write(\"<int name=\\\"\" + name + ... + </int>)\n  //\n  public void writePrim(String tag, String name, String val, boolean escape) throws IOException {\n    // OPT - we could use a temp char[] (or a StringBuilder) and if the\n    // size was small enough to fit (if escape==false we can calc exact size)\n    // then we could put things directly in the temp buf.\n    // need to see what percent of CPU this takes up first though...\n    // Could test a reusable StringBuilder...\n\n    // is this needed here???\n    // Only if a fieldtype calls writeStr or something\n    // with a null val instead of calling writeNull\n    /***\n    if (val==null) {\n      if (name==null) writer.write(\"<null/>\");\n      else writer.write(\"<null name=\\\"\" + name + \"/>\");\n    }\n    ***/\n\n    int contentLen=val.length();\n\n    startTag(tag, name, contentLen==0);\n    if (contentLen==0) return;\n\n    if (escape) {\n      XML.escapeCharData(val,writer);\n    } else {\n      writer.write(val,0,contentLen);\n    }\n\n    writer.write(\"</\");\n    writer.write(tag);\n    writer.write('>');\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","date":1263263734,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/XMLWriter#writePrim(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writePrim(String,String,String,boolean).mjava","sourceNew":"  //\n  // OPT - specific writeInt, writeFloat, methods might be faster since\n  // there would be less write calls (write(\"<int name=\\\"\" + name + ... + </int>)\n  //\n  public void writePrim(String tag, String name, String val, boolean escape) throws IOException {\n    // OPT - we could use a temp char[] (or a StringBuilder) and if the\n    // size was small enough to fit (if escape==false we can calc exact size)\n    // then we could put things directly in the temp buf.\n    // need to see what percent of CPU this takes up first though...\n    // Could test a reusable StringBuilder...\n\n    // is this needed here???\n    // Only if a fieldtype calls writeStr or something\n    // with a null val instead of calling writeNull\n    /***\n    if (val==null) {\n      if (name==null) writer.write(\"<null/>\");\n      else writer.write(\"<null name=\\\"\" + name + \"/>\");\n    }\n    ***/\n\n    int contentLen=val.length();\n\n    startTag(tag, name, contentLen==0);\n    if (contentLen==0) return;\n\n    if (escape) {\n      XML.escapeCharData(val,writer);\n    } else {\n      writer.write(val,0,contentLen);\n    }\n\n    writer.write(\"</\");\n    writer.write(tag);\n    writer.write('>');\n  }\n\n","sourceOld":"  //\n  // OPT - specific writeInt, writeFloat, methods might be faster since\n  // there would be less write calls (write(\"<int name=\\\"\" + name + ... + </int>)\n  //\n  public void writePrim(String tag, String name, String val, boolean escape) throws IOException {\n    // OPT - we could use a temp char[] (or a StringBuilder) and if the\n    // size was small enough to fit (if escape==false we can calc exact size)\n    // then we could put things directly in the temp buf.\n    // need to see what percent of CPU this takes up first though...\n    // Could test a reusable StringBuilder...\n\n    // is this needed here???\n    // Only if a fieldtype calls writeStr or something\n    // with a null val instead of calling writeNull\n    /***\n    if (val==null) {\n      if (name==null) writer.write(\"<null/>\");\n      else writer.write(\"<null name=\\\"\" + name + \"/>\");\n    }\n    ***/\n\n    int contentLen=val.length();\n\n    startTag(tag, name, contentLen==0);\n    if (contentLen==0) return;\n\n    if (escape) {\n      XML.escapeCharData(val,writer);\n    } else {\n      writer.write(val,0,contentLen);\n    }\n\n    writer.write(\"</\");\n    writer.write(tag);\n    writer.write('>');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}