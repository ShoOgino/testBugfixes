{"path":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","commits":[{"id":"e212b98d0f919993a50d5d662d73517f1f180ec2","date":1355246702,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateNoDistribProcessor() throws Exception {\n    try {\n      initCore(\"solrconfig-tlog.xml\",\"schema15.xml\");\n      \n      assertNotNull(\"this test requires an update chain named 'nodistrib'\",\n                    h.getCore().getUpdateProcessingChain(\"nodistrib\")); \n\n\n      // creating docs should work fine\n      addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", \"42\"), \n                       params(\"update.chain\",\"nodistrib\"));\n      assertU(commit());\n\n      try {\n        ignoreException(\"DistributedUpdateProcessorFactory\");\n\n        // updating docs should fail\n        addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", map(\"inc\",-666)), \n                         params(\"update.chain\",\"nodistrib\"));\n        \n        fail(\"didn't get error about needing DistributedUpdateProcessorFactory\");\n      } catch (SolrException ex) {\n        assertEquals(400, ex.code());\n        // if the message doesn't match our expectation, wrap & rethrow\n        if (ex.getMessage().indexOf(\"DistributedUpdateProcessorFactory\") < 0) {\n          throw new RuntimeException(\"exception message is not expected\", ex);\n        }\n      } finally {\n        resetExceptionIgnores();\n      }\n\n    } finally {\n      deleteCore();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateNoDistribProcessor() throws Exception {\n    try {\n      initCore(\"solrconfig-tlog.xml\",\"schema15.xml\");\n      \n      assertNotNull(\"this test requires an update chain named 'nodistrib'\",\n                    h.getCore().getUpdateProcessingChain(\"nodistrib\")); \n\n\n      // creating docs should work fine\n      addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", \"42\"), \n                       params(\"update.chain\",\"nodistrib\"));\n      assertU(commit());\n\n      try {\n        ignoreException(\"DistributedUpdateProcessorFactory\");\n\n        // updating docs should fail\n        addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", map(\"inc\",-666)), \n                         params(\"update.chain\",\"nodistrib\"));\n        \n        fail(\"didn't get error about needing DistributedUpdateProcessorFactory\");\n      } catch (SolrException ex) {\n        assertEquals(400, ex.code());\n        // if the message doesn't match our expectation, wrap & rethrow\n        if (ex.getMessage().indexOf(\"DistributedUpdateProcessorFactory\") < 0) {\n          throw new RuntimeException(\"exception message is not expected\", ex);\n        }\n      } finally {\n        resetExceptionIgnores();\n      }\n\n    } finally {\n      deleteCore();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","sourceNew":"  public void testUpdateNoDistribProcessor() throws Exception {\n    try {\n      initCore(\"solrconfig-tlog.xml\",\"schema15.xml\");\n      \n      assertNotNull(\"this test requires an update chain named 'nodistrib'\",\n                    h.getCore().getUpdateProcessingChain(\"nodistrib\")); \n\n      // creating docs should work fine\n      addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", \"42\"), \n                       params(\"update.chain\",\"nodistrib\"));\n      assertU(commit());\n\n      ignoreException(\"DistributedUpdateProcessorFactory\");\n      // updating docs should fail\n      SolrException ex = expectThrows(SolrException.class, () -> {\n        addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", map(\"inc\",-666)),\n            params(\"update.chain\",\"nodistrib\"));\n      });\n      assertEquals(400, ex.code());\n      assertTrue(ex.getMessage().contains(\"DistributedUpdateProcessorFactory\"));\n      resetExceptionIgnores();\n    } finally {\n      deleteCore();\n    }\n  }\n\n","sourceOld":"  public void testUpdateNoDistribProcessor() throws Exception {\n    try {\n      initCore(\"solrconfig-tlog.xml\",\"schema15.xml\");\n      \n      assertNotNull(\"this test requires an update chain named 'nodistrib'\",\n                    h.getCore().getUpdateProcessingChain(\"nodistrib\")); \n\n\n      // creating docs should work fine\n      addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", \"42\"), \n                       params(\"update.chain\",\"nodistrib\"));\n      assertU(commit());\n\n      try {\n        ignoreException(\"DistributedUpdateProcessorFactory\");\n\n        // updating docs should fail\n        addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", map(\"inc\",-666)), \n                         params(\"update.chain\",\"nodistrib\"));\n        \n        fail(\"didn't get error about needing DistributedUpdateProcessorFactory\");\n      } catch (SolrException ex) {\n        assertEquals(400, ex.code());\n        // if the message doesn't match our expectation, wrap & rethrow\n        if (ex.getMessage().indexOf(\"DistributedUpdateProcessorFactory\") < 0) {\n          throw new RuntimeException(\"exception message is not expected\", ex);\n        }\n      } finally {\n        resetExceptionIgnores();\n      }\n\n    } finally {\n      deleteCore();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","sourceNew":"  public void testUpdateNoDistribProcessor() throws Exception {\n    try {\n      initCore(\"solrconfig-tlog.xml\",\"schema15.xml\");\n      \n      assertNotNull(\"this test requires an update chain named 'nodistrib'\",\n                    h.getCore().getUpdateProcessingChain(\"nodistrib\")); \n\n      // creating docs should work fine\n      addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", \"42\"), \n                       params(\"update.chain\",\"nodistrib\"));\n      assertU(commit());\n\n      ignoreException(\"DistributedUpdateProcessorFactory\");\n      // updating docs should fail\n      SolrException ex = expectThrows(SolrException.class, () -> {\n        addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", map(\"inc\",-666)),\n            params(\"update.chain\",\"nodistrib\"));\n      });\n      assertEquals(400, ex.code());\n      assertTrue(ex.getMessage().contains(\"DistributedUpdateProcessorFactory\"));\n      resetExceptionIgnores();\n    } finally {\n      deleteCore();\n    }\n  }\n\n","sourceOld":"  public void testUpdateNoDistribProcessor() throws Exception {\n    try {\n      initCore(\"solrconfig-tlog.xml\",\"schema15.xml\");\n      \n      assertNotNull(\"this test requires an update chain named 'nodistrib'\",\n                    h.getCore().getUpdateProcessingChain(\"nodistrib\")); \n\n\n      // creating docs should work fine\n      addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", \"42\"), \n                       params(\"update.chain\",\"nodistrib\"));\n      assertU(commit());\n\n      try {\n        ignoreException(\"DistributedUpdateProcessorFactory\");\n\n        // updating docs should fail\n        addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", map(\"inc\",-666)), \n                         params(\"update.chain\",\"nodistrib\"));\n        \n        fail(\"didn't get error about needing DistributedUpdateProcessorFactory\");\n      } catch (SolrException ex) {\n        assertEquals(400, ex.code());\n        // if the message doesn't match our expectation, wrap & rethrow\n        if (ex.getMessage().indexOf(\"DistributedUpdateProcessorFactory\") < 0) {\n          throw new RuntimeException(\"exception message is not expected\", ex);\n        }\n      } finally {\n        resetExceptionIgnores();\n      }\n\n    } finally {\n      deleteCore();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestAtomicUpdateErrorCases#testUpdateNoDistribProcessor().mjava","sourceNew":"  public void testUpdateNoDistribProcessor() throws Exception {\n    try {\n      initCore(\"solrconfig-tlog.xml\",\"schema15.xml\");\n      \n      assertNotNull(\"this test requires an update chain named 'nodistrib'\",\n                    h.getCore().getUpdateProcessingChain(\"nodistrib\")); \n\n      // creating docs should work fine\n      addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", \"42\"), \n                       params(\"update.chain\",\"nodistrib\"));\n      assertU(commit());\n\n      ignoreException(\"DistributedUpdateProcessorFactory\");\n      // updating docs should fail\n      SolrException ex = expectThrows(SolrException.class, () -> {\n        addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", map(\"inc\",-666)),\n            params(\"update.chain\",\"nodistrib\"));\n      });\n      assertEquals(400, ex.code());\n      assertTrue(ex.getMessage().contains(\"DistributedUpdateProcessorFactory\"));\n      resetExceptionIgnores();\n    } finally {\n      deleteCore();\n    }\n  }\n\n","sourceOld":"  public void testUpdateNoDistribProcessor() throws Exception {\n    try {\n      initCore(\"solrconfig-tlog.xml\",\"schema15.xml\");\n      \n      assertNotNull(\"this test requires an update chain named 'nodistrib'\",\n                    h.getCore().getUpdateProcessingChain(\"nodistrib\")); \n\n\n      // creating docs should work fine\n      addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", \"42\"), \n                       params(\"update.chain\",\"nodistrib\"));\n      assertU(commit());\n\n      try {\n        ignoreException(\"DistributedUpdateProcessorFactory\");\n\n        // updating docs should fail\n        addAndGetVersion(sdoc(\"id\", \"1\", \"val_i\", map(\"inc\",-666)), \n                         params(\"update.chain\",\"nodistrib\"));\n        \n        fail(\"didn't get error about needing DistributedUpdateProcessorFactory\");\n      } catch (SolrException ex) {\n        assertEquals(400, ex.code());\n        // if the message doesn't match our expectation, wrap & rethrow\n        if (ex.getMessage().indexOf(\"DistributedUpdateProcessorFactory\") < 0) {\n          throw new RuntimeException(\"exception message is not expected\", ex);\n        }\n      } finally {\n        resetExceptionIgnores();\n      }\n\n    } finally {\n      deleteCore();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e212b98d0f919993a50d5d662d73517f1f180ec2"],"e212b98d0f919993a50d5d662d73517f1f180ec2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["e212b98d0f919993a50d5d662d73517f1f180ec2"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["e212b98d0f919993a50d5d662d73517f1f180ec2","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["e212b98d0f919993a50d5d662d73517f1f180ec2","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e212b98d0f919993a50d5d662d73517f1f180ec2":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e212b98d0f919993a50d5d662d73517f1f180ec2"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}