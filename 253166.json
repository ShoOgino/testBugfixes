{"path":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.init(DEFAULT_VERSION_PARAM);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.init(DEFAULT_VERSION_PARAM);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.init(DEFAULT_VERSION_PARAM);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.init(DEFAULT_VERSION_PARAM);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.init(DEFAULT_VERSION_PARAM);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.init(DEFAULT_VERSION_PARAM);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(DEFAULT_VERSION);\n    tokenizerFactory.init(EMPTY_PARAMS);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.init(DEFAULT_VERSION_PARAM);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92ed69fd02d759d98f62e869eaa64e64e22302bf","date":1336612003,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(DEFAULT_VERSION);\n    tokenizerFactory.init(EMPTY_PARAMS);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(reader));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(reader));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3149c447232aff105275cf92bb495567e96b0c87","date":1343102374,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(reader));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(reader));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(reader));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(reader));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(CharReader.get(reader)));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ar/TestArabicFilters#testPersianCharFilter().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestArabicFilters#testPersianCharFilter().mjava","sourceNew":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(reader));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","sourceOld":"  /**\n   * Test PersianCharFilterFactory\n   */\n  public void testPersianCharFilter() throws Exception {\n    Reader reader = new StringReader(\"می‌خورد\");\n    PersianCharFilterFactory charfilterFactory = new PersianCharFilterFactory();\n    StandardTokenizerFactory tokenizerFactory = new StandardTokenizerFactory();\n    tokenizerFactory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    tokenizerFactory.init(args);\n    TokenStream stream = tokenizerFactory.create(charfilterFactory.create(reader));\n    assertTokenStreamContents(stream, new String[] { \"می\", \"خورد\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc706b1e03a539d44d99998108feb684bb44cbb2":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["fc706b1e03a539d44d99998108feb684bb44cbb2","3149c447232aff105275cf92bb495567e96b0c87"],"aba371508186796cc6151d8223a5b4e16d02e26e":["92ed69fd02d759d98f62e869eaa64e64e22302bf","5a1a22b1ad88b436661458df567f3fdb446392a4"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["92ed69fd02d759d98f62e869eaa64e64e22302bf","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3149c447232aff105275cf92bb495567e96b0c87":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"fc706b1e03a539d44d99998108feb684bb44cbb2":["5a1a22b1ad88b436661458df567f3fdb446392a4","fe33227f6805edab2036cbb80645cc4e2d1fa424","3149c447232aff105275cf92bb495567e96b0c87"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["fc706b1e03a539d44d99998108feb684bb44cbb2","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c26f00b574427b55127e869b935845554afde1fa":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3149c447232aff105275cf92bb495567e96b0c87":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}