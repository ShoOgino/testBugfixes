{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"/dev/null","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.overseerPrioritizer = overseerPrioritizer;\n    this.collectionWip = new HashSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781578ca5d3d2194bc55fc3457c62aef623db6f2","date":1464859077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.overseerPrioritizer = overseerPrioritizer;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.overseerPrioritizer = overseerPrioritizer;\n    this.collectionWip = new HashSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.overseerPrioritizer = overseerPrioritizer;\n    commandMap = new ImmutableMap.Builder<CollectionParams.CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.overseerPrioritizer = overseerPrioritizer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.overseerPrioritizer = overseerPrioritizer;\n    commandMap = new ImmutableMap.Builder<CollectionParams.CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.overseerPrioritizer = overseerPrioritizer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.overseerPrioritizer = overseerPrioritizer;\n    this.collectionWip = new HashSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"424ac616f0aeeb2a3c8b6b94084255a0bcab9628","date":1477057622,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","date":1491468518,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["781578ca5d3d2194bc55fc3457c62aef623db6f2","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["b1777912fb613f51063554d81f71c1b70d6bcd77"],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"b54504c5305a6cc48f59c627c9c8dd727e2a8f0b":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["b54504c5305a6cc48f59c627c9c8dd727e2a8f0b","54ca69905c5d9d1529286f06ab1d12c68f6c13cb","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}