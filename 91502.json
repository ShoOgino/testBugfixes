{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testInterpolation().mjava","commits":[{"id":"dc72140840de32509d596eaa00458d98bd5b9cb8","date":1505456411,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testInterpolation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInterpolation() {\n    final double lat = 52.51607;\n    final double lon = 13.37698;\n    final double[] pathLats = new double[] {52.5355,52.54,52.5626,52.5665,52.6007,52.6135,52.6303,52.6651,52.7074};\n    final double[] pathLons = new double[] {13.3634,13.3704,13.3307,13.3076,13.2806,13.2484,13.2406,13.241,13.1926};\n\n    // Set up a point in the right way\n    final GeoPoint carPoint = new GeoPoint(PlanetModel.SPHERE, toRadians(lat), toRadians(lon));\n    // Create the path, but use a tiny width (e.g. zero)\n    final GeoPoint[] pathPoints = new GeoPoint[pathLats.length];\n    for (int i = 0; i < pathPoints.length; i++) {\n      pathPoints[i] = new GeoPoint(PlanetModel.SPHERE, toRadians(pathLats[i]), toRadians(pathLons[i]));\n    }\n    // Construct a path with no width\n    final GeoPath thisPath = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, 0.0, pathPoints);\n    // Construct a path with a width\n    final GeoPath legacyPath = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, 1e-6, pathPoints);\n    // Compute the inside distance to the atPoint using zero-width path\n    final double distance = thisPath.computeNearestDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using legacy path\n    final double legacyDistance = legacyPath.computeNearestDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using the legacy formula\n    final double oldFormulaDistance = thisPath.computeDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using the legacy formula with the legacy shape\n    final double oldFormulaLegacyDistance = legacyPath.computeDistance(DistanceStyle.ARC, carPoint);\n\n    // These should be about the same\n    assertEquals(legacyDistance, distance, 1e-12);\n    assertEquals(oldFormulaLegacyDistance, oldFormulaDistance, 1e-12);\n    // This isn't true because example search center is off of the path.\n    //assertEquals(oldFormulaDistance, distance, 1e-12);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testInterpolation().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInterpolation() {\n    final double lat = 52.51607;\n    final double lon = 13.37698;\n    final double[] pathLats = new double[] {52.5355,52.54,52.5626,52.5665,52.6007,52.6135,52.6303,52.6651,52.7074};\n    final double[] pathLons = new double[] {13.3634,13.3704,13.3307,13.3076,13.2806,13.2484,13.2406,13.241,13.1926};\n\n    // Set up a point in the right way\n    final GeoPoint carPoint = new GeoPoint(PlanetModel.SPHERE, toRadians(lat), toRadians(lon));\n    // Create the path, but use a tiny width (e.g. zero)\n    final GeoPoint[] pathPoints = new GeoPoint[pathLats.length];\n    for (int i = 0; i < pathPoints.length; i++) {\n      pathPoints[i] = new GeoPoint(PlanetModel.SPHERE, toRadians(pathLats[i]), toRadians(pathLons[i]));\n    }\n    // Construct a path with no width\n    final GeoPath thisPath = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, 0.0, pathPoints);\n    // Construct a path with a width\n    final GeoPath legacyPath = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, 1e-6, pathPoints);\n    // Compute the inside distance to the atPoint using zero-width path\n    final double distance = thisPath.computeNearestDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using legacy path\n    final double legacyDistance = legacyPath.computeNearestDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using the legacy formula\n    final double oldFormulaDistance = thisPath.computeDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using the legacy formula with the legacy shape\n    final double oldFormulaLegacyDistance = legacyPath.computeDistance(DistanceStyle.ARC, carPoint);\n\n    // These should be about the same\n    assertEquals(legacyDistance, distance, 1e-12);\n    assertEquals(oldFormulaLegacyDistance, oldFormulaDistance, 1e-12);\n    // This isn't true because example search center is off of the path.\n    //assertEquals(oldFormulaDistance, distance, 1e-12);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71a92b21a4564a0dd5e0559cebf435a5fe34542e","date":1573666298,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testInterpolation().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPathTest#testInterpolation().mjava","sourceNew":"  @Test\n  public void testInterpolation() {\n    final double lat = 52.51607;\n    final double lon = 13.37698;\n    final double[] pathLats = new double[] {52.5355,52.54,52.5626,52.5665,52.6007,52.6135,52.6303,52.6651,52.7074};\n    final double[] pathLons = new double[] {13.3634,13.3704,13.3307,13.3076,13.2806,13.2484,13.2406,13.241,13.1926};\n\n    // Set up a point in the right way\n    final GeoPoint carPoint = new GeoPoint(PlanetModel.SPHERE, Math.toRadians(lat), Math.toRadians(lon));\n    // Create the path, but use a tiny width (e.g. zero)\n    final GeoPoint[] pathPoints = new GeoPoint[pathLats.length];\n    for (int i = 0; i < pathPoints.length; i++) {\n      pathPoints[i] = new GeoPoint(PlanetModel.SPHERE, Math.toRadians(pathLats[i]), Math.toRadians(pathLons[i]));\n    }\n    // Construct a path with no width\n    final GeoPath thisPath = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, 0.0, pathPoints);\n    // Construct a path with a width\n    final GeoPath legacyPath = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, 1e-6, pathPoints);\n    // Compute the inside distance to the atPoint using zero-width path\n    final double distance = thisPath.computeNearestDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using legacy path\n    final double legacyDistance = legacyPath.computeNearestDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using the legacy formula\n    final double oldFormulaDistance = thisPath.computeDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using the legacy formula with the legacy shape\n    final double oldFormulaLegacyDistance = legacyPath.computeDistance(DistanceStyle.ARC, carPoint);\n\n    // These should be about the same\n    assertEquals(legacyDistance, distance, 1e-12);\n    assertEquals(oldFormulaLegacyDistance, oldFormulaDistance, 1e-12);\n    // This isn't true because example search center is off of the path.\n    //assertEquals(oldFormulaDistance, distance, 1e-12);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterpolation() {\n    final double lat = 52.51607;\n    final double lon = 13.37698;\n    final double[] pathLats = new double[] {52.5355,52.54,52.5626,52.5665,52.6007,52.6135,52.6303,52.6651,52.7074};\n    final double[] pathLons = new double[] {13.3634,13.3704,13.3307,13.3076,13.2806,13.2484,13.2406,13.241,13.1926};\n\n    // Set up a point in the right way\n    final GeoPoint carPoint = new GeoPoint(PlanetModel.SPHERE, toRadians(lat), toRadians(lon));\n    // Create the path, but use a tiny width (e.g. zero)\n    final GeoPoint[] pathPoints = new GeoPoint[pathLats.length];\n    for (int i = 0; i < pathPoints.length; i++) {\n      pathPoints[i] = new GeoPoint(PlanetModel.SPHERE, toRadians(pathLats[i]), toRadians(pathLons[i]));\n    }\n    // Construct a path with no width\n    final GeoPath thisPath = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, 0.0, pathPoints);\n    // Construct a path with a width\n    final GeoPath legacyPath = GeoPathFactory.makeGeoPath(PlanetModel.SPHERE, 1e-6, pathPoints);\n    // Compute the inside distance to the atPoint using zero-width path\n    final double distance = thisPath.computeNearestDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using legacy path\n    final double legacyDistance = legacyPath.computeNearestDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using the legacy formula\n    final double oldFormulaDistance = thisPath.computeDistance(DistanceStyle.ARC, carPoint);\n    // Compute the inside distance using the legacy formula with the legacy shape\n    final double oldFormulaLegacyDistance = legacyPath.computeDistance(DistanceStyle.ARC, carPoint);\n\n    // These should be about the same\n    assertEquals(legacyDistance, distance, 1e-12);\n    assertEquals(oldFormulaLegacyDistance, oldFormulaDistance, 1e-12);\n    // This isn't true because example search center is off of the path.\n    //assertEquals(oldFormulaDistance, distance, 1e-12);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc72140840de32509d596eaa00458d98bd5b9cb8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc72140840de32509d596eaa00458d98bd5b9cb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71a92b21a4564a0dd5e0559cebf435a5fe34542e":["dc72140840de32509d596eaa00458d98bd5b9cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71a92b21a4564a0dd5e0559cebf435a5fe34542e"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","dc72140840de32509d596eaa00458d98bd5b9cb8"],"dc72140840de32509d596eaa00458d98bd5b9cb8":["685bd38810c206c93e9058f3c2cfa9827c086c27","71a92b21a4564a0dd5e0559cebf435a5fe34542e"],"71a92b21a4564a0dd5e0559cebf435a5fe34542e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}