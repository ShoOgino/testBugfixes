{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","sourceNew":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","sourceOld":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","sourceNew":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","sourceOld":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","sourceNew":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","sourceOld":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","sourceNew":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","sourceOld":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","sourceNew":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","sourceOld":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a","date":1429073859,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","sourceNew":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      ObjectResolver resolver = null;\n      if(val instanceof ObjectResolver) {\n        resolver = (ObjectResolver)val;\n      }\n      else {\n        resolver = this.resolver;\n      }\n      if (resolver != null) {\n        Object tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","sourceOld":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      Object tmpVal = val;\n      if (resolver != null) {\n        tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a73523cad0e90afd3641896fc54eb1f94c113527","date":1458235336,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeVal(Object).mjava","sourceNew":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      ObjectResolver resolver = null;\n      if(val instanceof ObjectResolver) {\n        resolver = (ObjectResolver)val;\n      }\n      else {\n        resolver = this.resolver;\n      }\n      if (resolver != null) {\n        Object tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n    // Fallback to do *something*.\n    // note: if the user of this codec doesn't want this (e.g. UpdateLog) it can supply an ObjectResolver that does\n    //  something else like throw an exception.\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","sourceOld":"  public void writeVal(Object val) throws IOException {\n    if (writeKnownType(val)) {\n      return;\n    } else {\n      ObjectResolver resolver = null;\n      if(val instanceof ObjectResolver) {\n        resolver = (ObjectResolver)val;\n      }\n      else {\n        resolver = this.resolver;\n      }\n      if (resolver != null) {\n        Object tmpVal = resolver.resolve(val, this);\n        if (tmpVal == null) return; // null means the resolver took care of it fully\n        if (writeKnownType(tmpVal)) return;\n      }\n    }\n\n    writeVal(val.getClass().getName() + ':' + val.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a73523cad0e90afd3641896fc54eb1f94c113527":["c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a73523cad0e90afd3641896fc54eb1f94c113527"]},"commit2Childs":{"c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a":["a73523cad0e90afd3641896fc54eb1f94c113527"],"a73523cad0e90afd3641896fc54eb1f94c113527":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c7a0594ac6740a20a5f8d6ab8d7d881f5283c61a","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}