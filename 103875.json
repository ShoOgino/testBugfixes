{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter).mjava","commits":[{"id":"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","date":1286712181,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   *\n   * @param writer The IndexWriter to open from\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer) throws CorruptIndexException, IOException {\n    return writer.getReader();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   *\n   * @param writer The IndexWriter to open from\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer) throws CorruptIndexException, IOException {\n    return writer.getReader();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   *\n   * @param writer The IndexWriter to open from\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer) throws CorruptIndexException, IOException {\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter).mjava","sourceNew":null,"sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   *\n   * @param writer The IndexWriter to open from\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer) throws CorruptIndexException, IOException {\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   *\n   * @param writer The IndexWriter to open from\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see #reopen(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static IndexReader open(final IndexWriter writer) throws CorruptIndexException, IOException {\n    return writer.getReader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","eb378f8bdee16a26810e086303a4a86b4930ea12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","eb378f8bdee16a26810e086303a4a86b4930ea12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb378f8bdee16a26810e086303a4a86b4930ea12"]},"commit2Childs":{"296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01":["29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","eb378f8bdee16a26810e086303a4a86b4930ea12"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296e4ed69ccbda3c7b5fdb86c7acaa43c9074e01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}