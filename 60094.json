{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#newExcludeBytesRefFilter(String,SolrParams).mjava","commits":[{"id":"5a19f08b39212024938a7d0daa611ed2918ac233","date":1486652106,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#newExcludeBytesRefFilter(String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  protected Predicate<BytesRef> newExcludeBytesRefFilter(String field, SolrParams params) {\n    final String exclude = params.getFieldParam(field, FacetParams.FACET_EXCLUDETERMS);\n    if (exclude == null) {\n      return null;\n    }\n\n    final Set<String> excludeTerms = new HashSet<>(StrUtils.splitSmart(exclude, \",\", true));\n\n    return new Predicate<BytesRef>() {\n      @Override\n      public boolean test(BytesRef bytesRef) {\n        return !excludeTerms.contains(bytesRef.utf8ToString());\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f59e5a034782f8d1b0eec0ec9a74be9b713764f4","date":1509386605,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#newExcludeBytesRefFilter(String,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#newExcludeBytesRefFilter(String,SolrParams).mjava","sourceNew":"  /**\n   * Create a new bytes ref filter for excluding facet terms.\n   *\n   * This method by default uses the {@link FacetParams#FACET_EXCLUDETERMS} parameter\n   * but custom SimpleFacets classes could use a different implementation.\n   *\n   * @param field the field to check for facet term filters\n   * @param params the request parameter object\n   * @return A predicate for filtering terms or null if no filters are applicable.\n   */\n  protected Predicate<BytesRef> newExcludeBytesRefFilter(String field, SolrParams params) {\n    final String exclude = params.getFieldParam(field, FacetParams.FACET_EXCLUDETERMS);\n    if (exclude == null) {\n      return null;\n    }\n\n    final Set<String> excludeTerms = new HashSet<>(StrUtils.splitSmart(exclude, \",\", true));\n\n    return new Predicate<BytesRef>() {\n      @Override\n      public boolean test(BytesRef bytesRef) {\n        return !excludeTerms.contains(bytesRef.utf8ToString());\n      }\n    };\n  }\n\n","sourceOld":"  protected Predicate<BytesRef> newExcludeBytesRefFilter(String field, SolrParams params) {\n    final String exclude = params.getFieldParam(field, FacetParams.FACET_EXCLUDETERMS);\n    if (exclude == null) {\n      return null;\n    }\n\n    final Set<String> excludeTerms = new HashSet<>(StrUtils.splitSmart(exclude, \",\", true));\n\n    return new Predicate<BytesRef>() {\n      @Override\n      public boolean test(BytesRef bytesRef) {\n        return !excludeTerms.contains(bytesRef.utf8ToString());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a19f08b39212024938a7d0daa611ed2918ac233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f59e5a034782f8d1b0eec0ec9a74be9b713764f4":["5a19f08b39212024938a7d0daa611ed2918ac233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f59e5a034782f8d1b0eec0ec9a74be9b713764f4"]},"commit2Childs":{"5a19f08b39212024938a7d0daa611ed2918ac233":["f59e5a034782f8d1b0eec0ec9a74be9b713764f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a19f08b39212024938a7d0daa611ed2918ac233"],"f59e5a034782f8d1b0eec0ec9a74be9b713764f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}