{"path":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlicesMap(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89f828d954597b98a28942874636f35c719b8a5d","date":1354471211,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlicesMap(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getActiveSlicesMap(collection);\n\n\n    // TODO: now that we create shards ahead of time, is this code needed?  Esp since hash ranges aren't assigned when creating via this method?\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // TODO: don't need to sort to find shard with fewest replicas!\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getReplicasMap().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fa64435b5902ce266c23755a4a00691a3285dab8"],"89f828d954597b98a28942874636f35c719b8a5d":["c5a558d54519c651068ddb202f03befefb1514a7"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","89f828d954597b98a28942874636f35c719b8a5d"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["89f828d954597b98a28942874636f35c719b8a5d"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5a558d54519c651068ddb202f03befefb1514a7":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"89f828d954597b98a28942874636f35c719b8a5d":["407687e67faf6e1f02a211ca078d8e3eed631027","0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c5a558d54519c651068ddb202f03befefb1514a7":["89f828d954597b98a28942874636f35c719b8a5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}