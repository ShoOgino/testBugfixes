{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#intersection(Automaton,Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#intersection(Automaton,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#intersection(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the intersection of the languages of the\n   * given automata. Never modifies the input automata languages.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  static public Automaton intersection(Automaton a1, Automaton a2) {\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return a1.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a2.isSingleton()) {\n      if (BasicOperations.run(a1, a2.singleton)) return a2.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a1 == a2) return a1.cloneIfRequired();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    Automaton c = new Automaton();\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>();\n    HashMap<StatePair,StatePair> newstates = new HashMap<StatePair,StatePair>();\n    StatePair p = new StatePair(c.initial, a1.initial, a2.initial);\n    worklist.add(p);\n    newstates.put(p, p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      p.s.accept = p.s1.accept && p.s2.accept;\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++)\n          if (t2[n2].max >= t1[n1].min) {\n            StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n            StatePair r = newstates.get(q);\n            if (r == null) {\n              q.s = new State();\n              worklist.add(q);\n              newstates.put(q, q);\n              r = q;\n            }\n            int min = t1[n1].min > t2[n2].min ? t1[n1].min : t2[n2].min;\n            int max = t1[n1].max < t2[n2].max ? t1[n1].max : t2[n2].max;\n            p.s.addTransition(new Transition(min, max, r.s));\n          }\n      }\n    }\n    c.deterministic = a1.deterministic && a2.deterministic;\n    c.removeDeadTransitions();\n    c.checkMinimizeAlways();\n    return c;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the intersection of the languages of the\n   * given automata. Never modifies the input automata languages.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  static public Automaton intersection(Automaton a1, Automaton a2) {\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return a1.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a2.isSingleton()) {\n      if (BasicOperations.run(a1, a2.singleton)) return a2.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a1 == a2) return a1.cloneIfRequired();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    Automaton c = new Automaton();\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>();\n    HashMap<StatePair,StatePair> newstates = new HashMap<StatePair,StatePair>();\n    StatePair p = new StatePair(c.initial, a1.initial, a2.initial);\n    worklist.add(p);\n    newstates.put(p, p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      p.s.accept = p.s1.accept && p.s2.accept;\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++)\n          if (t2[n2].max >= t1[n1].min) {\n            StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n            StatePair r = newstates.get(q);\n            if (r == null) {\n              q.s = new State();\n              worklist.add(q);\n              newstates.put(q, q);\n              r = q;\n            }\n            int min = t1[n1].min > t2[n2].min ? t1[n1].min : t2[n2].min;\n            int max = t1[n1].max < t2[n2].max ? t1[n1].max : t2[n2].max;\n            p.s.addTransition(new Transition(min, max, r.s));\n          }\n      }\n    }\n    c.deterministic = a1.deterministic && a2.deterministic;\n    c.removeDeadTransitions();\n    c.checkMinimizeAlways();\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#intersection(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#intersection(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the intersection of the languages of the\n   * given automata. Never modifies the input automata languages.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  static public Automaton intersection(Automaton a1, Automaton a2) {\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return a1.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a2.isSingleton()) {\n      if (BasicOperations.run(a1, a2.singleton)) return a2.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a1 == a2) return a1.cloneIfRequired();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    Automaton c = new Automaton();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashMap<StatePair,StatePair> newstates = new HashMap<>();\n    StatePair p = new StatePair(c.initial, a1.initial, a2.initial);\n    worklist.add(p);\n    newstates.put(p, p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      p.s.accept = p.s1.accept && p.s2.accept;\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++)\n          if (t2[n2].max >= t1[n1].min) {\n            StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n            StatePair r = newstates.get(q);\n            if (r == null) {\n              q.s = new State();\n              worklist.add(q);\n              newstates.put(q, q);\n              r = q;\n            }\n            int min = t1[n1].min > t2[n2].min ? t1[n1].min : t2[n2].min;\n            int max = t1[n1].max < t2[n2].max ? t1[n1].max : t2[n2].max;\n            p.s.addTransition(new Transition(min, max, r.s));\n          }\n      }\n    }\n    c.deterministic = a1.deterministic && a2.deterministic;\n    c.removeDeadTransitions();\n    c.checkMinimizeAlways();\n    return c;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the intersection of the languages of the\n   * given automata. Never modifies the input automata languages.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  static public Automaton intersection(Automaton a1, Automaton a2) {\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return a1.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a2.isSingleton()) {\n      if (BasicOperations.run(a1, a2.singleton)) return a2.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a1 == a2) return a1.cloneIfRequired();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    Automaton c = new Automaton();\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>();\n    HashMap<StatePair,StatePair> newstates = new HashMap<StatePair,StatePair>();\n    StatePair p = new StatePair(c.initial, a1.initial, a2.initial);\n    worklist.add(p);\n    newstates.put(p, p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      p.s.accept = p.s1.accept && p.s2.accept;\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++)\n          if (t2[n2].max >= t1[n1].min) {\n            StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n            StatePair r = newstates.get(q);\n            if (r == null) {\n              q.s = new State();\n              worklist.add(q);\n              newstates.put(q, q);\n              r = q;\n            }\n            int min = t1[n1].min > t2[n2].min ? t1[n1].min : t2[n2].min;\n            int max = t1[n1].max < t2[n2].max ? t1[n1].max : t2[n2].max;\n            p.s.addTransition(new Transition(min, max, r.s));\n          }\n      }\n    }\n    c.deterministic = a1.deterministic && a2.deterministic;\n    c.removeDeadTransitions();\n    c.checkMinimizeAlways();\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#intersection(Automaton,Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an automaton that accepts the intersection of the languages of the\n   * given automata. Never modifies the input automata languages.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  static public Automaton intersection(Automaton a1, Automaton a2) {\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return a1.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a2.isSingleton()) {\n      if (BasicOperations.run(a1, a2.singleton)) return a2.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a1 == a2) return a1.cloneIfRequired();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    Automaton c = new Automaton();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashMap<StatePair,StatePair> newstates = new HashMap<>();\n    StatePair p = new StatePair(c.initial, a1.initial, a2.initial);\n    worklist.add(p);\n    newstates.put(p, p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      p.s.accept = p.s1.accept && p.s2.accept;\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++)\n          if (t2[n2].max >= t1[n1].min) {\n            StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n            StatePair r = newstates.get(q);\n            if (r == null) {\n              q.s = new State();\n              worklist.add(q);\n              newstates.put(q, q);\n              r = q;\n            }\n            int min = t1[n1].min > t2[n2].min ? t1[n1].min : t2[n2].min;\n            int max = t1[n1].max < t2[n2].max ? t1[n1].max : t2[n2].max;\n            p.s.addTransition(new Transition(min, max, r.s));\n          }\n      }\n    }\n    c.deterministic = a1.deterministic && a2.deterministic;\n    c.removeDeadTransitions();\n    c.checkMinimizeAlways();\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#intersection(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#intersection(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the intersection of the languages of the\n   * given automata. Never modifies the input automata languages.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  static public Automaton intersection(Automaton a1, Automaton a2) {\n    if (a1 == a2) {\n      return a1;\n    }\n    if (a1.getNumStates() == 0) {\n      return a1;\n    }\n    if (a2.getNumStates() == 0) {\n      return a2;\n    }\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    Automaton c = new Automaton();\n    c.createState();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashMap<StatePair,StatePair> newstates = new HashMap<>();\n    StatePair p = new StatePair(0, 0, 0);\n    worklist.add(p);\n    newstates.put(p, p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      c.setAccept(p.s, a1.isAccept(p.s1) && a2.isAccept(p.s2));\n      Transition[] t1 = transitions1[p.s1];\n      Transition[] t2 = transitions2[p.s2];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++)\n          if (t2[n2].max >= t1[n1].min) {\n            StatePair q = new StatePair(t1[n1].dest, t2[n2].dest);\n            StatePair r = newstates.get(q);\n            if (r == null) {\n              q.s = c.createState();\n              worklist.add(q);\n              newstates.put(q, q);\n              r = q;\n            }\n            int min = t1[n1].min > t2[n2].min ? t1[n1].min : t2[n2].min;\n            int max = t1[n1].max < t2[n2].max ? t1[n1].max : t2[n2].max;\n            c.addTransition(p.s, r.s, min, max);\n          }\n      }\n    }\n    c.finishState();\n\n    return removeDeadStates(c);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the intersection of the languages of the\n   * given automata. Never modifies the input automata languages.\n   * <p>\n   * Complexity: quadratic in number of states.\n   */\n  static public Automaton intersection(Automaton a1, Automaton a2) {\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return a1.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a2.isSingleton()) {\n      if (BasicOperations.run(a1, a2.singleton)) return a2.cloneIfRequired();\n      else return BasicAutomata.makeEmpty();\n    }\n    if (a1 == a2) return a1.cloneIfRequired();\n    Transition[][] transitions1 = a1.getSortedTransitions();\n    Transition[][] transitions2 = a2.getSortedTransitions();\n    Automaton c = new Automaton();\n    LinkedList<StatePair> worklist = new LinkedList<>();\n    HashMap<StatePair,StatePair> newstates = new HashMap<>();\n    StatePair p = new StatePair(c.initial, a1.initial, a2.initial);\n    worklist.add(p);\n    newstates.put(p, p);\n    while (worklist.size() > 0) {\n      p = worklist.removeFirst();\n      p.s.accept = p.s1.accept && p.s2.accept;\n      Transition[] t1 = transitions1[p.s1.number];\n      Transition[] t2 = transitions2[p.s2.number];\n      for (int n1 = 0, b2 = 0; n1 < t1.length; n1++) {\n        while (b2 < t2.length && t2[b2].max < t1[n1].min)\n          b2++;\n        for (int n2 = b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++)\n          if (t2[n2].max >= t1[n1].min) {\n            StatePair q = new StatePair(t1[n1].to, t2[n2].to);\n            StatePair r = newstates.get(q);\n            if (r == null) {\n              q.s = new State();\n              worklist.add(q);\n              newstates.put(q, q);\n              r = q;\n            }\n            int min = t1[n1].min > t2[n2].min ? t1[n1].min : t2[n2].min;\n            int max = t1[n1].max < t2[n2].max ? t1[n1].max : t2[n2].max;\n            p.s.addTransition(new Transition(min, max, r.s));\n          }\n      }\n    }\n    c.deterministic = a1.deterministic && a2.deterministic;\n    c.removeDeadTransitions();\n    c.checkMinimizeAlways();\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}