{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/SimpleQueryMaker#prepareQueries().mjava","sourceNew":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare the queries for this test.\n   * Extending classes can override this method for preparing different queries. \n   * @return prepared queries.\n   * @throws Exception if cannot prepare the queries.\n   */\n  @Override\n  protected Query[] prepareQueries() throws Exception {\n    // analyzer (default is standard analyzer)\n    Analyzer anlzr= NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")); \n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, DocMaker.BODY_FIELD,anlzr);\n    ArrayList<Query> qq = new ArrayList<Query>();\n    Query q1 = new TermQuery(new Term(DocMaker.ID_FIELD,\"doc2\"));\n    qq.add(q1);\n    Query q2 = new TermQuery(new Term(DocMaker.BODY_FIELD,\"simple\"));\n    qq.add(q2);\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q2,Occur.MUST);\n    qq.add(bq);\n    qq.add(qp.parse(\"synthetic body\"));\n    qq.add(qp.parse(\"\\\"synthetic body\\\"\"));\n    qq.add(qp.parse(\"synthetic text\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"\"));\n    qq.add(qp.parse(\"\\\"synthetic text\\\"~3\"));\n    qq.add(qp.parse(\"zoom*\"));\n    qq.add(qp.parse(\"synth*\"));\n    return  qq.toArray(new Query[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}