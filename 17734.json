{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,IOContext).mjava","commits":[{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int,IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781537683b56c6c5aad3b1046f00daf1c7ea93ae","date":1323968781,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context);\n      try {\n        return (SegmentReader) sr.clone(); // cloning is always readOnly\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      assert countsMatch();\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context);\n      try {\n        return (SegmentReader) sr.clone(); // cloning is always readOnly\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}