{"path":"src/test/org/apache/solr/schema/CopyFieldTest#testCopyFieldFunctionality().mjava","commits":[{"id":"55883d09343e80968c5e44b9c14da13238544a0a","date":1228020380,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/CopyFieldTest#testCopyFieldFunctionality().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCopyFieldFunctionality() \n    {\n      SolrCore core = h.getCore();\n      assertU(adoc(\"id\", \"10\", \"title\", \"test copy field\", \"text_en\", \"this is a simple test of the copy field functionality\"));\n      assertU(commit());\n      \n      Map<String,String> args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"text_en:simple\" );\n      args.put( \"indent\", \"true\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      \n      assertQ(\"Make sure they got in\", req\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/int[@name='id'][.='10']\"\n              );\n      \n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"highlight:simple\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"dynamic source\", req\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/int[@name='id'][.='10']\"\n              ,\"//result/doc[1]/arr[@name='highlight']/str[.='this is a simple test of ']\"\n              );\n\n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"text_en:functionality\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"Make sure they got in\", req\n              ,\"//*[@numFound='1']\");\n      \n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"highlight:functionality\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"dynamic source\", req\n              ,\"//*[@numFound='0']\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/CopyFieldTest#testCopyFieldFunctionality().mjava","pathOld":"src/test/org/apache/solr/schema/CopyFieldTest#testCopyFieldFunctionality().mjava","sourceNew":"  @Test\n  public void testCopyFieldFunctionality() \n    {\n      SolrCore core = h.getCore();\n      assertU(adoc(\"id\", \"10\", \"title\", \"test copy field\", \"text_en\", \"this is a simple test of the copy field functionality\"));\n      assertU(commit());\n      \n      Map<String,String> args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"text_en:simple\" );\n      args.put( \"indent\", \"true\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      \n      assertQ(\"Make sure they got in\", req\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/int[@name='id'][.='10']\"\n              );\n      \n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"highlight:simple\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"dynamic source\", req\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/int[@name='id'][.='10']\"\n              ,\"//result/doc[1]/arr[@name='highlight']/str[.='this is a simple test of ']\"\n              );\n\n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"text_en:functionality\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"Make sure they got in\", req\n              ,\"//*[@numFound='1']\");\n      \n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"highlight:functionality\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"dynamic source\", req\n              ,\"//*[@numFound='0']\");\n    }\n\n","sourceOld":"  @Test\n  public void testCopyFieldFunctionality() \n    {\n      SolrCore core = h.getCore();\n      assertU(adoc(\"id\", \"10\", \"title\", \"test copy field\", \"text_en\", \"this is a simple test of the copy field functionality\"));\n      assertU(commit());\n      \n      Map<String,String> args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"text_en:simple\" );\n      args.put( \"indent\", \"true\" );\n      SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      \n      assertQ(\"Make sure they got in\", req\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/int[@name='id'][.='10']\"\n              );\n      \n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"highlight:simple\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"dynamic source\", req\n              ,\"//*[@numFound='1']\"\n              ,\"//result/doc[1]/int[@name='id'][.='10']\"\n              ,\"//result/doc[1]/arr[@name='highlight']/str[.='this is a simple test of ']\"\n              );\n\n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"text_en:functionality\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"Make sure they got in\", req\n              ,\"//*[@numFound='1']\");\n      \n      args = new HashMap<String, String>();\n      args.put( CommonParams.Q, \"highlight:functionality\" );\n      args.put( \"indent\", \"true\" );\n      req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n      assertQ(\"dynamic source\", req\n              ,\"//*[@numFound='0']\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["55883d09343e80968c5e44b9c14da13238544a0a"],"55883d09343e80968c5e44b9c14da13238544a0a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["55883d09343e80968c5e44b9c14da13238544a0a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"55883d09343e80968c5e44b9c14da13238544a0a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}