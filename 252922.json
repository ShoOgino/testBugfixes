{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestMultiFieldQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = {\"b\", \"t\"};\n    MultiFieldQueryParser mfqp = new MultiFieldQueryParser(TEST_VERSION_CURRENT, fields, new MockAnalyzer(random()));\n    \n    Query q = mfqp.parse(\"one\");\n    assertEquals(\"b:one t:one\", q.toString());\n    \n    q = mfqp.parse(\"one two\");\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n    \n    q = mfqp.parse(\"+one +two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\");\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q.toString());\n    \n    q = mfqp.parse(\"one^2 two\");\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\");\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\");\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\");\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\");\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\");\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\");\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\");\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: MultiFieldQueryParser was ignoring slop when phrase had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\"); \n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\");\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(QueryParserBase.AND_OPERATOR);\n    q = mfqp.parse(\"one two\");\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\");\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}