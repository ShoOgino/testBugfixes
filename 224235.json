{"path":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","commits":[{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      if (mergeDocStores || (!ext.equals(IndexFileNames.FIELDS_EXTENSION) &&\n                             !ext.equals(IndexFileNames.FIELDS_INDEX_EXTENSION)))\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n    \n    // Fieldable norm files\n    int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors() && mergeDocStores) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      if (mergeDocStores || (!ext.equals(IndexFileNames.FIELDS_EXTENSION) &&\n                             !ext.equals(IndexFileNames.FIELDS_INDEX_EXTENSION)))\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n    \n    // Fieldable norm files\n    final int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      final FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors() && mergeDocStores) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","sourceNew":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n    \n    // Fieldable norm files\n    int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","sourceOld":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      if (mergeDocStores || (!ext.equals(IndexFileNames.FIELDS_EXTENSION) &&\n                             !ext.equals(IndexFileNames.FIELDS_INDEX_EXTENSION)))\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n    \n    // Fieldable norm files\n    int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors() && mergeDocStores) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","sourceNew":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n    \n    // Fieldable norm files\n    final int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      final FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","sourceOld":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      if (mergeDocStores || (!ext.equals(IndexFileNames.FIELDS_EXTENSION) &&\n                             !ext.equals(IndexFileNames.FIELDS_INDEX_EXTENSION)))\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n    \n    // Fieldable norm files\n    final int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      final FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors() && mergeDocStores) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n\n    // Fieldable norm files\n    int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","date":1294227869,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","sourceNew":null,"sourceOld":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n    \n    // Fieldable norm files\n    int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","sourceNew":null,"sourceOld":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n    \n    // Fieldable norm files\n    final int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      final FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#getMergedFiles(SegmentInfo).mjava","sourceNew":null,"sourceOld":"  final Collection<String> getMergedFiles(final SegmentInfo info) throws IOException {\n    Set<String> fileSet = new HashSet<String>();\n\n    // Basic files\n    for (String ext : IndexFileNames.COMPOUND_EXTENSIONS_NOT_CODEC) {\n      fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n    }\n\n    segmentWriteState.segmentCodecs.files(directory, info, fileSet);\n\n    // Fieldable norm files\n    int numFIs = fieldInfos.size();\n    for (int i = 0; i < numFIs; i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && !fi.omitNorms) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.NORMS_EXTENSION));\n        break;\n      }\n    }\n\n    // Vector files\n    if (fieldInfos.hasVectors()) {\n      for (String ext : IndexFileNames.VECTOR_EXTENSIONS) {\n        fileSet.add(IndexFileNames.segmentFileName(segment, \"\", ext));\n      }\n    }\n\n    return fileSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","3bb13258feba31ab676502787ab2e1779f129b7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}