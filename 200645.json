{"path":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","pathOld":"src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","sourceNew":"    public void testPad() {\n\n        int[] tests = new int[] {\n            -9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000, 999999999\n        };\n        for (int i = 0; i < tests.length - 1; i++) {\n            int a = tests[i];\n            int b = tests[i+1];\n            String aa = pad(a);\n            String bb = pad(b);\n            String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n            assertEquals(\"length of \" + label, aa.length(), bb.length());\n            assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n        }\n\n    }\n\n","sourceOld":"    public void testPad() {\n\n        int[] tests = new int[] {\n            -9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000, 999999999\n        };\n        for (int i = 0; i < tests.length - 1; i++) {\n            int a = tests[i];\n            int b = tests[i+1];\n            String aa = pad(a);\n            String bb = pad(b);\n            String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n            assertEquals(\"length of \" + label, aa.length(), bb.length());\n            assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","sourceNew":"  public void testPad() {\n    \n    int[] tests = new int[] {-9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000,\n        999999999};\n    for (int i = 0; i < tests.length - 1; i++) {\n      int a = tests[i];\n      int b = tests[i + 1];\n      String aa = pad(a);\n      String bb = pad(b);\n      String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n      assertEquals(\"length of \" + label, aa.length(), bb.length());\n      assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n    }\n    \n  }\n\n","sourceOld":"    public void testPad() {\n\n        int[] tests = new int[] {\n            -9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000, 999999999\n        };\n        for (int i = 0; i < tests.length - 1; i++) {\n            int a = tests[i];\n            int b = tests[i+1];\n            String aa = pad(a);\n            String bb = pad(b);\n            String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n            assertEquals(\"length of \" + label, aa.length(), bb.length());\n            assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","sourceNew":"  public void testPad() {\n    \n    int[] tests = new int[] {-9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000,\n        999999999};\n    for (int i = 0; i < tests.length - 1; i++) {\n      int a = tests[i];\n      int b = tests[i + 1];\n      String aa = pad(a);\n      String bb = pad(b);\n      String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n      assertEquals(\"length of \" + label, aa.length(), bb.length());\n      assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n    }\n    \n  }\n\n","sourceOld":"    public void testPad() {\n\n        int[] tests = new int[] {\n            -9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000, 999999999\n        };\n        for (int i = 0; i < tests.length - 1; i++) {\n            int a = tests[i];\n            int b = tests[i+1];\n            String aa = pad(a);\n            String bb = pad(b);\n            String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n            assertEquals(\"length of \" + label, aa.length(), bb.length());\n            assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","sourceNew":"  @Test\n  public void testPad() {\n    \n    int[] tests = new int[] {-9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000,\n        999999999};\n    for (int i = 0; i < tests.length - 1; i++) {\n      int a = tests[i];\n      int b = tests[i + 1];\n      String aa = pad(a);\n      String bb = pad(b);\n      String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n      assertEquals(\"length of \" + label, aa.length(), bb.length());\n      assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n    }\n    \n  }\n\n","sourceOld":"  public void testPad() {\n    \n    int[] tests = new int[] {-9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000,\n        999999999};\n    for (int i = 0; i < tests.length - 1; i++) {\n      int a = tests[i];\n      int b = tests[i + 1];\n      String aa = pad(a);\n      String bb = pad(b);\n      String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n      assertEquals(\"length of \" + label, aa.length(), bb.length());\n      assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","sourceNew":"  @Test\n  public void testPad() {\n    \n    int[] tests = new int[] {-9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000,\n        999999999};\n    for (int i = 0; i < tests.length - 1; i++) {\n      int a = tests[i];\n      int b = tests[i + 1];\n      String aa = pad(a);\n      String bb = pad(b);\n      String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n      assertEquals(\"length of \" + label, aa.length(), bb.length());\n      assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n    }\n    \n  }\n\n","sourceOld":"  public void testPad() {\n    \n    int[] tests = new int[] {-9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000,\n        999999999};\n    for (int i = 0; i < tests.length - 1; i++) {\n      int a = tests[i];\n      int b = tests[i + 1];\n      String aa = pad(a);\n      String bb = pad(b);\n      String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n      assertEquals(\"length of \" + label, aa.length(), bb.length());\n      assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/BaseTestRangeFilter#testPad().mjava","sourceNew":"  @Test\n  public void testPad() {\n    \n    int[] tests = new int[] {-9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000,\n        999999999};\n    for (int i = 0; i < tests.length - 1; i++) {\n      int a = tests[i];\n      int b = tests[i + 1];\n      String aa = pad(a);\n      String bb = pad(b);\n      String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n      assertEquals(\"length of \" + label, aa.length(), bb.length());\n      assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testPad() {\n    \n    int[] tests = new int[] {-9999999, -99560, -100, -3, -1, 0, 3, 9, 10, 1000,\n        999999999};\n    for (int i = 0; i < tests.length - 1; i++) {\n      int a = tests[i];\n      int b = tests[i + 1];\n      String aa = pad(a);\n      String bb = pad(b);\n      String label = a + \":\" + aa + \" vs \" + b + \":\" + bb;\n      assertEquals(\"length of \" + label, aa.length(), bb.length());\n      assertTrue(\"compare less than \" + label, aa.compareTo(bb) < 0);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}