{"path":"contrib/miscellaneous/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","commits":[{"id":"a56158a9862832b67c76de543de1da36596a1133","date":1219676540,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = fieldName.intern();\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf93f7a278746d4746fa3ebb3d53267b22fd040f","date":1249495506,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","sourceNew":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = StringHelper.intern(fieldName);\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","sourceOld":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = fieldName.intern();\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/index/TermVectorAccessor#accept(IndexReader,int,String,TermVectorMapper).mjava","sourceNew":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = StringHelper.intern(fieldName);\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","sourceOld":"  /**\n   * Visits the TermVectorMapper and populates it with terms available for a given document,\n   * either via a vector created at index time or by resolving them from the inverted index.\n   *\n   * @param indexReader    Index source\n   * @param documentNumber Source document to access\n   * @param fieldName      Field to resolve\n   * @param mapper         Mapper to be mapped with data\n   * @throws IOException\n   */\n  public void accept(IndexReader indexReader, int documentNumber, String fieldName, TermVectorMapper mapper) throws IOException {\n\n    fieldName = StringHelper.intern(fieldName);\n\n    decoratedMapper.decorated = mapper;\n    decoratedMapper.termVectorStored = false;\n\n    indexReader.getTermFreqVector(documentNumber, fieldName, decoratedMapper);\n\n    if (!decoratedMapper.termVectorStored) {\n      mapper.setDocumentNumber(documentNumber);\n      build(indexReader, fieldName, mapper, documentNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["a56158a9862832b67c76de543de1da36596a1133"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56158a9862832b67c76de543de1da36596a1133":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a56158a9862832b67c76de543de1da36596a1133"],"a56158a9862832b67c76de543de1da36596a1133":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}