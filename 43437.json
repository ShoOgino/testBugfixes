{"path":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","commits":[{"id":"175da89dff77515cdda7604b3c6cf6de96d4ac23","date":1143444217,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"/dev/null","sourceNew":"\t/**\r\n\t * Adds a new FilterClause to the Boolean Filter container\r\n\t * @param filterClause A FilterClause object containing a Filter and an Occur parameter\r\n\t */\r\n\t\r\n\tpublic void add(FilterClause filterClause)\r\n\t{\r\n\t\tif (filterClause.getOccur().equals(Occur.MUST))\r\n\t\t{\r\n\t\t\tif(mustFilters==null)\r\n\t\t\t{\r\n\t\t\t\tmustFilters=new ArrayList();\r\n\t\t\t}\r\n\t\t\tmustFilters.add(filterClause.getFilter());\r\n\t\t}\r\n\t\tif (filterClause.getOccur().equals(Occur.SHOULD))\r\n\t\t{\r\n\t\t\tif(shouldFilters==null)\r\n\t\t\t{\r\n\t\t\t\tshouldFilters=new ArrayList();\r\n\t\t\t}\r\n\t\t\tshouldFilters.add(filterClause.getFilter());\r\n\t\t}\r\n\t\tif (filterClause.getOccur().equals(Occur.MUST_NOT))\r\n\t\t{\r\n\t\t\tif(notFilters==null)\r\n\t\t\t{\r\n\t\t\t\tnotFilters=new ArrayList();\r\n\t\t\t}\r\n\t\t\tnotFilters.add(filterClause.getFilter());\r\n\t\t}\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\r\n  * Adds a new FilterClause to the Boolean Filter container\r\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\r\n  */\r\n  \r\n  public void add(FilterClause filterClause)\r\n  {\r\n    if (filterClause.getOccur().equals(Occur.MUST)) {\r\n      if (mustFilters==null) {\r\n        mustFilters=new ArrayList();\r\n      }\r\n      mustFilters.add(filterClause.getFilter());\r\n    }\r\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\r\n      if (shouldFilters==null) {\r\n        shouldFilters=new ArrayList();\r\n      }\r\n      shouldFilters.add(filterClause.getFilter());\r\n    }\r\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\r\n      if (notFilters==null) {\r\n        notFilters=new ArrayList();\r\n      }\r\n      notFilters.add(filterClause.getFilter());\r\n    }\r\n  }\r\n\n","sourceOld":"\t/**\r\n\t * Adds a new FilterClause to the Boolean Filter container\r\n\t * @param filterClause A FilterClause object containing a Filter and an Occur parameter\r\n\t */\r\n\t\r\n\tpublic void add(FilterClause filterClause)\r\n\t{\r\n\t\tif (filterClause.getOccur().equals(Occur.MUST))\r\n\t\t{\r\n\t\t\tif(mustFilters==null)\r\n\t\t\t{\r\n\t\t\t\tmustFilters=new ArrayList();\r\n\t\t\t}\r\n\t\t\tmustFilters.add(filterClause.getFilter());\r\n\t\t}\r\n\t\tif (filterClause.getOccur().equals(Occur.SHOULD))\r\n\t\t{\r\n\t\t\tif(shouldFilters==null)\r\n\t\t\t{\r\n\t\t\t\tshouldFilters=new ArrayList();\r\n\t\t\t}\r\n\t\t\tshouldFilters.add(filterClause.getFilter());\r\n\t\t}\r\n\t\tif (filterClause.getOccur().equals(Occur.MUST_NOT))\r\n\t\t{\r\n\t\t\tif(notFilters==null)\r\n\t\t\t{\r\n\t\t\t\tnotFilters=new ArrayList();\r\n\t\t\t}\r\n\t\t\tnotFilters.add(filterClause.getFilter());\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\r\n  * Adds a new FilterClause to the Boolean Filter container\r\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\r\n  */\r\n  \r\n  public void add(FilterClause filterClause)\r\n  {\r\n    if (filterClause.getOccur().equals(Occur.MUST)) {\r\n      if (mustFilters==null) {\r\n        mustFilters=new ArrayList();\r\n      }\r\n      mustFilters.add(filterClause.getFilter());\r\n    }\r\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\r\n      if (shouldFilters==null) {\r\n        shouldFilters=new ArrayList();\r\n      }\r\n      shouldFilters.add(filterClause.getFilter());\r\n    }\r\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\r\n      if (notFilters==null) {\r\n        notFilters=new ArrayList();\r\n      }\r\n      notFilters.add(filterClause.getFilter());\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#add(FilterClause).mjava","sourceNew":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","sourceOld":"  /**\n  * Adds a new FilterClause to the Boolean Filter container\n  * @param filterClause A FilterClause object containing a Filter and an Occur parameter\n  */\n  \n  public void add(FilterClause filterClause)\n  {\n    if (filterClause.getOccur().equals(Occur.MUST)) {\n      if (mustFilters==null) {\n        mustFilters=new ArrayList<Filter>();\n      }\n      mustFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.SHOULD)) {\n      if (shouldFilters==null) {\n        shouldFilters=new ArrayList<Filter>();\n      }\n      shouldFilters.add(filterClause.getFilter());\n    }\n    if (filterClause.getOccur().equals(Occur.MUST_NOT)) {\n      if (notFilters==null) {\n        notFilters=new ArrayList<Filter>();\n      }\n      notFilters.add(filterClause.getFilter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"175da89dff77515cdda7604b3c6cf6de96d4ac23":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["175da89dff77515cdda7604b3c6cf6de96d4ac23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"]},"commit2Childs":{"175da89dff77515cdda7604b3c6cf6de96d4ac23":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["175da89dff77515cdda7604b3c6cf6de96d4ac23"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}