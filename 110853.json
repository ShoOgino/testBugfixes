{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"    /* Explain the score we computed for doc */\r\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\r\n      if ( disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\r\n      Explanation result = new Explanation();\r\n      float max = 0.0f, sum = 0.0f;\r\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\r\n      for (int i = 0 ; i < weights.size(); i++) {\r\n        Explanation e = ((Weight) weights.get(i)).explain(reader, doc);\r\n        if (e.getValue() > 0) {\r\n          result.addDetail(e);\r\n          sum += e.getValue();\r\n          max = Math.max(max, e.getValue());\r\n        }\r\n      }\r\n      result.setValue(max + (sum - max)*tieBreakerMultiplier);\r\n      return result;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc","f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4e4ac061c7cb668bd0651cb565ebbad1157cadc","date":1151347127,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\r\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\r\n      if ( disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\r\n      ComplexExplanation result = new ComplexExplanation();\r\n      float max = 0.0f, sum = 0.0f;\r\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\r\n      for (int i = 0 ; i < weights.size(); i++) {\r\n        Explanation e = ((Weight) weights.get(i)).explain(reader, doc);\r\n        if (e.isMatch()) {\r\n          result.setMatch(Boolean.TRUE);\r\n          result.addDetail(e);\r\n          sum += e.getValue();\r\n          max = Math.max(max, e.getValue());\r\n        }\r\n      }\r\n      result.setValue(max + (sum - max)*tieBreakerMultiplier);\r\n      return result;\r\n    }\r\n\n","sourceOld":"    /* Explain the score we computed for doc */\r\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\r\n      if ( disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\r\n      Explanation result = new Explanation();\r\n      float max = 0.0f, sum = 0.0f;\r\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\r\n      for (int i = 0 ; i < weights.size(); i++) {\r\n        Explanation e = ((Weight) weights.get(i)).explain(reader, doc);\r\n        if (e.getValue() > 0) {\r\n          result.addDetail(e);\r\n          sum += e.getValue();\r\n          max = Math.max(max, e.getValue());\r\n        }\r\n      }\r\n      result.setValue(max + (sum - max)*tieBreakerMultiplier);\r\n      return result;\r\n    }\r\n\n","bugFix":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if ( disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (int i = 0 ; i < weights.size(); i++) {\n        Explanation e = ((Weight) weights.get(i)).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max)*tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\r\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\r\n      if ( disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\r\n      ComplexExplanation result = new ComplexExplanation();\r\n      float max = 0.0f, sum = 0.0f;\r\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\r\n      for (int i = 0 ; i < weights.size(); i++) {\r\n        Explanation e = ((Weight) weights.get(i)).explain(reader, doc);\r\n        if (e.isMatch()) {\r\n          result.setMatch(Boolean.TRUE);\r\n          result.addDetail(e);\r\n          sum += e.getValue();\r\n          max = Math.max(max, e.getValue());\r\n        }\r\n      }\r\n      result.setValue(max + (sum - max)*tieBreakerMultiplier);\r\n      return result;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((QueryWeight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((QueryWeight) iter.next()).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if ( disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (int i = 0 ; i < weights.size(); i++) {\n        Explanation e = ((Weight) weights.get(i)).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max)*tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(Searcher,IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    public Explanation explain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(searcher, reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(searcher, reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((QueryWeight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((QueryWeight) iter.next()).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"231941d2cb96b9752e839c311391096d90470db8","date":1251116803,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(Searcher,IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    public Explanation explain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(searcher, reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(searcher, reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator<Weight> iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df43e6d101500e53fc5fffcae05a916e1fece0cf","date":1255710619,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Iterator<Weight> iter = weights.iterator(); iter.hasNext();) {\n        Explanation e = ((Weight) iter.next()).explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"580e487700caea83dbc40e39acb074ebde2818a4","date":1255719241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return ((Weight) weights.get(0)).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["231941d2cb96b9752e839c311391096d90470db8"],"df43e6d101500e53fc5fffcae05a916e1fece0cf":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"580e487700caea83dbc40e39acb074ebde2818a4":["df43e6d101500e53fc5fffcae05a916e1fece0cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"231941d2cb96b9752e839c311391096d90470db8":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["580e487700caea83dbc40e39acb074ebde2818a4"]},"commit2Childs":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["df43e6d101500e53fc5fffcae05a916e1fece0cf"],"df43e6d101500e53fc5fffcae05a916e1fece0cf":["580e487700caea83dbc40e39acb074ebde2818a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"580e487700caea83dbc40e39acb074ebde2818a4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2123bddbd65dea198cac380540636ce43a880403":["052fac7830290bd38a04cddee1a121ee07656b56"],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["2123bddbd65dea198cac380540636ce43a880403"],"231941d2cb96b9752e839c311391096d90470db8":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"fe941135bdfc28c81e20b4d21422f8726af34925":["231941d2cb96b9752e839c311391096d90470db8"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}