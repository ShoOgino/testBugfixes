{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequestExt#writeXML(Writer).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequestExt#writeXML(Writer).mjava","pathOld":"/dev/null","sourceNew":"  public void writeXML(Writer writer) throws IOException {\n    List<List<SolrDoc>> getDocLists = getDocLists(documents);\n    \n    for (List<SolrDoc> docs : getDocLists) {\n      \n      if ((docs != null && docs.size() > 0)) {\n        SolrDoc firstDoc = docs.get(0);\n        int commitWithin = firstDoc.commitWithin != -1 ? firstDoc.commitWithin : this.commitWithin;\n        boolean overwrite = firstDoc.overwrite;\n        if (commitWithin > -1 || overwrite != true) {\n          writer.write(\"<add commitWithin=\\\"\" + commitWithin + \"\\\" \" + \"overwrite=\\\"\" + overwrite + \"\\\">\");\n        } else {\n          writer.write(\"<add>\");\n        }\n        if (documents != null) {\n          for (SolrDoc doc : documents) {\n            if (doc != null) {\n              ClientUtils.writeXML(doc.document, writer);\n            }\n          }\n        }\n        \n        writer.write(\"</add>\");\n      }\n    }\n    \n    // Add the delete commands\n    boolean deleteI = deleteById != null && deleteById.size() > 0;\n    boolean deleteQ = deleteQuery != null && deleteQuery.size() > 0;\n    if (deleteI || deleteQ) {\n      writer.append(\"<delete>\");\n      if (deleteI) {\n        for (Map.Entry<String,Long> entry : deleteById.entrySet()) {\n          writer.append(\"<id\");\n          Long version = entry.getValue();\n          if (version != null) {\n            writer.append(\" version=\\\"\" + version + \"\\\"\");\n          }\n          writer.append(\">\");\n          \n          XML.escapeCharData(entry.getKey(), writer);\n          writer.append(\"</id>\");\n        }\n      }\n      if (deleteQ) {\n        for (String q : deleteQuery) {\n          writer.append(\"<query>\");\n          XML.escapeCharData(q, writer);\n          writer.append(\"</query>\");\n        }\n      }\n      writer.append(\"</delete>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequestExt#writeXML(Writer).mjava","pathOld":"/dev/null","sourceNew":"  public void writeXML(Writer writer) throws IOException {\n    List<List<SolrDoc>> getDocLists = getDocLists(documents);\n    \n    for (List<SolrDoc> docs : getDocLists) {\n      \n      if ((docs != null && docs.size() > 0)) {\n        SolrDoc firstDoc = docs.get(0);\n        int commitWithin = firstDoc.commitWithin != -1 ? firstDoc.commitWithin : this.commitWithin;\n        boolean overwrite = firstDoc.overwrite;\n        if (commitWithin > -1 || overwrite != true) {\n          writer.write(\"<add commitWithin=\\\"\" + commitWithin + \"\\\" \" + \"overwrite=\\\"\" + overwrite + \"\\\">\");\n        } else {\n          writer.write(\"<add>\");\n        }\n        if (documents != null) {\n          for (SolrDoc doc : documents) {\n            if (doc != null) {\n              ClientUtils.writeXML(doc.document, writer);\n            }\n          }\n        }\n        \n        writer.write(\"</add>\");\n      }\n    }\n    \n    // Add the delete commands\n    boolean deleteI = deleteById != null && deleteById.size() > 0;\n    boolean deleteQ = deleteQuery != null && deleteQuery.size() > 0;\n    if (deleteI || deleteQ) {\n      writer.append(\"<delete>\");\n      if (deleteI) {\n        for (Map.Entry<String,Long> entry : deleteById.entrySet()) {\n          writer.append(\"<id\");\n          Long version = entry.getValue();\n          if (version != null) {\n            writer.append(\" version=\\\"\" + version + \"\\\"\");\n          }\n          writer.append(\">\");\n          \n          XML.escapeCharData(entry.getKey(), writer);\n          writer.append(\"</id>\");\n        }\n      }\n      if (deleteQ) {\n        for (String q : deleteQuery) {\n          writer.append(\"<query>\");\n          XML.escapeCharData(q, writer);\n          writer.append(\"</query>\");\n        }\n      }\n      writer.append(\"</delete>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequestExt#writeXML(Writer).mjava","pathOld":"/dev/null","sourceNew":"  public void writeXML(Writer writer) throws IOException {\n    List<List<SolrDoc>> getDocLists = getDocLists(documents);\n    \n    for (List<SolrDoc> docs : getDocLists) {\n      \n      if ((docs != null && docs.size() > 0)) {\n        SolrDoc firstDoc = docs.get(0);\n        int commitWithin = firstDoc.commitWithin != -1 ? firstDoc.commitWithin : this.commitWithin;\n        boolean overwrite = firstDoc.overwrite;\n        if (commitWithin > -1 || overwrite != true) {\n          writer.write(\"<add commitWithin=\\\"\" + commitWithin + \"\\\" \" + \"overwrite=\\\"\" + overwrite + \"\\\">\");\n        } else {\n          writer.write(\"<add>\");\n        }\n        if (documents != null) {\n          for (SolrDoc doc : documents) {\n            if (doc != null) {\n              ClientUtils.writeXML(doc.document, writer);\n            }\n          }\n        }\n        \n        writer.write(\"</add>\");\n      }\n    }\n    \n    // Add the delete commands\n    boolean deleteI = deleteById != null && deleteById.size() > 0;\n    boolean deleteQ = deleteQuery != null && deleteQuery.size() > 0;\n    if (deleteI || deleteQ) {\n      writer.append(\"<delete>\");\n      if (deleteI) {\n        for (Map.Entry<String,Long> entry : deleteById.entrySet()) {\n          writer.append(\"<id\");\n          Long version = entry.getValue();\n          if (version != null) {\n            writer.append(\" version=\\\"\" + version + \"\\\"\");\n          }\n          writer.append(\">\");\n          \n          XML.escapeCharData(entry.getKey(), writer);\n          writer.append(\"</id>\");\n        }\n      }\n      if (deleteQ) {\n        for (String q : deleteQuery) {\n          writer.append(\"<query>\");\n          XML.escapeCharData(q, writer);\n          writer.append(\"</query>\");\n        }\n      }\n      writer.append(\"</delete>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequestExt#writeXML(Writer).mjava","sourceNew":null,"sourceOld":"  public void writeXML(Writer writer) throws IOException {\n    List<List<SolrDoc>> getDocLists = getDocLists(documents);\n    \n    for (List<SolrDoc> docs : getDocLists) {\n      \n      if ((docs != null && docs.size() > 0)) {\n        SolrDoc firstDoc = docs.get(0);\n        int commitWithin = firstDoc.commitWithin != -1 ? firstDoc.commitWithin : this.commitWithin;\n        boolean overwrite = firstDoc.overwrite;\n        if (commitWithin > -1 || overwrite != true) {\n          writer.write(\"<add commitWithin=\\\"\" + commitWithin + \"\\\" \" + \"overwrite=\\\"\" + overwrite + \"\\\">\");\n        } else {\n          writer.write(\"<add>\");\n        }\n        if (documents != null) {\n          for (SolrDoc doc : documents) {\n            if (doc != null) {\n              ClientUtils.writeXML(doc.document, writer);\n            }\n          }\n        }\n        \n        writer.write(\"</add>\");\n      }\n    }\n    \n    // Add the delete commands\n    boolean deleteI = deleteById != null && deleteById.size() > 0;\n    boolean deleteQ = deleteQuery != null && deleteQuery.size() > 0;\n    if (deleteI || deleteQ) {\n      writer.append(\"<delete>\");\n      if (deleteI) {\n        for (Map.Entry<String,Long> entry : deleteById.entrySet()) {\n          writer.append(\"<id\");\n          Long version = entry.getValue();\n          if (version != null) {\n            writer.append(\" version=\\\"\" + version + \"\\\"\");\n          }\n          writer.append(\">\");\n          \n          XML.escapeCharData(entry.getKey(), writer);\n          writer.append(\"</id>\");\n        }\n      }\n      if (deleteQ) {\n        for (String q : deleteQuery) {\n          writer.append(\"<query>\");\n          XML.escapeCharData(q, writer);\n          writer.append(\"</query>\");\n        }\n      }\n      writer.append(\"</delete>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}