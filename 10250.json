{"path":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#getUniqueTermCount().mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    if (!getTopReaderContext().isAtomic) {\n      return -1;\n    }\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AtomicReader#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicIndexReader#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","sourceOld":"  /** Returns the number of unique terms (across all fields)\n   *  in this reader.\n   *\n   *  @return number of unique terms or -1 if this count\n   *  cannot be easily determined (eg Multi*Readers).\n   *  Instead, you should call {@link\n   *  #getSequentialSubReaders} and ask each sub reader for\n   *  its unique term count. */\n  public final long getUniqueTermCount() throws IOException {\n    final Fields fields = fields();\n    if (fields == null) {\n      return 0;\n    }\n    return fields.getUniqueTermCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}