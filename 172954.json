{"path":"lucene/backwards/src/java/org/apache/lucene/util/IndexableBinaryStringTools#encode(ByteBuffer,CharBuffer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/IndexableBinaryStringTools#encode(ByteBuffer,CharBuffer).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/IndexableBinaryStringTools#encode(ByteBuffer,CharBuffer).mjava","sourceNew":"  /**\n   * Encodes the input byte sequence into the output char sequence.  Before\n   * calling this method, ensure that the output CharBuffer has sufficient\n   * capacity by calling {@link #getEncodedLength(java.nio.ByteBuffer)}.\n   * \n   * @param input The byte sequence to encode\n   * @param output Where the char sequence encoding result will go.  The limit\n   *  is set to one past the position of the final char.\n   * @throws IllegalArgumentException If either the input or the output buffer\n   *  is not backed by an array\n   */\n  public static void encode(ByteBuffer input, CharBuffer output) {\n    if (input.hasArray() && output.hasArray()) {\n      byte[] inputArray = input.array();\n      int inputOffset = input.arrayOffset();\n      int inputLength = input.limit() - inputOffset; \n      char[] outputArray = output.array();\n      int outputOffset = output.arrayOffset();\n      int outputLength = getEncodedLength(input);\n      output.limit(outputOffset + outputLength); // Set output final pos + 1\n      output.position(0);\n      if (inputLength > 0) {\n        int inputByteNum = inputOffset;\n        int caseNum = 0;\n        int outputCharNum = outputOffset;\n        CodingCase codingCase;\n        for ( ; inputByteNum + CODING_CASES[caseNum].numBytes <= inputLength ;\n              ++outputCharNum                                                 ) {\n          codingCase = CODING_CASES[caseNum];\n          if (2 == codingCase.numBytes) {\n            outputArray[outputCharNum]\n              = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                       + (((inputArray[inputByteNum + 1] & 0xFF) >>> codingCase.finalShift)\n                          & codingCase.finalMask)\n                       & (short)0x7FFF);\n          } else { // numBytes is 3\n            outputArray[outputCharNum] \n              = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                       + ((inputArray[inputByteNum + 1] & 0xFF) << codingCase.middleShift)\n                       + (((inputArray[inputByteNum + 2] & 0xFF) >>> codingCase.finalShift) \n                          & codingCase.finalMask)\n                       & (short)0x7FFF);          \n          }\n          inputByteNum += codingCase.advanceBytes;          \n          if (++caseNum == CODING_CASES.length) {\n            caseNum = 0;\n          }\n        }\n        // Produce final char (if any) and trailing count chars.\n        codingCase = CODING_CASES[caseNum];\n        \n        if (inputByteNum + 1 < inputLength) { // codingCase.numBytes must be 3\n          outputArray[outputCharNum++] \n            = (char)((((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                      + ((inputArray[inputByteNum + 1] & 0xFF) << codingCase.middleShift))\n                     & (short)0x7FFF);\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = (char)1;\n        } else if (inputByteNum < inputLength) {\n          outputArray[outputCharNum++] \n            = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                     & (short)0x7FFF);\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = caseNum == 0 ? (char)1 : (char)0;\n        } else { // No left over bits - last char is completely filled.\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = (char)1;\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Arguments must have backing arrays\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Encodes the input byte sequence into the output char sequence.  Before\n   * calling this method, ensure that the output CharBuffer has sufficient\n   * capacity by calling {@link #getEncodedLength(java.nio.ByteBuffer)}.\n   * \n   * @param input The byte sequence to encode\n   * @param output Where the char sequence encoding result will go.  The limit\n   *  is set to one past the position of the final char.\n   * @throws IllegalArgumentException If either the input or the output buffer\n   *  is not backed by an array\n   */\n  public static void encode(ByteBuffer input, CharBuffer output) {\n    if (input.hasArray() && output.hasArray()) {\n      byte[] inputArray = input.array();\n      int inputOffset = input.arrayOffset();\n      int inputLength = input.limit() - inputOffset; \n      char[] outputArray = output.array();\n      int outputOffset = output.arrayOffset();\n      int outputLength = getEncodedLength(input);\n      output.limit(outputOffset + outputLength); // Set output final pos + 1\n      output.position(0);\n      if (inputLength > 0) {\n        int inputByteNum = inputOffset;\n        int caseNum = 0;\n        int outputCharNum = outputOffset;\n        CodingCase codingCase;\n        for ( ; inputByteNum + CODING_CASES[caseNum].numBytes <= inputLength ;\n              ++outputCharNum                                                 ) {\n          codingCase = CODING_CASES[caseNum];\n          if (2 == codingCase.numBytes) {\n            outputArray[outputCharNum]\n              = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                       + (((inputArray[inputByteNum + 1] & 0xFF) >>> codingCase.finalShift)\n                          & codingCase.finalMask)\n                       & (short)0x7FFF);\n          } else { // numBytes is 3\n            outputArray[outputCharNum] \n              = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                       + ((inputArray[inputByteNum + 1] & 0xFF) << codingCase.middleShift)\n                       + (((inputArray[inputByteNum + 2] & 0xFF) >>> codingCase.finalShift) \n                          & codingCase.finalMask)\n                       & (short)0x7FFF);          \n          }\n          inputByteNum += codingCase.advanceBytes;          \n          if (++caseNum == CODING_CASES.length) {\n            caseNum = 0;\n          }\n        }\n        // Produce final char (if any) and trailing count chars.\n        codingCase = CODING_CASES[caseNum];\n        \n        if (inputByteNum + 1 < inputLength) { // codingCase.numBytes must be 3\n          outputArray[outputCharNum++] \n            = (char)((((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                      + ((inputArray[inputByteNum + 1] & 0xFF) << codingCase.middleShift))\n                     & (short)0x7FFF);\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = (char)1;\n        } else if (inputByteNum < inputLength) {\n          outputArray[outputCharNum++] \n            = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                     & (short)0x7FFF);\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = caseNum == 0 ? (char)1 : (char)0;\n        } else { // No left over bits - last char is completely filled.\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = (char)1;\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Arguments must have backing arrays\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/util/IndexableBinaryStringTools#encode(ByteBuffer,CharBuffer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Encodes the input byte sequence into the output char sequence.  Before\n   * calling this method, ensure that the output CharBuffer has sufficient\n   * capacity by calling {@link #getEncodedLength(java.nio.ByteBuffer)}.\n   * \n   * @param input The byte sequence to encode\n   * @param output Where the char sequence encoding result will go.  The limit\n   *  is set to one past the position of the final char.\n   * @throws IllegalArgumentException If either the input or the output buffer\n   *  is not backed by an array\n   */\n  public static void encode(ByteBuffer input, CharBuffer output) {\n    if (input.hasArray() && output.hasArray()) {\n      byte[] inputArray = input.array();\n      int inputOffset = input.arrayOffset();\n      int inputLength = input.limit() - inputOffset; \n      char[] outputArray = output.array();\n      int outputOffset = output.arrayOffset();\n      int outputLength = getEncodedLength(input);\n      output.limit(outputOffset + outputLength); // Set output final pos + 1\n      output.position(0);\n      if (inputLength > 0) {\n        int inputByteNum = inputOffset;\n        int caseNum = 0;\n        int outputCharNum = outputOffset;\n        CodingCase codingCase;\n        for ( ; inputByteNum + CODING_CASES[caseNum].numBytes <= inputLength ;\n              ++outputCharNum                                                 ) {\n          codingCase = CODING_CASES[caseNum];\n          if (2 == codingCase.numBytes) {\n            outputArray[outputCharNum]\n              = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                       + (((inputArray[inputByteNum + 1] & 0xFF) >>> codingCase.finalShift)\n                          & codingCase.finalMask)\n                       & (short)0x7FFF);\n          } else { // numBytes is 3\n            outputArray[outputCharNum] \n              = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                       + ((inputArray[inputByteNum + 1] & 0xFF) << codingCase.middleShift)\n                       + (((inputArray[inputByteNum + 2] & 0xFF) >>> codingCase.finalShift) \n                          & codingCase.finalMask)\n                       & (short)0x7FFF);          \n          }\n          inputByteNum += codingCase.advanceBytes;          \n          if (++caseNum == CODING_CASES.length) {\n            caseNum = 0;\n          }\n        }\n        // Produce final char (if any) and trailing count chars.\n        codingCase = CODING_CASES[caseNum];\n        \n        if (inputByteNum + 1 < inputLength) { // codingCase.numBytes must be 3\n          outputArray[outputCharNum++] \n            = (char)((((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                      + ((inputArray[inputByteNum + 1] & 0xFF) << codingCase.middleShift))\n                     & (short)0x7FFF);\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = (char)1;\n        } else if (inputByteNum < inputLength) {\n          outputArray[outputCharNum++] \n            = (char)(((inputArray[inputByteNum] & 0xFF) << codingCase.initialShift)\n                     & (short)0x7FFF);\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = caseNum == 0 ? (char)1 : (char)0;\n        } else { // No left over bits - last char is completely filled.\n          // Add trailing char containing the number of full bytes in final char\n          outputArray[outputCharNum++] = (char)1;\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Arguments must have backing arrays\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}