{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#makeSegmentCommitInfo(String,int,int,double).mjava","commits":[{"id":"404dafe26b816e6ed478486e26abd62d8607b123","date":1531142470,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#makeSegmentCommitInfo(String,int,int,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Make a new {@link SegmentCommitInfo} with the given {@code maxDoc},\n   * {@code numDeletedDocs} and {@code sizeInBytes}, which are usually the\n   * numbers that merge policies care about.\n   */\n  protected static SegmentCommitInfo makeSegmentCommitInfo(String name, int maxDoc, int numDeletedDocs, double sizeMB) {\n    if (name.startsWith(\"_\") == false) {\n      throw new IllegalArgumentException(\"name must start with an _, got \" + name);\n    }\n    byte[] id = new byte[StringHelper.ID_LENGTH];\n    random().nextBytes(id);\n    SegmentInfo info = new SegmentInfo(FAKE_DIRECTORY, Version.LATEST, Version.LATEST, name, maxDoc, false, TestUtil.getDefaultCodec(), Collections.emptyMap(), id, Collections.emptyMap(), null);\n    info.setFiles(Collections.singleton(name + \"_size=\" + Long.toString((long) (sizeMB * 1024 * 1024)) + \".fake\"));\n    return new SegmentCommitInfo(info, numDeletedDocs, 0, 0, 0, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da0d58b6bf72ebfd4d6722289ea725809c20c987","date":1531207054,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#makeSegmentCommitInfo(String,int,int,double,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseMergePolicyTestCase#makeSegmentCommitInfo(String,int,int,double).mjava","sourceNew":"  /**\n   * Make a new {@link SegmentCommitInfo} with the given {@code maxDoc},\n   * {@code numDeletedDocs} and {@code sizeInBytes}, which are usually the\n   * numbers that merge policies care about.\n   */\n  protected static SegmentCommitInfo makeSegmentCommitInfo(String name, int maxDoc, int numDeletedDocs, double sizeMB, String source) {\n    if (name.startsWith(\"_\") == false) {\n      throw new IllegalArgumentException(\"name must start with an _, got \" + name);\n    }\n    byte[] id = new byte[StringHelper.ID_LENGTH];\n    random().nextBytes(id);\n    SegmentInfo info = new SegmentInfo(FAKE_DIRECTORY, Version.LATEST, Version.LATEST,\n        name, maxDoc, false, TestUtil.getDefaultCodec(), Collections.emptyMap(), id,\n        Collections.singletonMap(IndexWriter.SOURCE, source), null);\n    info.setFiles(Collections.singleton(name + \"_size=\" + Long.toString((long) (sizeMB * 1024 * 1024)) + \".fake\"));\n    return new SegmentCommitInfo(info, numDeletedDocs, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  /**\n   * Make a new {@link SegmentCommitInfo} with the given {@code maxDoc},\n   * {@code numDeletedDocs} and {@code sizeInBytes}, which are usually the\n   * numbers that merge policies care about.\n   */\n  protected static SegmentCommitInfo makeSegmentCommitInfo(String name, int maxDoc, int numDeletedDocs, double sizeMB) {\n    if (name.startsWith(\"_\") == false) {\n      throw new IllegalArgumentException(\"name must start with an _, got \" + name);\n    }\n    byte[] id = new byte[StringHelper.ID_LENGTH];\n    random().nextBytes(id);\n    SegmentInfo info = new SegmentInfo(FAKE_DIRECTORY, Version.LATEST, Version.LATEST, name, maxDoc, false, TestUtil.getDefaultCodec(), Collections.emptyMap(), id, Collections.emptyMap(), null);\n    info.setFiles(Collections.singleton(name + \"_size=\" + Long.toString((long) (sizeMB * 1024 * 1024)) + \".fake\"));\n    return new SegmentCommitInfo(info, numDeletedDocs, 0, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["404dafe26b816e6ed478486e26abd62d8607b123"],"404dafe26b816e6ed478486e26abd62d8607b123":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da0d58b6bf72ebfd4d6722289ea725809c20c987"]},"commit2Childs":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"404dafe26b816e6ed478486e26abd62d8607b123":["da0d58b6bf72ebfd4d6722289ea725809c20c987"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["404dafe26b816e6ed478486e26abd62d8607b123"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}