{"path":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testFilteredDocIdSet().mjava","commits":[{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFilteredDocIdSet#testFilteredDocIdSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocIdSet#testFilteredDocIdSet().mjava","sourceNew":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","sourceOld":"  public void testFilteredDocIdSet() throws Exception {\n    final int maxdoc=10;\n    final DocIdSet innerSet = new DocIdSet() {\n\n      @Override\n      public long ramBytesUsed() {\n        return 0L;\n      }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n\n            int docid = -1;\n            \n            @Override\n            public int docID() {\n              return docid;\n            }\n            \n            @Override\n            public int nextDoc() {\n              docid++;\n              return docid < maxdoc ? docid : (docid = NO_MORE_DOCS);\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return slowAdvance(target);\n            }\n            \n            @Override\n            public long cost() {\n              return 1;\n            } \n          };\n        } \n      };\n\n\n    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){\n        @Override\n        protected boolean match(int docid) {\n          return docid%2 == 0;  //validate only even docids\n        }\n      };\n\n    DocIdSetIterator iter = filteredSet.iterator();\n    ArrayList<Integer> list = new ArrayList<>();\n    int doc = iter.advance(3);\n    if (doc != DocIdSetIterator.NO_MORE_DOCS) {\n      list.add(Integer.valueOf(doc));\n      while((doc = iter.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n        list.add(Integer.valueOf(doc));\n      }\n    }\n\n    int[] docs = new int[list.size()];\n    int c=0;\n    Iterator<Integer> intIter = list.iterator();\n    while(intIter.hasNext()) {\n      docs[c++] = intIter.next().intValue();\n    }\n    int[] answer = new int[]{4,6,8};\n    boolean same = Arrays.equals(answer, docs);\n    if (!same) {\n      System.out.println(\"answer: \" + Arrays.toString(answer));\n      System.out.println(\"gotten: \" + Arrays.toString(docs));\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d52e48927ca4ef3655a261f2230b968b6fdf3608":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}