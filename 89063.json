{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(_TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig( TEST_VERSION_CURRENT, anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#createIndex(boolean).mjava","sourceNew":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","sourceOld":"  protected static void createIndex(boolean doMultiSegment) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    // prepare a small index with just a few documents.\n    dir = newDirectory();\n    anlzr = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(anlzr).setMergePolicy(newLogMergePolicy());\n    if (doMultiSegment) {\n      iwc.setMaxBufferedDocs(TestUtil.nextInt(random(), 2, 7));\n    }\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    // add docs not exactly in natural ID order, to verify we do check the order of docs by scores\n    int remaining = N_DOCS;\n    boolean done[] = new boolean[N_DOCS];\n    int i = 0;\n    while (remaining > 0) {\n      if (done[i]) {\n        throw new Exception(\"to set this test correctly N_DOCS=\" + N_DOCS + \" must be primary and greater than 2!\");\n      }\n      addDoc(iw, i);\n      done[i] = true;\n      i = (i + 4) % N_DOCS;\n      remaining --;\n    }\n    if (!doMultiSegment) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: setUp full merge\");\n      }\n      iw.forceMerge(1);\n    }\n    iw.shutdown();\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp done close\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}