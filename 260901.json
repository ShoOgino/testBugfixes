{"path":"src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","commits":[{"id":"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","date":1262055526,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","pathOld":"/dev/null","sourceNew":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ae346e1b9114f24145c75e8edf720c1e2db5b448"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","sourceNew":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}