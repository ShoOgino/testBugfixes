{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, false);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state, false) != null: \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, false);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state, false) != null: \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45e70e926cf079225675770e02754690f9e56910","date":1334193924,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, false);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, false);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state, false) != null: \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, false);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, false);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, false);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, 0);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactSimScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppySimScorer(stats, context));\n      }\n    }\n\n","bugFix":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes(), false) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final AtomicReader reader = context.reader();\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n\n      final Terms fieldTerms = reader.terms(field);\n      if (fieldTerms == null) {\n        return null;\n      }\n\n      // Reuse single TermsEnum below:\n      final TermsEnum te = fieldTerms.iterator(null);\n      \n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, t): \"no termstate found but term exists in reader\";\n          return null;\n        }\n        te.seekExact(t.bytes(), state);\n        DocsAndPositionsEnum postingsEnum = te.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert te.seekExact(t.bytes()) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.timSort(postingsFreqs);\n      }\n\n      if (slop == 0) {  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.simScorer(stats, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.simScorer(stats, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"b799defcfda6d303cbb180917bf1e749089adf42":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["45e70e926cf079225675770e02754690f9e56910","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b799defcfda6d303cbb180917bf1e749089adf42"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["45e70e926cf079225675770e02754690f9e56910","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"45e70e926cf079225675770e02754690f9e56910":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["b799defcfda6d303cbb180917bf1e749089adf42"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["45e70e926cf079225675770e02754690f9e56910"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b6a0e3c1c21aac8ecf75706605133012833585c7"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["45e70e926cf079225675770e02754690f9e56910"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b799defcfda6d303cbb180917bf1e749089adf42":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["b799defcfda6d303cbb180917bf1e749089adf42"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"45e70e926cf079225675770e02754690f9e56910":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6a0e3c1c21aac8ecf75706605133012833585c7","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}