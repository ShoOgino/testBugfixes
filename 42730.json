{"path":"backwards/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Fieldable f2 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n    Document d3 = new Document();\n    Document d4 = new Document();\n    d3.setBoost(3.0f);\n    d4.setBoost(2.0f);\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n    d3.add(f1);                                 // boost = 3\n    d4.add(f2);                                 // boost = 4\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n    writer.addDocument(d3);\n    writer.addDocument(d4);\n    writer.optimize();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}