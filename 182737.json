{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextLongitudeNear(double,double).mjava","commits":[{"id":"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2","date":1460953142,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextLongitudeNear(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** returns next pseudorandom longitude, kinda close to {@code otherLongitude} */\n  private static double nextLongitudeNear(double otherLongitude, double delta) {\n    delta = Math.abs(delta);\n    GeoUtils.checkLongitude(otherLongitude);\n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return nextLongitude();\n    } else if (surpriseMe < 49) {\n      // upper half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(otherLongitude, Math.min(180, otherLongitude + delta));\n    } else {\n      // lower half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(Math.max(-180, otherLongitude - delta), otherLongitude);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextLongitudeNear(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** returns next pseudorandom longitude, kinda close to {@code otherLongitude} */\n  private static double nextLongitudeNear(double otherLongitude, double delta) {\n    delta = Math.abs(delta);\n    GeoUtils.checkLongitude(otherLongitude);\n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return nextLongitude();\n    } else if (surpriseMe < 49) {\n      // upper half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(otherLongitude, Math.min(180, otherLongitude + delta));\n    } else {\n      // lower half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(Math.max(-180, otherLongitude - delta), otherLongitude);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","date":1533125102,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextLongitudeNear(double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextLongitudeNear(double,double).mjava","sourceNew":"  /** returns next pseudorandom longitude, kinda close to {@code otherLongitude} */\n  private static double nextLongitudeNear(double otherLongitude, double delta) {\n    delta = Math.abs(delta);\n    GeoUtils.checkLongitude(otherLongitude);\n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return nextLongitude();\n    } else if (surpriseMe < 49) {\n      // upper half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(otherLongitude, Math.min(180, otherLongitude + delta));\n    } else {\n      // lower half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(Math.max(-180, otherLongitude - delta), otherLongitude);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom longitude, kinda close to {@code otherLongitude} */\n  private static double nextLongitudeNear(double otherLongitude, double delta) {\n    delta = Math.abs(delta);\n    GeoUtils.checkLongitude(otherLongitude);\n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return nextLongitude();\n    } else if (surpriseMe < 49) {\n      // upper half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(otherLongitude, Math.min(180, otherLongitude + delta));\n    } else {\n      // lower half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(Math.max(-180, otherLongitude - delta), otherLongitude);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b39f95206bdb2c5b28ef7e848cacce7f2baefea","date":1533131097,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextLongitudeNear(double,double).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextLongitudeNear(double,double).mjava","sourceNew":"  /** returns next pseudorandom longitude, kinda close to {@code otherLongitude} */\n  private static double nextLongitudeNear(double otherLongitude, double delta) {\n    delta = Math.abs(delta);\n    GeoUtils.checkLongitude(otherLongitude);\n    int surpriseMe = random().nextInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return nextLongitude();\n    } else if (surpriseMe < 49) {\n      // upper half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(otherLongitude, Math.min(180, otherLongitude + delta));\n    } else {\n      // lower half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(Math.max(-180, otherLongitude - delta), otherLongitude);\n    }\n  }\n\n","sourceOld":"  /** returns next pseudorandom longitude, kinda close to {@code otherLongitude} */\n  private static double nextLongitudeNear(double otherLongitude, double delta) {\n    delta = Math.abs(delta);\n    GeoUtils.checkLongitude(otherLongitude);\n    int surpriseMe = randomInt(97);\n    if (surpriseMe == 0) {\n      // purely random\n      return nextLongitude();\n    } else if (surpriseMe < 49) {\n      // upper half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(otherLongitude, Math.min(180, otherLongitude + delta));\n    } else {\n      // lower half of region (the exact point or 1 ulp difference is still likely)\n      return nextDoubleInternal(Math.max(-180, otherLongitude - delta), otherLongitude);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["713122036535651642e6d4fe57ce12b449e18473"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"]},"commit2Childs":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2"],"3542cf82b8acd1e9ff2ee90fb0bf35e08698a1c2":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}