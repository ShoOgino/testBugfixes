{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","sourceOld":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    if (maxValue < 0) {\n      throw new IllegalArgumentException(\"maxValue must be non-negative (got: \" + maxValue + \")\");\n    }\n    return Math.max(1, 64 - Long.numberOfLeadingZeros(maxValue));\n  }\n\n","sourceOld":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   *  NOTE: This method returns at least 1.\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    if (maxValue < 0) {\n      throw new IllegalArgumentException(\"maxValue must be non-negative (got: \" + maxValue + \")\");\n    }\n    return unsignedBitsRequired(maxValue);\n  }\n\n","sourceOld":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    if (maxValue < 0) {\n      throw new IllegalArgumentException(\"maxValue must be non-negative (got: \" + maxValue + \")\");\n    }\n    return Math.max(1, 64 - Long.numberOfLeadingZeros(maxValue));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   *  NOTE: This method returns at least 1.\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    if (maxValue < 0) {\n      throw new IllegalArgumentException(\"maxValue must be non-negative (got: \" + maxValue + \")\");\n    }\n    return unsignedBitsRequired(maxValue);\n  }\n\n","sourceOld":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    if (maxValue < 0) {\n      throw new IllegalArgumentException(\"maxValue must be non-negative (got: \" + maxValue + \")\");\n    }\n    return Math.max(1, 64 - Long.numberOfLeadingZeros(maxValue));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}