{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testTextFieldNoPositionsOffsetFromValues().mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testTextFieldNoPositionsOffsetFromValues().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This test runs a term query against a field with no stored\n   * positions or offsets. This test checks the {@link OffsetsFromValues}\n   * strategy that returns highlights over entire indexed values.\n   */\n  @Test\n  public void testTextFieldNoPositionsOffsetFromValues() throws Exception {\n    String field = FLD_TEXT_NOPOS;\n\n    withReader(\n        List.of(\n            Map.of(FLD_TEXT_NOPOS, values(\"foo bar\")),\n            Map.of(FLD_TEXT_NOPOS, values(\"foo bar\", \"baz baz\"))\n        ),\n        reader -> {\n          OffsetsRetrievalStrategySupplier defaults = MatchRegionRetriever\n              .computeOffsetRetrievalStrategies(reader, analyzer);\n          OffsetsRetrievalStrategySupplier customSuppliers = (fld) -> {\n            if (fld.equals(field)) {\n              return new OffsetsFromValues(field, analyzer);\n            } else {\n              return defaults.apply(field);\n            }\n          };\n\n          assertThat(\n              highlights(\n                  customSuppliers,\n                  reader,\n                  new TermQuery(new Term(field, \"bar\"))),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar<')\", field),\n                  fmt(\"1: (%s: '>foo bar< | >baz baz<')\", field)));\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testTextFieldNoPositionsOffsetFromValues().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testTextFieldNoPositionsOffsetFromValues().mjava","sourceNew":"  /**\n   * This test runs a term query against a field with no stored\n   * positions or offsets. This test checks the {@link OffsetsFromValues}\n   * strategy that returns highlights over entire indexed values.\n   */\n  @Test\n  public void testTextFieldNoPositionsOffsetFromValues() throws Exception {\n    String field = FLD_TEXT_NOPOS;\n\n    new IndexBuilder(this::toField)\n        .doc(FLD_TEXT_NOPOS, \"foo bar\")\n        .doc(FLD_TEXT_NOPOS, \"foo bar\", \"baz baz\")\n        .build(analyzer, reader -> {\n          OffsetsRetrievalStrategySupplier defaults = MatchRegionRetriever\n              .computeOffsetRetrievalStrategies(reader, analyzer);\n          OffsetsRetrievalStrategySupplier customSuppliers = (fld) -> {\n            if (fld.equals(field)) {\n              return new OffsetsFromValues(field, analyzer);\n            } else {\n              return defaults.apply(field);\n            }\n          };\n\n          assertThat(\n              highlights(\n                  customSuppliers,\n                  reader,\n                  new TermQuery(new Term(field, \"bar\"))),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar<')\", field),\n                  fmt(\"1: (%s: '>foo bar< | >baz baz<')\", field)));\n        }\n    );\n  }\n\n","sourceOld":"  /**\n   * This test runs a term query against a field with no stored\n   * positions or offsets. This test checks the {@link OffsetsFromValues}\n   * strategy that returns highlights over entire indexed values.\n   */\n  @Test\n  public void testTextFieldNoPositionsOffsetFromValues() throws Exception {\n    String field = FLD_TEXT_NOPOS;\n\n    withReader(\n        List.of(\n            Map.of(FLD_TEXT_NOPOS, values(\"foo bar\")),\n            Map.of(FLD_TEXT_NOPOS, values(\"foo bar\", \"baz baz\"))\n        ),\n        reader -> {\n          OffsetsRetrievalStrategySupplier defaults = MatchRegionRetriever\n              .computeOffsetRetrievalStrategies(reader, analyzer);\n          OffsetsRetrievalStrategySupplier customSuppliers = (fld) -> {\n            if (fld.equals(field)) {\n              return new OffsetsFromValues(field, analyzer);\n            } else {\n              return defaults.apply(field);\n            }\n          };\n\n          assertThat(\n              highlights(\n                  customSuppliers,\n                  reader,\n                  new TermQuery(new Term(field, \"bar\"))),\n              containsInAnyOrder(\n                  fmt(\"0: (%s: '>foo bar<')\", field),\n                  fmt(\"1: (%s: '>foo bar< | >baz baz<')\", field)));\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}