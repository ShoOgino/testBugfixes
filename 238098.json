{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadCheckQuery#testComplexSpanChecks().mjava","commits":[{"id":"8a8dd51777c3f17c83f8aac170bd0f68a029d174","date":1442220758,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadCheckQuery#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadBasics#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    List<BytesRef> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(StandardCharsets.UTF_8));\n    payloads.add(pay);\n    payloads.add(pay2);\n    payloads.add(pay3);\n    payloads.add(pay4);\n    query = new SpanPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    Collection<byte[]> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(StandardCharsets.UTF_8));\n    payloads.add(pay.bytes);\n    payloads.add(pay2.bytes);\n    payloads.add(pay3.bytes);\n    payloads.add(pay4.bytes);\n    query = new SpanPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadCheckQuery#testComplexSpanChecks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadCheckQuery#testComplexSpanChecks().mjava","sourceNew":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    List<BytesRef> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(StandardCharsets.UTF_8));\n    payloads.add(pay);\n    payloads.add(pay2);\n    payloads.add(pay3);\n    payloads.add(pay4);\n    query = new SpanPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","sourceOld":"  public void testComplexSpanChecks() throws Exception {\n    SpanTermQuery one = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanTermQuery thous = new SpanTermQuery(new Term(\"field\", \"thousand\"));\n    //should be one position in between\n    SpanTermQuery hundred = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanTermQuery three = new SpanTermQuery(new Term(\"field\", \"three\"));\n\n    SpanNearQuery oneThous = new SpanNearQuery(new SpanQuery[]{one, thous}, 0, true);\n    SpanNearQuery hundredThree = new SpanNearQuery(new SpanQuery[]{hundred, three}, 0, true);\n    SpanNearQuery oneThousHunThree = new SpanNearQuery(new SpanQuery[]{oneThous, hundredThree}, 1, true);\n    SpanQuery query;\n    //this one's too small\n    query = new SpanPositionRangeQuery(oneThousHunThree, 1, 2);\n    checkHits(query, new int[]{});\n    //this one's just right\n    query = new SpanPositionRangeQuery(oneThousHunThree, 0, 6);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n    List<BytesRef> payloads = new ArrayList<>();\n    BytesRef pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 3).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay4 = new BytesRef((\"pos: \" + 4).getBytes(StandardCharsets.UTF_8));\n    payloads.add(pay);\n    payloads.add(pay2);\n    payloads.add(pay3);\n    payloads.add(pay4);\n    query = new SpanPayloadCheckQuery(oneThousHunThree, payloads);\n    checkHits(query, new int[]{1103, 1203,1303,1403,1503,1603,1703,1803,1903});\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}