{"path":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86365ce8db75e42ebe10805e99e92c463fef63b6","date":1330370408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc235a3c94a5ee792a9eae09205d93655d832bde","date":1402659679,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramBytesUsed();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramBytesUsed();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        System.out.println(\"FAILED exc:\");\n        ex.printStackTrace(System.out);\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc235a3c94a5ee792a9eae09205d93655d832bde":["7530de27b87b961b51f01bd1299b7004d46e8823"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["86365ce8db75e42ebe10805e99e92c463fef63b6","7530de27b87b961b51f01bd1299b7004d46e8823"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","86365ce8db75e42ebe10805e99e92c463fef63b6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["7530de27b87b961b51f01bd1299b7004d46e8823","bc235a3c94a5ee792a9eae09205d93655d832bde"],"7530de27b87b961b51f01bd1299b7004d46e8823":["86365ce8db75e42ebe10805e99e92c463fef63b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc235a3c94a5ee792a9eae09205d93655d832bde"]},"commit2Childs":{"bc235a3c94a5ee792a9eae09205d93655d832bde":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","86365ce8db75e42ebe10805e99e92c463fef63b6"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["bc235a3c94a5ee792a9eae09205d93655d832bde","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}