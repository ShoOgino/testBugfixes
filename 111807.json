{"path":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#doTestBoosts(int).mjava","commits":[{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":0,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#doTestBoosts(int).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestBoosts(int totalHitsThreshold) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    doc.add(new Field(\"f\", \"c\", ft));\n    w.addDocument(doc);\n    for (int i = 0; i < 10; ++i) {\n      doc.clear();\n      doc.add(new TextField(\"f\", \"a a a a\", Store.NO));\n      w.addDocument(doc);\n      if (i % 2 == 0) {\n        doc.clear();\n        doc.add(new TextField(\"f\", \"b b\", Store.NO));\n        w.addDocument(doc);\n      } else {\n        doc.clear();\n        doc.add(new TextField(\"f\", \"a a b\", Store.NO));\n        w.addDocument(doc);\n      }\n    }\n    doc.clear();\n    doc.add(new TextField(\"f\", \"c\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    SynonymQuery query = new SynonymQuery.Builder(\"f\")\n        .addTerm(new Term(\"f\", \"a\"), 0.25f)\n        .addTerm(new Term(\"f\", \"b\"), 0.5f)\n        .addTerm(new Term(\"f\", \"c\"))\n        .build();\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(Math.min(reader.numDocs(), totalHitsThreshold), null, totalHitsThreshold);\n    searcher.search(query, collector);\n    TopDocs topDocs = collector.topDocs();\n    if (topDocs.totalHits.value < totalHitsThreshold) {\n      assertEquals(TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n      assertEquals(22, topDocs.totalHits.value);\n    } else {\n      assertEquals(TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO, topDocs.totalHits.relation);\n    }\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b430d55a9fcbf63f79be77efefd3185285824f69","date":1552379620,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#doTestBoosts(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSynonymQuery#doTestBoosts(int).mjava","sourceNew":"  public void doTestBoosts(int totalHitsThreshold) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    doc.add(new Field(\"f\", \"c\", ft));\n    w.addDocument(doc);\n    for (int i = 0; i < 10; ++i) {\n      doc.clear();\n      doc.add(new Field(\"f\", \"a a a a\", ft));\n      w.addDocument(doc);\n      if (i % 2 == 0) {\n        doc.clear();\n        doc.add(new Field(\"f\", \"b b\", ft));\n        w.addDocument(doc);\n      } else {\n        doc.clear();\n        doc.add(new Field(\"f\", \"a a b\", ft));\n        w.addDocument(doc);\n      }\n    }\n    doc.clear();\n    doc.add(new Field(\"f\", \"c\", ft));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    SynonymQuery query = new SynonymQuery.Builder(\"f\")\n        .addTerm(new Term(\"f\", \"a\"), 0.25f)\n        .addTerm(new Term(\"f\", \"b\"), 0.5f)\n        .addTerm(new Term(\"f\", \"c\"))\n        .build();\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(Math.min(reader.numDocs(), totalHitsThreshold), null, totalHitsThreshold);\n    searcher.search(query, collector);\n    TopDocs topDocs = collector.topDocs();\n    if (topDocs.totalHits.value < totalHitsThreshold) {\n      assertEquals(TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n      assertEquals(22, topDocs.totalHits.value);\n    } else {\n      assertEquals(TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO, topDocs.totalHits.relation);\n    }\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void doTestBoosts(int totalHitsThreshold) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    doc.add(new Field(\"f\", \"c\", ft));\n    w.addDocument(doc);\n    for (int i = 0; i < 10; ++i) {\n      doc.clear();\n      doc.add(new TextField(\"f\", \"a a a a\", Store.NO));\n      w.addDocument(doc);\n      if (i % 2 == 0) {\n        doc.clear();\n        doc.add(new TextField(\"f\", \"b b\", Store.NO));\n        w.addDocument(doc);\n      } else {\n        doc.clear();\n        doc.add(new TextField(\"f\", \"a a b\", Store.NO));\n        w.addDocument(doc);\n      }\n    }\n    doc.clear();\n    doc.add(new TextField(\"f\", \"c\", Store.NO));\n    w.addDocument(doc);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    SynonymQuery query = new SynonymQuery.Builder(\"f\")\n        .addTerm(new Term(\"f\", \"a\"), 0.25f)\n        .addTerm(new Term(\"f\", \"b\"), 0.5f)\n        .addTerm(new Term(\"f\", \"c\"))\n        .build();\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(Math.min(reader.numDocs(), totalHitsThreshold), null, totalHitsThreshold);\n    searcher.search(query, collector);\n    TopDocs topDocs = collector.topDocs();\n    if (topDocs.totalHits.value < totalHitsThreshold) {\n      assertEquals(TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n      assertEquals(22, topDocs.totalHits.value);\n    } else {\n      assertEquals(TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO, topDocs.totalHits.relation);\n    }\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b430d55a9fcbf63f79be77efefd3185285824f69":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b430d55a9fcbf63f79be77efefd3185285824f69"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["b430d55a9fcbf63f79be77efefd3185285824f69"],"b430d55a9fcbf63f79be77efefd3185285824f69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}