{"path":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSingleReplicationAndShardSize(String,int).mjava","commits":[{"id":"3747a28ce6c262c1e27f7c7b30a827bc1a17260b","date":1428529761,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSingleReplicationAndShardSize(String,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSingleReplicationAndShardSize(String collection, int numSlices) {\n    Collection<Slice> slices;\n    slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(collection);\n    assertEquals(numSlices, slices.size());\n    for (Slice slice : slices) {\n      assertEquals(1, slice.getReplicas().size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSingleReplicationAndShardSize(String,int).mjava","sourceNew":null,"sourceOld":"  private void assertSingleReplicationAndShardSize(String collection, int numSlices) {\n    Collection<Slice> slices;\n    slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(collection);\n    assertEquals(numSlices, slices.size());\n    for (Slice slice : slices) {\n      assertEquals(1, slice.getReplicas().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSingleReplicationAndShardSize(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSingleReplicationAndShardSize(String,int).mjava","sourceNew":"  private void assertSingleReplicationAndShardSize(String collection, int numSlices) {\n    Collection<Slice> slices;\n    slices = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getActiveSlices();\n    assertEquals(numSlices, slices.size());\n    for (Slice slice : slices) {\n      assertEquals(1, slice.getReplicas().size());\n    }\n  }\n\n","sourceOld":"  private void assertSingleReplicationAndShardSize(String collection, int numSlices) {\n    Collection<Slice> slices;\n    slices = cloudClient.getZkStateReader().getClusterState().getActiveSlices(collection);\n    assertEquals(numSlices, slices.size());\n    for (Slice slice : slices) {\n      assertEquals(1, slice.getReplicas().size());\n    }\n  }\n\n","bugFix":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSingleReplicationAndShardSize(String,int).mjava","sourceNew":null,"sourceOld":"  private void assertSingleReplicationAndShardSize(String collection, int numSlices) {\n    Collection<Slice> slices;\n    slices = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getActiveSlices();\n    assertEquals(numSlices, slices.size());\n    for (Slice slice : slices) {\n      assertEquals(1, slice.getReplicas().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSingleReplicationAndShardSize(String,int).mjava","sourceNew":null,"sourceOld":"  private void assertSingleReplicationAndShardSize(String collection, int numSlices) {\n    Collection<Slice> slices;\n    slices = cloudClient.getZkStateReader().getClusterState().getCollection(collection).getActiveSlices();\n    assertEquals(numSlices, slices.size());\n    for (Slice slice : slices) {\n      assertEquals(1, slice.getReplicas().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["344b0840364d990b29b97467bfcc766ff8325d11","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"344b0840364d990b29b97467bfcc766ff8325d11":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["344b0840364d990b29b97467bfcc766ff8325d11","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"344b0840364d990b29b97467bfcc766ff8325d11":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1","344b0840364d990b29b97467bfcc766ff8325d11"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}