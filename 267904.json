{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Ensure that leader's term is higher than some replica's terms\r\n   * @param leader coreNodeName of leader\r\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\r\n   */\r\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\r\n    Terms newTerms;\r\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\r\n      if (forceSaveTerms(newTerms)) return;\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","sourceNew":"  /**\r\n   * Ensure that leader's term is higher than some replica's terms\r\n   * @param leader coreNodeName of leader\r\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\r\n   */\r\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\r\n    if (replicasNeedingRecovery.isEmpty()) return;\r\n\r\n    Terms newTerms;\r\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\r\n      if (forceSaveTerms(newTerms)) return;\r\n    }\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Ensure that leader's term is higher than some replica's terms\r\n   * @param leader coreNodeName of leader\r\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\r\n   */\r\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\r\n    Terms newTerms;\r\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\r\n      if (forceSaveTerms(newTerms)) return;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","sourceNew":"  /**\r\n   * Ensure that leader's term is higher than some replica's terms\r\n   * @param leader coreNodeName of leader\r\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\r\n   */\r\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\r\n    if (replicasNeedingRecovery.isEmpty()) return;\r\n\r\n    ShardTerms newTerms;\r\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\r\n      if (forceSaveTerms(newTerms)) return;\r\n    }\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Ensure that leader's term is higher than some replica's terms\r\n   * @param leader coreNodeName of leader\r\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\r\n   */\r\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\r\n    if (replicasNeedingRecovery.isEmpty()) return;\r\n\r\n    Terms newTerms;\r\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\r\n      if (forceSaveTerms(newTerms)) return;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","sourceNew":"  /**\r\n   * Ensure that leader's term is higher than some replica's terms\r\n   * @param leader coreNodeName of leader\r\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\r\n   */\r\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\r\n    if (replicasNeedingRecovery.isEmpty()) return;\r\n\r\n    ShardTerms newTerms;\r\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\r\n      if (forceSaveTerms(newTerms)) return;\r\n    }\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Ensure that leader's term is higher than some replica's terms\r\n   * @param leader coreNodeName of leader\r\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\r\n   */\r\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\r\n    if (replicasNeedingRecovery.isEmpty()) return;\r\n\r\n    Terms newTerms;\r\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\r\n      if (forceSaveTerms(newTerms)) return;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","sourceNew":"  /**\n   * Ensure that leader's term is higher than some replica's terms\n   * @param leader coreNodeName of leader\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\n   */\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\n    if (replicasNeedingRecovery.isEmpty()) return;\n\n    ShardTerms newTerms;\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\n      if (forceSaveTerms(newTerms)) return;\n    }\n  }\n\n","sourceOld":"  /**\r\n   * Ensure that leader's term is higher than some replica's terms\r\n   * @param leader coreNodeName of leader\r\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\r\n   */\r\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\r\n    if (replicasNeedingRecovery.isEmpty()) return;\r\n\r\n    ShardTerms newTerms;\r\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\r\n      if (forceSaveTerms(newTerms)) return;\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64b136610bf3772c70e2d86fa4c913425cedbca5","date":1580107100,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#ensureTermsIsHigher(String,Set[String]).mjava","sourceNew":"  /**\n   * Ensure that leader's term is higher than some replica's terms\n   * @param leader coreNodeName of leader\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\n   */\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\n    if (replicasNeedingRecovery.isEmpty()) return;\n\n    ShardTerms newTerms;\n    while( (newTerms = terms.get().increaseTerms(leader, replicasNeedingRecovery)) != null) {\n      if (forceSaveTerms(newTerms)) return;\n    }\n  }\n\n","sourceOld":"  /**\n   * Ensure that leader's term is higher than some replica's terms\n   * @param leader coreNodeName of leader\n   * @param replicasNeedingRecovery set of replicas in which their terms should be lower than leader's term\n   */\n  public void ensureTermsIsHigher(String leader, Set<String> replicasNeedingRecovery) {\n    if (replicasNeedingRecovery.isEmpty()) return;\n\n    ShardTerms newTerms;\n    while( (newTerms = terms.increaseTerms(leader, replicasNeedingRecovery)) != null) {\n      if (forceSaveTerms(newTerms)) return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64b136610bf3772c70e2d86fa4c913425cedbca5":["14b990ee56c39c454f5c6bc2e645d1286e93acee"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64b136610bf3772c70e2d86fa4c913425cedbca5"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","14b990ee56c39c454f5c6bc2e645d1286e93acee"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["64b136610bf3772c70e2d86fa4c913425cedbca5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"64b136610bf3772c70e2d86fa4c913425cedbca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}