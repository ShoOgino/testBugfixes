{"path":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,boolean,String,Query,IndexSearcher).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,boolean,String,Query,IndexSearcher).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,boolean,String,Query,IndexSearcher).mjava","sourceNew":"  /**\n   * Method for query time joining.\n   * <p/>\n   * Execute the returned query with a {@link IndexSearcher} to retrieve all documents that have the same terms in the\n   * to field that match with documents matching the specified fromQuery and have the same terms in the from field.\n   *\n   * @param fromField                 The from field to join from\n   * @param multipleValuesPerDocument Whether the from field has multiple terms per document\n   * @param toField                   The to field to join to\n   * @param fromQuery                 The query to match documents on the from side\n   * @param fromSearcher              The searcher that executed the specified fromQuery\n   * @return a {@link Query} instance that can be used to join documents based on the\n   *         terms in the from and to field\n   * @throws IOException If I/O related errors occur\n   */\n  public static Query createJoinQuery(String fromField,\n                                      boolean multipleValuesPerDocument,\n                                      String toField,\n                                      Query fromQuery,\n                                      IndexSearcher fromSearcher) throws IOException {\n    TermsCollector termsCollector = TermsCollector.create(fromField, multipleValuesPerDocument);\n    fromSearcher.search(fromQuery, termsCollector);\n    return new TermsQuery(toField, termsCollector.getCollectorTerms());\n  }\n\n","sourceOld":"  /**\n   * Method for query time joining.\n   * <p/>\n   * Execute the returned query with a {@link IndexSearcher} to retrieve all documents that have the same terms in the\n   * to field that match with documents matching the specified fromQuery and have the same terms in the from field.\n   *\n   * @param fromField                 The from field to join from\n   * @param multipleValuesPerDocument Whether the from field has multiple terms per document\n   * @param toField                   The to field to join to\n   * @param fromQuery                 The query to match documents on the from side\n   * @param fromSearcher              The searcher that executed the specified fromQuery\n   * @return a {@link Query} instance that can be used to join documents based on the\n   *         terms in the from and to field\n   * @throws IOException If I/O related errors occur\n   */\n  public static Query createJoinQuery(String fromField,\n                                      boolean multipleValuesPerDocument,\n                                      String toField,\n                                      Query fromQuery,\n                                      IndexSearcher fromSearcher) throws IOException {\n    TermsCollector termsCollector = TermsCollector.create(fromField, multipleValuesPerDocument);\n    fromSearcher.search(fromQuery, termsCollector);\n    return new TermsQuery(toField, termsCollector.getCollectorTerms());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77855215e331ce146763531cb9b0c050726f6ae5","date":1338323851,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,boolean,String,Query,IndexSearcher,ScoreMode).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(String,boolean,String,Query,IndexSearcher).mjava","sourceNew":"  /**\n   * Method for query time joining.\n   * <p/>\n   * Execute the returned query with a {@link IndexSearcher} to retrieve all documents that have the same terms in the\n   * to field that match with documents matching the specified fromQuery and have the same terms in the from field.\n   * <p/>\n   * In the case a single document relates to more than one document the <code>multipleValuesPerDocument</code> option\n   * should be set to true. When the <code>multipleValuesPerDocument</code> is set to <code>true</code> only the\n   * the score from the first encountered join value originating from the 'from' side is mapped into the 'to' side.\n   * Even in the case when a second join value related to a specific document yields a higher score. Obviously this\n   * doesn't apply in the case that {@link ScoreMode#None} is used, since no scores are computed at all.\n   * </p>\n   * Memory considerations: During joining all unique join values are kept in memory. On top of that when the scoreMode\n   * isn't set to {@link ScoreMode#None} a float value per unique join value is kept in memory for computing scores.\n   * When scoreMode is set to {@link ScoreMode#Avg} also an additional integer value is kept in memory per unique\n   * join value.\n   *\n   * @param fromField                 The from field to join from\n   * @param multipleValuesPerDocument Whether the from field has multiple terms per document\n   * @param toField                   The to field to join to\n   * @param fromQuery                 The query to match documents on the from side\n   * @param fromSearcher              The searcher that executed the specified fromQuery\n   * @param scoreMode                 Instructs how scores from the fromQuery are mapped to the returned query\n   * @return a {@link Query} instance that can be used to join documents based on the\n   *         terms in the from and to field\n   * @throws IOException If I/O related errors occur\n   */\n  public static Query createJoinQuery(String fromField,\n                                      boolean multipleValuesPerDocument,\n                                      String toField,\n                                      Query fromQuery,\n                                      IndexSearcher fromSearcher,\n                                      ScoreMode scoreMode) throws IOException {\n    switch (scoreMode) {\n      case None:\n        TermsCollector termsCollector = TermsCollector.create(fromField, multipleValuesPerDocument);\n        fromSearcher.search(fromQuery, termsCollector);\n        return new TermsQuery(toField, termsCollector.getCollectorTerms());\n      case Total:\n      case Max:\n      case Avg:\n        TermsWithScoreCollector termsWithScoreCollector =\n            TermsWithScoreCollector.create(fromField, multipleValuesPerDocument, scoreMode);\n        fromSearcher.search(fromQuery, termsWithScoreCollector);\n        return new TermsIncludingScoreQuery(\n            toField,\n            multipleValuesPerDocument,\n            termsWithScoreCollector.getCollectedTerms(),\n            termsWithScoreCollector.getScoresPerTerm(),\n            fromQuery\n        );\n      default:\n        throw new IllegalArgumentException(String.format(\"Score mode %s isn't supported.\", scoreMode));\n    }\n  }\n\n","sourceOld":"  /**\n   * Method for query time joining.\n   * <p/>\n   * Execute the returned query with a {@link IndexSearcher} to retrieve all documents that have the same terms in the\n   * to field that match with documents matching the specified fromQuery and have the same terms in the from field.\n   *\n   * @param fromField                 The from field to join from\n   * @param multipleValuesPerDocument Whether the from field has multiple terms per document\n   * @param toField                   The to field to join to\n   * @param fromQuery                 The query to match documents on the from side\n   * @param fromSearcher              The searcher that executed the specified fromQuery\n   * @return a {@link Query} instance that can be used to join documents based on the\n   *         terms in the from and to field\n   * @throws IOException If I/O related errors occur\n   */\n  public static Query createJoinQuery(String fromField,\n                                      boolean multipleValuesPerDocument,\n                                      String toField,\n                                      Query fromQuery,\n                                      IndexSearcher fromSearcher) throws IOException {\n    TermsCollector termsCollector = TermsCollector.create(fromField, multipleValuesPerDocument);\n    fromSearcher.search(fromQuery, termsCollector);\n    return new TermsQuery(toField, termsCollector.getCollectorTerms());\n  }\n\n","bugFix":null,"bugIntro":["4f4c1d6d595e9d4dc26250376376df0d41a79e32"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77855215e331ce146763531cb9b0c050726f6ae5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["77855215e331ce146763531cb9b0c050726f6ae5"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77855215e331ce146763531cb9b0c050726f6ae5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"77855215e331ce146763531cb9b0c050726f6ae5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}