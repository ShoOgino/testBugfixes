{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrQueryRequest).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private List<MetricType> parseMetricTypes(SolrQueryRequest req) {\n    String[] typeStr = req.getParams().getParams(\"type\");\n    List<String> types = Collections.emptyList();\n    if (typeStr != null && typeStr.length > 0)  {\n      types = new ArrayList<>();\n      for (String type : typeStr) {\n        types.addAll(StrUtils.splitSmart(type, ','));\n      }\n    }\n\n    List<MetricType> metricTypes = Collections.singletonList(MetricType.all); // include all metrics by default\n    try {\n      if (types.size() > 0) {\n        metricTypes = types.stream().map(String::trim).map(MetricType::valueOf).collect(Collectors.toList());\n      }\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types + \" specified. Must be one of (all, meter, timer, histogram, counter, gauge)\", e);\n    }\n    return metricTypes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private List<MetricType> parseMetricTypes(SolrQueryRequest req) {\n    String[] typeStr = req.getParams().getParams(\"type\");\n    List<String> types = Collections.emptyList();\n    if (typeStr != null && typeStr.length > 0)  {\n      types = new ArrayList<>();\n      for (String type : typeStr) {\n        types.addAll(StrUtils.splitSmart(type, ','));\n      }\n    }\n\n    List<MetricType> metricTypes = Collections.singletonList(MetricType.all); // include all metrics by default\n    try {\n      if (types.size() > 0) {\n        metricTypes = types.stream().map(String::trim).map(MetricType::valueOf).collect(Collectors.toList());\n      }\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types + \" specified. Must be one of (all, meter, timer, histogram, counter, gauge)\", e);\n    }\n    return metricTypes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrQueryRequest).mjava","sourceNew":"  private List<MetricType> parseMetricTypes(SolrQueryRequest req) {\n    String[] typeStr = req.getParams().getParams(TYPE_PARAM);\n    List<String> types = Collections.emptyList();\n    if (typeStr != null && typeStr.length > 0)  {\n      types = new ArrayList<>();\n      for (String type : typeStr) {\n        types.addAll(StrUtils.splitSmart(type, ','));\n      }\n    }\n\n    List<MetricType> metricTypes = Collections.singletonList(MetricType.all); // include all metrics by default\n    try {\n      if (types.size() > 0) {\n        metricTypes = types.stream().map(String::trim).map(MetricType::valueOf).collect(Collectors.toList());\n      }\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types +\n          \" specified. Must be one of \" + MetricType.SUPPORTED_TYPES_MSG, e);\n    }\n    return metricTypes;\n  }\n\n","sourceOld":"  private List<MetricType> parseMetricTypes(SolrQueryRequest req) {\n    String[] typeStr = req.getParams().getParams(\"type\");\n    List<String> types = Collections.emptyList();\n    if (typeStr != null && typeStr.length > 0)  {\n      types = new ArrayList<>();\n      for (String type : typeStr) {\n        types.addAll(StrUtils.splitSmart(type, ','));\n      }\n    }\n\n    List<MetricType> metricTypes = Collections.singletonList(MetricType.all); // include all metrics by default\n    try {\n      if (types.size() > 0) {\n        metricTypes = types.stream().map(String::trim).map(MetricType::valueOf).collect(Collectors.toList());\n      }\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types + \" specified. Must be one of (all, meter, timer, histogram, counter, gauge)\", e);\n    }\n    return metricTypes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrQueryRequest).mjava","sourceNew":"  private List<MetricType> parseMetricTypes(SolrQueryRequest req) {\n    String[] typeStr = req.getParams().getParams(TYPE_PARAM);\n    List<String> types = Collections.emptyList();\n    if (typeStr != null && typeStr.length > 0)  {\n      types = new ArrayList<>();\n      for (String type : typeStr) {\n        types.addAll(StrUtils.splitSmart(type, ','));\n      }\n    }\n\n    List<MetricType> metricTypes = Collections.singletonList(MetricType.all); // include all metrics by default\n    try {\n      if (types.size() > 0) {\n        metricTypes = types.stream().map(String::trim).map(MetricType::valueOf).collect(Collectors.toList());\n      }\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types +\n          \" specified. Must be one of \" + MetricType.SUPPORTED_TYPES_MSG, e);\n    }\n    return metricTypes;\n  }\n\n","sourceOld":"  private List<MetricType> parseMetricTypes(SolrQueryRequest req) {\n    String[] typeStr = req.getParams().getParams(\"type\");\n    List<String> types = Collections.emptyList();\n    if (typeStr != null && typeStr.length > 0)  {\n      types = new ArrayList<>();\n      for (String type : typeStr) {\n        types.addAll(StrUtils.splitSmart(type, ','));\n      }\n    }\n\n    List<MetricType> metricTypes = Collections.singletonList(MetricType.all); // include all metrics by default\n    try {\n      if (types.size() > 0) {\n        metricTypes = types.stream().map(String::trim).map(MetricType::valueOf).collect(Collectors.toList());\n      }\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types + \" specified. Must be one of (all, meter, timer, histogram, counter, gauge)\", e);\n    }\n    return metricTypes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseMetricTypes(SolrQueryRequest).mjava","sourceNew":"  private List<MetricType> parseMetricTypes(SolrParams params) {\n    String[] typeStr = params.getParams(TYPE_PARAM);\n    List<String> types = Collections.emptyList();\n    if (typeStr != null && typeStr.length > 0)  {\n      types = new ArrayList<>();\n      for (String type : typeStr) {\n        types.addAll(StrUtils.splitSmart(type, ','));\n      }\n    }\n\n    List<MetricType> metricTypes = Collections.singletonList(MetricType.all); // include all metrics by default\n    try {\n      if (types.size() > 0) {\n        metricTypes = types.stream().map(String::trim).map(MetricType::valueOf).collect(Collectors.toList());\n      }\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types +\n          \" specified. Must be one of \" + MetricType.SUPPORTED_TYPES_MSG, e);\n    }\n    return metricTypes;\n  }\n\n","sourceOld":"  private List<MetricType> parseMetricTypes(SolrQueryRequest req) {\n    String[] typeStr = req.getParams().getParams(TYPE_PARAM);\n    List<String> types = Collections.emptyList();\n    if (typeStr != null && typeStr.length > 0)  {\n      types = new ArrayList<>();\n      for (String type : typeStr) {\n        types.addAll(StrUtils.splitSmart(type, ','));\n      }\n    }\n\n    List<MetricType> metricTypes = Collections.singletonList(MetricType.all); // include all metrics by default\n    try {\n      if (types.size() > 0) {\n        metricTypes = types.stream().map(String::trim).map(MetricType::valueOf).collect(Collectors.toList());\n      }\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types +\n          \" specified. Must be one of \" + MetricType.SUPPORTED_TYPES_MSG, e);\n    }\n    return metricTypes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["0265144286422ad99682a00904cc2536b79c8535"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0265144286422ad99682a00904cc2536b79c8535":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","816521ebaad5add9cb96bb88c577394e2938c40b"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"816521ebaad5add9cb96bb88c577394e2938c40b":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}