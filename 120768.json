{"path":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testForcedExceptionDistance().mjava","commits":[{"id":"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b","date":1342134079,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testForcedExceptionDistance().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test correctness of forced exception.\n   * the forced ones should exactly fit max chain \n   */\n  public void testForcedExceptionDistance() throws Exception {\n    initRandom();\n    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data=new int[sz];\n    byte[] res = new byte[4+sz*8];\n    int[] copy = new int[sz];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int numBits = gen.nextInt(5)+1;\n\n    int i,j;\n    int pace, ensz, header;\n    int expect, got;\n\n    // fill exception value with same pace, there should\n    // be no forced exceptions.\n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = 1<<numBits;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    ensz = PForUtil.compress(data,sz,resBuffer);\n    header = resBuffer.get(0);\n    expect = j; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n    // there should exactly one forced exception before each\n    // exception when i>0\n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = (1<<numBits)+1;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    ensz = PForUtil.compress(data,sz,resBuffer);\n    header = resBuffer.get(0);\n    expect = 2*(j-1)+1; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n\n    // two forced exception  \n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = (1<<numBits)*2+1;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    ensz = PForUtil.compress(data,sz,resBuffer);\n    header = resBuffer.get(0);\n    expect = 3*(j-1)+1; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testForcedExceptionDistance().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testForcedExceptionDistance().mjava","sourceNew":"  /**\n   * Test correctness of forced exception.\n   * the forced ones should exactly fit max chain \n   */\n  public void testForcedExceptionDistance() throws Exception {\n    initRandom();\n    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data=new int[sz];\n    byte[] res = new byte[sz*8];\n    int[] copy = new int[sz];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int numBits = gen.nextInt(5)+1;\n\n    int i,j;\n    int pace, ensz, header;\n    int expect, got;\n\n    // fill exception value with same pace, there should\n    // be no forced exceptions.\n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = 1<<numBits;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    header = PForUtil.compress(data,resBuffer);\n    ensz = PForUtil.getEncodedSize(header);\n    expect = j; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n    // there should exactly one forced exception before each\n    // exception when i>0\n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = (1<<numBits)+1;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    header = PForUtil.compress(data,resBuffer);\n    ensz = PForUtil.getEncodedSize(header);\n    expect = 2*(j-1)+1; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n\n    // two forced exception  \n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = (1<<numBits)*2+1;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    header = PForUtil.compress(data,resBuffer);\n    ensz = PForUtil.getEncodedSize(header);\n    expect = 3*(j-1)+1; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n  }\n\n","sourceOld":"  /**\n   * Test correctness of forced exception.\n   * the forced ones should exactly fit max chain \n   */\n  public void testForcedExceptionDistance() throws Exception {\n    initRandom();\n    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data=new int[sz];\n    byte[] res = new byte[4+sz*8];\n    int[] copy = new int[sz];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int numBits = gen.nextInt(5)+1;\n\n    int i,j;\n    int pace, ensz, header;\n    int expect, got;\n\n    // fill exception value with same pace, there should\n    // be no forced exceptions.\n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = 1<<numBits;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    ensz = PForUtil.compress(data,sz,resBuffer);\n    header = resBuffer.get(0);\n    expect = j; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n    // there should exactly one forced exception before each\n    // exception when i>0\n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = (1<<numBits)+1;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    ensz = PForUtil.compress(data,sz,resBuffer);\n    header = resBuffer.get(0);\n    expect = 2*(j-1)+1; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n\n    // two forced exception  \n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = (1<<numBits)*2+1;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    ensz = PForUtil.compress(data,sz,resBuffer);\n    header = resBuffer.get(0);\n    expect = 3*(j-1)+1; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testForcedExceptionDistance().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test correctness of forced exception.\n   * the forced ones should exactly fit max chain \n   */\n  public void testForcedExceptionDistance() throws Exception {\n    initRandom();\n    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data=new int[sz];\n    byte[] res = new byte[sz*8];\n    int[] copy = new int[sz];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int numBits = gen.nextInt(5)+1;\n\n    int i,j;\n    int pace, ensz, header;\n    int expect, got;\n\n    // fill exception value with same pace, there should\n    // be no forced exceptions.\n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = 1<<numBits;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    header = PForUtil.compress(data,resBuffer);\n    ensz = PForUtil.getEncodedSize(header);\n    expect = j; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n    // there should exactly one forced exception before each\n    // exception when i>0\n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = (1<<numBits)+1;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    header = PForUtil.compress(data,resBuffer);\n    ensz = PForUtil.getEncodedSize(header);\n    expect = 2*(j-1)+1; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n\n    // two forced exception  \n    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);\n    pace = (1<<numBits)*2+1;\n    for (i=0,j=0; i<sz; i+=pace) {\n      int exc = gen.nextInt();\n      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;\n      j++;\n    }\n    header = PForUtil.compress(data,resBuffer);\n    ensz = PForUtil.getEncodedSize(header);\n    expect = 3*(j-1)+1; \n    got = PForUtil.getExcNum(header);\n    assert expect == got: expect+\" expected but got \"+got;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["48d40647dc87c7b55ffe4d9dca73f63a3cebc58b"],"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48d40647dc87c7b55ffe4d9dca73f63a3cebc58b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}