{"path":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#setSocksServer(String,int,int).mjava","commits":[{"id":"bc6055f4a2e8e9f9caaec2297010c9502480ed69","date":1050060580,"type":0,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#setSocksServer(String,int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Sets the SOCKS server to use. The server will only be used for new\n     * HTTPConnections created after this call and will not affect currrent\n     * instances of HTTPConnection. A null or empty string host parameter\n     * disables SOCKS. <P>\n     *\n     * In an application or using the Appletviewer an alternative to this method\n     * is to set the following properties (either in the properties file or on\n     * the command line): <var>HTTPClient.socksHost</var> , <var>\n     * HTTPClient.socksPort</var> and <var>HTTPClient.socksVersion</var> .\n     * Whether <var>HTTPClient.socksHost</var> is set or not determines whether\n     * a SOCKS server is used; if <var>HTTPClient.socksPort</var> is not set it\n     * defaults to 1080; if <var>HTTPClient.socksVersion</var> is not set an\n     * attempt will be made to automatically determine the version used by the\n     * server. <P>\n     *\n     * Note: If you have also set a proxy server then a connection will be made\n     * to the SOCKS server, which in turn then makes a connection to the proxy\n     * server (possibly via other SOCKS servers), which in turn makes the final\n     * connection. <P>\n     *\n     * If the proxy server is running SOCKS version 5 and requires\n     * username/password authorization, and you wish to set this authorization\n     * information in the code, then you may use the <var>\n     * AuthorizationInfo.addAuthorization()</var> method to do so. Specify the\n     * same <var>host</var> and <var>port</var> as in this method, give the\n     * <var>scheme</var> \"SOCKS5\" and the <var>realm</var> \"USER/PASS\", set the\n     * <var>cookie</var> to null and the <var>params</var> to an array\n     * containing a single <var>NVPair</var> in turn containing the username and\n     * password. Example: <PRE>\n     *     NVPair[] up = { new NVPair(username, password) };\n     *     AuthorizationInfo.addAuthorization(host, port, \"SOCKS5\", \"USER/PASS\",\n     *                                        null, up);\n     * </PRE> If you have not given any authorization info and the proxy server\n     * requires authorization then you will be prompted for the necessary info\n     * via a popup the first time you do a request.\n     *\n     * @param host                the host on which the proxy server resides.\n     * @param port                the port the proxy server is listening on.\n     * @param version             the SOCKS version the server is running.\n     *      Currently this must be '4' or '5'.\n     * @exception SocksException  If <var>version</var> is not '4' or '5'.\n     */\n    public static void setSocksServer(String host, int port, int version)\n        throws SocksException\n    {\n        if (port <= 0)\n        {\n            port = 1080;\n        }\n\n        if (host == null || host.length() == 0)\n        {\n            Default_Socks_client = null;\n        }\n        else\n        {\n            Default_Socks_client = new SocksClient(host, port, version);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection#setSocksServer(String,int,int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Sets the SOCKS server to use. The server will only be used for new\n     * HTTPConnections created after this call and will not affect currrent\n     * instances of HTTPConnection. A null or empty string host parameter\n     * disables SOCKS. <P>\n     *\n     * In an application or using the Appletviewer an alternative to this method\n     * is to set the following properties (either in the properties file or on\n     * the command line): <var>HTTPClient.socksHost</var> , <var>\n     * HTTPClient.socksPort</var> and <var>HTTPClient.socksVersion</var> .\n     * Whether <var>HTTPClient.socksHost</var> is set or not determines whether\n     * a SOCKS server is used; if <var>HTTPClient.socksPort</var> is not set it\n     * defaults to 1080; if <var>HTTPClient.socksVersion</var> is not set an\n     * attempt will be made to automatically determine the version used by the\n     * server. <P>\n     *\n     * Note: If you have also set a proxy server then a connection will be made\n     * to the SOCKS server, which in turn then makes a connection to the proxy\n     * server (possibly via other SOCKS servers), which in turn makes the final\n     * connection. <P>\n     *\n     * If the proxy server is running SOCKS version 5 and requires\n     * username/password authorization, and you wish to set this authorization\n     * information in the code, then you may use the <var>\n     * AuthorizationInfo.addAuthorization()</var> method to do so. Specify the\n     * same <var>host</var> and <var>port</var> as in this method, give the\n     * <var>scheme</var> \"SOCKS5\" and the <var>realm</var> \"USER/PASS\", set the\n     * <var>cookie</var> to null and the <var>params</var> to an array\n     * containing a single <var>NVPair</var> in turn containing the username and\n     * password. Example: <PRE>\n     *     NVPair[] up = { new NVPair(username, password) };\n     *     AuthorizationInfo.addAuthorization(host, port, \"SOCKS5\", \"USER/PASS\",\n     *                                        null, up);\n     * </PRE> If you have not given any authorization info and the proxy server\n     * requires authorization then you will be prompted for the necessary info\n     * via a popup the first time you do a request.\n     *\n     * @param host                the host on which the proxy server resides.\n     * @param port                the port the proxy server is listening on.\n     * @param version             the SOCKS version the server is running.\n     *      Currently this must be '4' or '5'.\n     * @exception SocksException  If <var>version</var> is not '4' or '5'.\n     */\n    public static void setSocksServer(String host, int port, int version)\n        throws SocksException\n    {\n        if (port <= 0)\n        {\n            port = 1080;\n        }\n\n        if (host == null || host.length() == 0)\n        {\n            Default_Socks_client = null;\n        }\n        else\n        {\n            Default_Socks_client = new SocksClient(host, port, version);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}