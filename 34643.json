{"path":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","commits":[{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        final InputSource is = new InputSource(loader.openResource(path));\n        is.setSystemId(uri.toASCIIString());\n        is.setPublicId(publicId);\n        return is;\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e770f76ea373bbfcdbb0e2ae8159636e0ca5b298"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e770f76ea373bbfcdbb0e2ae8159636e0ca5b298","date":1298821257,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        final InputSource is = new InputSource(loader.openResource(path));\n        is.setSystemId(uri.toASCIIString());\n        is.setPublicId(publicId);\n        return is;\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e770f76ea373bbfcdbb0e2ae8159636e0ca5b298"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e770f76ea373bbfcdbb0e2ae8159636e0ca5b298"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e770f76ea373bbfcdbb0e2ae8159636e0ca5b298"],"e770f76ea373bbfcdbb0e2ae8159636e0ca5b298":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"c26f00b574427b55127e869b935845554afde1fa":["e770f76ea373bbfcdbb0e2ae8159636e0ca5b298","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e770f76ea373bbfcdbb0e2ae8159636e0ca5b298"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["e770f76ea373bbfcdbb0e2ae8159636e0ca5b298"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"e770f76ea373bbfcdbb0e2ae8159636e0ca5b298":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b24326411db492f92ea49f6fb947c90bc73cf19e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}