{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#list(File).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#list(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A wrapper for {@link File#list()}. This java.io API returns null\n   * when a dir is not a directory or for any I/O error. Instead of having\n   * null check everywhere File#list() is used, we will add utility API\n   * to get around this problem. For the majority of cases where we prefer\n   * an IOException to be thrown.\n   * @param dir directory for which listing should be performed\n   * @return list of file names or empty string list\n   * @exception AccessDeniedException for unreadable directory\n   * @exception IOException for invalid directory or for bad disk\n   */\n  public static String[] list(File dir) throws IOException {\n    if (!canRead(dir)) {\n      throw new AccessDeniedException(dir.toString(), null,\n          FSExceptionMessages.PERMISSION_DENIED);\n    }\n    String[] fileNames = dir.list();\n    if(fileNames == null) {\n      throw new IOException(\"Invalid directory or I/O error occurred for dir: \"\n          + dir.toString());\n    }\n    return fileNames;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#list(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A wrapper for {@link File#list()}. This java.io API returns null\n   * when a dir is not a directory or for any I/O error. Instead of having\n   * null check everywhere File#list() is used, we will add utility API\n   * to get around this problem. For the majority of cases where we prefer\n   * an IOException to be thrown.\n   * @param dir directory for which listing should be performed\n   * @return list of file names or empty string list\n   * @exception AccessDeniedException for unreadable directory\n   * @exception IOException for invalid directory or for bad disk\n   */\n  public static String[] list(File dir) throws IOException {\n    if (!canRead(dir)) {\n      throw new AccessDeniedException(dir.toString(), null,\n          FSExceptionMessages.PERMISSION_DENIED);\n    }\n    String[] fileNames = dir.list();\n    if(fileNames == null) {\n      throw new IOException(\"Invalid directory or I/O error occurred for dir: \"\n          + dir.toString());\n    }\n    return fileNames;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}