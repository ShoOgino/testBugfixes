{"path":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","sourceNew":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n    * Note that the return type is a collection, thus the ordering should not be relied upon.\n    * <br/>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws java.io.IOException\n    */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","sourceOld":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n    * Note that the return type is a collection, thus the ordering should not be relied upon.\n    * <br/>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws java.io.IOException\n    */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","sourceNew":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n    * Note that the return type is a collection, thus the ordering should not be relied upon.\n    * <br/>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws IOException if there is a low-level I/O error\n    */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","sourceOld":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n    * Note that the return type is a collection, thus the ordering should not be relied upon.\n    * <br/>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws java.io.IOException\n    */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","sourceNew":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n   * Note that the return type is a collection, thus the ordering should not be relied upon.\n   * <br>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws IOException if there is a low-level I/O error\n   */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","sourceOld":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n    * Note that the return type is a collection, thus the ordering should not be relied upon.\n    * <br/>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws IOException if there is a low-level I/O error\n    */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","sourceNew":"  /**\n   * Returns the payload data for the current start/end position.\n   * This is only valid after {@link #nextStartPosition()}\n   * returned an available start position.\n   * This method must not be called more than once after each call\n   * of {@link #nextStartPosition()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons.\n   * <br>\n   * Note that the return type is a collection, thus the ordering should not be relied upon.\n   * <br>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","sourceOld":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n   * Note that the return type is a collection, thus the ordering should not be relied upon.\n   * <br>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws IOException if there is a low-level I/O error\n   */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","sourceNew":"  /**\n   * Returns the payload data for the current start/end position.\n   * This is only valid after {@link #nextStartPosition()}\n   * returned an available start position.\n   * This method must not be called more than once after each call\n   * of {@link #nextStartPosition()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons.\n   * <br>\n   * Note that the return type is a collection, thus the ordering should not be relied upon.\n   * <br>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","sourceOld":"  /**\n   * Returns the payload data for the current span.\n   * This is invalid until {@link #next()} is called for\n   * the first time.\n   * This method must not be called more than once after each call\n   * of {@link #next()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons. An ordered\n   * SpanQuery does not lazy load, so if you have payloads in your index and\n   * you do not want ordered SpanNearQuerys to collect payloads, you can\n   * disable collection with a constructor option.<br>\n   * <br>\n   * Note that the return type is a collection, thus the ordering should not be relied upon.\n   * <br>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws IOException if there is a low-level I/O error\n   */\n  // TODO: Remove warning after API has been finalized\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/Spans#getPayload().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the payload data for the current start/end position.\n   * This is only valid after {@link #nextStartPosition()}\n   * returned an available start position.\n   * This method must not be called more than once after each call\n   * of {@link #nextStartPosition()}. However, most payloads are loaded lazily,\n   * so if the payload data for the current position is not needed,\n   * this method may not be called at all for performance reasons.\n   * <br>\n   * Note that the return type is a collection, thus the ordering should not be relied upon.\n   * <br>\n   * @lucene.experimental\n   *\n   * @return a List of byte arrays containing the data of this payload, otherwise null if isPayloadAvailable is false\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Collection<byte[]> getPayload() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"fab172655716b96f7e42376116235017a922de3a":["14600834a1fbc7c12faf344466e00cca8cc67de4","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2d530e71ed32ab23b34ca3fc72b080a554a40404","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}