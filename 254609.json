{"path":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","commits":[{"id":"92b41ac3fad9e7627f8f6f6ef605ee6bbdfb4cd4","date":1456187116,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n        \n        \n        cm.setZkServerAddress(\"http://BADADDRESS\");\n        executor.schedule(() -> {\n          cm.setZkServerAddress(server.getZkAddress()); \n        }, 5, TimeUnit.SECONDS);\n        \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4288212391ecfe0c91775f4ca157bc8c9c5c4178","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n        \n        \n        cm.setZkServerAddress(\"http://BADADDRESS\");\n        executor.schedule(() -> {\n          cm.setZkServerAddress(server.getZkAddress()); \n        }, 5, TimeUnit.SECONDS);\n        \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4288212391ecfe0c91775f4ca157bc8c9c5c4178","date":1458486836,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","sourceNew":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      MockZkClientConnectionStrategy strat = new MockZkClientConnectionStrategy();\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT, strat , null);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      \n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n               \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n        assertTrue(strat.isExceptionThrow());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n        \n        \n        cm.setZkServerAddress(\"http://BADADDRESS\");\n        executor.schedule(() -> {\n          cm.setZkServerAddress(server.getZkAddress()); \n        }, 5, TimeUnit.SECONDS);\n        \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":["92b41ac3fad9e7627f8f6f6ef605ee6bbdfb4cd4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","sourceNew":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      MockZkClientConnectionStrategy strat = new MockZkClientConnectionStrategy();\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT, strat , null);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      \n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n               \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n        assertTrue(strat.isExceptionThrow());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      MockZkClientConnectionStrategy strat = new MockZkClientConnectionStrategy();\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT, strat , null);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      \n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n               \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnected());\n        assertTrue(strat.isExceptionThrow());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":["92b41ac3fad9e7627f8f6f6ef605ee6bbdfb4cd4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","sourceNew":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      MockZkClientConnectionStrategy strat = new MockZkClientConnectionStrategy();\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT, strat , null);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      \n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n               \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n        assertTrue(strat.isExceptionThrow());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      MockZkClientConnectionStrategy strat = new MockZkClientConnectionStrategy();\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT, strat , null);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      \n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n               \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n        assertTrue(strat.isExceptionThrow());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConnectionManagerTest#testReconnectWhenZkDisappeared().mjava","sourceNew":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new SolrNamedThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      MockZkClientConnectionStrategy strat = new MockZkClientConnectionStrategy();\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT, strat , null);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      \n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n               \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n        assertTrue(strat.isExceptionThrow());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReconnectWhenZkDisappeared() throws Exception {\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(new DefaultSolrThreadFactory(\"connectionManagerTest\"));\n    \n    // setup a SolrZkClient to do some getBaseUrlForNodeName testing\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n      \n      MockZkClientConnectionStrategy strat = new MockZkClientConnectionStrategy();\n      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT, strat , null);\n      ConnectionManager cm = zkClient.getConnectionManager();\n      \n      try {\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n               \n        // reconnect -- should no longer be likely expired\n        cm.process(new WatchedEvent(EventType.None, KeeperState.Expired, \"\"));\n        assertFalse(cm.isLikelyExpired());\n        assertTrue(cm.isConnectedAndNotClosed());\n        assertTrue(strat.isExceptionThrow());\n      } finally {\n        cm.close();\n        zkClient.close();\n        executor.shutdown();\n      }\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4288212391ecfe0c91775f4ca157bc8c9c5c4178":["419a8f52c6635419beb951255cacbbb281044c57"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4288212391ecfe0c91775f4ca157bc8c9c5c4178"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"419a8f52c6635419beb951255cacbbb281044c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92b41ac3fad9e7627f8f6f6ef605ee6bbdfb4cd4"],"92b41ac3fad9e7627f8f6f6ef605ee6bbdfb4cd4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"4288212391ecfe0c91775f4ca157bc8c9c5c4178":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["419a8f52c6635419beb951255cacbbb281044c57","92b41ac3fad9e7627f8f6f6ef605ee6bbdfb4cd4"],"419a8f52c6635419beb951255cacbbb281044c57":["4288212391ecfe0c91775f4ca157bc8c9c5c4178"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"92b41ac3fad9e7627f8f6f6ef605ee6bbdfb4cd4":["419a8f52c6635419beb951255cacbbb281044c57"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}