{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#createIndex(Map,Map).mjava","commits":[{"id":"4c9661df01b81c277277a01afbca7851557a2148","date":1133588656,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#createIndex(Map,Map).mjava","pathOld":"/dev/null","sourceNew":"\tprivate HashMap createIndex(Map word2Groups, Map group2Words) {\n\t\tHashMap word2Syns = new HashMap();\n\t\tIterator iter = word2Groups.entrySet().iterator();\n\t\t\n\t\twhile (iter.hasNext()) { // for each word\n\t\t\tMap.Entry entry = (Map.Entry) iter.next();\n\t\t\tArrayList group = (ArrayList) entry.getValue();\t\t\t\n\t\t\tString word = (String) entry.getKey();\n\t\t\t\n//\t\t\tHashSet synonyms = new HashSet();\n\t\t\tTreeSet synonyms = new TreeSet();\n\t\t\tfor (int i=group.size(); --i >= 0; ) { // for each groupID of word\n\t\t\t\tArrayList words = (ArrayList) group2Words.get(group.get(i));\n\t\t\t\tfor (int j=words.size(); --j >= 0; ) { // add all words\t\t\t\t\n\t\t\t\t\tObject synonym = words.get(j); // note that w and word are interned\n\t\t\t\t\tif (synonym != word) { // a word is implicitly it's own synonym\n\t\t\t\t\t\tsynonyms.add(synonym);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint size = synonyms.size();\n\t\t\tif (size > 0) {\n\t\t\t\tString[] syns = new String[size];\n\t\t\t\tif (size == 1)  \n\t\t\t\t\tsyns[0] = (String) synonyms.first();\n\t\t\t\telse\n\t\t\t\t\tsynonyms.toArray(syns);\n//\t\t\t\tif (syns.length > 1) Arrays.sort(syns);\n//\t\t\t\tif (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n\t\t\t\tword2Syns.put(word, syns);\n\t\t\t}\n\t\t}\n\t\n\t\treturn word2Syns;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#createIndex(Map,Map).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#createIndex(Map,Map).mjava","sourceNew":"  private HashMap createIndex(Map word2Groups, Map group2Words) {\n    HashMap word2Syns = new HashMap();\n    Iterator iter = word2Groups.entrySet().iterator();\n    \n    while (iter.hasNext()) { // for each word\n      Map.Entry entry = (Map.Entry) iter.next();\n      ArrayList group = (ArrayList) entry.getValue();     \n      String word = (String) entry.getKey();\n      \n//      HashSet synonyms = new HashSet();\n      TreeSet synonyms = new TreeSet();\n      for (int i=group.size(); --i >= 0; ) { // for each groupID of word\n        ArrayList words = (ArrayList) group2Words.get(group.get(i));\n        for (int j=words.size(); --j >= 0; ) { // add all words       \n          Object synonym = words.get(j); // note that w and word are interned\n          if (synonym != word) { // a word is implicitly it's own synonym\n            synonyms.add(synonym);\n          }\n        }\n      }\n\n      int size = synonyms.size();\n      if (size > 0) {\n        String[] syns = new String[size];\n        if (size == 1)  \n          syns[0] = (String) synonyms.first();\n        else\n          synonyms.toArray(syns);\n//        if (syns.length > 1) Arrays.sort(syns);\n//        if (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n        word2Syns.put(word, syns);\n      }\n    }\n  \n    return word2Syns;\n  }\n\n","sourceOld":"\tprivate HashMap createIndex(Map word2Groups, Map group2Words) {\n\t\tHashMap word2Syns = new HashMap();\n\t\tIterator iter = word2Groups.entrySet().iterator();\n\t\t\n\t\twhile (iter.hasNext()) { // for each word\n\t\t\tMap.Entry entry = (Map.Entry) iter.next();\n\t\t\tArrayList group = (ArrayList) entry.getValue();\t\t\t\n\t\t\tString word = (String) entry.getKey();\n\t\t\t\n//\t\t\tHashSet synonyms = new HashSet();\n\t\t\tTreeSet synonyms = new TreeSet();\n\t\t\tfor (int i=group.size(); --i >= 0; ) { // for each groupID of word\n\t\t\t\tArrayList words = (ArrayList) group2Words.get(group.get(i));\n\t\t\t\tfor (int j=words.size(); --j >= 0; ) { // add all words\t\t\t\t\n\t\t\t\t\tObject synonym = words.get(j); // note that w and word are interned\n\t\t\t\t\tif (synonym != word) { // a word is implicitly it's own synonym\n\t\t\t\t\t\tsynonyms.add(synonym);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint size = synonyms.size();\n\t\t\tif (size > 0) {\n\t\t\t\tString[] syns = new String[size];\n\t\t\t\tif (size == 1)  \n\t\t\t\t\tsyns[0] = (String) synonyms.first();\n\t\t\t\telse\n\t\t\t\t\tsynonyms.toArray(syns);\n//\t\t\t\tif (syns.length > 1) Arrays.sort(syns);\n//\t\t\t\tif (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n\t\t\t\tword2Syns.put(word, syns);\n\t\t\t}\n\t\t}\n\t\n\t\treturn word2Syns;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/SynonymMap#createIndex(Map,Map).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymMap#createIndex(Map,Map).mjava","sourceNew":"  private HashMap createIndex(Map word2Groups, Map group2Words) {\n    HashMap word2Syns = new HashMap();\n    Iterator iter = word2Groups.entrySet().iterator();\n    \n    while (iter.hasNext()) { // for each word\n      Map.Entry entry = (Map.Entry) iter.next();\n      ArrayList group = (ArrayList) entry.getValue();     \n      String word = (String) entry.getKey();\n      \n//      HashSet synonyms = new HashSet();\n      TreeSet synonyms = new TreeSet();\n      for (int i=group.size(); --i >= 0; ) { // for each groupID of word\n        ArrayList words = (ArrayList) group2Words.get(group.get(i));\n        for (int j=words.size(); --j >= 0; ) { // add all words       \n          Object synonym = words.get(j); // note that w and word are interned\n          if (synonym != word) { // a word is implicitly it's own synonym\n            synonyms.add(synonym);\n          }\n        }\n      }\n\n      int size = synonyms.size();\n      if (size > 0) {\n        String[] syns = new String[size];\n        if (size == 1)  \n          syns[0] = (String) synonyms.first();\n        else\n          synonyms.toArray(syns);\n//        if (syns.length > 1) Arrays.sort(syns);\n//        if (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n        word2Syns.put(word, syns);\n      }\n    }\n  \n    return word2Syns;\n  }\n\n","sourceOld":"  private HashMap createIndex(Map word2Groups, Map group2Words) {\n    HashMap word2Syns = new HashMap();\n    Iterator iter = word2Groups.entrySet().iterator();\n    \n    while (iter.hasNext()) { // for each word\n      Map.Entry entry = (Map.Entry) iter.next();\n      ArrayList group = (ArrayList) entry.getValue();     \n      String word = (String) entry.getKey();\n      \n//      HashSet synonyms = new HashSet();\n      TreeSet synonyms = new TreeSet();\n      for (int i=group.size(); --i >= 0; ) { // for each groupID of word\n        ArrayList words = (ArrayList) group2Words.get(group.get(i));\n        for (int j=words.size(); --j >= 0; ) { // add all words       \n          Object synonym = words.get(j); // note that w and word are interned\n          if (synonym != word) { // a word is implicitly it's own synonym\n            synonyms.add(synonym);\n          }\n        }\n      }\n\n      int size = synonyms.size();\n      if (size > 0) {\n        String[] syns = new String[size];\n        if (size == 1)  \n          syns[0] = (String) synonyms.first();\n        else\n          synonyms.toArray(syns);\n//        if (syns.length > 1) Arrays.sort(syns);\n//        if (DEBUG) System.err.println(\"word=\" + word + \":\" + Arrays.asList(syns));\n        word2Syns.put(word, syns);\n      }\n    }\n  \n    return word2Syns;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c9661df01b81c277277a01afbca7851557a2148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4c9661df01b81c277277a01afbca7851557a2148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"]},"commit2Childs":{"4c9661df01b81c277277a01afbca7851557a2148":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c9661df01b81c277277a01afbca7851557a2148"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}