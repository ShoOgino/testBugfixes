{"path":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","commits":[{"id":"5ff676ea3919c34f30df120b9fa469cd439203ec","date":1211576148,"type":1,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final HttpServletResponse resp)\n    throws IOException {\n\n    final Method reqMethod=Method.getMethod(req.getMethod());\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse).mjava","sourceNew":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Sets HTTP Response cache validator headers appropriately and\n   * validates the HTTP Request against these using any conditional\n   * request headers.\n   *\n   * If the request contains conditional headers, and those headers\n   * indicate a match with the current known state of the system, this\n   * method will return \"true\" indicating that a 304 Status code can be\n   * returned, and no further processing is needed.\n   *\n   * \n   * @return true if the request contains conditional headers, and those\n   *         headers indicate a match with the current known state of the\n   *         system -- indicating that a 304 Status code can be returned to\n   *         the client, and no further request processing is needed.  \n   */\n  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,\n                                                final HttpServletRequest req,\n                                                final Method reqMethod,\n                                                final HttpServletResponse resp)\n    throws IOException {\n    \n    if (Method.POST==reqMethod || Method.OTHER==reqMethod) {\n      return false;\n    }\n    \n    final long lastMod = HttpCacheHeaderUtil.calcLastModified(solrReq);\n    final String etag = HttpCacheHeaderUtil.calcEtag(solrReq);\n    \n    resp.setDateHeader(\"Last-Modified\", lastMod);\n    resp.setHeader(\"ETag\", etag);\n\n    if (checkETagValidators(req, resp, reqMethod, etag)) {\n      return true;\n    }\n\n    if (checkLastModValidators(req, resp, lastMod)) {\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}