{"path":"backwards/src/java/org/apache/lucene/analysis/PorterStemmer#main(String[]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/analysis/PorterStemmer#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/PorterStemmer#main(String[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/PorterStemmer#main(String[]).mjava","sourceNew":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/PorterStemmer#main(String[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/PorterStemmer#main(String[]).mjava","sourceNew":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /** Test program for demonstrating the Stemmer.  It reads a file and\n   * stems each word, writing the result to standard out.\n   * Usage: Stemmer file-name\n   */\n  public static void main(String[] args) {\n    PorterStemmer s = new PorterStemmer();\n\n    for (int i = 0; i < args.length; i++) {\n      try {\n        InputStream in = new FileInputStream(args[i]);\n        byte[] buffer = new byte[1024];\n        int bufferLen, offset, ch;\n\n        bufferLen = in.read(buffer);\n        offset = 0;\n        s.reset();\n\n        while(true) {\n          if (offset < bufferLen)\n            ch = buffer[offset++];\n          else {\n            bufferLen = in.read(buffer);\n            offset = 0;\n            if (bufferLen < 0)\n              ch = -1;\n            else\n              ch = buffer[offset++];\n          }\n\n          if (Character.isLetter((char) ch)) {\n            s.add(Character.toLowerCase((char) ch));\n          }\n          else {\n             s.stem();\n             System.out.print(s.toString());\n             s.reset();\n             if (ch < 0)\n               break;\n             else {\n               System.out.print((char) ch);\n             }\n           }\n        }\n\n        in.close();\n      }\n      catch (IOException e) {\n        System.out.println(\"error reading \" + args[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}