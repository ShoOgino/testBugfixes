{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeCharRange(int,int).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeCharRange(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRangeLight(int,int).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts a single codepoint whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(int min, int max) {\n    if (min > max) {\n      return makeEmpty();\n    }\n    Automaton a = new Automaton();\n    int s1 = a.createState();\n    int s2 = a.createState();\n    a.setAccept(s2, true);\n    a.addTransition(s1, s2, min, max);\n    a.finishState();\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts a single codepoint whose\n   * value is in the given interval (including both end points).\n   */\n  public static LightAutomaton makeCharRangeLight(int min, int max) {\n    if (min > max) {\n      return makeEmptyLight();\n    }\n    LightAutomaton a = new LightAutomaton();\n    int s1 = a.createState();\n    int s2 = a.createState();\n    a.setAccept(s2, true);\n    a.addTransition(s1, s2, min, max);\n    a.finishState();\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automata#makeCharRange(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(int,int).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts a single codepoint whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(int min, int max) {\n    if (min > max) {\n      return makeEmpty();\n    }\n    Automaton a = new Automaton();\n    int s1 = a.createState();\n    int s2 = a.createState();\n    a.setAccept(s2, true);\n    a.addTransition(s1, s2, min, max);\n    a.finishState();\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts a single codepoint whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(int min, int max) {\n    if (min == max) return makeChar(min);\n    Automaton a = new Automaton();\n    State s1 = new State();\n    State s2 = new State();\n    a.initial = s1;\n    s2.accept = true;\n    if (min <= max) s1.addTransition(new Transition(min, max, s2));\n    a.deterministic = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}