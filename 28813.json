{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","commits":[{"id":"bd5b0696fbde24daf807b2f98cffa838a7c0e159","date":1308394033,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits delDocs = MultiFields.getDeletedDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (delDocs == null || !delDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits delDocs = MultiFields.getDeletedDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (delDocs == null || !delDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","sourceNew":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits liveDocs = MultiFields.getLiveDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits delDocs = MultiFields.getDeletedDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (delDocs == null || !delDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","sourceNew":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits liveDocs = MultiFields.getLiveDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits delDocs = MultiFields.getDeletedDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (delDocs == null || !delDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","sourceNew":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits liveDocs = MultiFields.getLiveDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits delDocs = MultiFields.getDeletedDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (delDocs == null || !delDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestPKIndexSplitter#checkContents(IndexReader,String).mjava","sourceNew":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits liveDocs = MultiFields.getLiveDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void checkContents(IndexReader ir, String indexname) throws Exception {\n    final Bits liveDocs = MultiFields.getLiveDocs(ir);\n    for (int i = 0; i < ir.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        assertEquals(indexname, ir.document(i).get(\"indexname\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd5b0696fbde24daf807b2f98cffa838a7c0e159":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["bd5b0696fbde24daf807b2f98cffa838a7c0e159","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"bd5b0696fbde24daf807b2f98cffa838a7c0e159":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}