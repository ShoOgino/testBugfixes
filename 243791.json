{"path":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList responseHeader = new NamedList();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(responseHeader,req,rsp);\n\n    log.info(req.getParamString()+ \" 0 \"+\n\t     (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4145b7b13874de95211223a6edb648da8794a688","date":1170182192,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList responseHeader = new SimpleOrderedMap();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(responseHeader,req,rsp);\n\n    log.info(req.getParamString()+ \" 0 \"+\n\t     (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList responseHeader = new NamedList();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(responseHeader,req,rsp);\n\n    log.info(req.getParamString()+ \" 0 \"+\n\t     (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43c800be98a24a96d9d21e62c645822de478f6a2","date":1171769593,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList responseHeader = new SimpleOrderedMap();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(responseHeader,req,rsp);\n\n    log.info(req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n\t     (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList responseHeader = new SimpleOrderedMap();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(responseHeader,req,rsp);\n\n    log.info(req.getParamString()+ \" 0 \"+\n\t     (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ecad62a91d16f94e09186098207ad6865137c58","date":1174933286,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList responseHeader = new SimpleOrderedMap();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(responseHeader,req,rsp);\n\n    log.info(req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList responseHeader = new SimpleOrderedMap();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(responseHeader,req,rsp);\n\n    log.info(req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n\t     (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d119e8687d5c78856fc86eee0f86c8367fdfad1f","date":1176085764,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,responseHeader,req,rsp);\n\n    log.info(req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList responseHeader = new SimpleOrderedMap();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(responseHeader,req,rsp);\n\n    log.info(req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warning(\"Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,responseHeader,req,rsp);\n\n    log.info(req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,responseHeader,req,rsp);\n\n    log.info(req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warning(\"[\"+name+\"] Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,responseHeader,req,rsp);\n\n    log.info(\"[\"+name+\"] \" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warning(\"Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,responseHeader,req,rsp);\n\n    log.info(req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b46f0ccfb6b63c307ea901d48482630e3689042c","date":1198805331,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warning(logid+\"Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,responseHeader,req,rsp);\n\n    log.info(logid+\"\" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warning(\"[\"+name+\"] Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,responseHeader,req,rsp);\n\n    log.info(\"[\"+name+\"] \" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c","date":1208435858,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warning(logid+\"Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = rsp.getToLog();\n    //toLog.add(\"core\", getName());\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<toLog.size(); i++) {\n     \tString name = toLog.getName(i);\n     \tObject val = toLog.getVal(i);\n     \tsb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    log.info(logid +  sb.toString());\n    /*log.info(logid+\"\" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));*/\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warning(logid+\"Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,responseHeader,req,rsp);\n\n    log.info(logid+\"\" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warn(logid+\"Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = rsp.getToLog();\n    //toLog.add(\"core\", getName());\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<toLog.size(); i++) {\n     \tString name = toLog.getName(i);\n     \tObject val = toLog.getVal(i);\n     \tsb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    log.info(logid +  sb.toString());\n    /*log.info(logid+\"\" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));*/\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warning(logid+\"Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = rsp.getToLog();\n    //toLog.add(\"core\", getName());\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<toLog.size(); i++) {\n     \tString name = toLog.getName(i);\n     \tObject val = toLog.getVal(i);\n     \tsb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    log.info(logid +  sb.toString());\n    /*log.info(logid+\"\" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));*/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c90f01e1c0f11ee52212ab38c6d4393b3be8a646","date":1223059437,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warn(logid+\"Null Request Handler '\" + req.getParams().get(CommonParams.QT) +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getParams().get(CommonParams.QT) + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = rsp.getToLog();\n    //toLog.add(\"core\", getName());\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<toLog.size(); i++) {\n     \tString name = toLog.getName(i);\n     \tObject val = toLog.getVal(i);\n     \tsb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    log.info(logid +  sb.toString());\n    /*log.info(logid+\"\" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));*/\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warn(logid+\"Null Request Handler '\" + req.getQueryType() +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getQueryType() + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = rsp.getToLog();\n    //toLog.add(\"core\", getName());\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<toLog.size(); i++) {\n     \tString name = toLog.getName(i);\n     \tObject val = toLog.getVal(i);\n     \tsb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    log.info(logid +  sb.toString());\n    /*log.info(logid+\"\" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));*/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac6d8564d5fb14f371fc2bd34fca8b78af55889f","date":1266448152,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      log.warn(logid+\"Null Request Handler '\" + req.getParams().get(CommonParams.QT) +\"' :\" + req);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Null Request Handler '\" + req.getParams().get(CommonParams.QT) + \"'\", true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n    NamedList toLog = rsp.getToLog();\n    //toLog.add(\"core\", getName());\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<toLog.size(); i++) {\n     \tString name = toLog.getName(i);\n     \tObject val = toLog.getVal(i);\n     \tsb.append(name).append(\"=\").append(val).append(\" \");\n    }\n    log.info(logid +  sb.toString());\n    /*log.info(logid+\"\" + req.getContext().get(\"path\") + \" \"\n            + req.getParamString()+ \" 0 \"+\n       (int)(rsp.getEndTime() - req.getStartTime()));*/\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","sourceOld":"  public void execute(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (handler==null) {\n      String msg = \"Null Request Handler '\" +\n        req.getParams().get(CommonParams.QT) + \"'\";\n      \n      if (log.isWarnEnabled()) log.warn(logid + msg + \":\" + req);\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, msg, true);\n    }\n    // setup response header and handle request\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the request\n    NamedList toLog = rsp.getToLog();\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    \n    handler.handleRequest(req,rsp);\n    setResponseHeaderValues(handler,req,rsp);\n    \n    if (log.isInfoEnabled()) {\n      StringBuilder sb = new StringBuilder(logid);\n      for (int i=0; i<toLog.size(); i++) {\n        String name = toLog.getName(i);\n        Object val = toLog.getVal(i);\n        sb.append(name).append(\"=\").append(val).append(\" \");\n      }\n      log.info(sb.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["d119e8687d5c78856fc86eee0f86c8367fdfad1f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d119e8687d5c78856fc86eee0f86c8367fdfad1f":["7ecad62a91d16f94e09186098207ad6865137c58"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"ac6d8564d5fb14f371fc2bd34fca8b78af55889f":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"43c800be98a24a96d9d21e62c645822de478f6a2":["4145b7b13874de95211223a6edb648da8794a688"],"ad94625fb8d088209f46650c8097196fec67f00c":["ac6d8564d5fb14f371fc2bd34fca8b78af55889f"],"4145b7b13874de95211223a6edb648da8794a688":["d80013b5e260def972025c93a0b08524f9c38f49"],"7ecad62a91d16f94e09186098207ad6865137c58":["43c800be98a24a96d9d21e62c645822de478f6a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"d119e8687d5c78856fc86eee0f86c8367fdfad1f":["6d6338c87060be5f66757a94945975f3bbd377a9"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c90f01e1c0f11ee52212ab38c6d4393b3be8a646"],"d80013b5e260def972025c93a0b08524f9c38f49":["4145b7b13874de95211223a6edb648da8794a688"],"c90f01e1c0f11ee52212ab38c6d4393b3be8a646":["ac6d8564d5fb14f371fc2bd34fca8b78af55889f"],"ac6d8564d5fb14f371fc2bd34fca8b78af55889f":["ad94625fb8d088209f46650c8097196fec67f00c"],"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43c800be98a24a96d9d21e62c645822de478f6a2":["7ecad62a91d16f94e09186098207ad6865137c58"],"4145b7b13874de95211223a6edb648da8794a688":["43c800be98a24a96d9d21e62c645822de478f6a2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7ecad62a91d16f94e09186098207ad6865137c58":["d119e8687d5c78856fc86eee0f86c8367fdfad1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}