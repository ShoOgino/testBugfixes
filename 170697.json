{"path":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n    This is useful if one uses a document field to hold a unique ID string for\n    the document.  Then to delete such a document, one merely constructs a\n    term with the appropriate field and the unique ID string as its text and\n    passes it to this method.  Returns the number of documents deleted. */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if ( docs == null ) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n\tdelete(docs.doc());\n\tn++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ff150a6da6c43f093044f7717b36fd565b99634d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dbb14e9adf67f0e8fb9cc55a25a71063c230338","date":1051751355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n    This is useful if one uses a document field to hold a unique ID string for\n    the document.  Then to delete such a document, one merely constructs a\n    term with the appropriate field and the unique ID string as its text and\n    passes it to this method.  Returns the number of documents deleted.\n  */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if ( docs == null ) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n\tdelete(docs.doc());\n\tn++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents containing <code>term</code>.\n    This is useful if one uses a document field to hold a unique ID string for\n    the document.  Then to delete such a document, one merely constructs a\n    term with the appropriate field and the unique ID string as its text and\n    passes it to this method.  Returns the number of documents deleted. */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if ( docs == null ) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n\tdelete(docs.doc());\n\tn++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47f3057137fcb91417c83b50600b934bd0f34c68","date":1064526111,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n    This is useful if one uses a document field to hold a unique ID string for\n    the document.  Then to delete such a document, one merely constructs a\n    term with the appropriate field and the unique ID string as its text and\n    passes it to this method.  Returns the number of documents deleted.\n  */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if ( docs == null ) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        delete(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents containing <code>term</code>.\n    This is useful if one uses a document field to hold a unique ID string for\n    the document.  Then to delete such a document, one merely constructs a\n    term with the appropriate field and the unique ID string as its text and\n    passes it to this method.  Returns the number of documents deleted.\n  */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if ( docs == null ) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n\tdelete(docs.doc());\n\tn++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":["ff150a6da6c43f093044f7717b36fd565b99634d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n   This is useful if one uses a document field to hold a unique ID string for\n   the document.  Then to delete such a document, one merely constructs a\n   term with the appropriate field and the unique ID string as its text and\n   passes it to this method.  Returns the number of documents deleted.\n   */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        delete(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents containing <code>term</code>.\n    This is useful if one uses a document field to hold a unique ID string for\n    the document.  Then to delete such a document, one merely constructs a\n    term with the appropriate field and the unique ID string as its text and\n    passes it to this method.  Returns the number of documents deleted.\n  */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if ( docs == null ) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        delete(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":["ff150a6da6c43f093044f7717b36fd565b99634d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77a78db058e4bd46d8fa2f2fe1edf35aea5e8ff9","date":1091648426,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n   This is useful if one uses a document field to hold a unique ID string for\n   the document.  Then to delete such a document, one merely constructs a\n   term with the appropriate field and the unique ID string as its text and\n   passes it to this method.  Returns the number of documents deleted.\n   See {@link #delete(int)} for information about when this deletion will \n   become effective.\n   */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        delete(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents containing <code>term</code>.\n   This is useful if one uses a document field to hold a unique ID string for\n   the document.  Then to delete such a document, one merely constructs a\n   term with the appropriate field and the unique ID string as its text and\n   passes it to this method.  Returns the number of documents deleted.\n   */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        delete(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6","date":1117912671,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #delete(int)} for information about when this deletion will \n   * become effective.\n   * @return the number of documents deleted\n   */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        delete(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","sourceOld":"  /** Deletes all documents containing <code>term</code>.\n   This is useful if one uses a document field to hold a unique ID string for\n   the document.  Then to delete such a document, one merely constructs a\n   term with the appropriate field and the unique ID string as its text and\n   passes it to this method.  Returns the number of documents deleted.\n   See {@link #delete(int)} for information about when this deletion will \n   become effective.\n   */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        delete(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":null,"bugIntro":["ff150a6da6c43f093044f7717b36fd565b99634d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff150a6da6c43f093044f7717b36fd565b99634d","date":1134001320,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","sourceNew":"  /** Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #delete(int)} for information about when this deletion will\n   * become effective.\n   * @return the number of documents deleted\n   * \n   * @deprecated Use {@link #deleteDocuments(Term term)} instead.\n   */\n  public final int delete(Term term) throws IOException {\n    return deleteDocuments(term);\n  }\n\n","sourceOld":"  /** Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #delete(int)} for information about when this deletion will \n   * become effective.\n   * @return the number of documents deleted\n   */\n  public final int delete(Term term) throws IOException {\n    TermDocs docs = termDocs(term);\n    if (docs == null) return 0;\n    int n = 0;\n    try {\n      while (docs.next()) {\n        delete(docs.doc());\n        n++;\n      }\n    } finally {\n      docs.close();\n    }\n    return n;\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6","47f3057137fcb91417c83b50600b934bd0f34c68","770281b8a8459cafcdd2354b6a06078fea2d83c9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#delete(Term).mjava","sourceNew":null,"sourceOld":"  /** Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.\n   * See {@link #delete(int)} for information about when this deletion will\n   * become effective.\n   * @return the number of documents deleted\n   * \n   * @deprecated Use {@link #deleteDocuments(Term term)} instead.\n   */\n  public final int delete(Term term) throws IOException {\n    return deleteDocuments(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["47f3057137fcb91417c83b50600b934bd0f34c68"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["ff150a6da6c43f093044f7717b36fd565b99634d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47f3057137fcb91417c83b50600b934bd0f34c68":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"ff150a6da6c43f093044f7717b36fd565b99634d":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"77a78db058e4bd46d8fa2f2fe1edf35aea5e8ff9":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["77a78db058e4bd46d8fa2f2fe1edf35aea5e8ff9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["77a78db058e4bd46d8fa2f2fe1edf35aea5e8ff9"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["47f3057137fcb91417c83b50600b934bd0f34c68"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"47f3057137fcb91417c83b50600b934bd0f34c68":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"ff150a6da6c43f093044f7717b36fd565b99634d":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"77a78db058e4bd46d8fa2f2fe1edf35aea5e8ff9":["ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6"],"ec9ae8cafc8006554fd1fcc13f8a3bff3517ebd6":["ff150a6da6c43f093044f7717b36fd565b99634d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}