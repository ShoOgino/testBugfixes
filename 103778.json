{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","commits":[{"id":"e9704af09948af9b8902f98647c8ea8c315ace4c","date":1523357833,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8245\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + Math.toDegrees(point.getLongitude()) + \" \" + Math.toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ad7bf9cd4e8a0f0887ff678e32a3b74beeabcec","date":1523376063,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","sourceNew":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8245\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","sourceOld":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8245\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + Math.toDegrees(point.getLongitude()) + \" \" + Math.toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd56d07f4412123997b4b19dfcd68d39aa5b4acd","date":1523531331,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","sourceNew":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8245\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","sourceOld":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8245\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6be680491634b0098237ec73b5e72d767b66adc7","date":1523591200,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","sourceNew":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8251\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","sourceOld":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8245\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3960b7520a395f141d7fea3eb51f19ba6e377a1a","date":1523592657,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","sourceNew":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8251\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","sourceOld":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8251\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61208df9977bdd3054d6b9792eb6a18be9d32837","date":1523626771,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","sourceNew":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8251\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","sourceOld":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8251\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","bugFix":null,"bugIntro":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4417cae689ce0fc964a3546ded2b0ab6e374f1b0","date":1523635542,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","sourceNew":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","sourceOld":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8251\")\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","bugFix":["61208df9977bdd3054d6b9792eb6a18be9d32837"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd30bf34a6f7f23d1d1c7188427856736263380","date":1524741267,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoPolygonTest#testComparePolygons().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test comparing different polygon technologies using random\n   * biased doubles.\n   */\n  @Test\n  @Repeat(iterations = 10)\n  public void testComparePolygons() {\n    final PlanetModel planetModel = randomPlanetModel();\n    //Create polygon points using a reference point and a maximum distance to the point\n    final GeoPoint referencePoint = getBiasedPoint(planetModel);\n    final int n = random().nextInt(4) + 4;\n    final List<GeoPoint> points = new ArrayList<>(n);\n    final double maxDistance = random().nextDouble() *  Math.PI;\n    for (int i = 0; i < n; i++) {\n      while(true) {\n        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;\n        final double bearing = random().nextDouble() * 2 * Math.PI;\n        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);\n        if (!contains(p, points)) {\n          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {\n            continue;\n          }\n          points.add(p);\n          break;\n        }\n      }\n    }\n    //order points so we don't get crossing edges\n    final List<GeoPoint> orderedPoints = orderPoints(points);\n    //Comment out below to get clock-wise polygons\n    if (random().nextBoolean() && random().nextBoolean()) {\n      Collections.reverse(orderedPoints);\n    }\n    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);\n    GeoPolygon polygon = null;\n    try {\n      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (polygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n    GeoPolygon largePolygon = null;\n    try {\n      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));\n    } catch(Exception e) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build with an exception:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      buffer.append(e.toString());\n      fail(buffer.toString());\n    }\n    if (largePolygon == null) {\n      StringBuilder buffer = new StringBuilder(\"Large polygon failed to build:\\n\");\n      buffer.append(points.toString()+ \"\\n\");\n      buffer.append(\"WKT:\" + getWKT(orderedPoints));\n      fail(buffer.toString());\n    }\n\n    for(int i=0;i<100000;i++) {\n      GeoPoint point = getBiasedPoint(planetModel);\n      boolean withIn1 = polygon.isWithin(point);\n      boolean withIn2 = largePolygon.isWithin(point);\n      StringBuilder buffer = new StringBuilder();\n      if (withIn1 != withIn2) {\n        //NOTE: Sometimes we get errors when check point is near a polygon point.\n        // For the time being, we filter this errors.\n        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);\n        if (d1 == 0 && d2 == 0) {\n          continue;\n        }\n        buffer = buffer.append(\"\\nStandard polygon: \" + polygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nLarge polygon: \" + largePolygon.toString() +\"\\n\");\n        buffer = buffer.append(\"\\nPoint: \" + point.toString() +\"\\n\");\n        buffer.append(\"\\nWKT: \" + getWKT(orderedPoints));\n        buffer.append(\"\\nWKT: POINT(\" + toDegrees(point.getLongitude()) + \" \" + toDegrees(point.getLatitude()) + \")\\n\");\n        buffer.append(\"normal polygon: \" +withIn1 + \"\\n\");\n        buffer.append(\"large polygon: \" + withIn2 + \"\\n\");\n      }\n      assertTrue(buffer.toString(), withIn1 == withIn2);\n    }\n    //Not yet tested\n//    for(int i=0;i<100;i++) {\n//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);\n//      int rel1 = polygon.getRelationship(shape);\n//      int rel2 = largePolygon.getRelationship(shape);\n//      StringBuilder buffer = new StringBuilder();\n//      if (rel1 != rel2) {\n//        buffer = buffer.append(polygon.toString() +\"\\n\" + shape.toString() + \"\\n\");\n//        buffer.append(\"WKT: \" + getWKT(orderedPoints) + \"\\n\");\n//        buffer.append(\"normal polygon: \" + rel1 + \"\\n\");\n//        buffer.append(\"large polygon: \" + rel2 + \"\\n\");\n//      }\n//      assertTrue(buffer.toString(), rel1 == rel2);\n//    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dfd30bf34a6f7f23d1d1c7188427856736263380":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"4417cae689ce0fc964a3546ded2b0ab6e374f1b0":["61208df9977bdd3054d6b9792eb6a18be9d32837"],"61208df9977bdd3054d6b9792eb6a18be9d32837":["3960b7520a395f141d7fea3eb51f19ba6e377a1a"],"6be680491634b0098237ec73b5e72d767b66adc7":["cd56d07f4412123997b4b19dfcd68d39aa5b4acd"],"cd56d07f4412123997b4b19dfcd68d39aa5b4acd":["7ad7bf9cd4e8a0f0887ff678e32a3b74beeabcec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3960b7520a395f141d7fea3eb51f19ba6e377a1a":["6be680491634b0098237ec73b5e72d767b66adc7"],"e9704af09948af9b8902f98647c8ea8c315ace4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ad7bf9cd4e8a0f0887ff678e32a3b74beeabcec":["e9704af09948af9b8902f98647c8ea8c315ace4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfd30bf34a6f7f23d1d1c7188427856736263380"]},"commit2Childs":{"dfd30bf34a6f7f23d1d1c7188427856736263380":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4417cae689ce0fc964a3546ded2b0ab6e374f1b0":["dfd30bf34a6f7f23d1d1c7188427856736263380"],"61208df9977bdd3054d6b9792eb6a18be9d32837":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"6be680491634b0098237ec73b5e72d767b66adc7":["3960b7520a395f141d7fea3eb51f19ba6e377a1a"],"cd56d07f4412123997b4b19dfcd68d39aa5b4acd":["6be680491634b0098237ec73b5e72d767b66adc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9704af09948af9b8902f98647c8ea8c315ace4c"],"3960b7520a395f141d7fea3eb51f19ba6e377a1a":["61208df9977bdd3054d6b9792eb6a18be9d32837"],"e9704af09948af9b8902f98647c8ea8c315ace4c":["7ad7bf9cd4e8a0f0887ff678e32a3b74beeabcec"],"7ad7bf9cd4e8a0f0887ff678e32a3b74beeabcec":["cd56d07f4412123997b4b19dfcd68d39aa5b4acd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}