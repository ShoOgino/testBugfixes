{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","commits":[{"id":"2ec69b66d099125761703a43f01bc34f1074f1c1","date":1400148734,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    DocsEnum docsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        docsEnum = termsEnum.docs(null, docsEnum, 0);\n        int docID = docsEnum.nextDoc();\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    DocsEnum docsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        docsEnum = termsEnum.docs(null, docsEnum, 0);\n        int docID = docsEnum.nextDoc();\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3251bdaf728baf81f779183e464984bc769ed9c7","date":1400494940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    // nocommit\n    String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    //String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    DocsEnum docsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        docsEnum = termsEnum.docs(null, docsEnum, 0);\n        int docID = docsEnum.nextDoc();\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    DocsEnum docsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        docsEnum = termsEnum.docs(null, docsEnum, 0);\n        int docID = docsEnum.nextDoc();\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a16b40feb4e6e0d55c1716733bde48296bedd20","date":1400540388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    DocsEnum docsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        docsEnum = termsEnum.docs(null, docsEnum, 0);\n        int docID = docsEnum.nextDoc();\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    // nocommit\n    String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    //String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    DocsEnum docsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        docsEnum = termsEnum.docs(null, docsEnum, 0);\n        int docID = docsEnum.nextDoc();\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    DocsEnum docsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        docsEnum = termsEnum.docs(null, docsEnum, 0);\n        int docID = docsEnum.nextDoc();\n        assertTrue(docID != DocsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator(null);\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(null, postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        Document doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        StoredDocument doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiTerms.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        Document doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        Document doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#testCommonPrefixTerms().mjava","sourceNew":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(100);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiTerms.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        Document doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-5667\n  public void testCommonPrefixTerms() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Set<String> terms = new HashSet<String>();\n    //String prefix = TestUtil.randomSimpleString(random(), 1, 20);\n    String prefix = TestUtil.randomRealisticUnicodeString(random(), 1, 20);\n    int numTerms = atLeast(1000);\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + numTerms + \" terms; prefix=\" + prefix);\n    }\n    while (terms.size() < numTerms) {\n      //terms.add(prefix + TestUtil.randomSimpleString(random(), 1, 20));\n      terms.add(prefix + TestUtil.randomRealisticUnicodeString(random(), 1, 20));\n    }\n    for(String term : terms) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: reader=\" + r);\n    }\n\n    TermsEnum termsEnum = MultiTerms.getTerms(r, \"id\").iterator();\n    PostingsEnum postingsEnum = null;\n    PerThreadPKLookup pkLookup = new PerThreadPKLookup(r, \"id\");\n\n    int iters = atLeast(numTerms*3);\n    List<String> termsList = new ArrayList<>(terms);\n    for(int iter=0;iter<iters;iter++) {\n      String term;\n      boolean shouldExist;\n      if (random().nextBoolean()) {\n        term = termsList.get(random().nextInt(terms.size()));\n        shouldExist = true;\n      } else {\n        term = prefix + TestUtil.randomSimpleString(random(), 1, 20);\n        shouldExist = terms.contains(term);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: try term=\" + term);\n        System.out.println(\"  shouldExist?=\" + shouldExist);\n      }\n\n      BytesRef termBytesRef = new BytesRef(term);\n\n      boolean actualResult = termsEnum.seekExact(termBytesRef);\n      assertEquals(shouldExist, actualResult);\n      if (shouldExist) {\n        postingsEnum = termsEnum.postings(postingsEnum, 0);\n        int docID = postingsEnum.nextDoc();\n        assertTrue(docID != PostingsEnum.NO_MORE_DOCS);\n        assertEquals(docID, pkLookup.lookup(termBytesRef));\n        Document doc = r.document(docID);\n        assertEquals(term, doc.get(\"id\"));\n\n        if (random().nextInt(7) == 1) {\n          termsEnum.next();\n        }\n      } else {\n        assertEquals(-1, pkLookup.lookup(termBytesRef));\n      }\n\n      if (random().nextInt(7) == 1) {\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(termBytesRef);\n        if (shouldExist) {\n          assertEquals(TermsEnum.SeekStatus.FOUND, status);\n        } else {\n          assertNotSame(TermsEnum.SeekStatus.FOUND, status);\n        }\n      }\n    }\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":["2ec69b66d099125761703a43f01bc34f1074f1c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["51f5280f31484820499077f41fcdfe92d527d9dc"],"0a16b40feb4e6e0d55c1716733bde48296bedd20":["3251bdaf728baf81f779183e464984bc769ed9c7"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"2ec69b66d099125761703a43f01bc34f1074f1c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"51f5280f31484820499077f41fcdfe92d527d9dc":["2ec69b66d099125761703a43f01bc34f1074f1c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"3251bdaf728baf81f779183e464984bc769ed9c7":["2ec69b66d099125761703a43f01bc34f1074f1c1"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ec69b66d099125761703a43f01bc34f1074f1c1"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0a16b40feb4e6e0d55c1716733bde48296bedd20":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"2ec69b66d099125761703a43f01bc34f1074f1c1":["51f5280f31484820499077f41fcdfe92d527d9dc","3251bdaf728baf81f779183e464984bc769ed9c7","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ec69b66d099125761703a43f01bc34f1074f1c1","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["71da933d30aea361ccc224d6544c451cbf49916d"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"3251bdaf728baf81f779183e464984bc769ed9c7":["0a16b40feb4e6e0d55c1716733bde48296bedd20"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["0a16b40feb4e6e0d55c1716733bde48296bedd20","cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}