{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumFloatAssociations().mjava","commits":[{"id":"31703f98041a9e7086254ed134d8f91c22ac933f","date":1360500940,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumFloatAssociations().mjava","pathOld":"/dev/null","sourceNew":"  /** User runs a query and aggregates facets by summing their float associations. */\n  private List<FacetResult> sumFloatAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    // sum the 'tags' dimension\n    FacetSearchParams fsp = new FacetSearchParams(new AssociationFloatSumFacetRequest(new CategoryPath(\"genre\"), 10));\n    \n    FacetsAccumulator fa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumFloatAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(\n        new AssociationIntSumFacetRequest(tags, 10), \n        new AssociationFloatSumFacetRequest(genre, 10));\n  \n    // every category has a different type of association, so use chain their\n    // respective aggregators.\n    final Map<CategoryPath,FacetsAggregator> aggregators = new HashMap<CategoryPath,FacetsAggregator>();\n    aggregators.put(tags, new SumIntAssociationFacetsAggregator());\n    aggregators.put(genre, new SumFloatAssociationFacetsAggregator());\n    FacetsAccumulator fa = new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new MultiAssociationsFacetsAggregator(aggregators);\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their float associations. */\n  private List<FacetResult> sumFloatAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    // sum the 'tags' dimension\n    FacetSearchParams fsp = new FacetSearchParams(new AssociationFloatSumFacetRequest(new CategoryPath(\"genre\"), 10));\n    \n    FacetsAccumulator fa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumAssociations().mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/AssociationsFacetsExample#sumFloatAssociations().mjava","sourceNew":"  /** User runs a query and aggregates facets by summing their association values. */\n  private List<FacetResult> sumAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    CategoryPath tags = new CategoryPath(\"tags\");\n    CategoryPath genre = new CategoryPath(\"genre\");\n    FacetSearchParams fsp = new FacetSearchParams(\n        new AssociationIntSumFacetRequest(tags, 10), \n        new AssociationFloatSumFacetRequest(genre, 10));\n  \n    // every category has a different type of association, so use chain their\n    // respective aggregators.\n    final Map<CategoryPath,FacetsAggregator> aggregators = new HashMap<CategoryPath,FacetsAggregator>();\n    aggregators.put(tags, new SumIntAssociationFacetsAggregator());\n    aggregators.put(genre, new SumFloatAssociationFacetsAggregator());\n    FacetsAccumulator fa = new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return new MultiAssociationsFacetsAggregator(aggregators);\n      }\n    };\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","sourceOld":"  /** User runs a query and aggregates facets by summing their float associations. */\n  private List<FacetResult> sumFloatAssociations() throws IOException {\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    \n    // sum the 'tags' dimension\n    FacetSearchParams fsp = new FacetSearchParams(new AssociationFloatSumFacetRequest(new CategoryPath(\"genre\"), 10));\n    \n    FacetsAccumulator fa = new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    FacetsCollector fc = FacetsCollector.create(fa);\n    \n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), fc);\n    \n    // Retrieve results\n    List<FacetResult> facetResults = fc.getFacetResults();\n    \n    indexReader.close();\n    taxoReader.close();\n    \n    return facetResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["31703f98041a9e7086254ed134d8f91c22ac933f","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"31703f98041a9e7086254ed134d8f91c22ac933f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["31703f98041a9e7086254ed134d8f91c22ac933f"]},"commit2Childs":{"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"31703f98041a9e7086254ed134d8f91c22ac933f":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31703f98041a9e7086254ed134d8f91c22ac933f"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}