{"path":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory#init(NamedList).mjava","commits":[{"id":"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e","date":1420057962,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(final NamedList args) {\n    SolrParams params = (args != null) ? SolrParams.toSolrParams(args) : null;\n    if (params == null) {\n      errorCode = ErrorCode.FORBIDDEN; // default is 403 error\n      responseMsg = DEFAULT_RESPONSE_MSG;\n      ignoreOptimizeOnly = false;\n      return;\n    }\n\n    ignoreOptimizeOnly = params.getBool(\"ignoreOptimizeOnly\", false);\n\n    int statusCode = params.getInt(\"statusCode\", ErrorCode.FORBIDDEN.code);\n    if (statusCode == 200) {\n      errorCode = null; // not needed but makes the logic clearer\n      responseMsg = params.get(\"responseMessage\"); // OK to be null for 200's\n    } else {\n      errorCode = ErrorCode.getErrorCode(statusCode);\n      if (errorCode == ErrorCode.UNKNOWN) {\n        // only allow the error codes supported by the SolrException.ErrorCode class\n        StringBuilder validCodes = new StringBuilder();\n        int appended = 0;\n        for (ErrorCode code : ErrorCode.values()) {\n          if (code != ErrorCode.UNKNOWN) {\n            if (appended++ > 0) validCodes.append(\", \");\n            validCodes.append(code.code);\n          }\n        }\n        throw new IllegalArgumentException(\"Configured status code \" + statusCode +\n            \" not supported! Please choose one of: \" + validCodes.toString());\n      }\n\n      // must always have a response message if sending an error code\n      responseMsg = params.get(\"responseMessage\", DEFAULT_RESPONSE_MSG);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(final NamedList args) {\n    SolrParams params = (args != null) ? args.toSolrParams() : null;\n    if (params == null) {\n      errorCode = ErrorCode.FORBIDDEN; // default is 403 error\n      responseMsg = DEFAULT_RESPONSE_MSG;\n      ignoreOptimizeOnly = false;\n      return;\n    }\n\n    ignoreOptimizeOnly = params.getBool(\"ignoreOptimizeOnly\", false);\n\n    int statusCode = params.getInt(\"statusCode\", ErrorCode.FORBIDDEN.code);\n    if (statusCode == 200) {\n      errorCode = null; // not needed but makes the logic clearer\n      responseMsg = params.get(\"responseMessage\"); // OK to be null for 200's\n    } else {\n      errorCode = ErrorCode.getErrorCode(statusCode);\n      if (errorCode == ErrorCode.UNKNOWN) {\n        // only allow the error codes supported by the SolrException.ErrorCode class\n        StringBuilder validCodes = new StringBuilder();\n        int appended = 0;\n        for (ErrorCode code : ErrorCode.values()) {\n          if (code != ErrorCode.UNKNOWN) {\n            if (appended++ > 0) validCodes.append(\", \");\n            validCodes.append(code.code);\n          }\n        }\n        throw new IllegalArgumentException(\"Configured status code \" + statusCode +\n            \" not supported! Please choose one of: \" + validCodes.toString());\n      }\n\n      // must always have a response message if sending an error code\n      responseMsg = params.get(\"responseMessage\", DEFAULT_RESPONSE_MSG);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(final NamedList args) {\n    SolrParams params = (args != null) ? SolrParams.toSolrParams(args) : null;\n    if (params == null) {\n      errorCode = ErrorCode.FORBIDDEN; // default is 403 error\n      responseMsg = DEFAULT_RESPONSE_MSG;\n      ignoreOptimizeOnly = false;\n      return;\n    }\n\n    ignoreOptimizeOnly = params.getBool(\"ignoreOptimizeOnly\", false);\n\n    int statusCode = params.getInt(\"statusCode\", ErrorCode.FORBIDDEN.code);\n    if (statusCode == 200) {\n      errorCode = null; // not needed but makes the logic clearer\n      responseMsg = params.get(\"responseMessage\"); // OK to be null for 200's\n    } else {\n      errorCode = ErrorCode.getErrorCode(statusCode);\n      if (errorCode == ErrorCode.UNKNOWN) {\n        // only allow the error codes supported by the SolrException.ErrorCode class\n        StringBuilder validCodes = new StringBuilder();\n        int appended = 0;\n        for (ErrorCode code : ErrorCode.values()) {\n          if (code != ErrorCode.UNKNOWN) {\n            if (appended++ > 0) validCodes.append(\", \");\n            validCodes.append(code.code);\n          }\n        }\n        throw new IllegalArgumentException(\"Configured status code \" + statusCode +\n            \" not supported! Please choose one of: \" + validCodes.toString());\n      }\n\n      // must always have a response message if sending an error code\n      responseMsg = params.get(\"responseMessage\", DEFAULT_RESPONSE_MSG);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})final NamedList args) {\n    SolrParams params = (args != null) ? args.toSolrParams() : null;\n    if (params == null) {\n      errorCode = ErrorCode.FORBIDDEN; // default is 403 error\n      responseMsg = DEFAULT_RESPONSE_MSG;\n      ignoreOptimizeOnly = false;\n      return;\n    }\n\n    ignoreOptimizeOnly = params.getBool(\"ignoreOptimizeOnly\", false);\n\n    int statusCode = params.getInt(\"statusCode\", ErrorCode.FORBIDDEN.code);\n    if (statusCode == 200) {\n      errorCode = null; // not needed but makes the logic clearer\n      responseMsg = params.get(\"responseMessage\"); // OK to be null for 200's\n    } else {\n      errorCode = ErrorCode.getErrorCode(statusCode);\n      if (errorCode == ErrorCode.UNKNOWN) {\n        // only allow the error codes supported by the SolrException.ErrorCode class\n        StringBuilder validCodes = new StringBuilder();\n        int appended = 0;\n        for (ErrorCode code : ErrorCode.values()) {\n          if (code != ErrorCode.UNKNOWN) {\n            if (appended++ > 0) validCodes.append(\", \");\n            validCodes.append(code.code);\n          }\n        }\n        throw new IllegalArgumentException(\"Configured status code \" + statusCode +\n            \" not supported! Please choose one of: \" + validCodes.toString());\n      }\n\n      // must always have a response message if sending an error code\n      responseMsg = params.get(\"responseMessage\", DEFAULT_RESPONSE_MSG);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(final NamedList args) {\n    SolrParams params = (args != null) ? args.toSolrParams() : null;\n    if (params == null) {\n      errorCode = ErrorCode.FORBIDDEN; // default is 403 error\n      responseMsg = DEFAULT_RESPONSE_MSG;\n      ignoreOptimizeOnly = false;\n      return;\n    }\n\n    ignoreOptimizeOnly = params.getBool(\"ignoreOptimizeOnly\", false);\n\n    int statusCode = params.getInt(\"statusCode\", ErrorCode.FORBIDDEN.code);\n    if (statusCode == 200) {\n      errorCode = null; // not needed but makes the logic clearer\n      responseMsg = params.get(\"responseMessage\"); // OK to be null for 200's\n    } else {\n      errorCode = ErrorCode.getErrorCode(statusCode);\n      if (errorCode == ErrorCode.UNKNOWN) {\n        // only allow the error codes supported by the SolrException.ErrorCode class\n        StringBuilder validCodes = new StringBuilder();\n        int appended = 0;\n        for (ErrorCode code : ErrorCode.values()) {\n          if (code != ErrorCode.UNKNOWN) {\n            if (appended++ > 0) validCodes.append(\", \");\n            validCodes.append(code.code);\n          }\n        }\n        throw new IllegalArgumentException(\"Configured status code \" + statusCode +\n            \" not supported! Please choose one of: \" + validCodes.toString());\n      }\n\n      // must always have a response message if sending an error code\n      responseMsg = params.get(\"responseMessage\", DEFAULT_RESPONSE_MSG);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["7cfaf45130a8adae39641bbe1d3e609ec30f9e2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cfaf45130a8adae39641bbe1d3e609ec30f9e2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}