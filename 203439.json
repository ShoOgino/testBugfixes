{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#fastStreamDocs(InputStream,FastStreamingDocsCallback).mjava","commits":[{"id":"220577719e3753e52195ed66dc9af6c4e65e2873","date":1550042623,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#fastStreamDocs(InputStream,FastStreamingDocsCallback).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList<Object> fastStreamDocs(InputStream body, FastStreamingDocsCallback fastCallback) throws IOException {\n\n    fieldListener = new EntryListener() {\n      @Override\n      public void entry(DataEntry field) {\n        if (((EntryImpl) field).getTag() == Tag._SOLRDOC) {\n          field.listenContainer(fastCallback.startChildDoc(field.ctx()), fieldListener);\n        } else {\n          fastCallback.field(field,  field.ctx());\n        }\n      }\n\n      @Override\n      public void end(DataEntry e) {\n        fastCallback.endDoc(((EntryImpl) e).ctx);\n      }\n    };\n    docListener = e -> {\n      EntryImpl entry = (EntryImpl) e;\n      if (entry.getTag() == Tag._SOLRDOC) {//this is a doc\n        entry.listenContainer(fastCallback.startDoc(entry.ctx()), fieldListener);\n      }\n    };\n    new FastJavaBinDecoder()\n        .withInputStream(body)\n        .decode(new EntryListener() {\n          @Override\n          public void entry(DataEntry e) {\n            EntryImpl entry = (EntryImpl) e;\n            if( !entry.type().isContainer) return;\n            if (e.isKeyValEntry() && entry.getTag() == Tag._SOLRDOCLST) {\n              List l = (List) e.metadata();\n              e.listenContainer(fastCallback.initDocList(\n                  (Long) l.get(0),\n                  (Long) l.get(1),\n                  (Float) l.get(2)),\n                  docListener);\n            } else {\n              e.listenContainer(null, this);\n            }\n          }\n        });\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#fastStreamDocs(InputStream,FastStreamingDocsCallback).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingBinaryResponseParser#fastStreamDocs(InputStream,FastStreamingDocsCallback).mjava","sourceNew":"  private NamedList<Object> fastStreamDocs(InputStream body, FastStreamingDocsCallback fastCallback) throws IOException {\n\n    fieldListener = new EntryListener() {\n      @Override\n      public void entry(DataEntry field) {\n        if (((EntryImpl) field).getTag() == Tag._SOLRDOC) {\n          field.listenContainer(fastCallback.startChildDoc(field.ctx()), fieldListener);\n        } else {\n          fastCallback.field(field,  field.ctx());\n        }\n      }\n\n      @Override\n      public void end(DataEntry e) {\n        fastCallback.endDoc(((EntryImpl) e).ctx);\n      }\n    };\n    docListener = e -> {\n      EntryImpl entry = (EntryImpl) e;\n      if (entry.getTag() == Tag._SOLRDOC) {//this is a doc\n        entry.listenContainer(fastCallback.startDoc(entry.ctx()), fieldListener);\n      }\n    };\n    new FastJavaBinDecoder()\n        .withInputStream(body)\n        .decode(new EntryListener() {\n          @Override\n          public void entry(DataEntry e) {\n            EntryImpl entry = (EntryImpl) e;\n            if( !entry.type().isContainer) return;\n            if (e.isKeyValEntry() && entry.getTag() == Tag._SOLRDOCLST) {\n              @SuppressWarnings({\"rawtypes\"})\n              List l = (List) e.metadata();\n              e.listenContainer(fastCallback.initDocList(\n                  (Long) l.get(0),\n                  (Long) l.get(1),\n                  (Float) l.get(2)),\n                  docListener);\n            } else {\n              e.listenContainer(null, this);\n            }\n          }\n        });\n    return null;\n  }\n\n","sourceOld":"  private NamedList<Object> fastStreamDocs(InputStream body, FastStreamingDocsCallback fastCallback) throws IOException {\n\n    fieldListener = new EntryListener() {\n      @Override\n      public void entry(DataEntry field) {\n        if (((EntryImpl) field).getTag() == Tag._SOLRDOC) {\n          field.listenContainer(fastCallback.startChildDoc(field.ctx()), fieldListener);\n        } else {\n          fastCallback.field(field,  field.ctx());\n        }\n      }\n\n      @Override\n      public void end(DataEntry e) {\n        fastCallback.endDoc(((EntryImpl) e).ctx);\n      }\n    };\n    docListener = e -> {\n      EntryImpl entry = (EntryImpl) e;\n      if (entry.getTag() == Tag._SOLRDOC) {//this is a doc\n        entry.listenContainer(fastCallback.startDoc(entry.ctx()), fieldListener);\n      }\n    };\n    new FastJavaBinDecoder()\n        .withInputStream(body)\n        .decode(new EntryListener() {\n          @Override\n          public void entry(DataEntry e) {\n            EntryImpl entry = (EntryImpl) e;\n            if( !entry.type().isContainer) return;\n            if (e.isKeyValEntry() && entry.getTag() == Tag._SOLRDOCLST) {\n              List l = (List) e.metadata();\n              e.listenContainer(fastCallback.initDocList(\n                  (Long) l.get(0),\n                  (Long) l.get(1),\n                  (Float) l.get(2)),\n                  docListener);\n            } else {\n              e.listenContainer(null, this);\n            }\n          }\n        });\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["220577719e3753e52195ed66dc9af6c4e65e2873"],"220577719e3753e52195ed66dc9af6c4e65e2873":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"]},"commit2Childs":{"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"220577719e3753e52195ed66dc9af6c4e65e2873":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["220577719e3753e52195ed66dc9af6c4e65e2873"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}