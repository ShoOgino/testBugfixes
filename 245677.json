{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CategoryParentsStream#clearCategoryProperties().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CategoryParentsStream#clearCategoryProperties().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/streaming/CategoryParentsStream#clearCategoryProperties().mjava","sourceNew":"  /**\n   * Clear the properties of the current {@link CategoryAttribute} attribute\n   * before setting the parent attributes. <br>\n   * It is possible to retain properties of certain types the parent tokens,\n   * using {@link #addRetainableProperty(Class)}.\n   */\n  protected void clearCategoryProperties() {\n    if (this.retainableProperties == null\n        || this.retainableProperties.isEmpty()) {\n      this.categoryAttribute.clearProperties();\n    } else {\n      List<Class<? extends CategoryProperty>> propertyClassesToRemove = \n                            new LinkedList<Class<? extends CategoryProperty>>();\n      for (Class<? extends CategoryProperty> propertyClass : this.categoryAttribute\n          .getPropertyClasses()) {\n        if (!this.retainableProperties.contains(propertyClass)) {\n          propertyClassesToRemove.add(propertyClass);\n        }\n      }\n      for (Class<? extends CategoryProperty> propertyClass : propertyClassesToRemove) {\n        this.categoryAttribute.remove(propertyClass);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Clear the properties of the current {@link CategoryAttribute} attribute\n   * before setting the parent attributes. <br>\n   * It is possible to retain properties of certain types the parent tokens,\n   * using {@link #addRetainableProperty(Class)}.\n   */\n  protected void clearCategoryProperties() {\n    if (this.retainableProperties == null\n        || this.retainableProperties.isEmpty()) {\n      this.categoryAttribute.clearProperties();\n    } else {\n      List<Class<? extends CategoryProperty>> propertyClassesToRemove = \n                            new LinkedList<Class<? extends CategoryProperty>>();\n      for (Class<? extends CategoryProperty> propertyClass : this.categoryAttribute\n          .getPropertyClasses()) {\n        if (!this.retainableProperties.contains(propertyClass)) {\n          propertyClassesToRemove.add(propertyClass);\n        }\n      }\n      for (Class<? extends CategoryProperty> propertyClass : propertyClassesToRemove) {\n        this.categoryAttribute.remove(propertyClass);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CategoryParentsStream#clearCategoryProperties().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CategoryParentsStream#clearCategoryProperties().mjava","sourceNew":"  /**\n   * Clear the properties of the current {@link CategoryAttribute} attribute\n   * before setting the parent attributes. <br>\n   * It is possible to retain properties of certain types the parent tokens,\n   * using {@link #addRetainableProperty(Class)}.\n   */\n  protected void clearCategoryProperties() {\n    if (retainableProperties == null || retainableProperties.isEmpty()) {\n      categoryAttribute.clearProperties();\n    } else {\n      List<Class<? extends CategoryProperty>> propsToRemove = new LinkedList<Class<? extends CategoryProperty>>();\n      for (Class<? extends CategoryProperty> propertyClass : categoryAttribute.getPropertyClasses()) {\n        if (!retainableProperties.contains(propertyClass)) {\n          propsToRemove.add(propertyClass);\n        }\n      }\n      for (Class<? extends CategoryProperty> propertyClass : propsToRemove) {\n        categoryAttribute.remove(propertyClass);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Clear the properties of the current {@link CategoryAttribute} attribute\n   * before setting the parent attributes. <br>\n   * It is possible to retain properties of certain types the parent tokens,\n   * using {@link #addRetainableProperty(Class)}.\n   */\n  protected void clearCategoryProperties() {\n    if (this.retainableProperties == null\n        || this.retainableProperties.isEmpty()) {\n      this.categoryAttribute.clearProperties();\n    } else {\n      List<Class<? extends CategoryProperty>> propertyClassesToRemove = \n                            new LinkedList<Class<? extends CategoryProperty>>();\n      for (Class<? extends CategoryProperty> propertyClass : this.categoryAttribute\n          .getPropertyClasses()) {\n        if (!this.retainableProperties.contains(propertyClass)) {\n          propertyClassesToRemove.add(propertyClass);\n        }\n      }\n      for (Class<? extends CategoryProperty> propertyClass : propertyClassesToRemove) {\n        this.categoryAttribute.remove(propertyClass);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CategoryParentsStream#clearCategoryProperties().mjava","sourceNew":null,"sourceOld":"  /**\n   * Clear the properties of the current {@link CategoryAttribute} attribute\n   * before setting the parent attributes. <br>\n   * It is possible to retain properties of certain types the parent tokens,\n   * using {@link #addRetainableProperty(Class)}.\n   */\n  protected void clearCategoryProperties() {\n    if (retainableProperties == null || retainableProperties.isEmpty()) {\n      categoryAttribute.clearProperties();\n    } else {\n      List<Class<? extends CategoryProperty>> propsToRemove = new LinkedList<Class<? extends CategoryProperty>>();\n      for (Class<? extends CategoryProperty> propertyClass : categoryAttribute.getPropertyClasses()) {\n        if (!retainableProperties.contains(propertyClass)) {\n          propsToRemove.add(propertyClass);\n        }\n      }\n      for (Class<? extends CategoryProperty> propertyClass : propsToRemove) {\n        categoryAttribute.remove(propertyClass);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/streaming/CategoryParentsStream#clearCategoryProperties().mjava","sourceNew":null,"sourceOld":"  /**\n   * Clear the properties of the current {@link CategoryAttribute} attribute\n   * before setting the parent attributes. <br>\n   * It is possible to retain properties of certain types the parent tokens,\n   * using {@link #addRetainableProperty(Class)}.\n   */\n  protected void clearCategoryProperties() {\n    if (this.retainableProperties == null\n        || this.retainableProperties.isEmpty()) {\n      this.categoryAttribute.clearProperties();\n    } else {\n      List<Class<? extends CategoryProperty>> propertyClassesToRemove = \n                            new LinkedList<Class<? extends CategoryProperty>>();\n      for (Class<? extends CategoryProperty> propertyClass : this.categoryAttribute\n          .getPropertyClasses()) {\n        if (!this.retainableProperties.contains(propertyClass)) {\n          propertyClassesToRemove.add(propertyClass);\n        }\n      }\n      for (Class<? extends CategoryProperty> propertyClass : propertyClassesToRemove) {\n        this.categoryAttribute.remove(propertyClass);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}