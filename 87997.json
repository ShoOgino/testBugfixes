{"path":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#analyzeSeedDocument(Document,Map[String,List[String[]]],Map[String,Float]).mjava","commits":[{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#analyzeSeedDocument(Document,Map[String,List[String[]]],Map[String,Float]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This methods performs the analysis for the seed document and extract the boosts if present.\n   * This is done only one time for the Seed Document.\n   *\n   * @param inputDocument         the seed unseen document\n   * @param fieldName2tokensArray a map that associated to a field name the list of token arrays for all its values\n   * @param fieldName2boost       a map that associates the boost to the field\n   * @throws IOException If there is a low-level I/O error\n   */\n  private void analyzeSeedDocument(Document inputDocument, Map<String, List<String[]>> fieldName2tokensArray, Map<String, Float> fieldName2boost) throws IOException {\n    for (int i = 0; i < textFieldNames.length; i++) {\n      String fieldName = textFieldNames[i];\n      float boost = 1;\n      List<String[]> tokenizedValues = new LinkedList<>();\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = Float.parseFloat(field2boost[1]);\n      }\n      Field[] fieldValues = inputDocument.getFields(fieldName);\n      for (Field fieldValue : fieldValues) {\n        TokenStream fieldTokens = fieldValue.tokenStream(field2analyzer.get(fieldName), null);\n        String[] fieldTokensArray = getTokenArray(fieldTokens);\n        tokenizedValues.add(fieldTokensArray);\n      }\n      fieldName2tokensArray.put(fieldName, tokenizedValues);\n      fieldName2boost.put(fieldName, boost);\n      textFieldNames[i] = fieldName;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#analyzeSeedDocument(Document,Map[String,List[String[]]],Map[String,Float]).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#analyzeSeedDocument(Document,Map[String,List[String[]]],Map[String,Float]).mjava","sourceNew":"  /**\n   * This methods performs the analysis for the seed document and extract the boosts if present.\n   * This is done only one time for the Seed Document.\n   *\n   * @param inputDocument         the seed unseen document\n   * @param fieldName2tokensArray a map that associated to a field name the list of token arrays for all its values\n   * @param fieldName2boost       a map that associates the boost to the field\n   * @throws IOException If there is a low-level I/O error\n   */\n  private void analyzeSeedDocument(Document inputDocument, Map<String, List<String[]>> fieldName2tokensArray, Map<String, Float> fieldName2boost) throws IOException {\n    for (int i = 0; i < textFieldNames.length; i++) {\n      String fieldName = textFieldNames[i];\n      float boost = 1;\n      List<String[]> tokenizedValues = new LinkedList<>();\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = Float.parseFloat(field2boost[1]);\n      }\n      IndexableField[] fieldValues = inputDocument.getFields(fieldName);\n      for (IndexableField fieldValue : fieldValues) {\n        TokenStream fieldTokens = fieldValue.tokenStream(field2analyzer.get(fieldName), null);\n        String[] fieldTokensArray = getTokenArray(fieldTokens);\n        tokenizedValues.add(fieldTokensArray);\n      }\n      fieldName2tokensArray.put(fieldName, tokenizedValues);\n      fieldName2boost.put(fieldName, boost);\n      textFieldNames[i] = fieldName;\n    }\n  }\n\n","sourceOld":"  /**\n   * This methods performs the analysis for the seed document and extract the boosts if present.\n   * This is done only one time for the Seed Document.\n   *\n   * @param inputDocument         the seed unseen document\n   * @param fieldName2tokensArray a map that associated to a field name the list of token arrays for all its values\n   * @param fieldName2boost       a map that associates the boost to the field\n   * @throws IOException If there is a low-level I/O error\n   */\n  private void analyzeSeedDocument(Document inputDocument, Map<String, List<String[]>> fieldName2tokensArray, Map<String, Float> fieldName2boost) throws IOException {\n    for (int i = 0; i < textFieldNames.length; i++) {\n      String fieldName = textFieldNames[i];\n      float boost = 1;\n      List<String[]> tokenizedValues = new LinkedList<>();\n      if (fieldName.contains(\"^\")) {\n        String[] field2boost = fieldName.split(\"\\\\^\");\n        fieldName = field2boost[0];\n        boost = Float.parseFloat(field2boost[1]);\n      }\n      Field[] fieldValues = inputDocument.getFields(fieldName);\n      for (Field fieldValue : fieldValues) {\n        TokenStream fieldTokens = fieldValue.tokenStream(field2analyzer.get(fieldName), null);\n        String[] fieldTokensArray = getTokenArray(fieldTokens);\n        tokenizedValues.add(fieldTokensArray);\n      }\n      fieldName2tokensArray.put(fieldName, tokenizedValues);\n      fieldName2boost.put(fieldName, boost);\n      textFieldNames[i] = fieldName;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"134a24d0cb66520908d88384f1a559875704ed25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["134a24d0cb66520908d88384f1a559875704ed25"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["134a24d0cb66520908d88384f1a559875704ed25"],"134a24d0cb66520908d88384f1a559875704ed25":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}