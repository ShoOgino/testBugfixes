{"path":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","commits":[{"id":"54a7e213a9b4c9579fbf877d9f0b62aa948c410e","date":1376499415,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // SOLR-5144\n  public void testSplitDeletes() throws Exception {\n    LocalSolrQueryRequest request = null;\n    try {\n      // add two docs\n      String id1 = \"dorothy\";\n      assertU(adoc(\"id\", id1));\n      String id2 = \"kansas\";\n      assertU(adoc(\"id\", id2));\n      assertU(commit());\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n      assertU(delI(id2)); // delete id2\n      assertU(commit());\n\n\n      // find minHash/maxHash hash ranges\n      List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n      request = lrf.makeRequest(\"q\", \"dummy\");\n\n      SplitIndexCommand command = new SplitIndexCommand(request,\n          Lists.newArrayList(indexDir1.getAbsolutePath(), indexDir2.getAbsolutePath()), null, ranges, new PlainIdRouter());\n      new SolrIndexSplitter(command).split();\n\n      Directory directory = h.getCore().getDirectoryFactory().get(indexDir1.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      DirectoryReader reader = DirectoryReader.open(directory);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, reader.docFreq(new Term(\"id\", \"dorothy\")));\n      assertEquals(\"id:kansas should not be present in split index1\", 0, reader.docFreq(new Term(\"id\", \"kansas\")));\n      assertEquals(\"split index1 should have only one document\", 1, reader.numDocs());\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n      directory = h.getCore().getDirectoryFactory().get(indexDir2.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      reader = DirectoryReader.open(directory);\n      assertEquals(0, reader.numDocs()); // should be empty\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n    } finally {\n      if (request != null) request.close(); // decrefs the searcher\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // SOLR-5144\n  public void testSplitDeletes() throws Exception {\n    LocalSolrQueryRequest request = null;\n    try {\n      // add two docs\n      String id1 = \"dorothy\";\n      assertU(adoc(\"id\", id1));\n      String id2 = \"kansas\";\n      assertU(adoc(\"id\", id2));\n      assertU(commit());\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n      assertU(delI(id2)); // delete id2\n      assertU(commit());\n\n\n      // find minHash/maxHash hash ranges\n      List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n      request = lrf.makeRequest(\"q\", \"dummy\");\n\n      SplitIndexCommand command = new SplitIndexCommand(request,\n          Lists.newArrayList(indexDir1.getAbsolutePath(), indexDir2.getAbsolutePath()), null, ranges, new PlainIdRouter());\n      new SolrIndexSplitter(command).split();\n\n      Directory directory = h.getCore().getDirectoryFactory().get(indexDir1.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      DirectoryReader reader = DirectoryReader.open(directory);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, reader.docFreq(new Term(\"id\", \"dorothy\")));\n      assertEquals(\"id:kansas should not be present in split index1\", 0, reader.docFreq(new Term(\"id\", \"kansas\")));\n      assertEquals(\"split index1 should have only one document\", 1, reader.numDocs());\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n      directory = h.getCore().getDirectoryFactory().get(indexDir2.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      reader = DirectoryReader.open(directory);\n      assertEquals(0, reader.numDocs()); // should be empty\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n    } finally {\n      if (request != null) request.close(); // decrefs the searcher\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1816753738ff1f27f11b38030e83c0ded050b7a4","date":1380106089,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","sourceNew":"  // SOLR-5144\n  public void testSplitDeletes() throws Exception {\n    LocalSolrQueryRequest request = null;\n    try {\n      // add two docs\n      String id1 = \"dorothy\";\n      assertU(adoc(\"id\", id1));\n      String id2 = \"kansas\";\n      assertU(adoc(\"id\", id2));\n      assertU(commit());\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n      assertU(delI(id2)); // delete id2\n      assertU(commit());\n\n\n      // find minHash/maxHash hash ranges\n      List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n      request = lrf.makeRequest(\"q\", \"dummy\");\n\n      SplitIndexCommand command = new SplitIndexCommand(request,\n          Lists.newArrayList(indexDir1.getAbsolutePath(), indexDir2.getAbsolutePath()), null, ranges, new PlainIdRouter(), null);\n      new SolrIndexSplitter(command).split();\n\n      Directory directory = h.getCore().getDirectoryFactory().get(indexDir1.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      DirectoryReader reader = DirectoryReader.open(directory);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, reader.docFreq(new Term(\"id\", \"dorothy\")));\n      assertEquals(\"id:kansas should not be present in split index1\", 0, reader.docFreq(new Term(\"id\", \"kansas\")));\n      assertEquals(\"split index1 should have only one document\", 1, reader.numDocs());\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n      directory = h.getCore().getDirectoryFactory().get(indexDir2.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      reader = DirectoryReader.open(directory);\n      assertEquals(0, reader.numDocs()); // should be empty\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n    } finally {\n      if (request != null) request.close(); // decrefs the searcher\n    }\n  }\n\n","sourceOld":"  // SOLR-5144\n  public void testSplitDeletes() throws Exception {\n    LocalSolrQueryRequest request = null;\n    try {\n      // add two docs\n      String id1 = \"dorothy\";\n      assertU(adoc(\"id\", id1));\n      String id2 = \"kansas\";\n      assertU(adoc(\"id\", id2));\n      assertU(commit());\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n      assertU(delI(id2)); // delete id2\n      assertU(commit());\n\n\n      // find minHash/maxHash hash ranges\n      List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n      request = lrf.makeRequest(\"q\", \"dummy\");\n\n      SplitIndexCommand command = new SplitIndexCommand(request,\n          Lists.newArrayList(indexDir1.getAbsolutePath(), indexDir2.getAbsolutePath()), null, ranges, new PlainIdRouter());\n      new SolrIndexSplitter(command).split();\n\n      Directory directory = h.getCore().getDirectoryFactory().get(indexDir1.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      DirectoryReader reader = DirectoryReader.open(directory);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, reader.docFreq(new Term(\"id\", \"dorothy\")));\n      assertEquals(\"id:kansas should not be present in split index1\", 0, reader.docFreq(new Term(\"id\", \"kansas\")));\n      assertEquals(\"split index1 should have only one document\", 1, reader.numDocs());\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n      directory = h.getCore().getDirectoryFactory().get(indexDir2.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      reader = DirectoryReader.open(directory);\n      assertEquals(0, reader.numDocs()); // should be empty\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n    } finally {\n      if (request != null) request.close(); // decrefs the searcher\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8b2974b783dfe1b0160f39e4de0315fa51adb","date":1382029739,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","sourceNew":"  // SOLR-5144\n  public void testSplitDeletes() throws Exception {\n    LocalSolrQueryRequest request = null;\n    try {\n      // add two docs\n      String id1 = \"dorothy\";\n      assertU(adoc(\"id\", id1));\n      String id2 = \"kansas\";\n      assertU(adoc(\"id\", id2));\n      assertU(commit());\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n      assertU(delI(id2)); // delete id2\n      assertU(commit());\n\n\n      // find minHash/maxHash hash ranges\n      List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n      request = lrf.makeRequest(\"q\", \"dummy\");\n\n      SplitIndexCommand command = new SplitIndexCommand(request,\n          Lists.newArrayList(indexDir1.getAbsolutePath(), indexDir2.getAbsolutePath()), null, ranges, new PlainIdRouter(), null, null);\n      new SolrIndexSplitter(command).split();\n\n      Directory directory = h.getCore().getDirectoryFactory().get(indexDir1.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      DirectoryReader reader = DirectoryReader.open(directory);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, reader.docFreq(new Term(\"id\", \"dorothy\")));\n      assertEquals(\"id:kansas should not be present in split index1\", 0, reader.docFreq(new Term(\"id\", \"kansas\")));\n      assertEquals(\"split index1 should have only one document\", 1, reader.numDocs());\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n      directory = h.getCore().getDirectoryFactory().get(indexDir2.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      reader = DirectoryReader.open(directory);\n      assertEquals(0, reader.numDocs()); // should be empty\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n    } finally {\n      if (request != null) request.close(); // decrefs the searcher\n    }\n  }\n\n","sourceOld":"  // SOLR-5144\n  public void testSplitDeletes() throws Exception {\n    LocalSolrQueryRequest request = null;\n    try {\n      // add two docs\n      String id1 = \"dorothy\";\n      assertU(adoc(\"id\", id1));\n      String id2 = \"kansas\";\n      assertU(adoc(\"id\", id2));\n      assertU(commit());\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n      assertU(delI(id2)); // delete id2\n      assertU(commit());\n\n\n      // find minHash/maxHash hash ranges\n      List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n      request = lrf.makeRequest(\"q\", \"dummy\");\n\n      SplitIndexCommand command = new SplitIndexCommand(request,\n          Lists.newArrayList(indexDir1.getAbsolutePath(), indexDir2.getAbsolutePath()), null, ranges, new PlainIdRouter(), null);\n      new SolrIndexSplitter(command).split();\n\n      Directory directory = h.getCore().getDirectoryFactory().get(indexDir1.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      DirectoryReader reader = DirectoryReader.open(directory);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, reader.docFreq(new Term(\"id\", \"dorothy\")));\n      assertEquals(\"id:kansas should not be present in split index1\", 0, reader.docFreq(new Term(\"id\", \"kansas\")));\n      assertEquals(\"split index1 should have only one document\", 1, reader.numDocs());\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n      directory = h.getCore().getDirectoryFactory().get(indexDir2.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      reader = DirectoryReader.open(directory);\n      assertEquals(0, reader.numDocs()); // should be empty\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n    } finally {\n      if (request != null) request.close(); // decrefs the searcher\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#testSplitDeletes().mjava","sourceNew":"  // SOLR-5144\n  public void testSplitDeletes() throws Exception {\n    doTestSplitDeletes(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","sourceOld":"  // SOLR-5144\n  public void testSplitDeletes() throws Exception {\n    LocalSolrQueryRequest request = null;\n    try {\n      // add two docs\n      String id1 = \"dorothy\";\n      assertU(adoc(\"id\", id1));\n      String id2 = \"kansas\";\n      assertU(adoc(\"id\", id2));\n      assertU(commit());\n      assertJQ(req(\"q\", \"*:*\"), \"/response/numFound==2\");\n      assertU(delI(id2)); // delete id2\n      assertU(commit());\n\n\n      // find minHash/maxHash hash ranges\n      List<DocRouter.Range> ranges = getRanges(id1, id2);\n\n      request = lrf.makeRequest(\"q\", \"dummy\");\n\n      SplitIndexCommand command = new SplitIndexCommand(request,\n          Lists.newArrayList(indexDir1.getAbsolutePath(), indexDir2.getAbsolutePath()), null, ranges, new PlainIdRouter(), null, null);\n      new SolrIndexSplitter(command).split();\n\n      Directory directory = h.getCore().getDirectoryFactory().get(indexDir1.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      DirectoryReader reader = DirectoryReader.open(directory);\n      assertEquals(\"id:dorothy should be present in split index1\", 1, reader.docFreq(new Term(\"id\", \"dorothy\")));\n      assertEquals(\"id:kansas should not be present in split index1\", 0, reader.docFreq(new Term(\"id\", \"kansas\")));\n      assertEquals(\"split index1 should have only one document\", 1, reader.numDocs());\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n      directory = h.getCore().getDirectoryFactory().get(indexDir2.getAbsolutePath(),\n          DirectoryFactory.DirContext.DEFAULT, h.getCore().getSolrConfig().indexConfig.lockType);\n      reader = DirectoryReader.open(directory);\n      assertEquals(0, reader.numDocs()); // should be empty\n      reader.close();\n      h.getCore().getDirectoryFactory().release(directory);\n    } finally {\n      if (request != null) request.close(); // decrefs the searcher\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbe8b2974b783dfe1b0160f39e4de0315fa51adb":["1816753738ff1f27f11b38030e83c0ded050b7a4"],"1816753738ff1f27f11b38030e83c0ded050b7a4":["54a7e213a9b4c9579fbf877d9f0b62aa948c410e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54a7e213a9b4c9579fbf877d9f0b62aa948c410e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["fbe8b2974b783dfe1b0160f39e4de0315fa51adb"],"54a7e213a9b4c9579fbf877d9f0b62aa948c410e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20c968c14aace7cf49843bf2c1fafc7fd3845659"]},"commit2Childs":{"fbe8b2974b783dfe1b0160f39e4de0315fa51adb":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"1816753738ff1f27f11b38030e83c0ded050b7a4":["fbe8b2974b783dfe1b0160f39e4de0315fa51adb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","54a7e213a9b4c9579fbf877d9f0b62aa948c410e"],"54a7e213a9b4c9579fbf877d9f0b62aa948c410e":["1816753738ff1f27f11b38030e83c0ded050b7a4","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}