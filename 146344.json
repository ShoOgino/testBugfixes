{"path":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(r.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(r.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(r.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","bugFix":null,"bugIntro":["34aad2b15e35959ef2a8c4b991feea4c497936b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(r.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34aad2b15e35959ef2a8c4b991feea4c497936b7","date":1294423355,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    AtomicBoolean failed = new AtomicBoolean();\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()), failed);\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012","1ab51a69d46b495c00b86cf406ed599035e94d70","a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    AtomicBoolean failed = new AtomicBoolean();\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()), failed);\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    AtomicBoolean failed = new AtomicBoolean();\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()), failed);\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()));\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    if (failure!=null) {\n      fail(failure);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#doTest(int,int).mjava","sourceNew":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    AtomicBoolean failed = new AtomicBoolean();\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()), failed);\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    assertFalse(failed.get());\n  }\n\n","sourceOld":"  void doTest(int iter, int nThreads) throws Exception {\n    Thr[] tarr = new Thr[nThreads];\n    AtomicBoolean failed = new AtomicBoolean();\n    for (int i=0; i<nThreads; i++) {\n      tarr[i] = new Thr(iter, new Random(random.nextLong()), failed);\n      tarr[i].start();\n    }\n    for (int i=0; i<nThreads; i++) {\n      tarr[i].join();\n    }\n    assertFalse(failed.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f653cfcf159baeaafe5d01682a911e95bba4012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1f653cfcf159baeaafe5d01682a911e95bba4012","34aad2b15e35959ef2a8c4b991feea4c497936b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["34aad2b15e35959ef2a8c4b991feea4c497936b7"],"34aad2b15e35959ef2a8c4b991feea4c497936b7":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","34aad2b15e35959ef2a8c4b991feea4c497936b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1f653cfcf159baeaafe5d01682a911e95bba4012":["29ef99d61cda9641b6250bf9567329a6e65f901d","34aad2b15e35959ef2a8c4b991feea4c497936b7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"34aad2b15e35959ef2a8c4b991feea4c497936b7":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}