{"path":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","sourceNew":"  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b528341bfe957a7b151011996b2ce629b2fc83c6","date":1335390889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","sourceNew":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   */\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","sourceNew":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   */\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","sourceNew":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   */\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","sourceNew":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   */\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c850d2a2bc88f4751bf05e1ee6799940462331eb","date":1472140972,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringStringMap(Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a String map.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each key-value pair written as two consecutive \n   * {@link #writeString(String) String}s.\n   * \n   * @param map Input map. May be null (equivalent to an empty map)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringStringMap(Map<String,String> map) throws IOException {\n    if (map == null) {\n      writeInt(0);\n    } else {\n      writeInt(map.size());\n      for(final Map.Entry<String, String> entry: map.entrySet()) {\n        writeString(entry.getKey());\n        writeString(entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b528341bfe957a7b151011996b2ce629b2fc83c6","79700663e164dece87bed4adfd3e28bab6cb1385"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79700663e164dece87bed4adfd3e28bab6cb1385":["b528341bfe957a7b151011996b2ce629b2fc83c6"],"c850d2a2bc88f4751bf05e1ee6799940462331eb":["79700663e164dece87bed4adfd3e28bab6cb1385"],"b528341bfe957a7b151011996b2ce629b2fc83c6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"299a2348fa24151d150182211b6208a38e5e3450":["b528341bfe957a7b151011996b2ce629b2fc83c6","79700663e164dece87bed4adfd3e28bab6cb1385"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["79700663e164dece87bed4adfd3e28bab6cb1385","c850d2a2bc88f4751bf05e1ee6799940462331eb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["79700663e164dece87bed4adfd3e28bab6cb1385","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b528341bfe957a7b151011996b2ce629b2fc83c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c850d2a2bc88f4751bf05e1ee6799940462331eb","299a2348fa24151d150182211b6208a38e5e3450","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c850d2a2bc88f4751bf05e1ee6799940462331eb":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"b528341bfe957a7b151011996b2ce629b2fc83c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"299a2348fa24151d150182211b6208a38e5e3450":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}