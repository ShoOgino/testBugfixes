{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\");\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n      c.setTime(docDate);\n      int year = c.get(Calendar.YEAR);\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["eecb423c2b1378e42f1bbb77d4c63b59ef87ac86"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80249aaf913769676b1d45cdf0859ca70bd04fc8","date":1353440934,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n      c.setTime(docDate);\n      int year = c.get(Calendar.YEAR);\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\");\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n      c.setTime(docDate);\n      int year = c.get(Calendar.YEAR);\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n      c.setTime(docDate);\n      int year = c.get(Calendar.YEAR);\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eecb423c2b1378e42f1bbb77d4c63b59ef87ac86","date":1356978641,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n      c.setTime(docDate);\n      int year = c.get(Calendar.YEAR);\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      Calendar c = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n      c.setTime(docDate);\n      int year = c.get(Calendar.YEAR);\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<String,String>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<String,Object>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct date stamps\")\n  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct date stamps\")\n  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);\n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct date stamps\")\n  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct date stamps\")\n  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);\n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct date stamps\")\n  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct date stamps\")\n  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);\n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct date stamps\")\n  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      Assert.assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);   \n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSimplePropertiesWriter#testSimplePropertiesWriter().mjava","sourceNew":null,"sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to construct date stamps\")\n  @Test\n  public void testSimplePropertiesWriter() throws Exception { \n    \n    SimpleDateFormat errMsgFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSSSS\", Locale.ROOT);\n    \n    String[] d = { \n        \"{'ts' ''yyyy-MM-dd HH:mm:ss.SSSSSS''}\",\n        \"{'ts' ''yyyy-MM-dd HH:mm:ss''}\",\n        \"yyyy-MM-dd HH:mm:ss\", \n        \"yyyy-MM-dd HH:mm:ss.SSSSSS\"\n    };\n    for(int i=0 ; i<d.length ; i++) {\n      delQ(\"*:*\");\n      commit();\n      if(i<2) {\n        useJdbcEscapeSyntax = true;\n      } else {\n        useJdbcEscapeSyntax = false;\n      }\n      dateFormat = d[i];\n      SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);\n      Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);\n      \n      Map<String,String> init = new HashMap<>();\n      init.put(\"dateFormat\", dateFormat);\n      init.put(\"filename\", fileName);\n      init.put(\"directory\", fileLocation);\n      SimplePropertiesWriter spw = new SimplePropertiesWriter();\n      spw.init(new DataImporter(), init);\n      Map<String, Object> props = new HashMap<>();\n      props.put(\"SomeDates.last_index_time\", oneSecondAgo);\n      props.put(\"last_index_time\", oneSecondAgo);\n      spw.persist(props);\n      \n      h.query(\"/dataimport\", generateRequest());  \n      props = spw.readIndexerProperties();\n      Date entityDate = df.parse((String) props.get(\"SomeDates.last_index_time\"));\n      Date docDate= df.parse((String) props.get(\"last_index_time\"));\n      int year = currentYearFromDatabase();\n      \n      assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the document date: \" + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);\n      assertTrue(\"This date: \" + errMsgFormat.format(oneSecondAgo) + \" should be prior to the entity date: \" + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);\n      assertQ(req(\"*:*\"), \"//*[@numFound='1']\", \"//doc/str[@name=\\\"ayear_s\\\"]=\\\"\" + year + \"\\\"\");    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","eecb423c2b1378e42f1bbb77d4c63b59ef87ac86"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eecb423c2b1378e42f1bbb77d4c63b59ef87ac86"],"eecb423c2b1378e42f1bbb77d4c63b59ef87ac86":["80249aaf913769676b1d45cdf0859ca70bd04fc8"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","80249aaf913769676b1d45cdf0859ca70bd04fc8"],"80249aaf913769676b1d45cdf0859ca70bd04fc8":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"f8061ddd97f3352007d927dae445884a6f3d857b":["bcf9886c8ff537aafde14de48ebf744f5673f08b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["bcf9886c8ff537aafde14de48ebf744f5673f08b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"eecb423c2b1378e42f1bbb77d4c63b59ef87ac86":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"80249aaf913769676b1d45cdf0859ca70bd04fc8":["eecb423c2b1378e42f1bbb77d4c63b59ef87ac86","407687e67faf6e1f02a211ca078d8e3eed631027"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["80249aaf913769676b1d45cdf0859ca70bd04fc8"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}