{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testTypeFilter().mjava","commits":[{"id":"ba64142b9196306ad35a6d525c0bdf5fd411690a","date":1327172564,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testTypeFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testTypeFilter() throws IOException {\n    StringReader reader = new StringReader(\"121 is palindrome, while 123 is not\");\n    Set<String> stopTypes = asSet(\"<NUM>\");\n    TokenStream stream = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopTypes);\n    assertTokenStreamContents(stream, new String[]{\"is\", \"palindrome\", \"while\", \"is\", \"not\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testTypeFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testTypeFilter() throws IOException {\n    StringReader reader = new StringReader(\"121 is palindrome, while 123 is not\");\n    Set<String> stopTypes = asSet(\"<NUM>\");\n    TokenStream stream = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopTypes);\n    assertTokenStreamContents(stream, new String[]{\"is\", \"palindrome\", \"while\", \"is\", \"not\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testTypeFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testTypeFilter().mjava","sourceNew":"  public void testTypeFilter() throws IOException {\n    StringReader reader = new StringReader(\"121 is palindrome, while 123 is not\");\n    Set<String> stopTypes = asSet(\"<NUM>\");\n    TokenStream stream = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopTypes);\n    assertTokenStreamContents(stream, new String[]{\"is\", \"palindrome\", \"while\", \"is\", \"not\"});\n  }\n\n","sourceOld":"  public void testTypeFilter() throws IOException {\n    StringReader reader = new StringReader(\"121 is palindrome, while 123 is not\");\n    Set<String> stopTypes = asSet(\"<NUM>\");\n    TokenStream stream = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopTypes);\n    assertTokenStreamContents(stream, new String[]{\"is\", \"palindrome\", \"while\", \"is\", \"not\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ba64142b9196306ad35a6d525c0bdf5fd411690a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba64142b9196306ad35a6d525c0bdf5fd411690a"],"ba64142b9196306ad35a6d525c0bdf5fd411690a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","ba64142b9196306ad35a6d525c0bdf5fd411690a"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"ba64142b9196306ad35a6d525c0bdf5fd411690a":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}