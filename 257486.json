{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","commits":[{"id":"cea5f7a2e31566bda38c740c37affa52b0e9c46e","date":1323436632,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(DIH_CONFIG_TAGS_INNER_ENTITY);\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7b3fb9a1e20d461ee060be1429f6809289b1a1e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(DIH_CONFIG_TAGS_INNER_ENTITY);\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity(jetty.getLocalPort()));\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(DIH_CONFIG_TAGS_INNER_ENTITY);\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity(jetty.getLocalPort()));\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(DIH_CONFIG_TAGS_INNER_ENTITY);\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity(jetty.getLocalPort()));\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(DIH_CONFIG_TAGS_INNER_ENTITY);\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fbbf851af229fb91fabc74b799bf3baeb2223ef","date":1355350925,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity(jetty.getLocalPort()));\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity(jetty.getLocalPort()));\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b3fb9a1e20d461ee060be1429f6809289b1a1e5","date":1377688856,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<Map<String,Object>>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<String, Object>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<Map<String,Object>>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<String,Object>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","bugFix":["cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<Map<String,Object>>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<String, Object>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<Map<String,Object>>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<String,Object>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      MockDataSource.setIterator(\"select * from x\", DB_DOCS.iterator());\n      addDocumentsToSolr(SOLR_DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<Map<String,Object>>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<String, Object>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<Map<String,Object>>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<String,Object>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      log.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      log.error(\"Exception running full import\", e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      log.error(e.getMessage(), e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd#testFullImportInnerEntity().mjava","sourceNew":null,"sourceOld":"  /**\n   * Receive a row from SQL (Mock) and fetch a row from Solr\n   */\n  public void testFullImportInnerEntity() {\n    assertQ(req(\"*:*\"), \"//result[@numFound='0']\");\n    \n    try {\n      List<Map<String,Object>> DOCS = new ArrayList<>(DB_DOCS);\n      Map<String, Object> doc = new HashMap<>();\n      doc.put(\"dbid_s\", \"2\");\n      doc.put(\"dbdesc_s\", \"DbDescription2\");\n      DOCS.add(doc);\n      MockDataSource.setIterator(\"select * from x\", DOCS.iterator());\n\n      DOCS = new ArrayList<>(SOLR_DOCS);\n      Map<String,Object> solrDoc = new HashMap<>();\n      solrDoc.put(\"id\", \"2\");\n      solrDoc.put(\"desc\", \"SolrDescription2\");\n      DOCS.add(solrDoc);\n      addDocumentsToSolr(DOCS);\n      runFullImport(getDihConfigTagsInnerEntity());\n    } catch (Exception e) {\n      log.error(\"Exception running full import\", e);\n      fail(e.getMessage());\n    } finally {\n      MockDataSource.clearCache();\n    }\n    \n    assertQ(req(\"*:*\"), \"//result[@numFound='2']\");\n    assertQ(req(\"id:1\"), \"//result/doc/str[@name='id'][.='1']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription']\",\n        \"//result/doc/str[@name='dbid_s'][.='1']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription']\");\n    assertQ(req(\"id:2\"), \"//result/doc/str[@name='id'][.='2']\",\n        \"//result/doc/str[@name='dbdesc_s'][.='DbDescription2']\",\n        \"//result/doc/str[@name='dbid_s'][.='2']\",\n        \"//result/doc/arr[@name='desc'][.='SolrDescription2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","9fbbf851af229fb91fabc74b799bf3baeb2223ef"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7b3fb9a1e20d461ee060be1429f6809289b1a1e5"],"9fbbf851af229fb91fabc74b799bf3baeb2223ef":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["9fbbf851af229fb91fabc74b799bf3baeb2223ef","7b3fb9a1e20d461ee060be1429f6809289b1a1e5"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"7b3fb9a1e20d461ee060be1429f6809289b1a1e5":["9fbbf851af229fb91fabc74b799bf3baeb2223ef"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"9fbbf851af229fb91fabc74b799bf3baeb2223ef":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","7b3fb9a1e20d461ee060be1429f6809289b1a1e5"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"7b3fb9a1e20d461ee060be1429f6809289b1a1e5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9fbbf851af229fb91fabc74b799bf3baeb2223ef","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}