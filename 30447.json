{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","commits":[{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","sourceNew":"  void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletesAndPurge(DocumentsWriter,DocumentsWriterDeleteQueue).mjava","sourceNew":"  void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  void addDeletesAndPurge(DocumentsWriter writer,\n      DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n    // don't hold the lock on the FlushQueue when forcing the purge - this blocks and deadlocks \n    // if we hold the lock.\n    forcePurge(writer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"/dev/null","sourceNew":"  void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8498afacfc8322268ca0d659d274fcce08d557","date":1524577248,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  synchronized void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    incTickets();// first inc the ticket count - freeze opens\n                 // a window for #anyChanges to fail\n    boolean success = false;\n    try {\n      queue.add(new FlushTicket(deleteQueue.freezeGlobalBuffer(null), false));\n      success = true;\n    } finally {\n      if (!success) {\n        decTickets();\n      }\n    }\n  }\n\n","sourceOld":"  void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    synchronized (this) {\n      incTickets();// first inc the ticket count - freeze opens\n                   // a window for #anyChanges to fail\n      boolean success = false;\n      try {\n        queue.add(new GlobalDeletesTicket(deleteQueue.freezeGlobalBuffer(null)));\n        success = true;\n      } finally {\n        if (!success) {\n          decTickets();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34067df01cbbefc83d0b316037fe4e10d89ba6a3","date":1559054674,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  synchronized boolean addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    incTickets();// first inc the ticket count - freeze opens\n                 // a window for #anyChanges to fail\n    boolean success = false;\n    try {\n      FrozenBufferedUpdates frozenBufferedUpdates = deleteQueue.maybeFreezeGlobalBuffer();\n      if (frozenBufferedUpdates != null) { // no need to publish anything if we don't have any frozen updates\n        queue.add(new FlushTicket(frozenBufferedUpdates, false));\n        success = true;\n      }\n    } finally {\n      if (!success) {\n        decTickets();\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  synchronized void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    incTickets();// first inc the ticket count - freeze opens\n                 // a window for #anyChanges to fail\n    boolean success = false;\n    try {\n      queue.add(new FlushTicket(deleteQueue.freezeGlobalBuffer(null), false));\n      success = true;\n    } finally {\n      if (!success) {\n        decTickets();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","date":1559371943,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue#addDeletes(DocumentsWriterDeleteQueue).mjava","sourceNew":"  synchronized boolean addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    incTickets();// first inc the ticket count - freeze opens\n                 // a window for #anyChanges to fail\n    boolean success = false;\n    try {\n      FrozenBufferedUpdates frozenBufferedUpdates = deleteQueue.maybeFreezeGlobalBuffer();\n      if (frozenBufferedUpdates != null) { // no need to publish anything if we don't have any frozen updates\n        queue.add(new FlushTicket(frozenBufferedUpdates, false));\n        success = true;\n      }\n    } finally {\n      if (!success) {\n        decTickets();\n      }\n    }\n    return success;\n  }\n\n","sourceOld":"  synchronized void addDeletes(DocumentsWriterDeleteQueue deleteQueue) throws IOException {\n    incTickets();// first inc the ticket count - freeze opens\n                 // a window for #anyChanges to fail\n    boolean success = false;\n    try {\n      queue.add(new FlushTicket(deleteQueue.freezeGlobalBuffer(null), false));\n      success = true;\n    } finally {\n      if (!success) {\n        decTickets();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7af110b00ea8df9429309d83e38e0533d82e144f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b8498afacfc8322268ca0d659d274fcce08d557":["7af110b00ea8df9429309d83e38e0533d82e144f"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["6b8498afacfc8322268ca0d659d274fcce08d557","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["6b8498afacfc8322268ca0d659d274fcce08d557"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"]},"commit2Childs":{"7af110b00ea8df9429309d83e38e0533d82e144f":["6b8498afacfc8322268ca0d659d274fcce08d557","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"6b8498afacfc8322268ca0d659d274fcce08d557":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}