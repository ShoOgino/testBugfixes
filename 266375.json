{"path":"src/test/org/apache/solr/util/DateMathParserTest#testParseMathExceptions().mjava","commits":[{"id":"183ba46e9837e95333f35c590df5d02d0071c076","date":1164074105,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/util/DateMathParserTest#testParseMathExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseMathExceptions() throws Exception {\n    \n    DateMathParser p = new DateMathParser(UTC, Locale.US);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n    \n    Map<String,Integer> badCommands = new HashMap<String,Integer>();\n    badCommands.put(\"/\", 1);\n    badCommands.put(\"+\", 1);\n    badCommands.put(\"-\", 1);\n    badCommands.put(\"/BOB\", 1);\n    badCommands.put(\"+SECOND\", 1);\n    badCommands.put(\"-2MILLI/\", 4);\n    badCommands.put(\" +BOB\", 0);\n    badCommands.put(\"+2SECONDS \", 3);\n    badCommands.put(\"/4\", 1);\n    badCommands.put(\"?SECONDS\", 0);\n\n    for (String command : badCommands.keySet()) {\n      try {\n        Date out = p.parseMath(command);\n        fail(\"Didn't generate ParseException for: \" + command);\n      } catch (ParseException e) {\n        assertEquals(\"Wrong pos for: \" + command + \" => \" + e.getMessage(),\n                     badCommands.get(command).intValue(), e.getErrorOffset());\n\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/DateMathParserTest#testParseMathExceptions().mjava","pathOld":"src/test/org/apache/solr/util/DateMathParserTest#testParseMathExceptions().mjava","sourceNew":"  public void testParseMathExceptions() throws Exception {\n    \n    DateMathParser p = new DateMathParser(UTC, Locale.US);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n    \n    Map<String,Integer> badCommands = new HashMap<String,Integer>();\n    badCommands.put(\"/\", 1);\n    badCommands.put(\"+\", 1);\n    badCommands.put(\"-\", 1);\n    badCommands.put(\"/BOB\", 1);\n    badCommands.put(\"+SECOND\", 1);\n    badCommands.put(\"-2MILLI/\", 4);\n    badCommands.put(\" +BOB\", 0);\n    badCommands.put(\"+2SECONDS \", 3);\n    badCommands.put(\"/4\", 1);\n    badCommands.put(\"?SECONDS\", 0);\n\n    for (String command : badCommands.keySet()) {\n      try {\n        Date out = p.parseMath(command);\n        fail(\"Didn't generate ParseException for: \" + command);\n      } catch (ParseException e) {\n        assertEquals(\"Wrong pos for: \" + command + \" => \" + e.getMessage(),\n                     badCommands.get(command).intValue(), e.getErrorOffset());\n\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void testParseMathExceptions() throws Exception {\n    \n    DateMathParser p = new DateMathParser(UTC, Locale.US);\n    p.setNow(parser.parse(\"2001-07-04T12:08:56.235\"));\n    \n    Map<String,Integer> badCommands = new HashMap<String,Integer>();\n    badCommands.put(\"/\", 1);\n    badCommands.put(\"+\", 1);\n    badCommands.put(\"-\", 1);\n    badCommands.put(\"/BOB\", 1);\n    badCommands.put(\"+SECOND\", 1);\n    badCommands.put(\"-2MILLI/\", 4);\n    badCommands.put(\" +BOB\", 0);\n    badCommands.put(\"+2SECONDS \", 3);\n    badCommands.put(\"/4\", 1);\n    badCommands.put(\"?SECONDS\", 0);\n\n    for (String command : badCommands.keySet()) {\n      try {\n        Date out = p.parseMath(command);\n        fail(\"Didn't generate ParseException for: \" + command);\n      } catch (ParseException e) {\n        assertEquals(\"Wrong pos for: \" + command + \" => \" + e.getMessage(),\n                     badCommands.get(command).intValue(), e.getErrorOffset());\n\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"183ba46e9837e95333f35c590df5d02d0071c076":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["183ba46e9837e95333f35c590df5d02d0071c076"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"183ba46e9837e95333f35c590df5d02d0071c076":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["183ba46e9837e95333f35c590df5d02d0071c076"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}