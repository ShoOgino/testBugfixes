{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: reader=\" + reader);\n    }\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}