{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxInternal(boolean).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxInternal(boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxInternal(double,double,double,double,boolean).mjava","sourceNew":"  private static Rectangle nextBoxInternal(boolean canCrossDateLine) {\n    // prevent lines instead of boxes\n    double lat0 = nextLatitude();\n    double lat1 = nextLatitude();\n    while (lat0 == lat1) {\n      lat1 = nextLatitude();\n    }\n    // prevent lines instead of boxes\n    double lon0 = nextLongitude();\n    double lon1 = nextLongitude();\n    while (lon0 == lon1) {\n      lon1 = nextLongitude();\n    }\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new Rectangle(lat0, lat1, lon0, lon1);\n  }\n\n","sourceOld":"  private static Rectangle nextBoxInternal(double lat0, double lat1, double lon0, double lon1, boolean canCrossDateLine) {\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new Rectangle(lat0, lat1, lon0, lon1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxInternal(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static Rectangle nextBoxInternal(boolean canCrossDateLine) {\n    // prevent lines instead of boxes\n    double lat0 = nextLatitude();\n    double lat1 = nextLatitude();\n    while (lat0 == lat1) {\n      lat1 = nextLatitude();\n    }\n    // prevent lines instead of boxes\n    double lon0 = nextLongitude();\n    double lon1 = nextLongitude();\n    while (lon0 == lon1) {\n      lon1 = nextLongitude();\n    }\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new Rectangle(lat0, lat1, lon0, lon1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/GeoTestUtil#nextBoxInternal(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static Rectangle nextBoxInternal(boolean canCrossDateLine) {\n    // prevent lines instead of boxes\n    double lat0 = nextLatitude();\n    double lat1 = nextLatitude();\n    while (lat0 == lat1) {\n      lat1 = nextLatitude();\n    }\n    // prevent lines instead of boxes\n    double lon0 = nextLongitude();\n    double lon1 = nextLongitude();\n    while (lon0 == lon1) {\n      lon1 = nextLongitude();\n    }\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new Rectangle(lat0, lat1, lon0, lon1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}