{"path":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ab129f02d1eab2dd2407cfe612f47affe88803","date":1360701006,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.DEFAULT);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.DEFAULT);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.ALL_PARENTS);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new FacetLabel(\"a\"), 10),\n              new CountFacetRequest(new FacetLabel(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.DEFAULT);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.DEFAULT);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":null,"sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new FacetLabel(\"a\"), 10),\n              new CountFacetRequest(new FacetLabel(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.DEFAULT);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestTotalFacetCountsCache#doTestGeneralSynchronization(int,int,int).mjava","sourceNew":null,"sourceOld":"  private void doTestGeneralSynchronization(int numThreads, int sleepMillis, int cacheSize) throws Exception {\n    TFC.setCacheSize(cacheSize);\n    SlowRAMDirectory slowIndexDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper indexDir = new MockDirectoryWrapper(random(), slowIndexDir);\n    SlowRAMDirectory slowTaxoDir = new SlowRAMDirectory(-1, random());\n    MockDirectoryWrapper taxoDir = new MockDirectoryWrapper(random(), slowTaxoDir);\n\n    // Index documents without the \"slowness\"\n    index(indexDir, taxoDir);\n\n    slowIndexDir.setSleepMillis(sleepMillis);\n    slowTaxoDir.setSleepMillis(sleepMillis);\n    \n    // Open the slow readers\n    IndexReader slowIndexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader slowTaxoReader = new DirectoryTaxonomyReader(taxoDir);\n\n    // Class to perform search and return results as threads\n    class Multi extends Thread {\n      private List<FacetResult> results;\n      private FacetIndexingParams iParams;\n      private IndexReader indexReader;\n      private TaxonomyReader taxoReader;\n\n      public Multi(IndexReader indexReader, TaxonomyReader taxoReader, FacetIndexingParams iParams) {\n        this.indexReader = indexReader;\n        this.taxoReader = taxoReader;\n        this.iParams = iParams;\n      }\n\n      public List<FacetResult> getResults() {\n        return results;\n      }\n\n      @Override\n      public void run() {\n        try {\n          FacetSearchParams fsp = new FacetSearchParams(iParams, new CountFacetRequest(new CategoryPath(\"a\"), 10),\n              new CountFacetRequest(new CategoryPath(\"b\"), 10));\n          IndexSearcher searcher = new IndexSearcher(indexReader);\n          FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n          searcher.search(new MatchAllDocsQuery(), fc);\n          results = fc.getFacetResults();\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    Multi[] multis = new Multi[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n      multis[i] = new Multi(slowIndexReader, slowTaxoReader, FacetIndexingParams.DEFAULT);\n    }\n\n    for (Multi m : multis) {\n      m.start();\n    }\n\n    // Wait for threads and get results\n    String[] expLabelsA = new String[] { \"a/d\", \"a/e\", \"a/b\" };\n    String[] expLabelsB = new String[] { \"b/c\", \"b/a\" };\n    for (Multi m : multis) {\n      m.join();\n      List<FacetResult> facetResults = m.getResults();\n      assertEquals(\"expected two results\", 2, facetResults.size());\n      \n      FacetResultNode nodeA = facetResults.get(0).getFacetResultNode();\n      int i = 0;\n      for (FacetResultNode node : nodeA.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsA[i++], node.label.toString('/'));\n      }\n      \n      FacetResultNode nodeB = facetResults.get(1).getFacetResultNode();\n      i = 0;\n      for (FacetResultNode node : nodeB.subResults) {\n        assertEquals(\"wrong count\", 1, (int) node.value);\n        assertEquals(expLabelsB[i++], node.label.toString('/'));\n      }\n    }\n    \n    IOUtils.close(slowIndexReader, slowTaxoReader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["607428da722dcb3e86bbd11c63de8986e6275c36","68ab129f02d1eab2dd2407cfe612f47affe88803"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68ab129f02d1eab2dd2407cfe612f47affe88803":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["68ab129f02d1eab2dd2407cfe612f47affe88803","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["68ab129f02d1eab2dd2407cfe612f47affe88803"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","68ab129f02d1eab2dd2407cfe612f47affe88803"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"68ab129f02d1eab2dd2407cfe612f47affe88803":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}