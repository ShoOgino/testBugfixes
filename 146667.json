{"path":"lucene/src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuilder sb = new StringBuilder(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuilder sb = new StringBuilder(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuilder sb = new StringBuilder(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuilder sb = new StringBuilder(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuilder sb = new StringBuilder(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}