{"path":"solr/core/src/java/org/apache/solr/search/PayloadCheckQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"03d1c7f08294f7d7e9ecf082aa1459f38d77f277","date":1493688929,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadCheckQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String p = localParams.get(\"payloads\");\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        if (p == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'payloads' not specified\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = PayloadUtils.createSpanQuery(field, value, analyzer);\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        PayloadEncoder encoder = null;\n        String e = PayloadUtils.getPayloadEncoder(ft);\n        if (\"float\".equals(e)) {    // TODO: centralize this string->PayloadEncoder logic (see DelimitedPayloadTokenFilterFactory)\n          encoder = new FloatEncoder();\n        } else if (\"integer\".equals(e)) {\n          encoder = new IntegerEncoder();\n        } else if (\"identity\".equals(e)) {\n          encoder = new IdentityEncoder();\n        }\n\n        if (encoder == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid encoder: \" + e + \" for field: \" + field);\n        }\n\n        List<BytesRef> payloads = new ArrayList<>();\n        String[] rawPayloads = p.split(\" \");  // since payloads (most likely) came in whitespace delimited, just split\n        for (String rawPayload : rawPayloads) {\n          if (rawPayload.length() > 0)\n            payloads.add(encoder.encode(rawPayload.toCharArray()));\n        }\n\n        return new SpanPayloadCheckQuery(query, payloads);\n      }\n    };\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21981d1c6aa8bd30a5fd577cdcda7700aebabc88","date":1493768484,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadCheckQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PayloadCheckQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String p = localParams.get(\"payloads\");\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        if (p == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'payloads' not specified\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = null;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        PayloadEncoder encoder = null;\n        String e = PayloadUtils.getPayloadEncoder(ft);\n        if (\"float\".equals(e)) {    // TODO: centralize this string->PayloadEncoder logic (see DelimitedPayloadTokenFilterFactory)\n          encoder = new FloatEncoder();\n        } else if (\"integer\".equals(e)) {\n          encoder = new IntegerEncoder();\n        } else if (\"identity\".equals(e)) {\n          encoder = new IdentityEncoder();\n        }\n\n        if (encoder == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid encoder: \" + e + \" for field: \" + field);\n        }\n\n        List<BytesRef> payloads = new ArrayList<>();\n        String[] rawPayloads = p.split(\" \");  // since payloads (most likely) came in whitespace delimited, just split\n        for (String rawPayload : rawPayloads) {\n          if (rawPayload.length() > 0)\n            payloads.add(encoder.encode(rawPayload.toCharArray()));\n        }\n\n        return new SpanPayloadCheckQuery(query, payloads);\n      }\n    };\n\n\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String p = localParams.get(\"payloads\");\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        if (p == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'payloads' not specified\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = PayloadUtils.createSpanQuery(field, value, analyzer);\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        PayloadEncoder encoder = null;\n        String e = PayloadUtils.getPayloadEncoder(ft);\n        if (\"float\".equals(e)) {    // TODO: centralize this string->PayloadEncoder logic (see DelimitedPayloadTokenFilterFactory)\n          encoder = new FloatEncoder();\n        } else if (\"integer\".equals(e)) {\n          encoder = new IntegerEncoder();\n        } else if (\"identity\".equals(e)) {\n          encoder = new IdentityEncoder();\n        }\n\n        if (encoder == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid encoder: \" + e + \" for field: \" + field);\n        }\n\n        List<BytesRef> payloads = new ArrayList<>();\n        String[] rawPayloads = p.split(\" \");  // since payloads (most likely) came in whitespace delimited, just split\n        for (String rawPayload : rawPayloads) {\n          if (rawPayload.length() > 0)\n            payloads.add(encoder.encode(rawPayload.toCharArray()));\n        }\n\n        return new SpanPayloadCheckQuery(query, payloads);\n      }\n    };\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadCheckQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String p = localParams.get(\"payloads\");\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        if (p == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'payloads' not specified\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = null;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        PayloadEncoder encoder = null;\n        String e = PayloadUtils.getPayloadEncoder(ft);\n        if (\"float\".equals(e)) {    // TODO: centralize this string->PayloadEncoder logic (see DelimitedPayloadTokenFilterFactory)\n          encoder = new FloatEncoder();\n        } else if (\"integer\".equals(e)) {\n          encoder = new IntegerEncoder();\n        } else if (\"identity\".equals(e)) {\n          encoder = new IdentityEncoder();\n        }\n\n        if (encoder == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"invalid encoder: \" + e + \" for field: \" + field);\n        }\n\n        List<BytesRef> payloads = new ArrayList<>();\n        String[] rawPayloads = p.split(\" \");  // since payloads (most likely) came in whitespace delimited, just split\n        for (String rawPayload : rawPayloads) {\n          if (rawPayload.length() > 0)\n            payloads.add(encoder.encode(rawPayload.toCharArray()));\n        }\n\n        return new SpanPayloadCheckQuery(query, payloads);\n      }\n    };\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21981d1c6aa8bd30a5fd577cdcda7700aebabc88"],"21981d1c6aa8bd30a5fd577cdcda7700aebabc88":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["21981d1c6aa8bd30a5fd577cdcda7700aebabc88"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"21981d1c6aa8bd30a5fd577cdcda7700aebabc88":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["21981d1c6aa8bd30a5fd577cdcda7700aebabc88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}