{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","commits":[{"id":"adde4ed7da03e734626803a3802e6cf88b77a2e7","date":1312961672,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","pathOld":"/dev/null","sourceNew":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir, true);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","sourceNew":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","sourceOld":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir, true);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","sourceNew":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","sourceOld":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir, true);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","sourceNew":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","sourceOld":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir, true);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testOpenTwoIndexWritersOnDifferentThreads().mjava","sourceNew":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","sourceOld":"  //  LUCENE-3365: Test adding two documents with the same field from two different IndexWriters \n  //  that we attempt to open at the same time.  As long as the first IndexWriter completes\n  //  and closes before the second IndexWriter time's out trying to get the Lock,\n  //  we should see both documents\n  public void testOpenTwoIndexWritersOnDifferentThreads() throws IOException, InterruptedException {\n     final MockDirectoryWrapper dir = newDirectory();\n     CountDownLatch oneIWConstructed = new CountDownLatch(1);\n     DelayedIndexAndCloseRunnable thread1 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n     DelayedIndexAndCloseRunnable thread2 = new DelayedIndexAndCloseRunnable(\n         dir, oneIWConstructed);\n\n     thread1.start();\n     thread2.start();\n     oneIWConstructed.await();\n\n     thread1.startIndexing();\n     thread2.startIndexing();\n\n     thread1.join();\n     thread2.join();\n     \n     assertFalse(\"Failed due to: \" + thread1.failure, thread1.failed);\n     assertFalse(\"Failed due to: \" + thread2.failure, thread2.failed);\n     // now verify that we have two documents in the index\n     IndexReader reader = IndexReader.open(dir);\n     assertEquals(\"IndexReader should have one document per thread running\", 2,\n         reader.numDocs());\n     \n     reader.close();\n     dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"adde4ed7da03e734626803a3802e6cf88b77a2e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["adde4ed7da03e734626803a3802e6cf88b77a2e7","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["adde4ed7da03e734626803a3802e6cf88b77a2e7","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["adde4ed7da03e734626803a3802e6cf88b77a2e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"adde4ed7da03e734626803a3802e6cf88b77a2e7":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["adde4ed7da03e734626803a3802e6cf88b77a2e7"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}