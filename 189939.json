{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","commits":[{"id":"36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1","date":1369336666,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","pathOld":"/dev/null","sourceNew":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + \"the_core_collection\";\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","date":1391252295,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","sourceNew":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + \"the_core_collection\";\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      server.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","sourceOld":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + \"the_core_collection\";\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","sourceNew":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      server.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","sourceOld":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + \"the_core_collection\";\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      server.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","sourceNew":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      server.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","sourceOld":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = dataDir.getAbsolutePath() + File.separator\n        + System.currentTimeMillis() + \"the_core_collection\";\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      server.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","sourceNew":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      server.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","sourceOld":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      server.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","sourceNew":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrClient client = new HttpSolrClient(url);\n    try {\n      client.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      client.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","sourceOld":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrServer server = new HttpSolrServer(url);\n    try {\n      server.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      server.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","sourceNew":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    try (final HttpSolrClient client = new HttpSolrClient(url)) {\n      client.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","sourceOld":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    final HttpSolrClient client = new HttpSolrClient(url);\n    try {\n      client.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    } finally {\n      client.shutdown();\n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","sourceNew":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    try (final HttpSolrClient client = new HttpSolrClient(url)) {\n      client.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    }\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout.hasTimedOut()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","sourceOld":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    try (final HttpSolrClient client = new HttpSolrClient(url)) {\n      client.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    }\n    \n    long timeout = System.currentTimeMillis() + 15000;\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout <= System.currentTimeMillis()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"175a04d27a2b736171e7e51ca46a03b2aec094d4","date":1452534768,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testFailedCoreCreateCleansUp().mjava","sourceNew":null,"sourceOld":"  private void testFailedCoreCreateCleansUp() throws Exception {\n    Create createCmd = new Create();\n    createCmd.setCoreName(\"core1\");\n    createCmd.setCollection(\"the_core_collection\");\n    String coredataDir = createTempDir().toFile().getAbsolutePath();\n    createCmd.setDataDir(coredataDir);\n    createCmd.setNumShards(1);\n    createCmd.setSchemaName(\"nonexistent_schema.xml\");\n    \n    String url = getBaseUrl(clients.get(0));\n    try (final HttpSolrClient client = new HttpSolrClient(url)) {\n      client.request(createCmd);\n      fail(\"Expected SolrCore create to fail\");\n    } catch (Exception e) {\n      \n    }\n\n    TimeOut timeout = new TimeOut(15, TimeUnit.SECONDS);\n    while (cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true)) {\n      if (timeout.hasTimedOut()) {\n        fail(cloudClient.getZkStateReader().getZkClient().getChildren(\"/collections\", null, true).toString() + \" Collection zk node still exists\");\n      }\n      Thread.sleep(100);\n    }\n    \n    \n    assertFalse(\"Collection zk node still exists\", cloudClient.getZkStateReader().getZkClient().exists(\"/collections/the_core_collection\", true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["175a04d27a2b736171e7e51ca46a03b2aec094d4"]},"commit2Childs":{"7ea7454b4afcb5dc9f7504f83d77b134df2b7c57":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f2b01395ef2bc334ebf2f94f2fe44e0f2921b1":["7ea7454b4afcb5dc9f7504f83d77b134df2b7c57"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}