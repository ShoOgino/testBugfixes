{"path":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","pathOld":"sandbox/contributions/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","sourceNew":"    private void addwords (IndexReader r, String field) throws IOException {\n        long time=System.currentTimeMillis();\n        spellChecker.indexDictionnary(new LuceneDictionary(r, field));\n        time=System.currentTimeMillis()-time;\n        System.out.println(\"time to build \"+field+\": \"+time);\n    }\n\n","sourceOld":"    private void addwords (IndexReader r, String field) throws IOException {\n        long time=System.currentTimeMillis();\n        spellChecker.indexDictionnary(new LuceneDictionary(r, field));\n        time=System.currentTimeMillis()-time;\n        System.out.println(\"time to build \"+field+\": \"+time);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a614b98c1cfd216f3f63751e3ae13364a3bb2810","date":1113263282,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","sourceNew":"  private void addwords(IndexReader r, String field) throws IOException {\n    long time = System.currentTimeMillis();\n    spellChecker.indexDictionnary(new LuceneDictionary(r, field));\n    time = System.currentTimeMillis() - time;\n    System.out.println(\"time to build \" + field + \": \" + time);\n  }\n\n","sourceOld":"    private void addwords (IndexReader r, String field) throws IOException {\n        long time=System.currentTimeMillis();\n        spellChecker.indexDictionnary(new LuceneDictionary(r, field));\n        time=System.currentTimeMillis()-time;\n        System.out.println(\"time to build \"+field+\": \"+time);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49bc77405d3c80cb8b2a22edfe7c769dca9c7a13","date":1113264693,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","sourceNew":"  private void addwords(IndexReader r, String field) throws IOException {\n    long time = System.currentTimeMillis();\n    spellChecker.indexDictionary(new LuceneDictionary(r, field));\n    time = System.currentTimeMillis() - time;\n    System.out.println(\"time to build \" + field + \": \" + time);\n  }\n\n","sourceOld":"  private void addwords(IndexReader r, String field) throws IOException {\n    long time = System.currentTimeMillis();\n    spellChecker.indexDictionnary(new LuceneDictionary(r, field));\n    time = System.currentTimeMillis() - time;\n    System.out.println(\"time to build \" + field + \": \" + time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9e55f1144a02aa9e891161b50c49a9911b58ac","date":1138468924,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","sourceNew":"  private void addwords(IndexReader r, String field) throws IOException {\n    long time = System.currentTimeMillis();\n    spellChecker.indexDictionary(new LuceneDictionary(r, field));\n    time = System.currentTimeMillis() - time;\n    //System.out.println(\"time to build \" + field + \": \" + time);\n  }\n\n","sourceOld":"  private void addwords(IndexReader r, String field) throws IOException {\n    long time = System.currentTimeMillis();\n    spellChecker.indexDictionary(new LuceneDictionary(r, field));\n    time = System.currentTimeMillis() - time;\n    System.out.println(\"time to build \" + field + \": \" + time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestSpellChecker#addwords(IndexReader,String).mjava","sourceNew":"  private void addwords(IndexReader r, String field) throws IOException {\n    long time = System.currentTimeMillis();\n    spellChecker.indexDictionary(new LuceneDictionary(r, field));\n    time = System.currentTimeMillis() - time;\n    //System.out.println(\"time to build \" + field + \": \" + time);\n  }\n\n","sourceOld":"  private void addwords(IndexReader r, String field) throws IOException {\n    long time = System.currentTimeMillis();\n    spellChecker.indexDictionary(new LuceneDictionary(r, field));\n    time = System.currentTimeMillis() - time;\n    //System.out.println(\"time to build \" + field + \": \" + time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"49bc77405d3c80cb8b2a22edfe7c769dca9c7a13":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"1f9e55f1144a02aa9e891161b50c49a9911b58ac":["49bc77405d3c80cb8b2a22edfe7c769dca9c7a13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f9e55f1144a02aa9e891161b50c49a9911b58ac"]},"commit2Childs":{"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["49bc77405d3c80cb8b2a22edfe7c769dca9c7a13"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"49bc77405d3c80cb8b2a22edfe7c769dca9c7a13":["1f9e55f1144a02aa9e891161b50c49a9911b58ac"],"1f9e55f1144a02aa9e891161b50c49a9911b58ac":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}