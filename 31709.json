{"path":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","commits":[{"id":"8fe3c163c8df3fb3e4248c30f8ae8034cc786589","date":1189317596,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,SolrConfig,IndexSchema).mjava","sourceNew":"   /**\n    * @param name the core name\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param schema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"   /**\n    * @param name the core name\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param schema schema instance\n    */\n  public TestHarness(String name,\n                      String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore(name, dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e","date":1190668853,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","sourceNew":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"   /**\n    * @param name the core name\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param schema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","sourceNew":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( \"test-\"+System.currentTimeMillis(), dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b46f0ccfb6b63c307ea901d48482630e3689042c","date":1198805331,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","sourceNew":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( null, dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( \"test-\"+System.currentTimeMillis(), dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5151046764fb8d9662e02d6c5381b2adb69f96d","date":1216394962,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","sourceNew":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( null, dataDirectory, solrConfig, indexSchema, null);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( null, dataDirectory, solrConfig, indexSchema);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","sourceNew":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n      this(\"\", new Initializer(\"\", dataDirectory, solrConfig, indexSchema));\n  }\n\n","sourceOld":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n    try {\n      core = new SolrCore( null, dataDirectory, solrConfig, indexSchema, null);\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["d5151046764fb8d9662e02d6c5381b2adb69f96d","6d6338c87060be5f66757a94945975f3bbd377a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,SolrConfig,IndexSchema).mjava","sourceNew":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n      this(\"\", new Initializer(\"\", dataDirectory, solrConfig, indexSchema));\n  }\n\n","sourceOld":"   /**\n    * @param dataDirectory path for index data, will not be cleaned up\n    * @param solrConfig solrconfig instance\n    * @param indexSchema schema instance\n    */\n  public TestHarness( String dataDirectory,\n                      SolrConfig solrConfig,\n                      IndexSchema indexSchema) {\n      this(\"\", new Initializer(\"\", dataDirectory, solrConfig, indexSchema));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5151046764fb8d9662e02d6c5381b2adb69f96d":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["c0af8df23c8bf16151f1911c8ad7e2bd21386b1e"],"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e":["8fe3c163c8df3fb3e4248c30f8ae8034cc786589"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe3c163c8df3fb3e4248c30f8ae8034cc786589":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["d5151046764fb8d9662e02d6c5381b2adb69f96d"],"ad94625fb8d088209f46650c8097196fec67f00c":["c28792ff7d1774c306e16afbd44ded91a417049b"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d5151046764fb8d9662e02d6c5381b2adb69f96d":["c28792ff7d1774c306e16afbd44ded91a417049b"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"8fe3c163c8df3fb3e4248c30f8ae8034cc786589":["c0af8df23c8bf16151f1911c8ad7e2bd21386b1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8fe3c163c8df3fb3e4248c30f8ae8034cc786589"],"c28792ff7d1774c306e16afbd44ded91a417049b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b46f0ccfb6b63c307ea901d48482630e3689042c":["d5151046764fb8d9662e02d6c5381b2adb69f96d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}