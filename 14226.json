{"path":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","commits":[{"id":"a05ba0a6bd886c85c738ed2529954ff8c3ba5c06","date":1296256368,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositons().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositons() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newInOrderLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newInOrderLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newInOrderLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newInOrderLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newInOrderLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newInOrderLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(\n            MockTokenizer.WHITESPACE, true, usePayload)).setMergePolicy(newInOrderLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) + \" usePayloads: \"\n                + usePayload, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = TEST_NIGHTLY ? 131 : 47;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = TEST_NIGHTLY ? 3049 : 499;\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13) * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = TEST_NIGHTLY ? 131 : 47;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = TEST_NIGHTLY ? 3049 : 499;\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13) * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = TEST_NIGHTLY ? 131 : 47;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = TEST_NIGHTLY ? 3049 : 131;\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13) * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = TEST_NIGHTLY ? 131 : 47;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = TEST_NIGHTLY ? 3049 : 499;\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13) * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = TEST_NIGHTLY ? 131 : 47;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = TEST_NIGHTLY ? 3049 : 131;\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13) * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = 131;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 3049; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(3049);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.YES,\n          Field.Index.ANALYZED));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < 39 * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = TEST_NIGHTLY ? 131 : 47;\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = TEST_NIGHTLY ? 3049 : 499;\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13) * RANDOM_MULTIPLIER; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), Field.Store.NO,\n          Field.Index.ANALYZED_NO_NORMS));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      ReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader, bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader.maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocsAndPositions#testRandomPositions().mjava","sourceNew":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * this test indexes random numbers within a range into a field and checks\n   * their occurrences by searching for a number from that range selected at\n   * random. All positions for that number are saved up front and compared to\n   * the enums positions.\n   */\n  public void testRandomPositions() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    int numDocs = atLeast(47);\n    int max = 1051;\n    int term = random.nextInt(max);\n    Integer[][] positionsInDoc = new Integer[numDocs][];\n    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n    customType.setOmitNorms(true);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      ArrayList<Integer> positions = new ArrayList<Integer>();\n      StringBuilder builder = new StringBuilder();\n      int num = atLeast(131);\n      for (int j = 0; j < num; j++) {\n        int nextInt = random.nextInt(max);\n        builder.append(nextInt).append(\" \");\n        if (nextInt == term) {\n          positions.add(Integer.valueOf(j));\n        }\n      }\n      if (positions.size() == 0) {\n        builder.append(term);\n        positions.add(num);\n      }\n      doc.add(newField(fieldName, builder.toString(), customType));\n      positionsInDoc[i] = positions.toArray(new Integer[0]);\n      writer.addDocument(doc);\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int num = atLeast(13);\n    for (int i = 0; i < num; i++) {\n      BytesRef bytes = new BytesRef(\"\" + term);\n      IndexReaderContext topReaderContext = reader.getTopReaderContext();\n      AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n      for (AtomicReaderContext atomicReaderContext : leaves) {\n        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(\n            atomicReaderContext.reader(), bytes, null);\n        assertNotNull(docsAndPosEnum);\n        int initDoc = 0;\n        int maxDoc = atomicReaderContext.reader().maxDoc();\n        // initially advance or do next doc\n        if (random.nextBoolean()) {\n          initDoc = docsAndPosEnum.nextDoc();\n        } else {\n          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));\n        }\n        // now run through the scorer and check if all positions are there...\n        do {\n          int docID = docsAndPosEnum.docID();\n          if (docID == DocsAndPositionsEnum.NO_MORE_DOCS) {\n            break;\n          }\n          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];\n          assertEquals(pos.length, docsAndPosEnum.freq());\n          // number of positions read should be random - don't read all of them\n          // allways\n          final int howMany = random.nextInt(20) == 0 ? pos.length\n              - random.nextInt(pos.length) : pos.length;\n          for (int j = 0; j < howMany; j++) {\n            assertEquals(\"iteration: \" + i + \" initDoc: \" + initDoc + \" doc: \"\n                + docID + \" base: \" + atomicReaderContext.docBase\n                + \" positions: \" + Arrays.toString(pos) /* TODO: + \" usePayloads: \"\n                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());\n          }\n\n          if (random.nextInt(10) == 0) { // once is a while advance\n            docsAndPosEnum\n                .advance(docID + 1 + random.nextInt((maxDoc - docID)));\n          }\n\n        } while (docsAndPosEnum.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS);\n      }\n\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["868186558eb3a854ce7e720a52bb445795d54910"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","0762b640e0d0d12b6edb96db68986e13145c3484"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"0762b640e0d0d12b6edb96db68986e13145c3484":["cca56866c19997e28ef073622656669c15210540"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a05ba0a6bd886c85c738ed2529954ff8c3ba5c06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a05ba0a6bd886c85c738ed2529954ff8c3ba5c06"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1509f151d7692d84fae414b2b799ac06ba60fcb4","8493985e6883b3fa8231d172694d2aa3a85cb182"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0762b640e0d0d12b6edb96db68986e13145c3484"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0762b640e0d0d12b6edb96db68986e13145c3484"],"cca56866c19997e28ef073622656669c15210540":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"868186558eb3a854ce7e720a52bb445795d54910":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","cca56866c19997e28ef073622656669c15210540"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a05ba0a6bd886c85c738ed2529954ff8c3ba5c06":["c19f985e36a65cc969e8e564fe337a0d41512075"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05ba0a6bd886c85c738ed2529954ff8c3ba5c06","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["5cab9a86bd67202d20b6adc463008c8e982b070a","868186558eb3a854ce7e720a52bb445795d54910"],"cca56866c19997e28ef073622656669c15210540":["0762b640e0d0d12b6edb96db68986e13145c3484"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"868186558eb3a854ce7e720a52bb445795d54910":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}