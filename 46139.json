{"path":"src/java/org/apache/solr/handler/component/QueryComponent#comparatorString(IndexReader,String).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#comparatorString(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3da65606b2cf2b2357063f779126d1521733034","date":1249401214,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#comparatorString(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing strings.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg string values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorString (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    final FieldCache.StringIndex index = FieldCache.DEFAULT.getStringIndex (reader, field);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final int fi = index.order[i.doc];\n        final int fj = index.order[j.doc];\n        if (fi < fj) return -1;\n        if (fi > fj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return index.lookup[index.order[i.doc]];\n      }\n\n      public int sortType() {\n        return SortField.STRING;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"c3da65606b2cf2b2357063f779126d1521733034":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["c3da65606b2cf2b2357063f779126d1521733034"],"c3da65606b2cf2b2357063f779126d1521733034":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3da65606b2cf2b2357063f779126d1521733034","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}