{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","commits":[{"id":"da47a1f45f2abb37566ea2df3253436a04f5e6fe","date":1446815076,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testSparseLongValues() {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final long[] docIds = new long[numDocs];\n      final long[] values = new long[numDocs];\n      final long maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseBits liveBits = new SparseBits(maxDoc, numDocs, docIdsValues);\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final long docId = TestUtil.nextLong(random(), 0, maxDoc - 1);\n        final boolean exists = liveBits.get(Math.toIntExact(docId));\n        assertEquals(Arrays.binarySearch(docIds, docId) >= 0, exists);\n      }\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final boolean exists = liveBits.get(Math.toIntExact(docId));\n        assertEquals(Arrays.binarySearch(docIds, docId) >= 0, exists);\n      }\n\n      final SparseLongValues sparseValues = new SparseLongValues(liveBits, valuesValues, missingValue);\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final long docId = TestUtil.nextLong(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = sparseValues.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = sparseValues.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9abf8f0376991d8b97ef287f53f330a54bdbdb66","date":1475480039,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","sourceNew":"  public void testSparseLongValues() throws IOException {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final int[] docIds = new int[numDocs];\n      final long[] values = new long[numDocs];\n      final int maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseNumericDocValues sparseValues = new SparseNumericDocValues(numDocs, docIdsValues, valuesValues);\n\n      // sequential access\n      assertEquals(-1, sparseValues.docID());\n      for (int i = 0; i < docIds.length; ++i) {\n        assertEquals(docIds[i], sparseValues.nextDoc());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.nextDoc());\n\n      // advance\n      for (int i = 0; i < 2000; ++i) {\n        final int target = TestUtil.nextInt(random(), 0, (int) maxDoc);\n        int index = Arrays.binarySearch(docIds, target);\n        if (index < 0) {\n          index = -1 - index;\n        }\n        sparseValues.reset();\n        if (index > 0) {\n          assertEquals(docIds[index - 1], sparseValues.advance(Math.toIntExact(docIds[index - 1])));\n        }\n        if (index == docIds.length) {\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.advance(target));\n        } else {\n          assertEquals(docIds[index], sparseValues.advance(target));\n        }\n      }\n\n      final SparseNumericDocValuesRandomAccessWrapper raWrapper = new SparseNumericDocValuesRandomAccessWrapper(sparseValues, missingValue);\n\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final int docId = TestUtil.nextInt(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSparseLongValues() {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final long[] docIds = new long[numDocs];\n      final long[] values = new long[numDocs];\n      final long maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseBits liveBits = new SparseBits(maxDoc, numDocs, docIdsValues);\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final long docId = TestUtil.nextLong(random(), 0, maxDoc - 1);\n        final boolean exists = liveBits.get(Math.toIntExact(docId));\n        assertEquals(Arrays.binarySearch(docIds, docId) >= 0, exists);\n      }\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final boolean exists = liveBits.get(Math.toIntExact(docId));\n        assertEquals(Arrays.binarySearch(docIds, docId) >= 0, exists);\n      }\n\n      final SparseLongValues sparseValues = new SparseLongValues(liveBits, valuesValues, missingValue);\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final long docId = TestUtil.nextLong(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = sparseValues.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = sparseValues.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3607fe579ac3eb5d35b8dc39dffa376491f417f0","date":1475480207,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","sourceNew":"  public void testSparseLongValues() throws IOException {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final int[] docIds = new int[numDocs];\n      final long[] values = new long[numDocs];\n      final int maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseNumericDocValues sparseValues = new SparseNumericDocValues(numDocs, docIdsValues, valuesValues);\n\n      // sequential access\n      assertEquals(-1, sparseValues.docID());\n      for (int i = 0; i < docIds.length; ++i) {\n        assertEquals(docIds[i], sparseValues.nextDoc());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.nextDoc());\n\n      // advance\n      for (int i = 0; i < 2000; ++i) {\n        final int target = TestUtil.nextInt(random(), 0, (int) maxDoc);\n        int index = Arrays.binarySearch(docIds, target);\n        if (index < 0) {\n          index = -1 - index;\n        }\n        sparseValues.reset();\n        if (index > 0) {\n          assertEquals(docIds[index - 1], sparseValues.advance(Math.toIntExact(docIds[index - 1])));\n        }\n        if (index == docIds.length) {\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.advance(target));\n        } else {\n          assertEquals(docIds[index], sparseValues.advance(target));\n        }\n      }\n\n      final SparseNumericDocValuesRandomAccessWrapper raWrapper = new SparseNumericDocValuesRandomAccessWrapper(sparseValues, missingValue);\n\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final int docId = TestUtil.nextInt(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSparseLongValues() {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final long[] docIds = new long[numDocs];\n      final long[] values = new long[numDocs];\n      final long maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseBits liveBits = new SparseBits(maxDoc, numDocs, docIdsValues);\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final long docId = TestUtil.nextLong(random(), 0, maxDoc - 1);\n        final boolean exists = liveBits.get(Math.toIntExact(docId));\n        assertEquals(Arrays.binarySearch(docIds, docId) >= 0, exists);\n      }\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final boolean exists = liveBits.get(Math.toIntExact(docId));\n        assertEquals(Arrays.binarySearch(docIds, docId) >= 0, exists);\n      }\n\n      final SparseLongValues sparseValues = new SparseLongValues(liveBits, valuesValues, missingValue);\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final long docId = TestUtil.nextLong(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = sparseValues.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = sparseValues.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f51f35af88e3b033215720b4201d06211d56d022","date":1475662416,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","sourceNew":"  public void testSparseLongValues() throws IOException {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final int[] docIds = new int[numDocs];\n      final long[] values = new long[numDocs];\n      final int maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseNumericDocValues sparseValues = new SparseNumericDocValues(numDocs, docIdsValues, valuesValues);\n\n      // sequential access\n      assertEquals(-1, sparseValues.docID());\n      for (int i = 0; i < docIds.length; ++i) {\n        assertEquals(docIds[i], sparseValues.nextDoc());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.nextDoc());\n\n      // advance\n      for (int i = 0; i < 2000; ++i) {\n        final int target = TestUtil.nextInt(random(), 0, maxDoc);\n        int index = Arrays.binarySearch(docIds, target);\n        if (index < 0) {\n          index = -1 - index;\n        }\n        sparseValues.reset();\n        if (index > 0) {\n          assertEquals(docIds[index - 1], sparseValues.advance(Math.toIntExact(docIds[index - 1])));\n        }\n        if (index == docIds.length) {\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.advance(target));\n        } else {\n          assertEquals(docIds[index], sparseValues.advance(target));\n        }\n      }\n\n      final SparseNumericDocValuesRandomAccessWrapper raWrapper = new SparseNumericDocValuesRandomAccessWrapper(sparseValues, missingValue);\n\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final int docId = TestUtil.nextInt(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSparseLongValues() throws IOException {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final int[] docIds = new int[numDocs];\n      final long[] values = new long[numDocs];\n      final int maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseNumericDocValues sparseValues = new SparseNumericDocValues(numDocs, docIdsValues, valuesValues);\n\n      // sequential access\n      assertEquals(-1, sparseValues.docID());\n      for (int i = 0; i < docIds.length; ++i) {\n        assertEquals(docIds[i], sparseValues.nextDoc());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.nextDoc());\n\n      // advance\n      for (int i = 0; i < 2000; ++i) {\n        final int target = TestUtil.nextInt(random(), 0, (int) maxDoc);\n        int index = Arrays.binarySearch(docIds, target);\n        if (index < 0) {\n          index = -1 - index;\n        }\n        sparseValues.reset();\n        if (index > 0) {\n          assertEquals(docIds[index - 1], sparseValues.advance(Math.toIntExact(docIds[index - 1])));\n        }\n        if (index == docIds.length) {\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.advance(target));\n        } else {\n          assertEquals(docIds[index], sparseValues.advance(target));\n        }\n      }\n\n      final SparseNumericDocValuesRandomAccessWrapper raWrapper = new SparseNumericDocValuesRandomAccessWrapper(sparseValues, missingValue);\n\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final int docId = TestUtil.nextInt(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","sourceNew":"  public void testSparseLongValues() throws IOException {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final int[] docIds = new int[numDocs];\n      final long[] values = new long[numDocs];\n      final int maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseNumericDocValues sparseValues = new SparseNumericDocValues(numDocs, docIdsValues, valuesValues);\n\n      // sequential access\n      assertEquals(-1, sparseValues.docID());\n      for (int i = 0; i < docIds.length; ++i) {\n        assertEquals(docIds[i], sparseValues.nextDoc());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.nextDoc());\n\n      // advance\n      for (int i = 0; i < 2000; ++i) {\n        final int target = TestUtil.nextInt(random(), 0, maxDoc);\n        int index = Arrays.binarySearch(docIds, target);\n        if (index < 0) {\n          index = -1 - index;\n        }\n        sparseValues.reset();\n        if (index > 0) {\n          assertEquals(docIds[index - 1], sparseValues.advance(Math.toIntExact(docIds[index - 1])));\n        }\n        if (index == docIds.length) {\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.advance(target));\n        } else {\n          assertEquals(docIds[index], sparseValues.advance(target));\n        }\n      }\n\n      final SparseNumericDocValuesRandomAccessWrapper raWrapper = new SparseNumericDocValuesRandomAccessWrapper(sparseValues, missingValue);\n\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final int docId = TestUtil.nextInt(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSparseLongValues() throws IOException {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final int[] docIds = new int[numDocs];\n      final long[] values = new long[numDocs];\n      final int maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseNumericDocValues sparseValues = new SparseNumericDocValues(numDocs, docIdsValues, valuesValues);\n\n      // sequential access\n      assertEquals(-1, sparseValues.docID());\n      for (int i = 0; i < docIds.length; ++i) {\n        assertEquals(docIds[i], sparseValues.nextDoc());\n      }\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.nextDoc());\n\n      // advance\n      for (int i = 0; i < 2000; ++i) {\n        final int target = TestUtil.nextInt(random(), 0, maxDoc);\n        int index = Arrays.binarySearch(docIds, target);\n        if (index < 0) {\n          index = -1 - index;\n        }\n        sparseValues.reset();\n        if (index > 0) {\n          assertEquals(docIds[index - 1], sparseValues.advance(Math.toIntExact(docIds[index - 1])));\n        }\n        if (index == docIds.length) {\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, sparseValues.advance(target));\n        } else {\n          assertEquals(docIds[index], sparseValues.advance(target));\n        }\n      }\n\n      final SparseNumericDocValuesRandomAccessWrapper raWrapper = new SparseNumericDocValuesRandomAccessWrapper(sparseValues, missingValue);\n\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final int docId = TestUtil.nextInt(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = raWrapper.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#testSparseLongValues().mjava","sourceNew":null,"sourceOld":"  public void testSparseLongValues() {\n    final int iters = atLeast(5);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int numDocs = TestUtil.nextInt(random(), 0, 100);\n      final long[] docIds = new long[numDocs];\n      final long[] values = new long[numDocs];\n      final long maxDoc;\n      if (numDocs == 0) {\n        maxDoc = 1 + random().nextInt(10);\n      } else {\n        docIds[0] = random().nextInt(10);\n        for (int i = 1; i < docIds.length; ++i) {\n          docIds[i] = docIds[i - 1] + 1 + random().nextInt(100);\n        }\n        maxDoc = docIds[numDocs - 1] + 1 + random().nextInt(10);\n      }\n      for (int i = 0; i < values.length; ++i) {\n        values[i] = random().nextLong();\n      }\n      final long missingValue = random().nextLong();\n      final LongValues docIdsValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return docIds[Math.toIntExact(index)];\n        }\n      };\n      final LongValues valuesValues = new LongValues() {\n        @Override\n        public long get(long index) {\n          return values[Math.toIntExact(index)];\n        }\n      };\n      final SparseBits liveBits = new SparseBits(maxDoc, numDocs, docIdsValues);\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final long docId = TestUtil.nextLong(random(), 0, maxDoc - 1);\n        final boolean exists = liveBits.get(Math.toIntExact(docId));\n        assertEquals(Arrays.binarySearch(docIds, docId) >= 0, exists);\n      }\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final boolean exists = liveBits.get(Math.toIntExact(docId));\n        assertEquals(Arrays.binarySearch(docIds, docId) >= 0, exists);\n      }\n\n      final SparseLongValues sparseValues = new SparseLongValues(liveBits, valuesValues, missingValue);\n      // random-access\n      for (int i = 0; i < 2000; ++i) {\n        final long docId = TestUtil.nextLong(random(), 0, maxDoc - 1);\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = sparseValues.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n      // sequential access\n      for (int docId = 0; docId < maxDoc; docId += random().nextInt(3)) {\n        final int idx = Arrays.binarySearch(docIds, docId);\n        final long value = sparseValues.get(docId);\n        if (idx >= 0) {\n          assertEquals(values[idx], value);\n        } else {\n          assertEquals(missingValue, value);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["f51f35af88e3b033215720b4201d06211d56d022"],"f51f35af88e3b033215720b4201d06211d56d022":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","9abf8f0376991d8b97ef287f53f330a54bdbdb66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f51f35af88e3b033215720b4201d06211d56d022":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["9abf8f0376991d8b97ef287f53f330a54bdbdb66","3607fe579ac3eb5d35b8dc39dffa376491f417f0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["f51f35af88e3b033215720b4201d06211d56d022"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}