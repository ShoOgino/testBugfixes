{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    return new DisjunctionSumScorer(weight, scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    return new DisjunctionSumScorer(weight, scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34960be55e437a6c96fe66046bf22d33346059f6","date":1363980156,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    if (minNrShouldMatch > 1) {\n      return new MinShouldMatchSumScorer(weight, scorers, minNrShouldMatch) {\n        private int lastScoredDoc = -1;\n        // Save the score of lastScoredDoc, so that we don't compute it more than\n        // once in score().\n        private float lastDocScore = Float.NaN;\n        @Override public float score() throws IOException {\n          int doc = docID();\n          if (doc >= lastScoredDoc) {\n            if (doc > lastScoredDoc) {\n              lastDocScore = super.score();\n              lastScoredDoc = doc;\n            }\n            coordinator.nrMatchers += super.nrMatchers;\n          }\n        return lastDocScore;\n        }\n      };\n    } else {\n      return new DisjunctionSumScorer(weight, scorers) {\n        private int lastScoredDoc = -1;\n        // Save the score of lastScoredDoc, so that we don't compute it more than\n        // once in score().\n        private float lastDocScore = Float.NaN;\n        @Override public float score() throws IOException {\n          int doc = docID();\n          if (doc >= lastScoredDoc) {\n            if (doc > lastScoredDoc) {\n              lastDocScore = super.score();\n              lastScoredDoc = doc;\n            }\n            coordinator.nrMatchers += super.nrMatchers;\n          }\n        return lastDocScore;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    return new DisjunctionSumScorer(weight, scorers, minNrShouldMatch) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7","date":1365610867,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    if (minNrShouldMatch > 1) {\n      return new MinShouldMatchSumScorer(weight, scorers, minNrShouldMatch) {\n        @Override \n        public float score() throws IOException {\n          coordinator.nrMatchers += super.nrMatchers;\n          return super.score();\n        }\n      };\n    } else {\n      // we pass null for coord[] since we coordinate ourselves and override score()\n      return new DisjunctionSumScorer(weight, scorers.toArray(new Scorer[scorers.size()]), null) {\n        @Override \n        public float score() throws IOException {\n          coordinator.nrMatchers += super.nrMatchers;\n          return (float) super.score;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    if (minNrShouldMatch > 1) {\n      return new MinShouldMatchSumScorer(weight, scorers, minNrShouldMatch) {\n        private int lastScoredDoc = -1;\n        // Save the score of lastScoredDoc, so that we don't compute it more than\n        // once in score().\n        private float lastDocScore = Float.NaN;\n        @Override public float score() throws IOException {\n          int doc = docID();\n          if (doc >= lastScoredDoc) {\n            if (doc > lastScoredDoc) {\n              lastDocScore = super.score();\n              lastScoredDoc = doc;\n            }\n            coordinator.nrMatchers += super.nrMatchers;\n          }\n        return lastDocScore;\n        }\n      };\n    } else {\n      return new DisjunctionSumScorer(weight, scorers) {\n        private int lastScoredDoc = -1;\n        // Save the score of lastScoredDoc, so that we don't compute it more than\n        // once in score().\n        private float lastDocScore = Float.NaN;\n        @Override public float score() throws IOException {\n          int doc = docID();\n          if (doc >= lastScoredDoc) {\n            if (doc > lastScoredDoc) {\n              lastDocScore = super.score();\n              lastScoredDoc = doc;\n            }\n            coordinator.nrMatchers += super.nrMatchers;\n          }\n        return lastDocScore;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":null,"sourceOld":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    if (minNrShouldMatch > 1) {\n      return new MinShouldMatchSumScorer(weight, scorers, minNrShouldMatch) {\n        @Override \n        public float score() throws IOException {\n          coordinator.nrMatchers += super.nrMatchers;\n          return super.score();\n        }\n      };\n    } else {\n      // we pass null for coord[] since we coordinate ourselves and override score()\n      return new DisjunctionSumScorer(weight, scorers.toArray(new Scorer[scorers.size()]), null) {\n        @Override \n        public float score() throws IOException {\n          coordinator.nrMatchers += super.nrMatchers;\n          return (float) super.score;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":null,"sourceOld":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    if (minNrShouldMatch > 1) {\n      return new MinShouldMatchSumScorer(weight, scorers, minNrShouldMatch) {\n        @Override \n        public float score() throws IOException {\n          coordinator.nrMatchers += super.nrMatchers;\n          return super.score();\n        }\n      };\n    } else {\n      // we pass null for coord[] since we coordinate ourselves and override score()\n      return new DisjunctionSumScorer(weight, scorers.toArray(new Scorer[scorers.size()]), null) {\n        @Override \n        public float score() throws IOException {\n          coordinator.nrMatchers += super.nrMatchers;\n          return (float) super.score;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingDisjunctionSumScorer(List[Scorer],int).mjava","sourceNew":null,"sourceOld":"  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,\n      int minNrShouldMatch) throws IOException {\n    // each scorer from the list counted as a single matcher\n    if (minNrShouldMatch > 1) {\n      return new MinShouldMatchSumScorer(weight, scorers, minNrShouldMatch) {\n        @Override \n        public float score() throws IOException {\n          coordinator.nrMatchers += super.nrMatchers;\n          return super.score();\n        }\n      };\n    } else {\n      // we pass null for coord[] since we coordinate ourselves and override score()\n      return new DisjunctionSumScorer(weight, scorers.toArray(new Scorer[scorers.size()]), null) {\n        @Override \n        public float score() throws IOException {\n          coordinator.nrMatchers += super.nrMatchers;\n          return (float) super.score;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"34960be55e437a6c96fe66046bf22d33346059f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["34960be55e437a6c96fe66046bf22d33346059f6"],"b7605579001505896d48b07160075a5c8b8e128e":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"]},"commit2Childs":{"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"34960be55e437a6c96fe66046bf22d33346059f6":["2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["34960be55e437a6c96fe66046bf22d33346059f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2140f4d85a3a77e3e5a5a65ac209f8c77ee757f7":["d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"b7605579001505896d48b07160075a5c8b8e128e":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}