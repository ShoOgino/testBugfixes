{"path":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","commits":[{"id":"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","date":1411674127,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrefixQuery() {\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\",\"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1000\"), assertionString);\n\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"1000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","date":1411744836,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrefixQuery() {\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\",\"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1000\"), assertionString);\n\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"1000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"910d5b8d32edfdcd07b56db488f8a2d55957f712","date":1412211530,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","sourceNew":"  @Test\n  public void testPrefixQuery() {\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\",\"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void testPrefixQuery() {\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\",\"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1000\"), assertionString);\n\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"1000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","bugFix":null,"bugIntro":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","sourceNew":"  @Test\n  public void testPrefixQuery() {\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\",\"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void testPrefixQuery() {\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\",\"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1000\"), assertionString);\n\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"1000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f001da93ec624cbfbf3655c529836b5b1ec1aa46","date":1412885266,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","sourceNew":"  @Test\n  public void testPrefixQuery() throws Exception {\n    assertJQ(req(\"q\", \"name:a*\", \"indent\", \"true\", \"timeAllowed\", \"1\"), failureAssertionString);\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertJQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\"), failureAssertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void testPrefixQuery() {\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\",\"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","bugFix":null,"bugIntro":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","sourceNew":"  @Test\n  public void testPrefixQuery() throws Exception {\n    assertJQ(req(\"q\", \"name:a*\", \"indent\", \"true\", \"timeAllowed\", \"1\"), failureAssertionString);\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertJQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\"), failureAssertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void testPrefixQuery() {\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\",\"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQEx(\"\", req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\")\n        , SolrException.ErrorCode.BAD_REQUEST\n    );\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4801fd4ad4830fcde9b6ed9024c04839ade25e42","date":1441807244,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ExitableDirectoryReaderTest#testPrefixQuery().mjava","sourceNew":"  @Test\n  public void testPrefixQuery() throws Exception {\n    String q = \"name:a*\";\n    assertJQ(req(\"q\", q,  \"timeAllowed\", \"1\", \"sleep\", sleep), failureAssertionString);\n\n    // do the same query and test for both success, and that the number of documents matched (i.e. make sure no partial results were cached)\n    assertJQ(req(\"q\", q, \"timeAllowed\", longTimeout), assertionString);\n\n    // this time we should get a query cache hit and hopefully no exception?  this may change in the future if time checks are put into other places.\n    assertJQ(req(\"q\", q,  \"timeAllowed\", \"1\", \"sleep\", sleep), assertionString);\n\n    // now do the same for the filter cache\n    assertJQ(req(\"q\",\"*:*\", \"fq\",q, \"timeAllowed\", \"1\", \"sleep\", sleep), failureAssertionString);\n\n    // make sure that the result succeeds this time, and that a bad filter wasn't cached\n    assertJQ(req(\"q\",\"*:*\", \"fq\",q, \"timeAllowed\", longTimeout), assertionString);\n\n    // test that Long.MAX_VALUE works\n    assertJQ(req(\"q\",\"name:b*\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    // negative timeAllowed should disable timeouts.\n    assertJQ(req(\"q\", \"name:c*\", \"timeAllowed\", \"-7\"), assertionString);\n  }\n\n","sourceOld":"  @Test\n  public void testPrefixQuery() throws Exception {\n    assertJQ(req(\"q\", \"name:a*\", \"indent\", \"true\", \"timeAllowed\", \"1\"), failureAssertionString);\n\n    assertQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertJQ(req(\"q\",\"name:a*\", \"indent\",\"true\", \"timeAllowed\",\"1\"), failureAssertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"10000\"), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",Long.toString(Long.MAX_VALUE)), assertionString);\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\", \"timeAllowed\",\"-7\")); // negative timeAllowed should disable timeouts\n\n    assertQ(req(\"q\",\"name:b*\", \"indent\",\"true\"));\n  }\n\n","bugFix":["910d5b8d32edfdcd07b56db488f8a2d55957f712","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"910d5b8d32edfdcd07b56db488f8a2d55957f712":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["910d5b8d32edfdcd07b56db488f8a2d55957f712"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","910d5b8d32edfdcd07b56db488f8a2d55957f712"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"]},"commit2Childs":{"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["910d5b8d32edfdcd07b56db488f8a2d55957f712","da951a24a6a87d5ba7e1820f8c28a1e2beea76c1"],"55980207f1977bd1463465de1659b821347e2fa8":[],"910d5b8d32edfdcd07b56db488f8a2d55957f712":["f001da93ec624cbfbf3655c529836b5b1ec1aa46","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["d9a47902d6207303f5ed3e7aaca62ca33433af66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","da951a24a6a87d5ba7e1820f8c28a1e2beea76c1"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["55980207f1977bd1463465de1659b821347e2fa8","4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}