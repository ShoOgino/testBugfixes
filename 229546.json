{"path":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#reset(BytesRef,Bits,int).mjava","sourceNew":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","sourceOld":"    public FSTDocsAndPositionsEnum reset(BytesRef bufferIn, Bits liveDocs, int numDocs) {\n      assert numDocs > 0;\n      if (VERBOSE) {\n        System.out.println(\"D&P reset bytes this=\" + this);\n        for(int i=bufferIn.offset;i<bufferIn.length;i++) {\n          System.out.println(\"  \" + Integer.toHexString(bufferIn.bytes[i]&0xFF));\n        }\n      }\n      if (buffer.length < bufferIn.length - bufferIn.offset) {\n        buffer = ArrayUtil.grow(buffer, bufferIn.length - bufferIn.offset);\n      }\n      in.reset(buffer, 0, bufferIn.length - bufferIn.offset);\n      System.arraycopy(bufferIn.bytes, bufferIn.offset, buffer, 0, bufferIn.length - bufferIn.offset);\n      this.liveDocs = liveDocs;\n      docID = -1;\n      accum = 0;\n      docUpto = 0;\n      payload.bytes = buffer;\n      payloadLength = 0;\n      this.numDocs = numDocs;\n      posPending = 0;\n      payloadRetrieved = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}