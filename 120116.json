{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/Trec1MQReader#readQueries(BufferedReader).mjava","commits":[{"id":"05d64184e4c44205b1dfa1cdf3869230c4025dc9","date":1199346280,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/Trec1MQReader#readQueries(BufferedReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read quality queries from trec 1MQ format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList res = new ArrayList();\n    String line;\n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.startsWith(\"#\")) {\n          continue;\n        }\n        // id\n        int k = line.indexOf(\":\");\n        String id = line.substring(0,k).trim();\n        // qtext\n        String qtext = line.substring(k+1).trim();\n        // we got a topic!\n        HashMap fields = new HashMap();\n        fields.put(name,qtext);\n        //System.out.println(\"id: \"+id+\" qtext: \"+qtext+\"  line: \"+line);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = (QualityQuery[]) res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/Trec1MQReader#readQueries(BufferedReader).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/Trec1MQReader#readQueries(BufferedReader).mjava","sourceNew":"  /**\n   * Read quality queries from trec 1MQ format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    String line;\n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.startsWith(\"#\")) {\n          continue;\n        }\n        // id\n        int k = line.indexOf(\":\");\n        String id = line.substring(0,k).trim();\n        // qtext\n        String qtext = line.substring(k+1).trim();\n        // we got a topic!\n        HashMap<String,String> fields = new HashMap<String,String>();\n        fields.put(name,qtext);\n        //System.out.println(\"id: \"+id+\" qtext: \"+qtext+\"  line: \"+line);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","sourceOld":"  /**\n   * Read quality queries from trec 1MQ format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList res = new ArrayList();\n    String line;\n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.startsWith(\"#\")) {\n          continue;\n        }\n        // id\n        int k = line.indexOf(\":\");\n        String id = line.substring(0,k).trim();\n        // qtext\n        String qtext = line.substring(k+1).trim();\n        // we got a topic!\n        HashMap fields = new HashMap();\n        fields.put(name,qtext);\n        //System.out.println(\"id: \"+id+\" qtext: \"+qtext+\"  line: \"+line);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = (QualityQuery[]) res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/Trec1MQReader#readQueries(BufferedReader).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/Trec1MQReader#readQueries(BufferedReader).mjava","sourceNew":"  /**\n   * Read quality queries from trec 1MQ format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    String line;\n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.startsWith(\"#\")) {\n          continue;\n        }\n        // id\n        int k = line.indexOf(\":\");\n        String id = line.substring(0,k).trim();\n        // qtext\n        String qtext = line.substring(k+1).trim();\n        // we got a topic!\n        HashMap<String,String> fields = new HashMap<String,String>();\n        fields.put(name,qtext);\n        //System.out.println(\"id: \"+id+\" qtext: \"+qtext+\"  line: \"+line);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","sourceOld":"  /**\n   * Read quality queries from trec 1MQ format topics file.\n   * @param reader where queries are read from.\n   * @return the result quality queries.\n   * @throws IOException if cannot read the queries.\n   */\n  public QualityQuery[] readQueries(BufferedReader reader) throws IOException {\n    ArrayList<QualityQuery> res = new ArrayList<QualityQuery>();\n    String line;\n    try {\n      while (null!=(line=reader.readLine())) {\n        line = line.trim();\n        if (line.startsWith(\"#\")) {\n          continue;\n        }\n        // id\n        int k = line.indexOf(\":\");\n        String id = line.substring(0,k).trim();\n        // qtext\n        String qtext = line.substring(k+1).trim();\n        // we got a topic!\n        HashMap<String,String> fields = new HashMap<String,String>();\n        fields.put(name,qtext);\n        //System.out.println(\"id: \"+id+\" qtext: \"+qtext+\"  line: \"+line);\n        QualityQuery topic = new QualityQuery(id,fields);\n        res.add(topic);\n      }\n    } finally {\n      reader.close();\n    }\n    // sort result array (by ID) \n    QualityQuery qq[] = res.toArray(new QualityQuery[0]);\n    Arrays.sort(qq);\n    return qq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["05d64184e4c44205b1dfa1cdf3869230c4025dc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05d64184e4c44205b1dfa1cdf3869230c4025dc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d64184e4c44205b1dfa1cdf3869230c4025dc9"],"05d64184e4c44205b1dfa1cdf3869230c4025dc9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}