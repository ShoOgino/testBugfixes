{"path":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","commits":[{"id":"08cb7380901e8bc96eacd525a5b157ab9949672a","date":1163818514,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // First in a RAM directory:\n    Directory directory = new RAMDirectory();\n    runStressTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath, true);\n    runStressTest(directory);\n    directory.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // First in a RAM directory:\n    Directory directory = new RAMDirectory();\n    runStressTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory);\n    directory.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // First in a RAM directory:\n    Directory directory = new RAMDirectory();\n    runStressTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath, true);\n    runStressTest(directory);\n    directory.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // First in a RAM directory:\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory);\n    directory.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // First in a RAM directory:\n    Directory directory = new RAMDirectory();\n    runStressTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory);\n    directory.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":["08cb7380901e8bc96eacd525a5b157ab9949672a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // First in a RAM directory:\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory);\n    directory.close();\n\n    // Second in an FSDirectory:\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory);\n    directory.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath, null, false);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.getDirectory(dirPath, null, false);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.getDirectory(dirPath, null, false);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath, null, false);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.getDirectory(dirPath, null, false);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.getDirectory(dirPath, null, false);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.getDirectory(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1405cedaef6ce1e1b563d7b35ee26c6518c81e","date":1244664919,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    File dirPath = new File(tempDir, \"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, true, null);\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, true, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in RAMDir\n    directory = new MockRAMDirectory();\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler and autoCommit=false, in FSDir\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, false, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing#testStressIndexAndSearching().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testStressIndexAndSearching() throws Exception {\n    RANDOM = newRandom();\n\n    // With ConcurrentMergeScheduler, in RAMDir\n    Directory directory = new MockRAMDirectory();\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    // With ConcurrentMergeScheduler, in FSDir\n    File dirPath = _TestUtil.getTempDir(\"lucene.test.stress\");\n    directory = FSDirectory.open(dirPath);\n    runStressTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    _TestUtil.rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"cb1066f2afe9450585d0d10063ea4450085236f1":["a015c55424dd37249054283bedc90388bd45358f"],"08cb7380901e8bc96eacd525a5b157ab9949672a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b583d3621fe173e7296abcf62f82fb707c901234":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"9f1405cedaef6ce1e1b563d7b35ee26c6518c81e":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"66b12ba4967665216eeb706b58d424c51fb3641a":["08cb7380901e8bc96eacd525a5b157ab9949672a"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["66b12ba4967665216eeb706b58d424c51fb3641a"],"87c966e9308847938a7c905c2e46a56d8df788b8":["9f1405cedaef6ce1e1b563d7b35ee26c6518c81e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["87c966e9308847938a7c905c2e46a56d8df788b8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["b583d3621fe173e7296abcf62f82fb707c901234"],"cb1066f2afe9450585d0d10063ea4450085236f1":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"08cb7380901e8bc96eacd525a5b157ab9949672a":["66b12ba4967665216eeb706b58d424c51fb3641a"],"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"9f1405cedaef6ce1e1b563d7b35ee26c6518c81e":["87c966e9308847938a7c905c2e46a56d8df788b8"],"66b12ba4967665216eeb706b58d424c51fb3641a":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"a015c55424dd37249054283bedc90388bd45358f":["cb1066f2afe9450585d0d10063ea4450085236f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08cb7380901e8bc96eacd525a5b157ab9949672a"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["9f1405cedaef6ce1e1b563d7b35ee26c6518c81e"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"87c966e9308847938a7c905c2e46a56d8df788b8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}