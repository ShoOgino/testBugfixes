{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    System.out.println(\"version:\" + doc.getFieldValue(VersionInfo.VERSION_FIELD));\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    System.out.println(\"version:\" + doc.getFieldValue(VersionInfo.VERSION_FIELD));\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    System.out.println(\"version:\" + doc.getFieldValue(VersionInfo.VERSION_FIELD));\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","sourceNew":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    System.out.println(\"version:\" + doc.getFieldValue(VersionInfo.VERSION_FIELD));\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","sourceNew":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    System.out.println(\"version:\" + doc.getFieldValue(VersionInfo.VERSION_FIELD));\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","sourceNew":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    Long version = (Long) doc.getFieldValue(VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","sourceNew":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    Long version = (Long) doc.getFieldValue(VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    Long version = (Long) doc.getFieldValue(VersionInfo.VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(DistributedUpdateProcessor.VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","sourceNew":null,"sourceOld":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    Long version = (Long) doc.getFieldValue(VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testOptimisticUpdate(QueryResponse).mjava","sourceNew":null,"sourceOld":"  private void testOptimisticUpdate(QueryResponse results) throws Exception {\n    SolrDocument doc = results.getResults().get(0);\n    Long version = (Long) doc.getFieldValue(VERSION_FIELD);\n    Integer theDoc = (Integer) doc.getFieldValue(\"id\");\n    UpdateRequest uReq = new UpdateRequest();\n    SolrInputDocument doc1 = new SolrInputDocument();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(VERSION_FIELD, Long.toString(version));\n    addFields(doc1, \"id\", theDoc, t1, \"theupdatestuff\");\n    uReq.add(doc1);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    // updating the old version should fail...\n    SolrInputDocument doc2 = new SolrInputDocument();\n    uReq = new UpdateRequest();\n    uReq.setParams(new ModifiableSolrParams());\n    uReq.getParams().set(VERSION_FIELD, Long.toString(version));\n    addFields(doc2, \"id\", theDoc, t1, \"thenewupdatestuff\");\n    uReq.add(doc2);\n    \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    commit();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":thenewupdatestuff\");\n    QueryResponse res = clients.get(0).query(params);\n    assertEquals(0, res.getResults().getNumFound());\n    \n    params = new ModifiableSolrParams();\n    params.add(\"q\", t1 + \":theupdatestuff\");\n    res = clients.get(0).query(params);\n    assertEquals(1, res.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f2126b84bd093fa3d921582a109a0ee578c28126":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"b945b8f5bba0303382bc69d60c0c287714f23328":["6d2dadc1f5ca8703d8659f4964961f9967935d75","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f2126b84bd093fa3d921582a109a0ee578c28126","b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}