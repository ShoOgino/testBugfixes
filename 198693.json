{"path":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedenceWithNot().mjava","commits":[{"id":"b67f6693ef378bd000202825cff0bea043621f5b","date":1110219676,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedenceWithNot().mjava","pathOld":"/dev/null","sourceNew":"  public void testPrecedenceWithNot() throws Exception {\n    Query query1 = PrecedenceQueryParser.parse(\"A OR B C\", \"field\", new WhitespaceAnalyzer());\n    Query query2 = PrecedenceQueryParser.parse(\"A B C\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A AND B C\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"(+A +B) C\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A AND NOT B\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"+A -B\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A OR NOT B\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"A -B\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd99bbca4169b09ee71fda976ded4b764e88f1c8","date":1110231999,"type":4,"author":"Erik Hatcher","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testPrecedenceWithNot().mjava","sourceNew":null,"sourceOld":"  public void testPrecedenceWithNot() throws Exception {\n    Query query1 = PrecedenceQueryParser.parse(\"A OR B C\", \"field\", new WhitespaceAnalyzer());\n    Query query2 = PrecedenceQueryParser.parse(\"A B C\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A AND B C\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"(+A +B) C\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A AND NOT B\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"+A -B\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n\n    query1 = PrecedenceQueryParser.parse(\"A OR NOT B\", \"field\", new WhitespaceAnalyzer());\n    query2 = PrecedenceQueryParser.parse(\"A -B\", \"field\", new WhitespaceAnalyzer());\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd99bbca4169b09ee71fda976ded4b764e88f1c8":["b67f6693ef378bd000202825cff0bea043621f5b"],"b67f6693ef378bd000202825cff0bea043621f5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd99bbca4169b09ee71fda976ded4b764e88f1c8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b67f6693ef378bd000202825cff0bea043621f5b"],"dd99bbca4169b09ee71fda976ded4b764e88f1c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b67f6693ef378bd000202825cff0bea043621f5b":["dd99bbca4169b09ee71fda976ded4b764e88f1c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}