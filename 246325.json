{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static String[] split(String s, String separator) {\n    ArrayList<String> list = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          list.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      list.add(sb.toString());\n    }\n\n    return list.toArray(new String[list.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","sourceNew":"  private static String[] split(String s, String separator) {\n    ArrayList<String> list = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          list.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      list.add(sb.toString());\n    }\n\n    return list.toArray(new String[list.size()]);\n  }\n\n","sourceOld":"  private static String[] split(String s, String separator) {\n    ArrayList<String> list = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          list.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      list.add(sb.toString());\n    }\n\n    return list.toArray(new String[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}