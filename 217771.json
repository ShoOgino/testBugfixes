{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocsWithFieldSet#testDense().mjava","commits":[{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsWithFieldSet#testDense().mjava","pathOld":"/dev/null","sourceNew":"  public void testDense() throws IOException {\n    DocsWithFieldSet set = new DocsWithFieldSet();\n    DocIdSetIterator it = set.iterator();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, it.nextDoc());\n\n    set.add(0);\n    it = set.iterator();\n    assertEquals(0, it.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, it.nextDoc());\n\n    long ramBytesUsed = set.ramBytesUsed();\n    for (int i = 1; i < 1000; ++i) {\n      set.add(i);\n    }\n    assertEquals(ramBytesUsed, set.ramBytesUsed());\n    it = set.iterator();\n    for (int i = 0; i < 1000; ++i) {\n      assertEquals(i, it.nextDoc());\n    }\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, it.nextDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocsWithFieldSet#testDense().mjava","pathOld":"/dev/null","sourceNew":"  public void testDense() throws IOException {\n    DocsWithFieldSet set = new DocsWithFieldSet();\n    DocIdSetIterator it = set.iterator();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, it.nextDoc());\n\n    set.add(0);\n    it = set.iterator();\n    assertEquals(0, it.nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, it.nextDoc());\n\n    long ramBytesUsed = set.ramBytesUsed();\n    for (int i = 1; i < 1000; ++i) {\n      set.add(i);\n    }\n    assertEquals(ramBytesUsed, set.ramBytesUsed());\n    it = set.iterator();\n    for (int i = 0; i < 1000; ++i) {\n      assertEquals(i, it.nextDoc());\n    }\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, it.nextDoc());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ceec64003e8cc400e862d44c8589a41570432ab9"],"ceec64003e8cc400e862d44c8589a41570432ab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ceec64003e8cc400e862d44c8589a41570432ab9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","ceec64003e8cc400e862d44c8589a41570432ab9"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}