{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","commits":[{"id":"5f21dc022708e502f89f154bdcf6dc53b9409aec","date":1476123629,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","pathOld":"/dev/null","sourceNew":"  private void fetchBatch() throws IOException {\n\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList();\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder();\n      buf.append(rightKey);\n      buf.append(\":(\");\n      for (int i = 0; i < batch.size(); i++) {\n        if (i > 0) {\n          buf.append(\" \");\n        }\n        Tuple tuple = batch.get(i);\n        String key = tuple.getString(leftKey);\n        buf.append(key);\n      }\n      buf.append(\")\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(\"sort\", \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","pathOld":"/dev/null","sourceNew":"  private void fetchBatch() throws IOException {\n\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList();\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder();\n      buf.append(rightKey);\n      buf.append(\":(\");\n      for (int i = 0; i < batch.size(); i++) {\n        if (i > 0) {\n          buf.append(\" \");\n        }\n        Tuple tuple = batch.get(i);\n        String key = tuple.getString(leftKey);\n        buf.append(key);\n      }\n      buf.append(\")\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(\"sort\", \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","sourceNew":"  private void fetchBatch() throws IOException {\n\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList();\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder();\n      buf.append(rightKey);\n      buf.append(\":(\");\n      for (int i = 0; i < batch.size(); i++) {\n        if (i > 0) {\n          buf.append(\" \");\n        }\n        Tuple tuple = batch.get(i);\n        String key = tuple.getString(leftKey);\n        buf.append(key);\n      }\n      buf.append(\")\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(SORT, \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","sourceOld":"  private void fetchBatch() throws IOException {\n\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList();\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder();\n      buf.append(rightKey);\n      buf.append(\":(\");\n      for (int i = 0; i < batch.size(); i++) {\n        if (i > 0) {\n          buf.append(\" \");\n        }\n        Tuple tuple = batch.get(i);\n        String key = tuple.getString(leftKey);\n        buf.append(key);\n      }\n      buf.append(\")\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(\"sort\", \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","sourceNew":"  private void fetchBatch() throws IOException {\n\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList();\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder();\n      buf.append(rightKey);\n      buf.append(\":(\");\n      for (int i = 0; i < batch.size(); i++) {\n        if (i > 0) {\n          buf.append(\" \");\n        }\n        Tuple tuple = batch.get(i);\n        String key = tuple.getString(leftKey);\n        buf.append(key);\n      }\n      buf.append(\")\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(SORT, \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","sourceOld":"  private void fetchBatch() throws IOException {\n\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList();\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder();\n      buf.append(rightKey);\n      buf.append(\":(\");\n      for (int i = 0; i < batch.size(); i++) {\n        if (i > 0) {\n          buf.append(\" \");\n        }\n        Tuple tuple = batch.get(i);\n        String key = tuple.getString(leftKey);\n        buf.append(key);\n      }\n      buf.append(\")\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(\"sort\", \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a","date":1491397010,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","sourceNew":"  private void fetchBatch() throws IOException {\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList<>(batchSize);\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder(batch.size() * 10 + 20);\n      buf.append(\"{! df=\").append(rightKey).append(\" q.op=OR cache=false }\");//disable queryCache\n      for (Tuple tuple : batch) {\n        String key = tuple.getString(leftKey);\n        buf.append(' ').append(ClientUtils.escapeQueryChars(key));\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(SORT, \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap<>();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","sourceOld":"  private void fetchBatch() throws IOException {\n\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList();\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder();\n      buf.append(rightKey);\n      buf.append(\":(\");\n      for (int i = 0; i < batch.size(); i++) {\n        if (i > 0) {\n          buf.append(\" \");\n        }\n        Tuple tuple = batch.get(i);\n        String key = tuple.getString(leftKey);\n        buf.append(key);\n      }\n      buf.append(\")\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(SORT, \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","bugFix":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","sourceNew":"  private void fetchBatch() throws IOException {\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList<>(batchSize);\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder(batch.size() * 10 + 20);\n      buf.append(\"{! df=\").append(rightKey).append(\" q.op=OR cache=false }\");//disable queryCache\n      for (Tuple tuple : batch) {\n        String key = tuple.getString(leftKey);\n        buf.append(' ').append(ClientUtils.escapeQueryChars(key));\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(SORT, \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap<>();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","sourceOld":"  private void fetchBatch() throws IOException {\n\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList();\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder();\n      buf.append(rightKey);\n      buf.append(\":(\");\n      for (int i = 0; i < batch.size(); i++) {\n        if (i > 0) {\n          buf.append(\" \");\n        }\n        Tuple tuple = batch.get(i);\n        String key = tuple.getString(leftKey);\n        buf.append(key);\n      }\n      buf.append(\")\");\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(SORT, \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7ced979f39d7651addfc7d805e1d9bfac215822","date":1589391432,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FetchStream#fetchBatch().mjava","sourceNew":"  private void fetchBatch() throws IOException {\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList<>(batchSize);\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder(batch.size() * 10 + 20);\n      buf.append(\"{! df=\").append(rightKey).append(\" q.op=OR cache=false }\");//disable queryCache\n      for (Tuple tuple : batch) {\n        String key = tuple.getString(leftKey);\n        buf.append(' ').append(ClientUtils.escapeQueryChars(key));\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(SORT, \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      newContext.setObjectCache(streamContext.getObjectCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap<>();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","sourceOld":"  private void fetchBatch() throws IOException {\n    Tuple EOFTuple = null;\n    List<Tuple> batch = new ArrayList<>(batchSize);\n    for(int i=0; i<batchSize; i++) {\n      Tuple tuple = stream.read();\n      if(tuple.EOF) {\n        EOFTuple = tuple;\n        break;\n      } else {\n        batch.add(tuple);\n      }\n    }\n\n    if(batch.size() > 0) {\n      StringBuilder buf = new StringBuilder(batch.size() * 10 + 20);\n      buf.append(\"{! df=\").append(rightKey).append(\" q.op=OR cache=false }\");//disable queryCache\n      for (Tuple tuple : batch) {\n        String key = tuple.getString(leftKey);\n        buf.append(' ').append(ClientUtils.escapeQueryChars(key));\n      }\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", buf.toString());\n      params.add(\"fl\", fieldList+appendFields());\n      params.add(\"rows\", Integer.toString(batchSize));\n      params.add(SORT, \"_version_ desc\");\n\n      CloudSolrStream cloudSolrStream = new CloudSolrStream(zkHost, collection, params);\n      StreamContext newContext = new StreamContext();\n      newContext.setSolrClientCache(streamContext.getSolrClientCache());\n      cloudSolrStream.setStreamContext(newContext);\n      Map<String, Tuple> fetched = new HashMap<>();\n      try {\n        cloudSolrStream.open();\n        while (true) {\n          Tuple t = cloudSolrStream.read();\n          if (t.EOF) {\n            break;\n          } else {\n            String rightValue = t.getString(rightKey);\n            fetched.put(rightValue, t);\n          }\n        }\n      } finally {\n        cloudSolrStream.close();\n      }\n\n      //Iterate the batch and add the fetched fields to the Tuples\n      for (Tuple batchTuple : batch) {\n        Tuple fetchedTuple = fetched.get(batchTuple.getString(leftKey));\n        if(fetchedTuple !=null) {\n          for (String field : fields) {\n            Object value = fetchedTuple.get(field);\n            if(value != null) {\n              batchTuple.put(field, value);\n            }\n          }\n        }\n      }\n    }\n\n    if(EOFTuple != null) {\n      batch.add(EOFTuple);\n    }\n\n    this.tuples = batch.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a":["01624b85de12fb02335810bdf325124e59040772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d7ced979f39d7651addfc7d805e1d9bfac215822":["78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01624b85de12fb02335810bdf325124e59040772":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f21dc022708e502f89f154bdcf6dc53b9409aec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7ced979f39d7651addfc7d805e1d9bfac215822"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f21dc022708e502f89f154bdcf6dc53b9409aec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d7ced979f39d7651addfc7d805e1d9bfac215822":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"01624b85de12fb02335810bdf325124e59040772":["78fdfa12f5b4304b0f5df4f8c29fbc6bb396ae5a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}