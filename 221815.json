{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#startElement(String,String,String,Attributes).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#startElement(String,String,String,Attributes).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#startElement(String,String,String,Attributes).mjava","sourceNew":"  @Override\n  public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n    currentElementText = \"\";\n    if (inEnvelope) {\n      if (inRequest) {\n        if (localName.equals(STATISTIC)) {\n          // Start a Statistic Request\n          inStatistic = true;\n        } else if (inFieldFacet) {\n          if (localName.equals(SORT_SPECIFICATION)) {\n            // Start a Sort Specification\n            inSortSpecification = true;\n            sortSpecification = new FacetSortSpecification();\n          }\n        } else if (localName.equals(FIELD_FACET)) {\n          // Start a Field Facet Request\n          // Get attributes (limit, minCount, showMissing)\n          String att = atts.getValue(uri,LIMIT);\n          if (att!=null) {\n            limit = Integer.parseInt(att);\n          } else {\n            limit = DEFAULT_FACET_LIMIT;\n          }\n          att = atts.getValue(uri,MIN_COUNT);\n          if (att!=null) {\n            minCount = Integer.parseInt(att);\n          } else {\n            minCount = DEFAULT_FACET_MINCOUNT;\n          }\n          att = atts.getValue(uri,SHOW_MISSING);\n          if (att!=null) {\n            showMissing = Boolean.parseBoolean(att);\n          } else {\n            showMissing = DEFAULT_FACET_FIELD_SHOW_MISSING;\n          }\n          \n          inFieldFacet = true;\n        } else if (localName.equals(RANGE_FACET)) {\n          // Start a Range Facet Request\n          // Get attributes (hardEnd)\n          String att = atts.getValue(uri,HARD_END);\n          if (att!=null) {\n            hardend = Boolean.parseBoolean(att);\n          } else {\n            hardend = false;\n          }\n          \n          // Initiate Range Facet classes\n          gaps = new ArrayList<>();\n          includeBoundaries = EnumSet.noneOf(FacetRangeInclude.class);\n          otherRanges = EnumSet.noneOf(FacetRangeOther.class);\n          inRangeFacet = true;\n        } else if (localName.equals(QUERY_FACET)) {\n          // Start a Query Facet Request\n          queries = new ArrayList<>();\n          inQueryFacet = true;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST)){\n        // Start an Analytics Request\n        \n        // Renew each list.\n        fieldFacetList = new ArrayList<>();\n        rangeFacetList = new ArrayList<>();\n        queryFacetList = new ArrayList<>();\n        expressionList = new ArrayList<>();\n        inRequest = true;\n      }\n    } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n      //Begin the parsing of the Analytics Requests\n      requests = new ArrayList<>();\n      inEnvelope = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n    currentElementText = \"\";\n    if (inEnvelope) {\n      if (inRequest) {\n        if (localName.equals(STATISTIC)) {\n          // Start a Statistic Request\n          inStatistic = true;\n        } else if (inFieldFacet) {\n          if (localName.equals(SORT_SPECIFICATION)) {\n            // Start a Sort Specification\n            inSortSpecification = true;\n            sortSpecification = new FacetSortSpecification();\n          }\n        } else if (localName.equals(FIELD_FACET)) {\n          // Start a Field Facet Request\n          // Get attributes (limit, minCount, showMissing)\n          String att = atts.getValue(uri,LIMIT);\n          if (att!=null) {\n            limit = Integer.parseInt(att);\n          } else {\n            limit = DEFAULT_FACET_LIMIT;\n          }\n          att = atts.getValue(uri,MIN_COUNT);\n          if (att!=null) {\n            minCount = Integer.parseInt(att);\n          } else {\n            minCount = DEFAULT_FACET_MINCOUNT;\n          }\n          att = atts.getValue(uri,SHOW_MISSING);\n          if (att!=null) {\n            showMissing = Boolean.parseBoolean(att);\n          } else {\n            showMissing = DEFAULT_FACET_FIELD_SHOW_MISSING;\n          }\n          \n          inFieldFacet = true;\n        } else if (localName.equals(RANGE_FACET)) {\n          // Start a Range Facet Request\n          // Get attributes (hardEnd)\n          String att = atts.getValue(uri,HARD_END);\n          if (att!=null) {\n            hardend = Boolean.parseBoolean(att);\n          } else {\n            hardend = false;\n          }\n          \n          // Initiate Range Facet classes\n          gaps = new ArrayList<>();\n          includeBoundaries = EnumSet.noneOf(FacetRangeInclude.class);\n          otherRanges = EnumSet.noneOf(FacetRangeOther.class);\n          inRangeFacet = true;\n        } else if (localName.equals(QUERY_FACET)) {\n          // Start a Query Facet Request\n          queries = new ArrayList<>();\n          inQueryFacet = true;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST)){\n        // Start an Analytics Request\n        \n        // Renew each list.\n        fieldFacetList = new ArrayList<>();\n        rangeFacetList = new ArrayList<>();\n        queryFacetList = new ArrayList<>();\n        expressionList = new ArrayList<>();\n        inRequest = true;\n      }\n    } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n      //Begin the parsing of the Analytics Requests\n      requests = new ArrayList<>();\n      inEnvelope = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#startElement(String,String,String,Attributes).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n    currentElementText = \"\";\n    if (inEnvelope) {\n      if (inRequest) {\n        if (localName.equals(STATISTIC)) {\n          // Start a Statistic Request\n          inStatistic = true;\n        } else if (inFieldFacet) {\n          if (localName.equals(SORT_SPECIFICATION)) {\n            // Start a Sort Specification\n            inSortSpecification = true;\n            sortSpecification = new FacetSortSpecification();\n          }\n        } else if (localName.equals(FIELD_FACET)) {\n          // Start a Field Facet Request\n          // Get attributes (limit, minCount, showMissing)\n          String att = atts.getValue(uri,LIMIT);\n          if (att!=null) {\n            limit = Integer.parseInt(att);\n          } else {\n            limit = DEFAULT_FACET_LIMIT;\n          }\n          att = atts.getValue(uri,MIN_COUNT);\n          if (att!=null) {\n            minCount = Integer.parseInt(att);\n          } else {\n            minCount = DEFAULT_FACET_MINCOUNT;\n          }\n          att = atts.getValue(uri,SHOW_MISSING);\n          if (att!=null) {\n            showMissing = Boolean.parseBoolean(att);\n          } else {\n            showMissing = DEFAULT_FACET_FIELD_SHOW_MISSING;\n          }\n          \n          inFieldFacet = true;\n        } else if (localName.equals(RANGE_FACET)) {\n          // Start a Range Facet Request\n          // Get attributes (hardEnd)\n          String att = atts.getValue(uri,HARD_END);\n          if (att!=null) {\n            hardend = Boolean.parseBoolean(att);\n          } else {\n            hardend = false;\n          }\n          \n          // Initiate Range Facet classes\n          gaps = new ArrayList<>();\n          includeBoundaries = EnumSet.noneOf(FacetRangeInclude.class);\n          otherRanges = EnumSet.noneOf(FacetRangeOther.class);\n          inRangeFacet = true;\n        } else if (localName.equals(QUERY_FACET)) {\n          // Start a Query Facet Request\n          queries = new ArrayList<>();\n          inQueryFacet = true;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST)){\n        // Start an Analytics Request\n        \n        // Renew each list.\n        fieldFacetList = new ArrayList<>();\n        rangeFacetList = new ArrayList<>();\n        queryFacetList = new ArrayList<>();\n        expressionList = new ArrayList<>();\n        inRequest = true;\n      }\n    } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n      //Begin the parsing of the Analytics Requests\n      requests = new ArrayList<>();\n      inEnvelope = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#startElement(String,String,String,Attributes).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n    currentElementText = \"\";\n    if (inEnvelope) {\n      if (inRequest) {\n        if (localName.equals(STATISTIC)) {\n          // Start a Statistic Request\n          inStatistic = true;\n        } else if (inFieldFacet) {\n          if (localName.equals(SORT_SPECIFICATION)) {\n            // Start a Sort Specification\n            inSortSpecification = true;\n            sortSpecification = new FacetSortSpecification();\n          }\n        } else if (localName.equals(FIELD_FACET)) {\n          // Start a Field Facet Request\n          // Get attributes (limit, minCount, showMissing)\n          String att = atts.getValue(uri,LIMIT);\n          if (att!=null) {\n            limit = Integer.parseInt(att);\n          } else {\n            limit = DEFAULT_FACET_LIMIT;\n          }\n          att = atts.getValue(uri,MIN_COUNT);\n          if (att!=null) {\n            minCount = Integer.parseInt(att);\n          } else {\n            minCount = DEFAULT_FACET_MINCOUNT;\n          }\n          att = atts.getValue(uri,SHOW_MISSING);\n          if (att!=null) {\n            showMissing = Boolean.parseBoolean(att);\n          } else {\n            showMissing = DEFAULT_FACET_FIELD_SHOW_MISSING;\n          }\n          \n          inFieldFacet = true;\n        } else if (localName.equals(RANGE_FACET)) {\n          // Start a Range Facet Request\n          // Get attributes (hardEnd)\n          String att = atts.getValue(uri,HARD_END);\n          if (att!=null) {\n            hardend = Boolean.parseBoolean(att);\n          } else {\n            hardend = false;\n          }\n          \n          // Initiate Range Facet classes\n          gaps = new ArrayList<>();\n          includeBoundaries = EnumSet.noneOf(FacetRangeInclude.class);\n          otherRanges = EnumSet.noneOf(FacetRangeOther.class);\n          inRangeFacet = true;\n        } else if (localName.equals(QUERY_FACET)) {\n          // Start a Query Facet Request\n          queries = new ArrayList<>();\n          inQueryFacet = true;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST)){\n        // Start an Analytics Request\n        \n        // Renew each list.\n        fieldFacetList = new ArrayList<>();\n        rangeFacetList = new ArrayList<>();\n        queryFacetList = new ArrayList<>();\n        expressionList = new ArrayList<>();\n        inRequest = true;\n      }\n    } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n      //Begin the parsing of the Analytics Requests\n      requests = new ArrayList<>();\n      inEnvelope = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/request/AnalyticsContentHandler#startElement(String,String,String,Attributes).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n    currentElementText = \"\";\n    if (inEnvelope) {\n      if (inRequest) {\n        if (localName.equals(STATISTIC)) {\n          // Start a Statistic Request\n          inStatistic = true;\n        } else if (inFieldFacet) {\n          if (localName.equals(SORT_SPECIFICATION)) {\n            // Start a Sort Specification\n            inSortSpecification = true;\n            sortSpecification = new FacetSortSpecification();\n          }\n        } else if (localName.equals(FIELD_FACET)) {\n          // Start a Field Facet Request\n          // Get attributes (limit, minCount, showMissing)\n          String att = atts.getValue(uri,LIMIT);\n          if (att!=null) {\n            limit = Integer.parseInt(att);\n          } else {\n            limit = DEFAULT_FACET_LIMIT;\n          }\n          att = atts.getValue(uri,MIN_COUNT);\n          if (att!=null) {\n            minCount = Integer.parseInt(att);\n          } else {\n            minCount = DEFAULT_FACET_MINCOUNT;\n          }\n          att = atts.getValue(uri,SHOW_MISSING);\n          if (att!=null) {\n            showMissing = Boolean.parseBoolean(att);\n          } else {\n            showMissing = DEFAULT_FACET_FIELD_SHOW_MISSING;\n          }\n          \n          inFieldFacet = true;\n        } else if (localName.equals(RANGE_FACET)) {\n          // Start a Range Facet Request\n          // Get attributes (hardEnd)\n          String att = atts.getValue(uri,HARD_END);\n          if (att!=null) {\n            hardend = Boolean.parseBoolean(att);\n          } else {\n            hardend = false;\n          }\n          \n          // Initiate Range Facet classes\n          gaps = new ArrayList<>();\n          includeBoundaries = EnumSet.noneOf(FacetRangeInclude.class);\n          otherRanges = EnumSet.noneOf(FacetRangeOther.class);\n          inRangeFacet = true;\n        } else if (localName.equals(QUERY_FACET)) {\n          // Start a Query Facet Request\n          queries = new ArrayList<>();\n          inQueryFacet = true;\n        }\n      } else if (localName.equals(ANALYTICS_REQUEST)){\n        // Start an Analytics Request\n        \n        // Renew each list.\n        fieldFacetList = new ArrayList<>();\n        rangeFacetList = new ArrayList<>();\n        queryFacetList = new ArrayList<>();\n        expressionList = new ArrayList<>();\n        inRequest = true;\n      }\n    } else if (localName.equals(ANALYTICS_REQUEST_ENVELOPE)){\n      //Begin the parsing of the Analytics Requests\n      requests = new ArrayList<>();\n      inEnvelope = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}