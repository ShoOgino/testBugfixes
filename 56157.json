{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86365ce8db75e42ebe10805e99e92c463fef63b6","date":1330370408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocsEnum.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, 0);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","bugFix":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, 0);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, 0);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, false);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(term);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(null, term.field, term.bytes, 0);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c1f75cbc80446a0380e76b64210cdf8e3858d7","date":1359394908,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":null,"sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(term);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#docId(AtomicReader,Term).mjava","sourceNew":null,"sourceOld":"  public int docId(AtomicReader reader, Term term) throws IOException {\n    int docFreq = reader.docFreq(term);\n    assertEquals(1, docFreq);\n    DocsEnum termDocsEnum = reader.termDocsEnum(term);\n    int nextDoc = termDocsEnum.nextDoc();\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, termDocsEnum.nextDoc());\n    return nextDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["b6a0e3c1c21aac8ecf75706605133012833585c7","17c1f75cbc80446a0380e76b64210cdf8e3858d7"],"17c1f75cbc80446a0380e76b64210cdf8e3858d7":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["86365ce8db75e42ebe10805e99e92c463fef63b6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","02331260bb246364779cb6f04919ca47900d01bb"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"02331260bb246364779cb6f04919ca47900d01bb":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17c1f75cbc80446a0380e76b64210cdf8e3858d7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","86365ce8db75e42ebe10805e99e92c463fef63b6"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["d4d69c535930b5cce125cff868d40f6373dc27d4","17c1f75cbc80446a0380e76b64210cdf8e3858d7"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6a0e3c1c21aac8ecf75706605133012833585c7","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}