{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","commits":[{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) {\n        if (needsFreqs && !hasFreq) {\n          return null;\n        }\n\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"02331260bb246364779cb6f04919ca47900d01bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"02331260bb246364779cb6f04919ca47900d01bb":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}