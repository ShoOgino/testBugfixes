{"path":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","sourceOld":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n                        Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","sourceOld":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n                        Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","sourceOld":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n                        Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","sourceOld":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bb50752d43a65ef1b623eabdb8e865983d3cd6","date":1304257984,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n      Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null || \n                        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","sourceOld":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n                        Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n      Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null || \n                        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","sourceOld":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n                        Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n      Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null || \n                        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","sourceOld":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n                        Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null ||\n        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"\tpublic void testDuplicateFilterQueryXML() throws ParserException, IOException\n\t{\n      Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null || \n                        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n\t\t\tQuery q=parse(\"DuplicateFilterQuery.xml\");\n\t\t\tint h = searcher.search(q, null, 1000).totalHits;\n\t\t\tassertEquals(\"DuplicateFilterQuery should produce 1 result \", 1,h);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#testDuplicateFilterQueryXML().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#testDuplicateFilterQueryXML().mjava","sourceNew":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null ||\n        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","sourceOld":"  public void testDuplicateFilterQueryXML() throws ParserException, IOException {\n    Assume.assumeTrue(searcher.getIndexReader().getSequentialSubReaders() == null ||\n        searcher.getIndexReader().getSequentialSubReaders().length == 1);\n    Query q = parse(\"DuplicateFilterQuery.xml\");\n    int h = searcher.search(q, null, 1000).totalHits;\n    assertEquals(\"DuplicateFilterQuery should produce 1 result \", 1, h);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["9454a6510e2db155fb01faa5c049b06ece95fab9","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a3776dccca01c11e7046323cfad46a3b4a471233","c1bb50752d43a65ef1b623eabdb8e865983d3cd6","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}