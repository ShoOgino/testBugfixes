{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newField(\"foo\", fooField.toString(), TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"term\", termField.toString(), TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newField(\"foo\", fooField.toString(), TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"term\", termField.toString(), TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newField(\"foo\", fooField.toString(), TextField.TYPE_UNSTORED);\n    Field field2 = newField(\"term\", termField.toString(), TextField.TYPE_UNSTORED);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879f5e74b68e6faa45251db337bb1e1a9e9be647","date":1350008268,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["04f07771a2a7dd3a395700665ed839c3dae2def2","879f5e74b68e6faa45251db337bb1e1a9e9be647"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["04f07771a2a7dd3a395700665ed839c3dae2def2","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8","879f5e74b68e6faa45251db337bb1e1a9e9be647"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"879f5e74b68e6faa45251db337bb1e1a9e9be647":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}