{"path":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    rnd = newRandom();\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, rnd.nextLong());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random.nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    rnd = newRandom();\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, rnd.nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random.nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    rnd = newRandom();\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, rnd.nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random.nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random.nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}