{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","commits":[{"id":"4d44c142f2e458fd09d473333a8eecb1516ddb05","date":1367347752,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void message(String component, String message) {\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ec0d240527a6868c3d152a1e4c8cf3708e51b03","date":1371788703,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","sourceNew":"    @Override\n    public void message(String component, String message) {\n      if (\"TP\".equals(component)) {\n        return; // ignore test points!\n      }\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n    }\n\n","sourceOld":"    @Override\n    public void message(String component, String message) {\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","sourceNew":"    @Override\n    public void message(String component, String message) {\n      if (\"TP\".equals(component)) {\n        return; // ignore test points!\n      }\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n    }\n\n","sourceOld":"    @Override\n    public void message(String component, String message) {\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e88d055a67a6ad62392bf8f49e5b9be1fa505c3","date":1434305483,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","sourceNew":"    @Override\n    public void message(String component, String message) {\n      if (\"TP\".equals(component)) {\n        return; // ignore test points!\n      }\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + dateFormat.format(new Date()) + \"; \" + name + \"]: \" + message);\n    }\n\n","sourceOld":"    @Override\n    public void message(String component, String message) {\n      if (\"TP\".equals(component)) {\n        return; // ignore test points!\n      }\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2044826e198fe2a0b4fa0950a09d454fffa06114","date":1434313572,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","sourceNew":"    @Override\n    public void message(String component, String message) {\n      if (\"TP\".equals(component)) {\n        return; // ignore test points!\n      }\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n    }\n\n","sourceOld":"    @Override\n    public void message(String component, String message) {\n      if (\"TP\".equals(component)) {\n        return; // ignore test points!\n      }\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + dateFormat.format(new Date()) + \"; \" + name + \"]: \" + message);\n    }\n\n","bugFix":null,"bugIntro":["b646b72d60543eadbb734b204c85d7638eafa402"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b646b72d60543eadbb734b204c85d7638eafa402","date":1434404081,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream#message(String,String).mjava","sourceNew":"    @Override\n    public void message(String component, String message) {\n      if (\"TP\".equals(component)) {\n        return; // ignore test points!\n      }\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + getTimestamp() + \"; \" + name + \"]: \" + message);    \n    }\n\n","sourceOld":"    @Override\n    public void message(String component, String message) {\n      if (\"TP\".equals(component)) {\n        return; // ignore test points!\n      }\n      final String name;\n      if (Thread.currentThread().getName().startsWith(\"TEST-\")) {\n        // The name of the main thread is way too\n        // long when looking at IW verbose output...\n        name = \"main\";\n      } else {\n        name = Thread.currentThread().getName();\n      }\n      stream.println(component + \" \" + messageID + \" [\" + new Date() + \"; \" + name + \"]: \" + message);    \n    }\n\n","bugFix":["2044826e198fe2a0b4fa0950a09d454fffa06114"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4d44c142f2e458fd09d473333a8eecb1516ddb05","7ec0d240527a6868c3d152a1e4c8cf3708e51b03"],"b646b72d60543eadbb734b204c85d7638eafa402":["2044826e198fe2a0b4fa0950a09d454fffa06114"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e88d055a67a6ad62392bf8f49e5b9be1fa505c3":["7ec0d240527a6868c3d152a1e4c8cf3708e51b03"],"4d44c142f2e458fd09d473333a8eecb1516ddb05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2044826e198fe2a0b4fa0950a09d454fffa06114":["9e88d055a67a6ad62392bf8f49e5b9be1fa505c3"],"7ec0d240527a6868c3d152a1e4c8cf3708e51b03":["4d44c142f2e458fd09d473333a8eecb1516ddb05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b646b72d60543eadbb734b204c85d7638eafa402"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"b646b72d60543eadbb734b204c85d7638eafa402":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d44c142f2e458fd09d473333a8eecb1516ddb05"],"4d44c142f2e458fd09d473333a8eecb1516ddb05":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7ec0d240527a6868c3d152a1e4c8cf3708e51b03"],"9e88d055a67a6ad62392bf8f49e5b9be1fa505c3":["2044826e198fe2a0b4fa0950a09d454fffa06114"],"2044826e198fe2a0b4fa0950a09d454fffa06114":["b646b72d60543eadbb734b204c85d7638eafa402"],"7ec0d240527a6868c3d152a1e4c8cf3708e51b03":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9e88d055a67a6ad62392bf8f49e5b9be1fa505c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}