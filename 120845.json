{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.offset = 0;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.offset = 0;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22abfa0c2df167320b9c97d1bdbb19347ff95402","date":1359067319,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n    return bytes.hashCode();\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.offset = 0;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n    return bytes.hashCode();\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0. \n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    if (shift>31 || shift<0)\n      throw new IllegalArgumentException(\"Illegal shift value, must be 0..31\");\n    int hash, nChars = (31-shift)/7 + 1;\n    bytes.offset = 0;\n    bytes.length = nChars+1;\n    if (bytes.bytes.length < bytes.length) {\n      bytes.grow(NumericUtils.BUF_SIZE_INT);\n    }\n    bytes.bytes[0] = (byte) (hash = (SHIFT_START_INT + shift));\n    int sortableBits = val ^ 0x80000000;\n    sortableBits >>>= shift;\n    while (nChars > 0) {\n      // Store 7 bits per byte for compatibility\n      // with UTF-8 encoding of terms\n      bytes.bytes[nChars--] = (byte)(sortableBits & 0x7f);\n      sortableBits >>>= 7;\n    }\n    // calculate hash\n    for (int i = 1; i < bytes.length; i++) {\n      hash = 31*hash + bytes.bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   * @return the hash code for indexing (TermsHash)\n   */\n  public static int intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n    return bytes.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRefBuilder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#intToPrefixCoded(int,int,BytesRef).mjava","sourceNew":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRefBuilder bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n  }\n\n","sourceOld":"  /**\n   * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.\n   * This is method is used by {@link NumericTokenStream}.\n   * After encoding, {@code bytes.offset} will always be 0.\n   * @param val the numeric value\n   * @param shift how many bits to strip from the right\n   * @param bytes will contain the encoded value\n   */\n  public static void intToPrefixCoded(final int val, final int shift, final BytesRef bytes) {\n    intToPrefixCodedBytes(val, shift, bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["22abfa0c2df167320b9c97d1bdbb19347ff95402"],"22abfa0c2df167320b9c97d1bdbb19347ff95402":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","22abfa0c2df167320b9c97d1bdbb19347ff95402"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"22abfa0c2df167320b9c97d1bdbb19347ff95402":["30fe9fa09df804ce770f1b667401a7a7647301ed","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["22abfa0c2df167320b9c97d1bdbb19347ff95402","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}