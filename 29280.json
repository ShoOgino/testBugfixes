{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","commits":[{"id":"8512200aed2724abd80dbeb686d3412d537b7d8a","date":1342139754,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67664a3347662a2e72f102f98469ac0b520fa2c8","date":1355363954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 45000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":null,"sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    \n    \n    long timeoutAt = System.currentTimeMillis() + 30000;\n\n    boolean allTimesAreCorrect = false;\n    while (System.currentTimeMillis() < timeoutAt) {\n      Map<String,Long> urlToTimeAfter = new HashMap<String,Long>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8512200aed2724abd80dbeb686d3412d537b7d8a","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"67664a3347662a2e72f102f98469ac0b520fa2c8":["8512200aed2724abd80dbeb686d3412d537b7d8a"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["67664a3347662a2e72f102f98469ac0b520fa2c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0eff89b16ebd0046c839c5d02ee44500be5c7886"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"67664a3347662a2e72f102f98469ac0b520fa2c8":["0eff89b16ebd0046c839c5d02ee44500be5c7886"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"8512200aed2724abd80dbeb686d3412d537b7d8a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","67664a3347662a2e72f102f98469ac0b520fa2c8","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","8512200aed2724abd80dbeb686d3412d537b7d8a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}