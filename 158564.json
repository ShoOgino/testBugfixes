{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"76f7066a3ec6e68e257b01dd46edbbdd3530690a","date":1358805020,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    // nocommit: this must be multiple asserts\n    //assert (field.getDocValuesType() != null && (DocValues.isNumber(field.getDocValuesType()) || DocValues.isFloat(field.getDocValuesType()))) ||\n    //  (field.getNormType() != null && (DocValues.isNumber(field.getNormType()) || DocValues.isFloat(field.getNormType()))): \"field=\" + field.name;\n    writeFieldEntry(field);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33b99b59f252327c7208ef3c400d3b71b08ebeed","date":1358805858,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    // nocommit: this must be multiple asserts\n    //assert (field.getDocValuesType() != null && (DocValues.isNumber(field.getDocValuesType()) || DocValues.isFloat(field.getDocValuesType()))) ||\n    //  (field.getNormType() != null && (DocValues.isNumber(field.getNormType()) || DocValues.isFloat(field.getNormType()))): \"field=\" + field.name;\n    writeFieldEntry(field);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert (field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC ||\n            field.getNormType() == FieldInfo.DocValuesType.NUMERIC);\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == FieldInfo.DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, FieldInfo.DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.NUMERIC || field.hasNorms();\n    writeFieldEntry(field, DocValuesType.NUMERIC);\n\n    // first pass to find min/max\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for(Number n : values) {\n      long v = n == null ? 0 : n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    // write our minimum value to the .dat, all entries are deltas from that\n    SimpleTextUtil.write(data, MINVALUE);\n    SimpleTextUtil.write(data, Long.toString(minValue), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // build up our fixed-width \"simple text packed ints\"\n    // format\n    BigInteger maxBig = BigInteger.valueOf(maxValue);\n    BigInteger minBig = BigInteger.valueOf(minValue);\n    BigInteger diffBig = maxBig.subtract(minBig);\n    int maxBytesPerValue = diffBig.toString().length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesPerValue; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern to the .dat\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n\n    final String patternString = sb.toString();\n    \n    final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));\n    \n    int numDocsWritten = 0;\n\n    // second pass to write the values\n    for(Number n : values) {\n      long value = n == null ? 0 : n.longValue();\n      assert value >= minValue;\n      Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));\n      String s = encoder.format(delta);\n      assert s.length() == patternString.length();\n      SimpleTextUtil.write(data, s, scratch);\n      SimpleTextUtil.writeNewline(data);\n      if (n == null) {\n        SimpleTextUtil.write(data, \"F\", scratch);\n      } else {\n        SimpleTextUtil.write(data, \"T\", scratch);\n      }\n      SimpleTextUtil.writeNewline(data);\n      numDocsWritten++;\n      assert numDocsWritten <= numDocs;\n    }\n\n    assert numDocs == numDocsWritten: \"numDocs=\" + numDocs + \" numDocsWritten=\" + numDocsWritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"33b99b59f252327c7208ef3c400d3b71b08ebeed":["76f7066a3ec6e68e257b01dd46edbbdd3530690a"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","05da2d758a6089e737cdfc230e57a51b472b94b6"],"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2bb2842e561df4e8e9ad89010605fc86ac265465","f7558b5077dd4abd457be151475f13b541f4f13e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33b99b59f252327c7208ef3c400d3b71b08ebeed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2bb2842e561df4e8e9ad89010605fc86ac265465","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","2bb2842e561df4e8e9ad89010605fc86ac265465"],"33b99b59f252327c7208ef3c400d3b71b08ebeed":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["33b99b59f252327c7208ef3c400d3b71b08ebeed"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["05da2d758a6089e737cdfc230e57a51b472b94b6","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76f7066a3ec6e68e257b01dd46edbbdd3530690a","d4d69c535930b5cce125cff868d40f6373dc27d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}