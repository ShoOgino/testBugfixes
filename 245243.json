{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#applyMergeChanges(MergePolicy.OneMerge,boolean).mjava","commits":[{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#applyMergeChanges(MergePolicy.OneMerge,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** applies all changes caused by committing a merge to this SegmentInfos */\n  void applyMergeChanges(MergePolicy.OneMerge merge, boolean dropSegment) {\n    final Set<SegmentInfo> mergedAway = new HashSet<SegmentInfo>(merge.segments);\n    boolean inserted = false;\n    int newSegIdx = 0;\n    for (int segIdx = 0, cnt = segments.size(); segIdx < cnt; segIdx++) {\n      assert segIdx >= newSegIdx;\n      final SegmentInfo info = segments.get(segIdx);\n      if (mergedAway.contains(info)) {\n        if (!inserted && !dropSegment) {\n          segments.set(segIdx, merge.info);\n          inserted = true;\n          newSegIdx++;\n        }\n      } else {\n        segments.set(newSegIdx, info);\n        newSegIdx++;\n      }\n    }\n\n    // Either we found place to insert segment, or, we did\n    // not, but only because all segments we merged became\n    // deleted while we are merging, in which case it should\n    // be the case that the new segment is also all deleted,\n    // we insert it at the beginning if it should not be dropped:\n    if (!inserted && !dropSegment) {\n      segments.add(0, merge.info);\n    }\n\n    // the rest of the segments in list are duplicates, so don't remove from map, only list!\n    segments.subList(newSegIdx, segments.size()).clear();\n    \n    // update the Set\n    if (!dropSegment) {\n      segmentSet.add(merge.info);\n    }\n    segmentSet.removeAll(mergedAway);\n    \n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#applyMergeChanges(MergePolicy.OneMerge,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** applies all changes caused by committing a merge to this SegmentInfos */\n  void applyMergeChanges(MergePolicy.OneMerge merge, boolean dropSegment) {\n    final Set<SegmentInfo> mergedAway = new HashSet<SegmentInfo>(merge.segments);\n    boolean inserted = false;\n    int newSegIdx = 0;\n    for (int segIdx = 0, cnt = segments.size(); segIdx < cnt; segIdx++) {\n      assert segIdx >= newSegIdx;\n      final SegmentInfo info = segments.get(segIdx);\n      if (mergedAway.contains(info)) {\n        if (!inserted && !dropSegment) {\n          segments.set(segIdx, merge.info);\n          inserted = true;\n          newSegIdx++;\n        }\n      } else {\n        segments.set(newSegIdx, info);\n        newSegIdx++;\n      }\n    }\n\n    // Either we found place to insert segment, or, we did\n    // not, but only because all segments we merged became\n    // deleted while we are merging, in which case it should\n    // be the case that the new segment is also all deleted,\n    // we insert it at the beginning if it should not be dropped:\n    if (!inserted && !dropSegment) {\n      segments.add(0, merge.info);\n    }\n\n    // the rest of the segments in list are duplicates, so don't remove from map, only list!\n    segments.subList(newSegIdx, segments.size()).clear();\n    \n    // update the Set\n    if (!dropSegment) {\n      segmentSet.add(merge.info);\n    }\n    segmentSet.removeAll(mergedAway);\n    \n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#applyMergeChanges(MergePolicy.OneMerge,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** applies all changes caused by committing a merge to this SegmentInfos */\n  void applyMergeChanges(MergePolicy.OneMerge merge, boolean dropSegment) {\n    final Set<SegmentInfo> mergedAway = new HashSet<SegmentInfo>(merge.segments);\n    boolean inserted = false;\n    int newSegIdx = 0;\n    for (int segIdx = 0, cnt = segments.size(); segIdx < cnt; segIdx++) {\n      assert segIdx >= newSegIdx;\n      final SegmentInfo info = segments.get(segIdx);\n      if (mergedAway.contains(info)) {\n        if (!inserted && !dropSegment) {\n          segments.set(segIdx, merge.info);\n          inserted = true;\n          newSegIdx++;\n        }\n      } else {\n        segments.set(newSegIdx, info);\n        newSegIdx++;\n      }\n    }\n\n    // Either we found place to insert segment, or, we did\n    // not, but only because all segments we merged became\n    // deleted while we are merging, in which case it should\n    // be the case that the new segment is also all deleted,\n    // we insert it at the beginning if it should not be dropped:\n    if (!inserted && !dropSegment) {\n      segments.add(0, merge.info);\n    }\n\n    // the rest of the segments in list are duplicates, so don't remove from map, only list!\n    segments.subList(newSegIdx, segments.size()).clear();\n    \n    // update the Set\n    if (!dropSegment) {\n      segmentSet.add(merge.info);\n    }\n    segmentSet.removeAll(mergedAway);\n    \n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#applyMergeChanges(MergePolicy.OneMerge,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#applyMergeChanges(MergePolicy.OneMerge,boolean).mjava","sourceNew":"  /** applies all changes caused by committing a merge to this SegmentInfos */\n  void applyMergeChanges(MergePolicy.OneMerge merge, boolean dropSegment) {\n    final Set<SegmentInfo> mergedAway = new HashSet<SegmentInfo>(merge.segments);\n    boolean inserted = false;\n    int newSegIdx = 0;\n    for (int segIdx = 0, cnt = segments.size(); segIdx < cnt; segIdx++) {\n      assert segIdx >= newSegIdx;\n      final SegmentInfo info = segments.get(segIdx);\n      if (mergedAway.contains(info)) {\n        if (!inserted && !dropSegment) {\n          segments.set(segIdx, merge.info);\n          inserted = true;\n          newSegIdx++;\n        }\n      } else {\n        segments.set(newSegIdx, info);\n        newSegIdx++;\n      }\n    }\n\n    // the rest of the segments in list are duplicates, so don't remove from map, only list!\n    segments.subList(newSegIdx, segments.size()).clear();\n    \n    // Either we found place to insert segment, or, we did\n    // not, but only because all segments we merged becamee\n    // deleted while we are merging, in which case it should\n    // be the case that the new segment is also all deleted,\n    // we insert it at the beginning if it should not be dropped:\n    if (!inserted && !dropSegment) {\n      segments.add(0, merge.info);\n    }\n\n    // update the Set\n    if (!dropSegment) {\n      segmentSet.add(merge.info);\n    }\n    segmentSet.removeAll(mergedAway);\n    \n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":"  /** applies all changes caused by committing a merge to this SegmentInfos */\n  void applyMergeChanges(MergePolicy.OneMerge merge, boolean dropSegment) {\n    final Set<SegmentInfo> mergedAway = new HashSet<SegmentInfo>(merge.segments);\n    boolean inserted = false;\n    int newSegIdx = 0;\n    for (int segIdx = 0, cnt = segments.size(); segIdx < cnt; segIdx++) {\n      assert segIdx >= newSegIdx;\n      final SegmentInfo info = segments.get(segIdx);\n      if (mergedAway.contains(info)) {\n        if (!inserted && !dropSegment) {\n          segments.set(segIdx, merge.info);\n          inserted = true;\n          newSegIdx++;\n        }\n      } else {\n        segments.set(newSegIdx, info);\n        newSegIdx++;\n      }\n    }\n\n    // Either we found place to insert segment, or, we did\n    // not, but only because all segments we merged became\n    // deleted while we are merging, in which case it should\n    // be the case that the new segment is also all deleted,\n    // we insert it at the beginning if it should not be dropped:\n    if (!inserted && !dropSegment) {\n      segments.add(0, merge.info);\n    }\n\n    // the rest of the segments in list are duplicates, so don't remove from map, only list!\n    segments.subList(newSegIdx, segments.size()).clear();\n    \n    // update the Set\n    if (!dropSegment) {\n      segmentSet.add(merge.info);\n    }\n    segmentSet.removeAll(mergedAway);\n    \n    assert segmentSet.size() == segments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#applyMergeChanges(MergePolicy.OneMerge,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#applyMergeChanges(MergePolicy.OneMerge,boolean).mjava","sourceNew":"  /** applies all changes caused by committing a merge to this SegmentInfos */\n  void applyMergeChanges(MergePolicy.OneMerge merge, boolean dropSegment) {\n    final Set<SegmentInfo> mergedAway = new HashSet<SegmentInfo>(merge.segments);\n    boolean inserted = false;\n    int newSegIdx = 0;\n    for (int segIdx = 0, cnt = segments.size(); segIdx < cnt; segIdx++) {\n      assert segIdx >= newSegIdx;\n      final SegmentInfo info = segments.get(segIdx);\n      if (mergedAway.contains(info)) {\n        if (!inserted && !dropSegment) {\n          segments.set(segIdx, merge.info);\n          inserted = true;\n          newSegIdx++;\n        }\n      } else {\n        segments.set(newSegIdx, info);\n        newSegIdx++;\n      }\n    }\n\n    // the rest of the segments in list are duplicates, so don't remove from map, only list!\n    segments.subList(newSegIdx, segments.size()).clear();\n    \n    // Either we found place to insert segment, or, we did\n    // not, but only because all segments we merged becamee\n    // deleted while we are merging, in which case it should\n    // be the case that the new segment is also all deleted,\n    // we insert it at the beginning if it should not be dropped:\n    if (!inserted && !dropSegment) {\n      segments.add(0, merge.info);\n    }\n\n    // update the Set\n    if (!dropSegment) {\n      segmentSet.add(merge.info);\n    }\n    segmentSet.removeAll(mergedAway);\n    \n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":"  /** applies all changes caused by committing a merge to this SegmentInfos */\n  void applyMergeChanges(MergePolicy.OneMerge merge, boolean dropSegment) {\n    final Set<SegmentInfo> mergedAway = new HashSet<SegmentInfo>(merge.segments);\n    boolean inserted = false;\n    int newSegIdx = 0;\n    for (int segIdx = 0, cnt = segments.size(); segIdx < cnt; segIdx++) {\n      assert segIdx >= newSegIdx;\n      final SegmentInfo info = segments.get(segIdx);\n      if (mergedAway.contains(info)) {\n        if (!inserted && !dropSegment) {\n          segments.set(segIdx, merge.info);\n          inserted = true;\n          newSegIdx++;\n        }\n      } else {\n        segments.set(newSegIdx, info);\n        newSegIdx++;\n      }\n    }\n\n    // the rest of the segments in list are duplicates, so don't remove from map, only list!\n    segments.subList(newSegIdx, segments.size()).clear();\n    \n    // Either we found place to insert segment, or, we did\n    // not, but only because all segments we merged becamee\n    // deleted while we are merging, in which case it should\n    // be the case that the new segment is also all deleted,\n    // we insert it at the beginning if it should not be dropped:\n    if (!inserted && !dropSegment) {\n      segments.add(0, merge.info);\n    }\n\n    // update the Set\n    if (!dropSegment) {\n      segmentSet.add(merge.info);\n    }\n    segmentSet.removeAll(mergedAway);\n    \n    assert segmentSet.size() == segments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","9ce667c6d3400b22523701c549c0d35e26da8b46"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}