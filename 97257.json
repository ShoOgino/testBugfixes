{"path":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","commits":[{"id":"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe","date":1408716126,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","pathOld":"/dev/null","sourceNew":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      try {\n      zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          } \n          throw new KeeperException.ConnectionLossException();\n        }\n      });\n      } catch(KeeperException.SessionExpiredException e) {\n        \n      } catch (Exception e) {\n        fail(\"Expected \" + KeeperException.SessionExpiredException.class.getSimpleName() + \" but got \" + e.getClass().getSimpleName());\n      }\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","sourceNew":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      try {\n      zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          } \n          throw new KeeperException.ConnectionLossException();\n        }\n      });\n      } catch(KeeperException.SessionExpiredException e) {\n        \n      } catch (Exception e) {\n        fail(\"Expected \" + KeeperException.SessionExpiredException.class.getSimpleName() + \" but got \" + e.getClass().getSimpleName());\n      }\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      try {\n      zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          } \n          throw new KeeperException.ConnectionLossException();\n        }\n      });\n      } catch(KeeperException.SessionExpiredException e) {\n        \n      } catch (Exception e) {\n        fail(\"Expected \" + KeeperException.SessionExpiredException.class.getSimpleName() + \" but got \" + e.getClass().getSimpleName());\n      }\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eacdba691ec9e0ff24c589e65a852b9915265e6","date":1508917488,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","sourceNew":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      try {\n      zkCmdExecutor.retryOperation(() -> {\n        if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n          throw new KeeperException.SessionExpiredException();\n        }\n        throw new KeeperException.ConnectionLossException();\n      });\n      } catch(KeeperException.SessionExpiredException e) {\n        \n      } catch (Exception e) {\n        fail(\"Expected \" + KeeperException.SessionExpiredException.class.getSimpleName() + \" but got \" + e.getClass().getSimpleName());\n      }\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      try {\n      zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public String execute() throws KeeperException, InterruptedException {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          } \n          throw new KeeperException.ConnectionLossException();\n        }\n      });\n      } catch(KeeperException.SessionExpiredException e) {\n        \n      } catch (Exception e) {\n        fail(\"Expected \" + KeeperException.SessionExpiredException.class.getSimpleName() + \" but got \" + e.getClass().getSimpleName());\n      }\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","sourceNew":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      expectThrows(KeeperException.SessionExpiredException.class, () -> {\n        zkCmdExecutor.retryOperation(() -> {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          }\n          throw new KeeperException.ConnectionLossException();\n        });\n      });\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      try {\n      zkCmdExecutor.retryOperation(() -> {\n        if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n          throw new KeeperException.SessionExpiredException();\n        }\n        throw new KeeperException.ConnectionLossException();\n      });\n      } catch(KeeperException.SessionExpiredException e) {\n        \n      } catch (Exception e) {\n        fail(\"Expected \" + KeeperException.SessionExpiredException.class.getSimpleName() + \" but got \" + e.getClass().getSimpleName());\n      }\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","sourceNew":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      expectThrows(KeeperException.SessionExpiredException.class, () -> {\n        zkCmdExecutor.retryOperation(() -> {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          }\n          throw new KeeperException.ConnectionLossException();\n        });\n      });\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      expectThrows(KeeperException.SessionExpiredException.class, () -> {\n        zkCmdExecutor.retryOperation(() -> {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          }\n          throw new KeeperException.ConnectionLossException();\n        });\n      });\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":["be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testZkCmdExectutor().mjava","sourceNew":"  public void testZkCmdExectutor() throws Exception {\n    Path zkDir = createTempDir(\"zkData\");\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      expectThrows(KeeperException.SessionExpiredException.class, () -> {\n        zkCmdExecutor.retryOperation(() -> {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          }\n          throw new KeeperException.ConnectionLossException();\n        });\n      });\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testZkCmdExectutor() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = null;\n\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n\n      final int timeout = random().nextInt(10000) + 5000;\n      \n      ZkCmdExecutor zkCmdExecutor = new ZkCmdExecutor(timeout);\n      final long start = System.nanoTime();\n      expectThrows(KeeperException.SessionExpiredException.class, () -> {\n        zkCmdExecutor.retryOperation(() -> {\n          if (System.nanoTime() - start > TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n            throw new KeeperException.SessionExpiredException();\n          }\n          throw new KeeperException.ConnectionLossException();\n        });\n      });\n    } finally {\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["1eacdba691ec9e0ff24c589e65a852b9915265e6"],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["f4abec28b874149a7223e32cc7a01704c27790de"],"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1778938cb7fb298e6e07a43e2d5acaf552d61518"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"be3387b47ea5f9c0ef8a22fc45775b1fd4e8e6fe":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["1eacdba691ec9e0ff24c589e65a852b9915265e6"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}