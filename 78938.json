{"path":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentInfoPerCommit,SegmentInfoPerCommit).mjava","sourceNew":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      try {\n        final long sz1 = size(o1);\n        final long sz2 = size(o2);\n        if (sz1 > sz2) {\n          return -1;\n        } else if (sz2 > sz1) {\n          return 1;\n        } else {\n          return o1.info.name.compareTo(o2.info.name);\n        }\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compare(SegmentInfoPerCommit o1, SegmentInfoPerCommit o2) {\n      try {\n        final long sz1 = size(o1);\n        final long sz2 = size(o2);\n        if (sz1 > sz2) {\n          return -1;\n        } else if (sz2 > sz1) {\n          return 1;\n        } else {\n          return o1.info.name.compareTo(o2.info.name);\n        }\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","sourceNew":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      try {\n        final long sz1 = size(o1, writer);\n        final long sz2 = size(o2, writer);\n        if (sz1 > sz2) {\n          return -1;\n        } else if (sz2 > sz1) {\n          return 1;\n        } else {\n          return o1.info.name.compareTo(o2.info.name);\n        }\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      try {\n        final long sz1 = size(o1);\n        final long sz2 = size(o2);\n        if (sz1 > sz2) {\n          return -1;\n        } else if (sz2 > sz1) {\n          return 1;\n        } else {\n          return o1.info.name.compareTo(o2.info.name);\n        }\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","sourceNew":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      // Sort by largest size:\n      int cmp = Long.compare(sizeInBytes.get(o2), sizeInBytes.get(o1));\n      if (cmp == 0) {\n        cmp = o1.info.name.compareTo(o2.info.name);\n      }\n      return cmp;\n    }\n\n","sourceOld":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      try {\n        final long sz1 = size(o1, writer);\n        final long sz2 = size(o2, writer);\n        if (sz1 > sz2) {\n          return -1;\n        } else if (sz2 > sz1) {\n          return 1;\n        } else {\n          return o1.info.name.compareTo(o2.info.name);\n        }\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","sourceNew":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      // Sort by largest size:\n      int cmp = Long.compare(sizeInBytes.get(o2), sizeInBytes.get(o1));\n      if (cmp == 0) {\n        cmp = o1.info.name.compareTo(o2.info.name);\n      }\n      return cmp;\n    }\n\n","sourceOld":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      try {\n        final long sz1 = size(o1, writer);\n        final long sz2 = size(o2, writer);\n        if (sz1 > sz2) {\n          return -1;\n        } else if (sz2 > sz1) {\n          return 1;\n        } else {\n          return o1.info.name.compareTo(o2.info.name);\n        }\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","sourceNew":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      // Sort by largest size:\n      int cmp = Long.compare(sizeInBytes.get(o2), sizeInBytes.get(o1));\n      if (cmp == 0) {\n        cmp = o1.info.name.compareTo(o2.info.name);\n      }\n      return cmp;\n    }\n\n","sourceOld":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      try {\n        final long sz1 = size(o1, writer);\n        final long sz2 = size(o2, writer);\n        if (sz1 > sz2) {\n          return -1;\n        } else if (sz2 > sz1) {\n          return 1;\n        } else {\n          return o1.info.name.compareTo(o2.info.name);\n        }\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56fb5e4e4b239474721e13b4cd9542ea2d215451","date":1529091182,"type":4,"author":"Erick","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      // Sort by largest size:\n      int cmp = Long.compare(sizeInBytes.get(o2), sizeInBytes.get(o1));\n      if (cmp == 0) {\n        cmp = o1.info.name.compareTo(o2.info.name);\n      }\n      return cmp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      // Sort by largest size:\n      int cmp = Long.compare(sizeInBytes.get(o2), sizeInBytes.get(o1));\n      if (cmp == 0) {\n        cmp = o1.info.name.compareTo(o2.info.name);\n      }\n      return cmp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy.SegmentByteSizeDescending#compare(SegmentCommitInfo,SegmentCommitInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compare(SegmentCommitInfo o1, SegmentCommitInfo o2) {\n      // Sort by largest size:\n      int cmp = Long.compare(sizeInBytes.get(o2), sizeInBytes.get(o1));\n      if (cmp == 0) {\n        cmp = o1.info.name.compareTo(o2.info.name);\n      }\n      return cmp;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","56fb5e4e4b239474721e13b4cd9542ea2d215451"],"56fb5e4e4b239474721e13b4cd9542ea2d215451":["28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["027bee21e09164c9ee230395405076d1e0034b30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"027bee21e09164c9ee230395405076d1e0034b30":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["027bee21e09164c9ee230395405076d1e0034b30","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["027bee21e09164c9ee230395405076d1e0034b30","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56fb5e4e4b239474721e13b4cd9542ea2d215451"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","56fb5e4e4b239474721e13b4cd9542ea2d215451"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["027bee21e09164c9ee230395405076d1e0034b30"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"56fb5e4e4b239474721e13b4cd9542ea2d215451":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"027bee21e09164c9ee230395405076d1e0034b30":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","56fb5e4e4b239474721e13b4cd9542ea2d215451","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}