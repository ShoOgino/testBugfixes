{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","commits":[{"id":"3f50fec5dadda9f0c72e0e8fe342b6438178a459","date":1402575501,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrInputDocumentEquals(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean assertSolrInputDocumentEquals(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!assertSolrInputDocumentEquals(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertSolrInputDocumentEquals(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean assertSolrInputDocumentEquals(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!assertSolrInputDocumentEquals(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n    if (Float.compare(sdoc1.getDocumentBoost(), sdoc2.getDocumentBoost()) != 0) {\n      return false;\n    }\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    while (iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2)) {\n        return false;\n      }\n\n      if(!(sdoc1.get(key1).getFirstValue() instanceof SolrInputDocument)) {\n        if(!val1.equals(val2)) {\n          return false;\n        }\n      } else {\n        if (!(sdoc2.get(key2).getFirstValue() instanceof SolrInputDocument)) {\n          return false;\n        }\n        Collection col1 = (Collection) val1;\n        Collection col2 = (Collection) val2;\n        if (col1.size() != col2.size()) {\n          return false;\n        }\n        Iterator<SolrInputDocument> colIter1 = col1.iterator();\n        Iterator<SolrInputDocument> colIter2 = col2.iterator();\n        while (colIter1.hasNext()) {\n          if (!compareSolrInputDocument(colIter1.next(), colIter2.next())) {\n            return false;\n          }\n        }\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    while (iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2)) {\n        return false;\n      }\n\n      if(!(sdoc1.get(key1).getFirstValue() instanceof SolrInputDocument)) {\n        if(!val1.equals(val2)) {\n          return false;\n        }\n      } else {\n        if (!(sdoc2.get(key2).getFirstValue() instanceof SolrInputDocument)) {\n          return false;\n        }\n        Collection col1 = (Collection) val1;\n        Collection col2 = (Collection) val2;\n        if (col1.size() != col2.size()) {\n          return false;\n        }\n        Iterator<SolrInputDocument> colIter1 = col1.iterator();\n        Iterator<SolrInputDocument> colIter2 = col2.iterator();\n        while (colIter1.hasNext()) {\n          if (!compareSolrInputDocument(colIter1.next(), colIter2.next())) {\n            return false;\n          }\n        }\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    while (iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2)) {\n        return false;\n      }\n\n      if(!(sdoc1.get(key1).getFirstValue() instanceof SolrInputDocument)) {\n        if(!val1.equals(val2)) {\n          return false;\n        }\n      } else {\n        if (!(sdoc2.get(key2).getFirstValue() instanceof SolrInputDocument)) {\n          return false;\n        }\n        Collection col1 = (Collection) val1;\n        Collection col2 = (Collection) val2;\n        if (col1.size() != col2.size()) {\n          return false;\n        }\n        Iterator<SolrInputDocument> colIter1 = col1.iterator();\n        Iterator<SolrInputDocument> colIter2 = col2.iterator();\n        while (colIter1.hasNext()) {\n          if (!compareSolrInputDocument(colIter1.next(), colIter2.next())) {\n            return false;\n          }\n        }\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    if(iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2) || !val1.equals(val2)) {\n        return false;\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#compareSolrInputDocument(Object,Object).mjava","sourceNew":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    while (iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2)) {\n        return false;\n      }\n\n      if(!(sdoc1.get(key1).getFirstValue() instanceof SolrInputDocument)) {\n        if(!val1.equals(val2)) {\n          return false;\n        }\n      } else {\n        if (!(sdoc2.get(key2).getFirstValue() instanceof SolrInputDocument)) {\n          return false;\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        Collection col1 = (Collection) val1;\n        @SuppressWarnings({\"rawtypes\"})\n        Collection col2 = (Collection) val2;\n        if (col1.size() != col2.size()) {\n          return false;\n        }\n        @SuppressWarnings({\"unchecked\"})\n        Iterator<SolrInputDocument> colIter1 = col1.iterator();\n        @SuppressWarnings({\"unchecked\"})\n        Iterator<SolrInputDocument> colIter2 = col2.iterator();\n        while (colIter1.hasNext()) {\n          if (!compareSolrInputDocument(colIter1.next(), colIter2.next())) {\n            return false;\n          }\n        }\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean compareSolrInputDocument(Object expected, Object actual) {\n\n    if (!(expected instanceof SolrInputDocument) || !(actual instanceof SolrInputDocument)) {\n      return false;\n    }\n\n    if (expected == actual) {\n      return true;\n    }\n\n    SolrInputDocument sdoc1 = (SolrInputDocument) expected;\n    SolrInputDocument sdoc2 = (SolrInputDocument) actual;\n\n    if(sdoc1.getFieldNames().size() != sdoc2.getFieldNames().size()) {\n      return false;\n    }\n\n    Iterator<String> iter1 = sdoc1.getFieldNames().iterator();\n    Iterator<String> iter2 = sdoc2.getFieldNames().iterator();\n\n    while (iter1.hasNext()) {\n      String key1 = iter1.next();\n      String key2 = iter2.next();\n\n      Object val1 = sdoc1.getFieldValues(key1);\n      Object val2 = sdoc2.getFieldValues(key2);\n\n      if(!key1.equals(key2)) {\n        return false;\n      }\n\n      if(!(sdoc1.get(key1).getFirstValue() instanceof SolrInputDocument)) {\n        if(!val1.equals(val2)) {\n          return false;\n        }\n      } else {\n        if (!(sdoc2.get(key2).getFirstValue() instanceof SolrInputDocument)) {\n          return false;\n        }\n        Collection col1 = (Collection) val1;\n        Collection col2 = (Collection) val2;\n        if (col1.size() != col2.size()) {\n          return false;\n        }\n        Iterator<SolrInputDocument> colIter1 = col1.iterator();\n        Iterator<SolrInputDocument> colIter2 = col2.iterator();\n        while (colIter1.hasNext()) {\n          if (!compareSolrInputDocument(colIter1.next(), colIter2.next())) {\n            return false;\n          }\n        }\n      }\n    }\n    if(sdoc1.getChildDocuments() == null && sdoc2.getChildDocuments() == null) {\n      return true;\n    }\n    if(sdoc1.getChildDocuments() == null || sdoc2.getChildDocuments() == null) {\n      return false;\n    } else if(sdoc1.getChildDocuments().size() != sdoc2.getChildDocuments().size()) {\n      return false;\n    } else {\n      Iterator<SolrInputDocument> childDocsIter1 = sdoc1.getChildDocuments().iterator();\n      Iterator<SolrInputDocument> childDocsIter2 = sdoc2.getChildDocuments().iterator();\n      while(childDocsIter1.hasNext()) {\n        if(!compareSolrInputDocument(childDocsIter1.next(), childDocsIter2.next())) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["acd9883560fd89e6448b2b447302fe543040cd4f","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"acd9883560fd89e6448b2b447302fe543040cd4f":["3f50fec5dadda9f0c72e0e8fe342b6438178a459"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["acd9883560fd89e6448b2b447302fe543040cd4f","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f50fec5dadda9f0c72e0e8fe342b6438178a459","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"3f50fec5dadda9f0c72e0e8fe342b6438178a459":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","acd9883560fd89e6448b2b447302fe543040cd4f"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["6809a6d7924df2c864d6a5863944aff9dfeb372c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}