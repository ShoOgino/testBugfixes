{"path":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static AtomicReader[] initSubReaders(IndexReader reader) throws IOException {\n      final ArrayList<AtomicReader> subs = new ArrayList<AtomicReader>();\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          subs.add(new FakeDeleteAtomicIndexReader(r));\n        }\n      }.run();\n      return subs.toArray(new AtomicReader[subs.size()]);\n    }\n\n","sourceOld":"    private static AtomicReader[] initSubReaders(IndexReader reader) throws IOException {\n      final ArrayList<AtomicReader> subs = new ArrayList<AtomicReader>();\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          subs.add(new FakeDeleteAtomicIndexReader(r));\n        }\n      }.run();\n      return subs.toArray(new AtomicReader[subs.size()]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) throws IOException {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","sourceOld":"    private static AtomicReader[] initSubReaders(IndexReader reader) throws IOException {\n      final ArrayList<AtomicReader> subs = new ArrayList<AtomicReader>();\n      new ReaderUtil.Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          subs.add(new FakeDeleteAtomicIndexReader(r));\n        }\n      }.run();\n      return subs.toArray(new AtomicReader[subs.size()]);\n    }\n\n","bugFix":null,"bugIntro":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","sourceOld":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) throws IOException {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","sourceOld":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) throws IOException {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","date":1344896544,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","sourceOld":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","sourceOld":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","sourceOld":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.getTopReaderContext().leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static FakeDeleteLeafIndexReader[] initSubReaders(IndexReader reader) {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final FakeDeleteLeafIndexReader[] subs = new FakeDeleteLeafIndexReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteLeafIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","sourceOld":"    private static FakeDeleteAtomicIndexReader[] initSubReaders(IndexReader reader) {\n      final List<AtomicReaderContext> leaves = reader.leaves();\n      final FakeDeleteAtomicIndexReader[] subs = new FakeDeleteAtomicIndexReader[leaves.size()];\n      int i = 0;\n      for (final AtomicReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteAtomicIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.FakeDeleteIndexReader#initSubReaders(IndexReader).mjava","sourceNew":"    private static FakeDeleteLeafIndexReader[] initSubReaders(IndexReader reader) throws IOException {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final FakeDeleteLeafIndexReader[] subs = new FakeDeleteLeafIndexReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteLeafIndexReader(SlowCodecReaderWrapper.wrap(ctx.reader()));\n      }\n      return subs;\n    }\n\n","sourceOld":"    private static FakeDeleteLeafIndexReader[] initSubReaders(IndexReader reader) {\n      final List<LeafReaderContext> leaves = reader.leaves();\n      final FakeDeleteLeafIndexReader[] subs = new FakeDeleteLeafIndexReader[leaves.size()];\n      int i = 0;\n      for (final LeafReaderContext ctx : leaves) {\n        subs[i++] = new FakeDeleteLeafIndexReader(ctx.reader());\n      }\n      return subs;\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d743dbdc40bef0a47a5d54d99623ef0c2eb5923e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["505bff044e47a553f461b6f4484d1d08faf4ac85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d743dbdc40bef0a47a5d54d99623ef0c2eb5923e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d743dbdc40bef0a47a5d54d99623ef0c2eb5923e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"505bff044e47a553f461b6f4484d1d08faf4ac85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}