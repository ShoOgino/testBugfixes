{"path":"src/test/org/apache/solr/TestDistributedSearch#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/TestDistributedSearch#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String,Integer> handle) {\n    boolean ordered = (flags&UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int na = 0, nb = 0;\n\n    for(;;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea=null, nameb=null;\n      Object vala=null, valb=null;\n\n      int flagsa, flagsb;\n      for (;;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) continue;\n        na++;\n        break;\n      }\n\n      if (!ordered) posb=0;  // reset if not ordered\n\n      while (posb<b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) continue;\n        if (eq(namea, nameb)) {\n          nb++;\n          break;\n        }\n        if (ordered) {\n          return \".\"+namea+\"!=\"+nameb+\" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\"+namea+cmp;\n    }\n\n\n    if (na != nb) {\n      return \".size()==\"+na+\",\"+nb;\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9ac277fcde6efbfb4b34a6b2cdbda483003cda18"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ac277fcde6efbfb4b34a6b2cdbda483003cda18","date":1220648479,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/TestDistributedSearch#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"src/test/org/apache/solr/TestDistributedSearch#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String,Integer> handle) {\n    boolean ordered = (flags&UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for(;;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea=null, nameb=null;\n      Object vala=null, valb=null;\n\n      int flagsa, flagsb;\n      for (;;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb=0;  // reset if not ordered\n\n      while (posb<b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\"+namea+\"!=\"+nameb+\" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\"+namea+cmp;\n    }\n\n\n    if (a.size()-aSkipped != b.size()-bSkipped) {\n      return \".size()==\"+a.size()+\",\"+b.size()+\"skipped=\"+aSkipped+\",\"+bSkipped;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String,Integer> handle) {\n    boolean ordered = (flags&UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int na = 0, nb = 0;\n\n    for(;;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea=null, nameb=null;\n      Object vala=null, valb=null;\n\n      int flagsa, flagsb;\n      for (;;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) continue;\n        na++;\n        break;\n      }\n\n      if (!ordered) posb=0;  // reset if not ordered\n\n      while (posb<b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) continue;\n        if (eq(namea, nameb)) {\n          nb++;\n          break;\n        }\n        if (ordered) {\n          return \".\"+namea+\"!=\"+nameb+\" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\"+namea+cmp;\n    }\n\n\n    if (na != nb) {\n      return \".size()==\"+na+\",\"+nb;\n    }\n\n    return null;\n  }\n\n","bugFix":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b57d1523f42368168ea21982dd84effd69453d3","date":1260216800,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"src/test/org/apache/solr/TestDistributedSearch#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String,Integer> handle) {\n    boolean ordered = (flags&UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for(;;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea=null, nameb=null;\n      Object vala=null, valb=null;\n\n      int flagsa, flagsb;\n      for (;;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb=0;  // reset if not ordered\n\n      while (posb<b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\"+namea+\"!=\"+nameb+\" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\"+namea+cmp;\n    }\n\n\n    if (a.size()-aSkipped != b.size()-bSkipped) {\n      return \".size()==\"+a.size()+\",\"+b.size()+\"skipped=\"+aSkipped+\",\"+bSkipped;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["d1c5c000a4f7db9f84794088342aa428d80dfa37","d1c5c000a4f7db9f84794088342aa428d80dfa37","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0b57d1523f42368168ea21982dd84effd69453d3":["9ac277fcde6efbfb4b34a6b2cdbda483003cda18"],"9ac277fcde6efbfb4b34a6b2cdbda483003cda18":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"0b57d1523f42368168ea21982dd84effd69453d3":[],"9ac277fcde6efbfb4b34a6b2cdbda483003cda18":["0b57d1523f42368168ea21982dd84effd69453d3"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["9ac277fcde6efbfb4b34a6b2cdbda483003cda18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0b57d1523f42368168ea21982dd84effd69453d3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}