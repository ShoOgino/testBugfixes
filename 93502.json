{"path":"src/java/org/apache/lucene/util/OpenBitSet#xor(OpenBitSet).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#xor(OpenBitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** this = this XOR other */\n  public void xor(OpenBitSet other) {\n    int newLen = Math.max(wlen,other.wlen);\n    ensureCapacityWords(newLen);\n\n    long[] thisArr = this.bits;\n    long[] otherArr = other.bits;\n    int pos=Math.min(wlen,other.wlen);\n    while(--pos>=0) {\n      thisArr[pos] ^= otherArr[pos];\n    }\n    if (this.wlen < newLen) {\n      System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);\n    }\n    this.wlen = newLen;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#xor(OpenBitSet).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#xor(OpenBitSet).mjava","sourceNew":"  /** this = this XOR other */\n  public void xor(OpenBitSet other) {\n    int newLen = Math.max(wlen,other.wlen);\n    ensureCapacityWords(newLen);\n\n    long[] thisArr = this.bits;\n    long[] otherArr = other.bits;\n    int pos=Math.min(wlen,other.wlen);\n    while(--pos>=0) {\n      thisArr[pos] ^= otherArr[pos];\n    }\n    if (this.wlen < newLen) {\n      System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);\n    }\n    this.wlen = newLen;\n  }\n\n","sourceOld":"  /** this = this XOR other */\n  public void xor(OpenBitSet other) {\n    int newLen = Math.max(wlen,other.wlen);\n    ensureCapacityWords(newLen);\n\n    long[] thisArr = this.bits;\n    long[] otherArr = other.bits;\n    int pos=Math.min(wlen,other.wlen);\n    while(--pos>=0) {\n      thisArr[pos] ^= otherArr[pos];\n    }\n    if (this.wlen < newLen) {\n      System.arraycopy(otherArr, this.wlen, thisArr, this.wlen, newLen-this.wlen);\n    }\n    this.wlen = newLen;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["52ce7e961a8217faac8128e3c8fe67819eefdde9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}