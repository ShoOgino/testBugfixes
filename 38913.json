{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","commits":[{"id":"c85fa43e6918808743daa7847ba0264373af687f","date":1395166336,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad53237cd844da2787711b60f12768c5d6288b3b","date":1417053965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 20*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 20*RANDOM_MULTIPLIER, 8192, false, false);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 20*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 20*RANDOM_MULTIPLIER, 8192, false, false);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 20*RANDOM_MULTIPLIER, 8192, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(3);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192, false, false);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(5);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 20*RANDOM_MULTIPLIER, 8192, false, false);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testRandomHugeStrings().mjava","sourceNew":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(1);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192, false, false);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some enormous random strings through the analyzer */\n  public void testRandomHugeStrings() throws Exception {\n    int numIterations = atLeast(3);\n    for (int i = 0; i < numIterations; i++) {\n      final int flags = random().nextInt(512);\n      final CharArraySet protectedWords;\n      if (random().nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n      \n      Analyzer a = new Analyzer() {\n        \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // TODO: properly support positionLengthAttribute\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192, false, false);\n      a.close();\n    }\n  }\n\n","bugFix":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ad53237cd844da2787711b60f12768c5d6288b3b","a56958d7f71a28824f20031ffbb2e13502a0274e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["c85fa43e6918808743daa7847ba0264373af687f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ad53237cd844da2787711b60f12768c5d6288b3b"],"ad53237cd844da2787711b60f12768c5d6288b3b":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"c85fa43e6918808743daa7847ba0264373af687f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["71da933d30aea361ccc224d6544c451cbf49916d"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["ad53237cd844da2787711b60f12768c5d6288b3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c85fa43e6918808743daa7847ba0264373af687f"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ad53237cd844da2787711b60f12768c5d6288b3b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"c85fa43e6918808743daa7847ba0264373af687f":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}