{"path":"lucene/core/src/test/org/apache/lucene/util/graph/TestGraphTokenStreamFiniteStrings#testStackedGraphWithRepeat().mjava","commits":[{"id":"2dff57a5c41a798398714fc237597286cc412949","date":1494789162,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/graph/TestGraphTokenStreamFiniteStrings#testStackedGraphWithRepeat().mjava","pathOld":"/dev/null","sourceNew":"  public void testStackedGraphWithRepeat() throws Exception {\n    TokenStream ts = new CannedTokenStream(\n        token(\"ny\", 1, 4),\n        token(\"new\", 0, 1),\n        token(\"new\", 0, 3),\n        token(\"york\", 1, 1),\n        token(\"city\", 1, 2),\n        token(\"york\", 1, 1),\n        token(\"is\", 1, 1),\n        token(\"great\", 1, 1)\n    );\n\n    GraphTokenStreamFiniteStrings graph = new GraphTokenStreamFiniteStrings(ts);\n\n    Iterator<TokenStream> it = graph.getFiniteStrings();\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"ny\", \"is\", \"great\"}, new int[]{1, 1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"new\", \"york\", \"city\", \"is\", \"great\"}, new int[]{1, 1, 1, 1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"new\", \"york\", \"is\", \"great\"}, new int[]{1, 1, 1, 1});\n    assertFalse(it.hasNext());\n\n    int[] points = graph.articulationPoints();\n    assertArrayEquals(points, new int[] {4, 5});\n\n    assertTrue(graph.hasSidePath(0));\n    it = graph.getFiniteStrings(0, 4);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"ny\"}, new int[]{1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"new\", \"york\", \"city\"}, new int[]{1, 1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"new\", \"york\"}, new int[]{1, 1});\n    assertFalse(it.hasNext());\n\n    assertFalse(graph.hasSidePath(4));\n    it = graph.getFiniteStrings(4, 5);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"is\"}, new int[] {1});\n    assertFalse(it.hasNext());\n    Term[] terms = graph.getTerms(\"field\", 4);\n    assertArrayEquals(terms, new Term[] {new Term(\"field\", \"is\")});\n\n    assertFalse(graph.hasSidePath(5));\n    it = graph.getFiniteStrings(5, -1);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"great\"}, new int[] {1});\n    assertFalse(it.hasNext());\n    terms = graph.getTerms(\"field\", 5);\n    assertArrayEquals(terms, new Term[] {new Term(\"field\", \"great\")});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/graph/TestGraphTokenStreamFiniteStrings#testStackedGraphWithRepeat().mjava","pathOld":"/dev/null","sourceNew":"  public void testStackedGraphWithRepeat() throws Exception {\n    TokenStream ts = new CannedTokenStream(\n        token(\"ny\", 1, 4),\n        token(\"new\", 0, 1),\n        token(\"new\", 0, 3),\n        token(\"york\", 1, 1),\n        token(\"city\", 1, 2),\n        token(\"york\", 1, 1),\n        token(\"is\", 1, 1),\n        token(\"great\", 1, 1)\n    );\n\n    GraphTokenStreamFiniteStrings graph = new GraphTokenStreamFiniteStrings(ts);\n\n    Iterator<TokenStream> it = graph.getFiniteStrings();\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"ny\", \"is\", \"great\"}, new int[]{1, 1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"new\", \"york\", \"city\", \"is\", \"great\"}, new int[]{1, 1, 1, 1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"new\", \"york\", \"is\", \"great\"}, new int[]{1, 1, 1, 1});\n    assertFalse(it.hasNext());\n\n    int[] points = graph.articulationPoints();\n    assertArrayEquals(points, new int[] {4, 5});\n\n    assertTrue(graph.hasSidePath(0));\n    it = graph.getFiniteStrings(0, 4);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"ny\"}, new int[]{1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"new\", \"york\", \"city\"}, new int[]{1, 1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"new\", \"york\"}, new int[]{1, 1});\n    assertFalse(it.hasNext());\n\n    assertFalse(graph.hasSidePath(4));\n    it = graph.getFiniteStrings(4, 5);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"is\"}, new int[] {1});\n    assertFalse(it.hasNext());\n    Term[] terms = graph.getTerms(\"field\", 4);\n    assertArrayEquals(terms, new Term[] {new Term(\"field\", \"is\")});\n\n    assertFalse(graph.hasSidePath(5));\n    it = graph.getFiniteStrings(5, -1);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"great\"}, new int[] {1});\n    assertFalse(it.hasNext());\n    terms = graph.getTerms(\"field\", 5);\n    assertArrayEquals(terms, new Term[] {new Term(\"field\", \"great\")});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dff57a5c41a798398714fc237597286cc412949"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dff57a5c41a798398714fc237597286cc412949":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dff57a5c41a798398714fc237597286cc412949"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","2dff57a5c41a798398714fc237597286cc412949"],"2dff57a5c41a798398714fc237597286cc412949":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}