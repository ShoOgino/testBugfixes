{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":null,"sourceOld":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments,\n     *  and remove from the pool.   This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          if (readerMap.containsKey(info)) {\n            readerMap.get(info).hasChanges = false;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(List<SegmentInfo> infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(List<SegmentInfo> infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":null,"sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }     \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["9454a6510e2db155fb01faa5c049b06ece95fab9","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","9454a6510e2db155fb01faa5c049b06ece95fab9"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f1bdbf92da222965b46c0a942c3857ba56e5c638","b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f1bdbf92da222965b46c0a942c3857ba56e5c638","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}