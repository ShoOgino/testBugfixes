{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#toNonGeo(Shape).mjava","commits":[{"id":"3d2a1de5195b361aa0308c81d975ac74695d0ffe","date":1401207212,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#toNonGeo(Shape).mjava","pathOld":"/dev/null","sourceNew":"    private Shape toNonGeo(Shape shape) {\n      if (!ctx.isGeo())\n        return shape;//already non-geo\n      if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        if (rect.getCrossesDateLine()) {\n          return new ShapePair(\n              ctx2D.makeRectangle(rect.getMinX(), 180, rect.getMinY(), rect.getMaxY()),\n              ctx2D.makeRectangle(-180, rect.getMaxX(), rect.getMinY(), rect.getMaxY()),\n              biasContainsThenWithin);\n        } else {\n          return ctx2D.makeRectangle(rect.getMinX(), rect.getMaxX(), rect.getMinY(), rect.getMaxY());\n        }\n      }\n      //no need to do others; this addresses the -180/+180 ambiguity corner test problem\n      return shape;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#toNonGeo(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#toNonGeo(Shape).mjava","sourceNew":"    private Shape toNonGeo(Shape shape) {\n      if (!ctx.isGeo())\n        return shape;//already non-geo\n      if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        if (rect.getCrossesDateLine()) {\n          return new ShapePair(\n              ctx2D.makeRectangle(rect.getMinX(), 180, rect.getMinY(), rect.getMaxY()),\n              ctx2D.makeRectangle(-180, rect.getMaxX(), rect.getMinY(), rect.getMaxY()),\n              biasContainsThenWithin);\n        } else {\n          return ctx2D.makeRectangle(rect.getMinX(), rect.getMaxX(), rect.getMinY(), rect.getMaxY());\n        }\n      }\n      //no need to do others; this addresses the -180/+180 ambiguity corner test problem\n      return shape;\n    }\n\n","sourceOld":"    private Shape toNonGeo(Shape shape) {\n      if (!ctx.isGeo())\n        return shape;//already non-geo\n      if (shape instanceof Rectangle) {\n        Rectangle rect = (Rectangle) shape;\n        if (rect.getCrossesDateLine()) {\n          return new ShapePair(\n              ctx2D.makeRectangle(rect.getMinX(), 180, rect.getMinY(), rect.getMaxY()),\n              ctx2D.makeRectangle(-180, rect.getMaxX(), rect.getMinY(), rect.getMaxY()),\n              biasContainsThenWithin);\n        } else {\n          return ctx2D.makeRectangle(rect.getMinX(), rect.getMaxX(), rect.getMinY(), rect.getMaxY());\n        }\n      }\n      //no need to do others; this addresses the -180/+180 ambiguity corner test problem\n      return shape;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d2a1de5195b361aa0308c81d975ac74695d0ffe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0521546db127e358ced1772a9d696dbdd255b203":["3d2a1de5195b361aa0308c81d975ac74695d0ffe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0521546db127e358ced1772a9d696dbdd255b203"]},"commit2Childs":{"3d2a1de5195b361aa0308c81d975ac74695d0ffe":["0521546db127e358ced1772a9d696dbdd255b203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d2a1de5195b361aa0308c81d975ac74695d0ffe"],"0521546db127e358ced1772a9d696dbdd255b203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}