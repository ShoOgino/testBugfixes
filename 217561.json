{"path":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","commits":[{"id":"ef084738192643e6e6fe09c159b37ff741390bb3","date":1096919051,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","pathOld":"/dev/null","sourceNew":"    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, eg. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(ioe);\n      };\n      return clone;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0980c149bcb4ff1964d34d07f98c0ab873d5fbd0","date":1147526962,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","sourceNew":"    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, eg. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      };\n      return clone;\n    }\n\n","sourceOld":"    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, eg. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        throw new RuntimeException(ioe);\n      };\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","sourceNew":"    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      };\n      return clone;\n    }\n\n","sourceOld":"    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, eg. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      };\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      };\n      return clone;\n    }\n\n","sourceOld":"    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      };\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      }\n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      };\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#clone().mjava","sourceNew":"    @Override\n    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      }\n      return clone;\n    }\n\n","sourceOld":"    @Override\n    public Object clone() {\n      MultiMMapIndexInput clone = (MultiMMapIndexInput)super.clone();\n      clone.isClone = true;\n      clone.buffers = new ByteBuffer[buffers.length];\n      // No need to clone bufSizes.\n      // Since most clones will use only one buffer, duplicate() could also be\n      // done lazy in clones, e.g. when adapting curBuf.\n      for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n        clone.buffers[bufNr] = buffers[bufNr].duplicate();\n      }\n      try {\n        clone.seek(getFilePointer());\n      } catch(IOException ioe) {\n        RuntimeException newException = new RuntimeException(ioe);\n        newException.initCause(ioe);\n        throw newException;\n      }\n      return clone;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef084738192643e6e6fe09c159b37ff741390bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"416d032f85b7ea8efc272f86ba46bc460589aff7":["0980c149bcb4ff1964d34d07f98c0ab873d5fbd0"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0980c149bcb4ff1964d34d07f98c0ab873d5fbd0":["ef084738192643e6e6fe09c159b37ff741390bb3"]},"commit2Childs":{"ef084738192643e6e6fe09c159b37ff741390bb3":["0980c149bcb4ff1964d34d07f98c0ab873d5fbd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef084738192643e6e6fe09c159b37ff741390bb3"],"8a9e385641d717e641408d8fbbc62be8fc766357":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0980c149bcb4ff1964d34d07f98c0ab873d5fbd0":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}