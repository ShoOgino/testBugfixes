{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(char,char).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(char,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts a single char whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(char min, char max) {\n    if (min == max) return makeChar(min);\n    Automaton a = new Automaton();\n    State s1 = new State();\n    State s2 = new State();\n    a.initial = s1;\n    s2.accept = true;\n    if (min <= max) s1.transitions.add(new Transition(min, max, s2));\n    a.deterministic = true;\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(char,char).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts a single codepoint whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(int min, int max) {\n    if (min == max) return makeChar(min);\n    Automaton a = new Automaton();\n    State s1 = new State();\n    State s2 = new State();\n    a.initial = s1;\n    s2.accept = true;\n    if (min <= max) s1.addTransition(new Transition(min, max, s2));\n    a.deterministic = true;\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts a single char whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(char min, char max) {\n    if (min == max) return makeChar(min);\n    Automaton a = new Automaton();\n    State s1 = new State();\n    State s2 = new State();\n    a.initial = s1;\n    s2.accept = true;\n    if (min <= max) s1.transitions.add(new Transition(min, max, s2));\n    a.deterministic = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"]},"commit2Childs":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}