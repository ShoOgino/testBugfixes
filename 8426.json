{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","commits":[{"id":"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","date":1371479482,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a query against each live and active replica of the specified shard \n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard) \n    throws Exception {\n\n    ArrayList<SolrServer> shardClients = new ArrayList<SolrServer>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a query against each live and active replica of the specified shard \n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard) \n    throws Exception {\n\n    ArrayList<SolrServer> shardClients = new ArrayList<SolrServer>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","sourceNew":"  /**\n   * Executes a query against each live and active replica of the specified shard \n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard) \n    throws Exception {\n\n    ArrayList<SolrServer> shardClients = new ArrayList<>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","sourceOld":"  /**\n   * Executes a query against each live and active replica of the specified shard \n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard) \n    throws Exception {\n\n    ArrayList<SolrServer> shardClients = new ArrayList<SolrServer>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","sourceNew":"  /**\n   * Executes a query against each live and active replica of the specified shard \n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard) \n    throws Exception {\n\n    ArrayList<SolrClient> shardClients = new ArrayList<>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","sourceOld":"  /**\n   * Executes a query against each live and active replica of the specified shard \n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard) \n    throws Exception {\n\n    ArrayList<SolrServer> shardClients = new ArrayList<>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","sourceNew":"  /**\n   * Executes a query against each live and active replica of the specified shard\n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard)\n    throws Exception {\n\n    ArrayList<SolrClient> shardClients = new ArrayList<>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","sourceOld":"  /**\n   * Executes a query against each live and active replica of the specified shard \n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard) \n    throws Exception {\n\n    ArrayList<SolrClient> shardClients = new ArrayList<>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#queryAndCompareReplicas(SolrParams,String).mjava","sourceNew":"  /**\n   * Executes a query against each live and active replica of the specified shard\n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard)\n    throws Exception {\n\n    ArrayList<SolrClient> shardClients = new ArrayList<>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP)) == Replica.State.ACTIVE;\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","sourceOld":"  /**\n   * Executes a query against each live and active replica of the specified shard\n   * and aserts that the results are identical.\n   *\n   * @see #queryAndCompare\n   */\n  public QueryResponse queryAndCompareReplicas(SolrParams params, String shard)\n    throws Exception {\n\n    ArrayList<SolrClient> shardClients = new ArrayList<>(7);\n\n    updateMappingsFromZk(jettys, clients);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);\n    assertNotNull(\"no jetties found for shard: \" + shard, solrJetties);\n\n\n    for (CloudJettyRunner cjetty : solrJetties) {\n      ZkNodeProps props = cjetty.info;\n      String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);\n      boolean live = zkStateReader.getClusterState().liveNodesContain(nodeName);\n      if (active && live) {\n        shardClients.add(cjetty.client.solrClient);\n      }\n    }\n    return queryAndCompare(params, shardClients);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["abb23fcc2461782ab204e61213240feb77d355aa"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"abb23fcc2461782ab204e61213240feb77d355aa":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a4f729cab8ab6d4bf8365940c6ee4e17a0cfdd9","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}