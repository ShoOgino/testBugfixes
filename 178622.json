{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","pathOld":"/dev/null","sourceNew":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (skipDocs == null || !skipDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","sourceNew":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (liveDocs == null || liveDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","sourceOld":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (skipDocs == null || !skipDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","sourceNew":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (liveDocs == null || liveDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","sourceOld":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (skipDocs == null || !skipDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","sourceNew":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (liveDocs == null || liveDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","sourceOld":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (skipDocs == null || !skipDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/SegmentTermDocs#readNoTf(int[],int[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermDocs#readNoTf(int[],int[],int).mjava","sourceNew":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (liveDocs == null || liveDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","sourceOld":"  private final int readNoTf(final int[] docs, final int[] freqs, final int length) throws IOException {\n    int i = 0;\n    while (i < length && count < df) {\n      // manually inlined call to next() for speed\n      doc += freqStream.readVInt();       \n      count++;\n\n      if (liveDocs == null || liveDocs.get(doc)) {\n        docs[i] = doc;\n        // Hardware freq to 1 when term freqs were not\n        // stored in the index\n        freqs[i] = 1;\n        ++i;\n      }\n    }\n    return i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["7b91922b55d15444d554721b352861d028eb8278","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}