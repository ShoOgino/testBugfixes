{"path":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be8442e5675c8b74c443e2abb4fc210eeb36c20b","date":1295755110,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"    <core\");\n    writeAttribute(w,\"name\",dcore.name.equals(\"\") ? defaultCoreName : dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties(), \"      \");\n      w.write(\"    </core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72","3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"    <core\");\n    writeAttribute(w,\"name\",dcore.name.equals(\"\") ? defaultCoreName : dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties(), \"      \");\n      w.write(\"    </core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"    <core\");\n    writeAttribute(w,\"name\",dcore.name.equals(\"\") ? defaultCoreName : dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties(), \"      \");\n      w.write(\"    </core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d2901bdb2faeb41d619d969ce5655adf783746d","date":1309912641,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"    <core\");\n    writeAttribute(w,\"name\",dcore.name.equals(\"\") ? defaultCoreName : dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties(), \"      \");\n      w.write(\"    </core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"    <core\");\n    writeAttribute(w,\"name\",dcore.name.equals(\"\") ? defaultCoreName : dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties(), \"      \");\n      w.write(\"    </core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"    <core\");\n    writeAttribute(w,\"name\",dcore.name.equals(\"\") ? defaultCoreName : dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    if (cd != null) {\n      opt = cd.getShardId();\n      if (opt != null)\n        writeAttribute(w,\"shard\",opt);\n      // only write out the collection name if it's not the default (the core name)\n      opt = cd.getCollectionName();\n      if (opt != null && !opt.equals(dcore.name))\n        writeAttribute(w,\"collection\",opt);\n    }\n\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties(), \"      \");\n      w.write(\"    </core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be8442e5675c8b74c443e2abb4fc210eeb36c20b":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["be8442e5675c8b74c443e2abb4fc210eeb36c20b","8d2901bdb2faeb41d619d969ce5655adf783746d"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["be8442e5675c8b74c443e2abb4fc210eeb36c20b","8d2901bdb2faeb41d619d969ce5655adf783746d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","be8442e5675c8b74c443e2abb4fc210eeb36c20b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","be8442e5675c8b74c443e2abb4fc210eeb36c20b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d2901bdb2faeb41d619d969ce5655adf783746d":["be8442e5675c8b74c443e2abb4fc210eeb36c20b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d2901bdb2faeb41d619d969ce5655adf783746d"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["be8442e5675c8b74c443e2abb4fc210eeb36c20b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"be8442e5675c8b74c443e2abb4fc210eeb36c20b":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","8d2901bdb2faeb41d619d969ce5655adf783746d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"1da8d55113b689b06716246649de6f62430f15c0":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"8d2901bdb2faeb41d619d969ce5655adf783746d":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}