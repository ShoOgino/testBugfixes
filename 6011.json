{"path":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#wrap(SolrQueryRequest,UpdateRequestProcessor).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#wrap(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#wrap(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  public static UpdateRequestProcessor wrap(SolrQueryRequest req, UpdateRequestProcessor next) {\n    //TODO get from \"Collection property\"\n    final String aliasName = req.getCore().getCoreDescriptor()\n        .getCoreProperty(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, null);\n    final DistribPhase shardDistribPhase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n    final DistribPhase aliasDistribPhase =\n        DistribPhase.parseParam(req.getParams().get(ALIAS_DISTRIB_UPDATE_PARAM));\n    if (aliasName == null || aliasDistribPhase != DistribPhase.NONE || shardDistribPhase != DistribPhase.NONE) {\n      // if aliasDistribPhase is not NONE, then there is no further collection routing to be done here.\n      //    TODO this may eventually not be true but at the moment it is\n      // if shardDistribPhase is not NONE, then the phase is after the scope of this URP\n      return next;\n    } else {\n      try {\n        RoutedAlias alias = RoutedAlias.fromProps(aliasName, getAliasProps(req, aliasName));\n        return new RoutedAliasUpdateProcessor(req, next, aliasDistribPhase, alias);\n      } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n      }\n\n    }\n  }\n\n","sourceOld":"  public static UpdateRequestProcessor wrap(SolrQueryRequest req, UpdateRequestProcessor next) {\n    //TODO get from \"Collection property\"\n    final String aliasName = req.getCore().getCoreDescriptor()\n        .getCoreProperty(TimeRoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, null);\n    final DistribPhase shardDistribPhase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n    final DistribPhase aliasDistribPhase =\n        DistribPhase.parseParam(req.getParams().get(ALIAS_DISTRIB_UPDATE_PARAM));\n    if (aliasName == null || aliasDistribPhase != DistribPhase.NONE || shardDistribPhase != DistribPhase.NONE) {\n      // if aliasDistribPhase is not NONE, then there is no further collection routing to be done here.\n      //    TODO this may eventually not be true but at the moment it is\n      // if shardDistribPhase is not NONE, then the phase is after the scope of this URP\n      return next;\n    } else {\n      return new TimeRoutedAliasUpdateProcessor(req, next, aliasName, aliasDistribPhase);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7446cb4193d4f3046ab7f5d0ddfc37ddaa514966","date":1560534676,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#wrap(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RoutedAliasUpdateProcessor#wrap(SolrQueryRequest,UpdateRequestProcessor).mjava","sourceNew":"  public static UpdateRequestProcessor wrap(SolrQueryRequest req, UpdateRequestProcessor next) {\n    String aliasName = null;\n    // Demeter please don't arrest us... hide your eyes :(\n    // todo: a core should have a more direct way of finding a collection name, and the collection properties\n    SolrCore core = req.getCore();\n    CoreDescriptor coreDescriptor = core.getCoreDescriptor();\n    CloudDescriptor cloudDescriptor = coreDescriptor.getCloudDescriptor();\n    if (cloudDescriptor != null) {\n      String collectionName = cloudDescriptor.getCollectionName();\n      CoreContainer coreContainer = core.getCoreContainer();\n      ZkController zkController = coreContainer.getZkController();\n      ZkStateReader zkStateReader = zkController.getZkStateReader();\n      Map<String, String> collectionProperties = zkStateReader.getCollectionProperties(collectionName, CACHE_FOR_MILLIS);\n      aliasName = collectionProperties.get(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP);\n    }\n    // fall back on core properties (legacy)\n    if (StringUtils.isBlank(aliasName)) {\n      aliasName = coreDescriptor.getCoreProperty(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, null);\n    }\n    final DistribPhase shardDistribPhase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n    final DistribPhase aliasDistribPhase =\n        DistribPhase.parseParam(req.getParams().get(ALIAS_DISTRIB_UPDATE_PARAM));\n    if (aliasName == null || aliasDistribPhase != DistribPhase.NONE || shardDistribPhase != DistribPhase.NONE) {\n      // if aliasDistribPhase is not NONE, then there is no further collection routing to be done here.\n      //    TODO this may eventually not be true but at the moment it is\n      // if shardDistribPhase is not NONE, then the phase is after the scope of this URP\n      return next;\n    } else {\n      try {\n        RoutedAlias alias = RoutedAlias.fromProps(aliasName, getAliasProps(req, aliasName));\n        return new RoutedAliasUpdateProcessor(req, next, aliasDistribPhase, alias);\n      } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n      }\n\n    }\n  }\n\n","sourceOld":"  public static UpdateRequestProcessor wrap(SolrQueryRequest req, UpdateRequestProcessor next) {\n    //TODO get from \"Collection property\"\n    final String aliasName = req.getCore().getCoreDescriptor()\n        .getCoreProperty(RoutedAlias.ROUTED_ALIAS_NAME_CORE_PROP, null);\n    final DistribPhase shardDistribPhase =\n        DistribPhase.parseParam(req.getParams().get(DISTRIB_UPDATE_PARAM));\n    final DistribPhase aliasDistribPhase =\n        DistribPhase.parseParam(req.getParams().get(ALIAS_DISTRIB_UPDATE_PARAM));\n    if (aliasName == null || aliasDistribPhase != DistribPhase.NONE || shardDistribPhase != DistribPhase.NONE) {\n      // if aliasDistribPhase is not NONE, then there is no further collection routing to be done here.\n      //    TODO this may eventually not be true but at the moment it is\n      // if shardDistribPhase is not NONE, then the phase is after the scope of this URP\n      return next;\n    } else {\n      try {\n        RoutedAlias alias = RoutedAlias.fromProps(aliasName, getAliasProps(req, aliasName));\n        return new RoutedAliasUpdateProcessor(req, next, aliasDistribPhase, alias);\n      } catch (Exception e) { // ensure we throw SERVER_ERROR not BAD_REQUEST at this stage\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Routed alias has invalid properties: \" + e, e);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7446cb4193d4f3046ab7f5d0ddfc37ddaa514966":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7446cb4193d4f3046ab7f5d0ddfc37ddaa514966"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["7446cb4193d4f3046ab7f5d0ddfc37ddaa514966"],"7446cb4193d4f3046ab7f5d0ddfc37ddaa514966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}