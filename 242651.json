{"path":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#run(int,String,int,String,Path,int,int).mjava","commits":[{"id":"b7ee2241d9fc5dee5029efe24602d8a4d2b4d760","date":1599669750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#run(int,String,int,String,Path,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  @SuppressWarnings(\"try\")\n  private static int run(int myID, String verifierHost, int verifierPort, String lockFactoryClassName,\n                        Path lockDirPath, int sleepTimeMS, int count) throws IOException, InterruptedException {\n    if (myID < 0 || myID > 255) {\n      System.out.println(\"myID must be a unique int 0..255\");\n      return 1;\n    }\n\n    final LockFactory lockFactory = getNewLockFactory(lockFactoryClassName);\n    // we test the lock factory directly, so we don't need it on the directory itself (the directory is just for testing)\n    final FSDirectory lockDir = new NIOFSDirectory(lockDirPath, NoLockFactory.INSTANCE);\n    final InetSocketAddress addr = new InetSocketAddress(verifierHost, verifierPort);\n    System.out.println(\"Connecting to server \" + addr +\n        \" and registering as client \" + myID + \"...\");\n    try (Socket socket = new Socket()) {\n      socket.setReuseAddress(true);\n      socket.connect(addr, 500);\n      final OutputStream out = socket.getOutputStream();\n      final InputStream in = socket.getInputStream();\n\n      out.write(myID);\n      out.flush();\n      LockFactory verifyLF = new VerifyingLockFactory(lockFactory, in, out);\n      final Random rnd = new Random();\n\n      // wait for starting gun\n      if (in.read() != LockVerifyServer.START_GUN_SIGNAL) {\n        throw new IOException(\"Protocol violation\");\n      }\n\n      for (int i = 0; i < count; i++) {\n        try (final Lock l = verifyLF.obtainLock(lockDir, LOCK_FILE_NAME)) {\n          if (rnd.nextInt(10) == 0) {\n            if (rnd.nextBoolean()) {\n              verifyLF = new VerifyingLockFactory(getNewLockFactory(lockFactoryClassName), in, out);\n            }\n            try (final Lock secondLock = verifyLF.obtainLock(lockDir, LOCK_FILE_NAME)) {\n              throw new IOException(\"Double obtain\");\n            } catch (LockObtainFailedException loe) {\n              // pass\n            }\n          }\n          Thread.sleep(sleepTimeMS);\n        } catch (LockObtainFailedException loe) {\n          // obtain failed\n        }\n\n        if (i % 500 == 0) {\n          System.out.println((i * 100. / count) + \"% done.\");\n        }\n\n        Thread.sleep(sleepTimeMS);\n      }\n    }\n\n    System.out.println(\"Finished \" + count + \" tries.\");\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7ee2241d9fc5dee5029efe24602d8a4d2b4d760":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7ee2241d9fc5dee5029efe24602d8a4d2b4d760"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7ee2241d9fc5dee5029efe24602d8a4d2b4d760"],"b7ee2241d9fc5dee5029efe24602d8a4d2b4d760":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}