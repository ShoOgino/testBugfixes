{"path":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testNullTPCs().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testNullTPCs().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testNullTPCs().mjava","sourceNew":"  public void testNullTPCs() throws Exception {\n    int numObjects = random.nextInt(4) + 3; // between [3, 6]\n    TwoPhaseCommit[] tpcs = new TwoPhaseCommit[numObjects];\n    boolean setNull = false;\n    for (int i = 0; i < tpcs.length; i++) {\n      boolean isNull = random.nextDouble() < 0.3;\n      if (isNull) {\n        setNull = true;\n        tpcs[i] = null;\n      } else {\n        tpcs[i] = new TwoPhaseCommitImpl(false, false, false);\n      }\n    }\n\n    if (!setNull) {\n      // none of the TPCs were picked to be null, pick one at random\n      int idx = random.nextInt(numObjects);\n      tpcs[idx] = null;\n    }\n\n    // following call would fail if TPCTool won't handle null TPCs properly\n    TwoPhaseCommitTool.execute(tpcs);\n  }\n\n","sourceOld":"  public void testNullTPCs() throws Exception {\n    int numObjects = random.nextInt(4) + 3; // between [3, 6]\n    TwoPhaseCommit[] tpcs = new TwoPhaseCommit[numObjects];\n    boolean setNull = false;\n    for (int i = 0; i < tpcs.length; i++) {\n      boolean isNull = random.nextDouble() < 0.3;\n      if (isNull) {\n        setNull = true;\n        tpcs[i] = null;\n      } else {\n        tpcs[i] = new TwoPhaseCommitImpl(false, false, false);\n      }\n    }\n\n    if (!setNull) {\n      // none of the TPCs were picked to be null, pick one at random\n      int idx = random.nextInt(numObjects);\n      tpcs[idx] = null;\n    }\n\n    // following call would fail if TPCTool won't handle null TPCs properly\n    TwoPhaseCommitTool.execute(tpcs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testNullTPCs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testNullTPCs().mjava","sourceNew":"  public void testNullTPCs() throws Exception {\n    int numObjects = random().nextInt(4) + 3; // between [3, 6]\n    TwoPhaseCommit[] tpcs = new TwoPhaseCommit[numObjects];\n    boolean setNull = false;\n    for (int i = 0; i < tpcs.length; i++) {\n      boolean isNull = random().nextDouble() < 0.3;\n      if (isNull) {\n        setNull = true;\n        tpcs[i] = null;\n      } else {\n        tpcs[i] = new TwoPhaseCommitImpl(false, false, false);\n      }\n    }\n\n    if (!setNull) {\n      // none of the TPCs were picked to be null, pick one at random\n      int idx = random().nextInt(numObjects);\n      tpcs[idx] = null;\n    }\n\n    // following call would fail if TPCTool won't handle null TPCs properly\n    TwoPhaseCommitTool.execute(tpcs);\n  }\n\n","sourceOld":"  public void testNullTPCs() throws Exception {\n    int numObjects = random.nextInt(4) + 3; // between [3, 6]\n    TwoPhaseCommit[] tpcs = new TwoPhaseCommit[numObjects];\n    boolean setNull = false;\n    for (int i = 0; i < tpcs.length; i++) {\n      boolean isNull = random.nextDouble() < 0.3;\n      if (isNull) {\n        setNull = true;\n        tpcs[i] = null;\n      } else {\n        tpcs[i] = new TwoPhaseCommitImpl(false, false, false);\n      }\n    }\n\n    if (!setNull) {\n      // none of the TPCs were picked to be null, pick one at random\n      int idx = random.nextInt(numObjects);\n      tpcs[idx] = null;\n    }\n\n    // following call would fail if TPCTool won't handle null TPCs properly\n    TwoPhaseCommitTool.execute(tpcs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d60e292705ee7b33afc5626438b30e694160930","date":1341229584,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testNullTPCs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testNullTPCs().mjava","sourceNew":"  public void testNullTPCs() throws Exception {\n    int numObjects = random().nextInt(4) + 3; // between [3, 6]\n    TwoPhaseCommit[] tpcs = new TwoPhaseCommit[numObjects];\n    boolean setNull = false;\n    for (int i = 0; i < tpcs.length; i++) {\n      boolean isNull = random().nextDouble() < 0.3;\n      if (isNull) {\n        setNull = true;\n        tpcs[i] = null;\n      } else {\n        tpcs[i] = new TwoPhaseCommitImpl(false, false, false);\n      }\n    }\n\n    if (!setNull) {\n      // none of the TPCs were picked to be null, pick one at random\n      int idx = random().nextInt(numObjects);\n      tpcs[idx] = null;\n    }\n\n    // following call would fail if TPCTool won't handle null TPCs properly\n    TwoPhaseCommitTool.execute(tpcs);\n  }\n\n","sourceOld":"  public void testNullTPCs() throws Exception {\n    int numObjects = random().nextInt(4) + 3; // between [3, 6]\n    TwoPhaseCommit[] tpcs = new TwoPhaseCommit[numObjects];\n    boolean setNull = false;\n    for (int i = 0; i < tpcs.length; i++) {\n      boolean isNull = random().nextDouble() < 0.3;\n      if (isNull) {\n        setNull = true;\n        tpcs[i] = null;\n      } else {\n        tpcs[i] = new TwoPhaseCommitImpl(false, false, false);\n      }\n    }\n\n    if (!setNull) {\n      // none of the TPCs were picked to be null, pick one at random\n      int idx = random().nextInt(numObjects);\n      tpcs[idx] = null;\n    }\n\n    // following call would fail if TPCTool won't handle null TPCs properly\n    TwoPhaseCommitTool.execute(tpcs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testNullTPCs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testNullTPCs().mjava","sourceNew":"  public void testNullTPCs() throws Exception {\n    int numObjects = random().nextInt(4) + 3; // between [3, 6]\n    TwoPhaseCommit[] tpcs = new TwoPhaseCommit[numObjects];\n    boolean setNull = false;\n    for (int i = 0; i < tpcs.length; i++) {\n      boolean isNull = random().nextDouble() < 0.3;\n      if (isNull) {\n        setNull = true;\n        tpcs[i] = null;\n      } else {\n        tpcs[i] = new TwoPhaseCommitImpl(false, false, false);\n      }\n    }\n\n    if (!setNull) {\n      // none of the TPCs were picked to be null, pick one at random\n      int idx = random().nextInt(numObjects);\n      tpcs[idx] = null;\n    }\n\n    // following call would fail if TPCTool won't handle null TPCs properly\n    TwoPhaseCommitTool.execute(tpcs);\n  }\n\n","sourceOld":"  public void testNullTPCs() throws Exception {\n    int numObjects = random().nextInt(4) + 3; // between [3, 6]\n    TwoPhaseCommit[] tpcs = new TwoPhaseCommit[numObjects];\n    boolean setNull = false;\n    for (int i = 0; i < tpcs.length; i++) {\n      boolean isNull = random().nextDouble() < 0.3;\n      if (isNull) {\n        setNull = true;\n        tpcs[i] = null;\n      } else {\n        tpcs[i] = new TwoPhaseCommitImpl(false, false, false);\n      }\n    }\n\n    if (!setNull) {\n      // none of the TPCs were picked to be null, pick one at random\n      int idx = random().nextInt(numObjects);\n      tpcs[idx] = null;\n    }\n\n    // following call would fail if TPCTool won't handle null TPCs properly\n    TwoPhaseCommitTool.execute(tpcs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d60e292705ee7b33afc5626438b30e694160930":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","1d60e292705ee7b33afc5626438b30e694160930"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d60e292705ee7b33afc5626438b30e694160930"]},"commit2Childs":{"1d60e292705ee7b33afc5626438b30e694160930":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["1d60e292705ee7b33afc5626438b30e694160930","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}