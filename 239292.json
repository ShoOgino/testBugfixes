{"path":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map).mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map).mjava","pathOld":"/dev/null","sourceNew":"  protected void doCommit(Map commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(fieldInfos.size());\n        Iterator it = norms.values().iterator();\n        while (it.hasNext()) {\n          Norm norm = (Norm) it.next();\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1085ea837da8f1e96697e17cf73e1d08e7329261"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map).mjava","sourceNew":"  protected void doCommit(Map commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        Iterator it = norms.values().iterator();\n        while (it.hasNext()) {\n          Norm norm = (Norm) it.next();\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  protected void doCommit(Map commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(fieldInfos.size());\n        Iterator it = norms.values().iterator();\n        while (it.hasNext()) {\n          Norm norm = (Norm) it.next();\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f011f01db72fa6f556a9a0843944ecee2de4aaa8","date":1255806907,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map[String,String]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doCommit(Map).mjava","sourceNew":"  protected void doCommit(Map<String,String> commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        Iterator it = norms.values().iterator();\n        while (it.hasNext()) {\n          Norm norm = (Norm) it.next();\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","sourceOld":"  protected void doCommit(Map commitUserData) throws IOException {\n    if (hasChanges) {\n      if (deletedDocsDirty) {               // re-write deleted\n        si.advanceDelGen();\n\n        // We can write directly to the actual name (vs to a\n        // .tmp & renaming it) because the file is not live\n        // until segments file is written:\n        deletedDocs.write(directory(), si.getDelFileName());\n\n        si.setDelCount(si.getDelCount()+pendingDeleteCount);\n        pendingDeleteCount = 0;\n        assert deletedDocs.count() == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + deletedDocs.count();\n      } else {\n        assert pendingDeleteCount == 0;\n      }\n\n      if (normsDirty) {               // re-write norms\n        si.setNumFields(core.fieldInfos.size());\n        Iterator it = norms.values().iterator();\n        while (it.hasNext()) {\n          Norm norm = (Norm) it.next();\n          if (norm.dirty) {\n            norm.reWrite(si);\n          }\n        }\n      }\n      deletedDocsDirty = false;\n      normsDirty = false;\n      hasChanges = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"f011f01db72fa6f556a9a0843944ecee2de4aaa8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["f011f01db72fa6f556a9a0843944ecee2de4aaa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}