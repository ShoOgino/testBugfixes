{"path":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","commits":[{"id":"5ae827abc0676fd634796da7b0a0726ebac813b8","date":1467296417,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null, asyncId, collectionProperties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56ae3539e829325e80cc0e8d65df4d724cc762d1","date":1467374872,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null, asyncId, collectionProperties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null, asyncId, collectionProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5719bfb2650ba43855e20564d39873bbbdc7f02c","date":1500676092,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","sourceNew":null,"sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","sourceNew":null,"sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestAuthenticationFramework#createCollection(MiniSolrCloudCluster,String,String).mjava","sourceNew":null,"sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String asyncId)\n      throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1/conf\"), configName);\n\n    final boolean persistIndex = random().nextBoolean();\n    Map<String, String>  collectionProperties = new HashMap<>();\n\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"56ae3539e829325e80cc0e8d65df4d724cc762d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae827abc0676fd634796da7b0a0726ebac813b8"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["56ae3539e829325e80cc0e8d65df4d724cc762d1"],"5ae827abc0676fd634796da7b0a0726ebac813b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["28288370235ed02234a64753cdbf0c6ec096304a"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"28288370235ed02234a64753cdbf0c6ec096304a":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a52341299179de5479672f7cf518bf4b173f34b3"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"56ae3539e829325e80cc0e8d65df4d724cc762d1":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"a52341299179de5479672f7cf518bf4b173f34b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["e9017cf144952056066919f1ebc7897ff9bd71b1","70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5ae827abc0676fd634796da7b0a0726ebac813b8":["56ae3539e829325e80cc0e8d65df4d724cc762d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56ae3539e829325e80cc0e8d65df4d724cc762d1","5ae827abc0676fd634796da7b0a0726ebac813b8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a52341299179de5479672f7cf518bf4b173f34b3","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}