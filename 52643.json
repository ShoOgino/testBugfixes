{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a packed integer array writer for the given number of values at the\n   * given bits/value. Writers append to the given IndexOutput and has very\n   * low memory overhead.\n   *\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param out          the destination for the produced bits.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return a Writer ready for receiving values.\n   * @throws IOException if bits could not be written to out.\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return new PackedWriter(out, valueCount, 8);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return new PackedWriter(out, valueCount, 16);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return new PackedWriter(out, valueCount, 32);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return new PackedWriter(out, valueCount, 64);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return new PackedWriter(out, valueCount, 24);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return new PackedWriter(out, valueCount, bitsPerValue);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return new Packed64SingleBlockWriter(out, valueCount, bpv);\n          }\n        }\n      }\n      return new PackedWriter(out, valueCount, bitsPerValue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array writer for the given number of values at the\n   * given bits/value. Writers append to the given IndexOutput and has very\n   * low memory overhead.\n   *\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param out          the destination for the produced bits.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return a Writer ready for receiving values.\n   * @throws IOException if bits could not be written to out.\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return getWriterByFormat(out, valueCount, 8, PACKED);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return getWriterByFormat(out, valueCount, 16, PACKED);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return getWriterByFormat(out, valueCount, 32, PACKED);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return getWriterByFormat(out, valueCount, 64, PACKED);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return getWriterByFormat(out, valueCount, 24, PACKED);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return getWriterByFormat(out, valueCount, 48, PACKED);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return getWriterByFormat(out, valueCount, bpv, PACKED_SINGLE_BLOCK);\n          }\n        }\n      }\n      return getWriterByFormat(out, valueCount, bitsPerValue, PACKED);\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array writer for the given number of values at the\n   * given bits/value. Writers append to the given IndexOutput and has very\n   * low memory overhead.\n   *\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param out          the destination for the produced bits.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return a Writer ready for receiving values.\n   * @throws IOException if bits could not be written to out.\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return new PackedWriter(out, valueCount, 8);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return new PackedWriter(out, valueCount, 16);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return new PackedWriter(out, valueCount, 32);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return new PackedWriter(out, valueCount, 64);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return new PackedWriter(out, valueCount, 24);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return new PackedWriter(out, valueCount, bitsPerValue);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return new Packed64SingleBlockWriter(out, valueCount, bpv);\n          }\n        }\n      }\n      return new PackedWriter(out, valueCount, bitsPerValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array writer for the given output, format, value\n   * count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used under the hoods, up to 63 bits will be wasted.\n   * An easy way to make sure that no space is lost is to always use a\n   * <code>valueCount</code> that is a multiple of 64.\n   * </p><p>\n   * This method writes metadata to the stream, so that the resulting stream is\n   * sufficient to restore a {@link Reader} from it. You don't need to track\n   * <code>valueCount</code> or <code>bitsPerValue</code> by yourself. In case\n   * this is a problem, you should probably look at\n   * {@link #getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter controls how\n   * readers that will be restored from this stream trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected. In case you are only interested\n   * in reading this stream sequentially later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   *\n   * @param out          the data output\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return             a Writer\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    final Writer writer = getWriterNoHeader(out, formatAndBits.format, valueCount, formatAndBits.bitsPerValue, DEFAULT_BUFFER_SIZE);\n    writer.writeHeader();\n    return writer;\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array writer for the given number of values at the\n   * given bits/value. Writers append to the given IndexOutput and has very\n   * low memory overhead.\n   *\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param out          the destination for the produced bits.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return a Writer ready for receiving values.\n   * @throws IOException if bits could not be written to out.\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return getWriterByFormat(out, valueCount, 8, PACKED);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return getWriterByFormat(out, valueCount, 16, PACKED);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return getWriterByFormat(out, valueCount, 32, PACKED);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return getWriterByFormat(out, valueCount, 64, PACKED);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return getWriterByFormat(out, valueCount, 24, PACKED);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return getWriterByFormat(out, valueCount, 48, PACKED);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return getWriterByFormat(out, valueCount, bpv, PACKED_SINGLE_BLOCK);\n          }\n        }\n      }\n      return getWriterByFormat(out, valueCount, bitsPerValue, PACKED);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array writer for the given output, format, value\n   * count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used under the hoods, up to 63 bits will be wasted.\n   * An easy way to make sure that no space is lost is to always use a\n   * <code>valueCount</code> that is a multiple of 64.\n   * </p><p>\n   * This method writes metadata to the stream, so that the resulting stream is\n   * sufficient to restore a {@link Reader} from it. You don't need to track\n   * <code>valueCount</code> or <code>bitsPerValue</code> by yourself. In case\n   * this is a problem, you should probably look at\n   * {@link #getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter controls how\n   * readers that will be restored from this stream trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected. In case you are only interested\n   * in reading this stream sequentially later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   *\n   * @param out          the data output\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return             a Writer\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    final Writer writer = getWriterNoHeader(out, formatAndBits.format, valueCount, formatAndBits.bitsPerValue, DEFAULT_BUFFER_SIZE);\n    writer.writeHeader();\n    return writer;\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array writer for the given number of values at the\n   * given bits/value. Writers append to the given IndexOutput and has very\n   * low memory overhead.\n   *\n   * Positive values of <code>acceptableOverheadRatio</code> will trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected.\n   *\n   * @param out          the destination for the produced bits.\n   * @param valueCount   the number of elements.\n   * @param bitsPerValue the number of bits available for any given value.\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return a Writer ready for receiving values.\n   * @throws IOException if bits could not be written to out.\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    acceptableOverheadRatio = Math.max(COMPACT, acceptableOverheadRatio);\n    acceptableOverheadRatio = Math.min(FASTEST, acceptableOverheadRatio);\n    float acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue; // in bits\n\n    int maxBitsPerValue = bitsPerValue + (int) acceptableOverheadPerValue;\n\n    if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {\n      return getWriterByFormat(out, valueCount, 8, PACKED);\n    } else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {\n      return getWriterByFormat(out, valueCount, 16, PACKED);\n    } else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {\n      return getWriterByFormat(out, valueCount, 32, PACKED);\n    } else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {\n      return getWriterByFormat(out, valueCount, 64, PACKED);\n    } else if (valueCount <= Packed8ThreeBlocks.MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {\n      return getWriterByFormat(out, valueCount, 24, PACKED);\n    } else if (valueCount <= Packed16ThreeBlocks.MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {\n      return getWriterByFormat(out, valueCount, 48, PACKED);\n    } else {\n      for (int bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {\n        if (Packed64SingleBlock.isSupported(bpv)) {\n          float overhead = Packed64SingleBlock.overheadPerValue(bpv);\n          float acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;\n          if (overhead <= acceptableOverhead) {\n            return getWriterByFormat(out, valueCount, bpv, PACKED_SINGLE_BLOCK);\n          }\n        }\n      }\n      return getWriterByFormat(out, valueCount, bitsPerValue, PACKED);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array writer for the given output, format, value\n   * count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used under the hoods, up to 63 bits will be wasted.\n   * An easy way to make sure that no space is lost is to always use a\n   * <code>valueCount</code> that is a multiple of 64.\n   * </p><p>\n   * This method writes metadata to the stream, so that the resulting stream is\n   * sufficient to restore a {@link Reader} from it. You don't need to track\n   * <code>valueCount</code> or <code>bitsPerValue</code> by yourself. In case\n   * this is a problem, you should probably look at\n   * {@link #getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter controls how\n   * readers that will be restored from this stream trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected. In case you are only interested\n   * in reading this stream sequentially later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   *\n   * @param out          the data output\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return             a Writer\n   * @throws IOException If there is a low-level I/O error\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    final Writer writer = getWriterNoHeader(out, formatAndBits.format, valueCount, formatAndBits.bitsPerValue, DEFAULT_BUFFER_SIZE);\n    writer.writeHeader();\n    return writer;\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array writer for the given output, format, value\n   * count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used under the hoods, up to 63 bits will be wasted.\n   * An easy way to make sure that no space is lost is to always use a\n   * <code>valueCount</code> that is a multiple of 64.\n   * </p><p>\n   * This method writes metadata to the stream, so that the resulting stream is\n   * sufficient to restore a {@link Reader} from it. You don't need to track\n   * <code>valueCount</code> or <code>bitsPerValue</code> by yourself. In case\n   * this is a problem, you should probably look at\n   * {@link #getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter controls how\n   * readers that will be restored from this stream trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected. In case you are only interested\n   * in reading this stream sequentially later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   *\n   * @param out          the data output\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return             a Writer\n   * @throws IOException\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    final Writer writer = getWriterNoHeader(out, formatAndBits.format, valueCount, formatAndBits.bitsPerValue, DEFAULT_BUFFER_SIZE);\n    writer.writeHeader();\n    return writer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getWriter(DataOutput,int,int,float).mjava","sourceNew":"  /**\n   * Create a packed integer array writer for the given output, format, value\n   * count, and number of bits per value.\n   * <p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used under the hoods, up to 63 bits will be wasted.\n   * An easy way to make sure that no space is lost is to always use a\n   * <code>valueCount</code> that is a multiple of 64.\n   * <p>\n   * This method writes metadata to the stream, so that the resulting stream is\n   * sufficient to restore a {@link Reader} from it. You don't need to track\n   * <code>valueCount</code> or <code>bitsPerValue</code> by yourself. In case\n   * this is a problem, you should probably look at\n   * {@link #getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   * <p>\n   * The <code>acceptableOverheadRatio</code> parameter controls how\n   * readers that will be restored from this stream trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected. In case you are only interested\n   * in reading this stream sequentially later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   *\n   * @param out          the data output\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return             a Writer\n   * @throws IOException If there is a low-level I/O error\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    final Writer writer = getWriterNoHeader(out, formatAndBits.format, valueCount, formatAndBits.bitsPerValue, DEFAULT_BUFFER_SIZE);\n    writer.writeHeader();\n    return writer;\n  }\n\n","sourceOld":"  /**\n   * Create a packed integer array writer for the given output, format, value\n   * count, and number of bits per value.\n   * </p><p>\n   * The resulting stream will be long-aligned. This means that depending on\n   * the format which is used under the hoods, up to 63 bits will be wasted.\n   * An easy way to make sure that no space is lost is to always use a\n   * <code>valueCount</code> that is a multiple of 64.\n   * </p><p>\n   * This method writes metadata to the stream, so that the resulting stream is\n   * sufficient to restore a {@link Reader} from it. You don't need to track\n   * <code>valueCount</code> or <code>bitsPerValue</code> by yourself. In case\n   * this is a problem, you should probably look at\n   * {@link #getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   * </p><p>\n   * The <code>acceptableOverheadRatio</code> parameter controls how\n   * readers that will be restored from this stream trade space\n   * for speed by selecting a faster but potentially less memory-efficient\n   * implementation. An <code>acceptableOverheadRatio</code> of\n   * {@link PackedInts#COMPACT} will make sure that the most memory-efficient\n   * implementation is selected whereas {@link PackedInts#FASTEST} will make sure\n   * that the fastest implementation is selected. In case you are only interested\n   * in reading this stream sequentially later on, you should probably use\n   * {@link PackedInts#COMPACT}.\n   *\n   * @param out          the data output\n   * @param valueCount   the number of values\n   * @param bitsPerValue the number of bits per value\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   * @return             a Writer\n   * @throws IOException If there is a low-level I/O error\n   * @lucene.internal\n   */\n  public static Writer getWriter(DataOutput out,\n      int valueCount, int bitsPerValue, float acceptableOverheadRatio)\n    throws IOException {\n    assert valueCount >= 0;\n\n    final FormatAndBits formatAndBits = fastestFormatAndBits(valueCount, bitsPerValue, acceptableOverheadRatio);\n    final Writer writer = getWriterNoHeader(out, formatAndBits.format, valueCount, formatAndBits.bitsPerValue, DEFAULT_BUFFER_SIZE);\n    writer.writeHeader();\n    return writer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["55110eb60c5105294fc2ae7912d82b750865aa58"],"55110eb60c5105294fc2ae7912d82b750865aa58":["edb74c83fff94196b864e08ca033d92823252cb7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["edb74c83fff94196b864e08ca033d92823252cb7","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"edb74c83fff94196b864e08ca033d92823252cb7":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14600834a1fbc7c12faf344466e00cca8cc67de4"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"55110eb60c5105294fc2ae7912d82b750865aa58":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"edb74c83fff94196b864e08ca033d92823252cb7":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["edb74c83fff94196b864e08ca033d92823252cb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}