{"path":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","sourceNew":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) throws IOException {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null); you must pass fillFields=true to IndexSearcher.search on each shard\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","sourceOld":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) throws IOException {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null); you must pass fillFields=true to IndexSearcher.search on each shard\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","sourceNew":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null); you must pass fillFields=true to IndexSearcher.search on each shard\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","sourceOld":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) throws IOException {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null); you must pass fillFields=true to IndexSearcher.search on each shard\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","sourceNew":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null); you must pass fillFields=true to IndexSearcher.search on each shard\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","sourceOld":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) throws IOException {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null); you must pass fillFields=true to IndexSearcher.search on each shard\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","sourceNew":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null)\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","sourceOld":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null); you must pass fillFields=true to IndexSearcher.search on each shard\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36510a8e3c1ec60d366b45f8f716e9dc47589661","date":1561989412,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[],Comparator[ScoreDoc]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","sourceNew":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits, Comparator<ScoreDoc> tieBreaker) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      this.tieBreaker = tieBreaker;\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null)\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","sourceOld":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null)\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4f6b0fb6f08ac48f438f03002a283a63cb9992","date":1561992803,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[],Comparator[ScoreDoc]).mjava","sourceNew":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null)\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","sourceOld":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits, Comparator<ScoreDoc> tieBreaker) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      this.tieBreaker = tieBreaker;\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null)\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fccd4a691aac1aff06ab8110d8693514a34160c3","date":1562092518,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[],Comparator[ScoreDoc]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#MergeSortQueue(Sort,TopDocs[]).mjava","sourceNew":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits, Comparator<ScoreDoc> tieBreaker) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      this.tieBreaker = tieBreaker;\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null)\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","sourceOld":"    public MergeSortQueue(Sort sort, TopDocs[] shardHits) {\n      super(shardHits.length);\n      this.shardHits = new ScoreDoc[shardHits.length][];\n      for(int shardIDX=0;shardIDX<shardHits.length;shardIDX++) {\n        final ScoreDoc[] shard = shardHits[shardIDX].scoreDocs;\n        //System.out.println(\"  init shardIdx=\" + shardIDX + \" hits=\" + shard);\n        if (shard != null) {\n          this.shardHits[shardIDX] = shard;\n          // Fail gracefully if API is misused:\n          for(int hitIDX=0;hitIDX<shard.length;hitIDX++) {\n            final ScoreDoc sd = shard[hitIDX];\n            if (!(sd instanceof FieldDoc)) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" was not sorted by the provided Sort (expected FieldDoc but got ScoreDoc)\");\n            }\n            final FieldDoc fd = (FieldDoc) sd;\n            if (fd.fields == null) {\n              throw new IllegalArgumentException(\"shard \" + shardIDX + \" did not set sort field values (FieldDoc.fields is null)\");\n            }\n          }\n        }\n      }\n\n      final SortField[] sortFields = sort.getSort();\n      comparators = new FieldComparator[sortFields.length];\n      reverseMul = new int[sortFields.length];\n      for(int compIDX=0;compIDX<sortFields.length;compIDX++) {\n        final SortField sortField = sortFields[compIDX];\n        comparators[compIDX] = sortField.getComparator(1, compIDX);\n        reverseMul[compIDX] = sortField.getReverse() ? -1 : 1;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["04c370507e5521b2eb998530736f1c19b851ed5a"],"03e38c6374c23083c93e212a9498ff0a9c255476":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["03e38c6374c23083c93e212a9498ff0a9c255476"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["36510a8e3c1ec60d366b45f8f716e9dc47589661"]},"commit2Childs":{"36510a8e3c1ec60d366b45f8f716e9dc47589661":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"03e38c6374c23083c93e212a9498ff0a9c255476":["04c370507e5521b2eb998530736f1c19b851ed5a","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04c370507e5521b2eb998530736f1c19b851ed5a":["36510a8e3c1ec60d366b45f8f716e9dc47589661"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}