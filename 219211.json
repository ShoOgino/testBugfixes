{"path":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testBasicIntersects().mjava","sourceNew":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    double minLat = Math.min(lats[0], lats[1]);\n    double minLon = Math.min(lons[0], lons[1]);\n    double maxLat = Math.max(lats[0], lats[1]);\n    double maxLon = Math.max(lons[0], lons[1]);\n    Query q = newRectQuery(FIELDNAME, minLat, maxLat, minLon, maxLon);\n    assertEquals(2, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  /** test we can search for a point with a standard number of vertices*/\n  public void testBasicIntersects() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 50, 100);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a random polygon document\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a line document\n    document = new Document();\n    // add a line string\n    double lats[] = new double[p.numPoints() - 1];\n    double lons[] = new double[p.numPoints() - 1];\n    for (int i = 0; i < lats.length; ++i) {\n      lats[i] = p.getPolyLat(i);\n      lons[i] = p.getPolyLon(i);\n    }\n    Line l = new Line(lats, lons);\n    addLineToDoc(FIELDNAME, document, l);\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    double minLat = Math.min(lats[0], lats[1]);\n    double minLon = Math.min(lons[0], lons[1]);\n    double maxLat = Math.max(lats[0], lats[1]);\n    double maxLon = Math.max(lons[0], lons[1]);\n    Query q = newRectQuery(FIELDNAME, minLat, maxLat, minLon, maxLon);\n    assertEquals(2, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}