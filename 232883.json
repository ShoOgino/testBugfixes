{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    char[] last = new char[2];\n    int lastLength = 0;\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n      UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n      assertTrue(utf16.length <= 2);\n\n      // Make sure last term comes before current one, in\n      // UTF16 sort order\n      int i = 0;\n      for(i=0;i<lastLength && i<utf16.length;i++) {\n        assertTrue(\"UTF16 code unit \" + termDesc(new String(utf16.result, 0, utf16.length)) + \" incorrectly sorted after code unit \" + termDesc(new String(last, 0, lastLength)), last[i] <= utf16.result[i]);\n        if (last[i] < utf16.result[i]) {\n          break;\n        }\n      }\n      // Terms should not have been identical\n      assertTrue(lastLength != utf16.length || i < lastLength);\n\n      final String s = new String(utf16.result, 0, utf16.length);\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n\n      System.arraycopy(utf16.result, 0, last, 0, utf16.length);\n      lastLength = utf16.length;\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    char[] last = new char[2];\n    int lastLength = 0;\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n      UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n      assertTrue(utf16.length <= 2);\n\n      // Make sure last term comes before current one, in\n      // UTF16 sort order\n      int i = 0;\n      for(i=0;i<lastLength && i<utf16.length;i++) {\n        assertTrue(\"UTF16 code unit \" + termDesc(new String(utf16.result, 0, utf16.length)) + \" incorrectly sorted after code unit \" + termDesc(new String(last, 0, lastLength)), last[i] <= utf16.result[i]);\n        if (last[i] < utf16.result[i]) {\n          break;\n        }\n      }\n      // Terms should not have been identical\n      assertTrue(lastLength != utf16.length || i < lastLength);\n\n      final String s = new String(utf16.result, 0, utf16.length);\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n\n      System.arraycopy(utf16.result, 0, last, 0, utf16.length);\n      lastLength = utf16.length;\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    char[] last = new char[2];\n    int lastLength = 0;\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n      UnicodeUtil.UTF8toUTF16(term.bytes, term.offset, term.length, utf16);\n      assertTrue(utf16.length <= 2);\n\n      // Make sure last term comes before current one, in\n      // UTF16 sort order\n      int i = 0;\n      for(i=0;i<lastLength && i<utf16.length;i++) {\n        assertTrue(\"UTF16 code unit \" + termDesc(new String(utf16.result, 0, utf16.length)) + \" incorrectly sorted after code unit \" + termDesc(new String(last, 0, lastLength)), last[i] <= utf16.result[i]);\n        if (last[i] < utf16.result[i]) {\n          break;\n        }\n      }\n      // Terms should not have been identical\n      assertTrue(lastLength != utf16.length || i < lastLength);\n\n      final String s = new String(utf16.result, 0, utf16.length);\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n\n      System.arraycopy(utf16.result, 0, last, 0, utf16.length);\n      lastLength = utf16.length;\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#checkTermsOrder(IndexReader,Set[String],boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#checkTermsOrder(IndexReader,Set[String],boolean).mjava","sourceNew":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","sourceOld":"  private void checkTermsOrder(IndexReader r, Set<String> allTerms, boolean isTop) throws IOException {\n    TermsEnum terms = MultiFields.getFields(r).terms(\"f\").iterator();\n\n    BytesRef last = new BytesRef();\n\n    Set<String> seenTerms = new HashSet<String>();\n\n    while(true) {\n      final BytesRef term = terms.next();\n      if (term == null) {\n        break;\n      }\n\n      assertTrue(last.compareTo(term) < 0);\n      last.copy(term);\n\n      final String s = term.utf8ToString();\n      assertTrue(\"term \" + termDesc(s) + \" was not added to index (count=\" + allTerms.size() + \")\", allTerms.contains(s));\n      seenTerms.add(s);\n    }\n\n    if (isTop) {\n      assertTrue(allTerms.equals(seenTerms));\n    }\n\n    // Test seeking:\n    Iterator<String> it = seenTerms.iterator();\n    while(it.hasNext()) {\n      BytesRef tr = new BytesRef(it.next());\n      assertEquals(\"seek failed for term=\" + termDesc(tr.utf8ToString()),\n                   TermsEnum.SeekStatus.FOUND,\n                   terms.seek(tr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["08932c793647a36953d1816b1060121f48820d3f"],"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"79c2cb24929f2649a8875fb629086171f914d5ce":["08932c793647a36953d1816b1060121f48820d3f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["08932c793647a36953d1816b1060121f48820d3f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08932c793647a36953d1816b1060121f48820d3f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","5f4e87790277826a2aea119328600dfb07761f32"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}