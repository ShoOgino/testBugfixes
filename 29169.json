{"path":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,Searcher).mjava","commits":[{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,Searcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, Searcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Query q1, Searcher s) {\n    check(q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,Searcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Query,Searcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, Searcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Query q1, Searcher s) {\n    check(q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,Searcher).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, Searcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,Searcher).mjava","sourceNew":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, IndexSearcher s) {\n    check(random, q1, s, true);\n  }\n\n","sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, Searcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,Searcher).mjava","sourceNew":null,"sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, Searcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/QueryUtils#check(Random,Query,Searcher).mjava","sourceNew":null,"sourceOld":"  /** \n   * Various query sanity checks on a searcher, some checks are only done for\n   * instanceof IndexSearcher.\n   *\n   * @see #check(Query)\n   * @see #checkFirstSkipTo\n   * @see #checkSkipTo\n   * @see #checkExplanations\n   * @see #checkSerialization\n   * @see #checkEqual\n   */\n  public static void check(Random random, Query q1, Searcher s) {\n    check(random, q1, s, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53a31399f2471493d67b19a95c028a74e0113b6a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["70ad682703b8585f5d0a637efec044d57ec05efb"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53a31399f2471493d67b19a95c028a74e0113b6a":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}