{"path":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    \n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    \n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f04837a83ac5990603e49463c653672a3a31af0","date":1395078441,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1.hashCode(), a2.hashCode());\n    assertEquals(a1, a2);\n    \n    assertEquals(a1.hashCode(), a3.hashCode());\n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1, a2);\n    \n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeStringLight(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"),\n                            BasicOperations.concatenateLight(\n                                 BasicAutomata.makeStringLight(\"foo\"),\n                                 BasicAutomata.makeStringLight(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"),\n                                           BasicAutomata.makeStringLight(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"),\n                                           BasicAutomata.makeStringLight(\"foobar\"));\n    \n    assertEquals(a1.hashCode(), a2.hashCode());\n    assertEquals(a1, a2);\n    \n    assertEquals(a1.hashCode(), a3.hashCode());\n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1.hashCode(), a2.hashCode());\n    assertEquals(a1, a2);\n    \n    assertEquals(a1.hashCode(), a3.hashCode());\n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), Automata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"),\n                            Operations.concatenate(\n                                 Automata.makeString(\"foo\"),\n                                 Automata.makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"),\n                                           Automata.makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"),\n                                           Automata.makeString(\"foobar\"));\n    \n    assertEquals(a1.hashCode(), a2.hashCode());\n    assertEquals(a1, a2);\n    \n    assertEquals(a1.hashCode(), a3.hashCode());\n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeStringLight(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"),\n                            BasicOperations.concatenateLight(\n                                 BasicAutomata.makeStringLight(\"foo\"),\n                                 BasicAutomata.makeStringLight(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"),\n                                           BasicAutomata.makeStringLight(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"),\n                                           BasicAutomata.makeStringLight(\"foobar\"));\n    \n    assertEquals(a1.hashCode(), a2.hashCode());\n    assertEquals(a1, a2);\n    \n    assertEquals(a1.hashCode(), a3.hashCode());\n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestAutomatonQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), Automata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"),\n                            Operations.concatenate(\n                                 Automata.makeString(\"foo\"),\n                                 Automata.makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"),\n                                           Automata.makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"),\n                                           Automata.makeString(\"foobar\"));\n    \n    assertEquals(a1.hashCode(), a2.hashCode());\n    assertEquals(a1, a2);\n    \n    assertEquals(a1.hashCode(), a3.hashCode());\n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","sourceOld":"  public void testEquals() {\n    AutomatonQuery a1 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"foobar\"));\n    // reference to a1\n    AutomatonQuery a2 = a1;\n    // same as a1 (accepts the same language, same term)\n    AutomatonQuery a3 = new AutomatonQuery(newTerm(\"foobar\"), BasicOperations\n        .concatenate(BasicAutomata.makeString(\"foo\"), BasicAutomata\n            .makeString(\"bar\")));\n    // different than a1 (same term, but different language)\n    AutomatonQuery a4 = new AutomatonQuery(newTerm(\"foobar\"), BasicAutomata\n        .makeString(\"different\"));\n    // different than a1 (different term, same language)\n    AutomatonQuery a5 = new AutomatonQuery(newTerm(\"blah\"), BasicAutomata\n        .makeString(\"foobar\"));\n    \n    assertEquals(a1.hashCode(), a2.hashCode());\n    assertEquals(a1, a2);\n    \n    assertEquals(a1.hashCode(), a3.hashCode());\n    assertEquals(a1, a3);\n  \n    // different class\n    AutomatonQuery w1 = new WildcardQuery(newTerm(\"foobar\"));\n    // different class\n    AutomatonQuery w2 = new RegexpQuery(newTerm(\"foobar\"));\n    \n    assertFalse(a1.equals(w1));\n    assertFalse(a1.equals(w2));\n    assertFalse(w1.equals(w2));\n    assertFalse(a1.equals(a4));\n    assertFalse(a1.equals(a5));\n    assertFalse(a1.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f04837a83ac5990603e49463c653672a3a31af0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["7f04837a83ac5990603e49463c653672a3a31af0"],"5c84485629d80d203608e8975a1139de9933cc38":["7f04837a83ac5990603e49463c653672a3a31af0","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"7f04837a83ac5990603e49463c653672a3a31af0":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f04837a83ac5990603e49463c653672a3a31af0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}