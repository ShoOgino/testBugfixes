{"path":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","pathOld":"/dev/null","sourceNew":"  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    BitSetIterator iterator = new BitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = iterator.next();\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9942803b58a4f5248a4a669472bafe1b558cc1f6","date":1157469798,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","sourceNew":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    BitSetIterator iterator = new BitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean())\n        bb = iterator.next();\n      else\n        bb = iterator.next(bb+1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    BitSetIterator iterator = new BitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = iterator.next();\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108097d840f85a1779a41d0e412efb8130546e6","date":1228575321,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","sourceNew":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean()) {\n        iterator.next();\n        bb = iterator.doc();\n      } else {\n        iterator.skipTo(bb+1);\n        bb = iterator.doc();\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    BitSetIterator iterator = new BitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean())\n        bb = iterator.next();\n      else\n        bb = iterator.next(bb+1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e77721aaf23393f6ea7926045ae6f8efea0ce8e","date":1247678464,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","sourceNew":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean()) {\n        iterator.next();\n        bb = iterator.doc();\n      } else {\n        iterator.skipTo(bb+1);\n        bb = iterator.doc();\n      }\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean()) {\n        iterator.next();\n        bb = iterator.doc();\n      } else {\n        iterator.skipTo(bb+1);\n        bb = iterator.doc();\n      }\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","sourceNew":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean()) {\n        iterator.nextDoc();\n        bb = iterator.docID();\n      } else {\n        iterator.advance(bb+1);\n        bb = iterator.docID();\n      }\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean()) {\n        iterator.next();\n        bb = iterator.doc();\n      } else {\n        iterator.skipTo(bb+1);\n        bb = iterator.doc();\n      }\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","pathOld":"src/test/org/apache/solr/util/TestOpenBitSet#doIterate(BitSet,OpenBitSet).mjava","sourceNew":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean()) {\n        iterator.nextDoc();\n        bb = iterator.docID();\n      } else {\n        iterator.advance(bb+1);\n        bb = iterator.docID();\n      }\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  // test interleaving different BitSetIterator.next()\n  void doIterate(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      if (rand.nextBoolean()) {\n        iterator.nextDoc();\n        bb = iterator.docID();\n      } else {\n        iterator.advance(bb+1);\n        bb = iterator.docID();\n      }\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["5108097d840f85a1779a41d0e412efb8130546e6"],"9942803b58a4f5248a4a669472bafe1b558cc1f6":["21400778a0bf704d187a4848279049f5d90276c8"],"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"5108097d840f85a1779a41d0e412efb8130546e6":["9942803b58a4f5248a4a669472bafe1b558cc1f6"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e77721aaf23393f6ea7926045ae6f8efea0ce8e":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"9942803b58a4f5248a4a669472bafe1b558cc1f6":["5108097d840f85a1779a41d0e412efb8130546e6"],"21400778a0bf704d187a4848279049f5d90276c8":["9942803b58a4f5248a4a669472bafe1b558cc1f6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5108097d840f85a1779a41d0e412efb8130546e6":["1e77721aaf23393f6ea7926045ae6f8efea0ce8e"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}