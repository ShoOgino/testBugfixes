{"path":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        state.currentCodecId = i; // actual codec should use that to create its\n                                  // files\n        consumers.add(codecs[i].fieldsConsumer(state));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        state.currentCodecId = i; // actual codec should use that to create its\n                                  // files\n        consumers.add(codecs[i].fieldsConsumer(state));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        state.currentCodecId = i; // actual codec should use that to create its\n                                  // files\n        consumers.add(codecs[i].fieldsConsumer(state));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        state.currentCodecId = i; // actual codec should use that to create its\n                                  // files\n        consumers.add(codecs[i].fieldsConsumer(state));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, i)));\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeSafely(true, consumers);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeSafely(true, consumers);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeSafely(true, consumers);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, i)));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeSafely(true, consumers);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeSafely(true, consumers);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeSafely(true, consumers);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, \"\" + i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeSafely(true, consumers);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(consumers);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeSafely(true, consumers);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/PerFieldCodecWrapper.FieldsWriter#FieldsWriter(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"    public FieldsWriter(SegmentWriteState state) throws IOException {\n      assert segmentCodecs == state.segmentCodecs;\n      final Codec[] codecs = segmentCodecs.codecs;\n      for (int i = 0; i < codecs.length; i++) {\n        boolean success = false;\n        try {\n          consumers.add(codecs[i].fieldsConsumer(new SegmentWriteState(state, i)));\n          success = true;\n        } finally {\n          if (!success) {\n            IOUtils.closeWhileHandlingException(consumers);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e8d7ba2175f47e280231533f7d3016249cea88b"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85a883878c0af761245ab048babc63d099f835f3","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"efb7a19703a037c29e30440260d393500febc1f4":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["efb7a19703a037c29e30440260d393500febc1f4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","efb7a19703a037c29e30440260d393500febc1f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","efb7a19703a037c29e30440260d393500febc1f4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d619839baa8ce5503e496b94a9e42ad6f079293f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"efb7a19703a037c29e30440260d393500febc1f4":["2e8d7ba2175f47e280231533f7d3016249cea88b","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","85a883878c0af761245ab048babc63d099f835f3"],"85a883878c0af761245ab048babc63d099f835f3":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["24230fe54121f9be9d85f2c2067536296785e421","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}