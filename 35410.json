{"path":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","commits":[{"id":"0ee777f940c2d15973e2ef162012a94e09648ffa","date":1249272382,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/ComplexPhraseQueryParser#parse(String).mjava","sourceNew":"  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList/*<ComplexPhraseQuery>*/();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = (ComplexPhraseQuery) iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","sourceOld":"  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList/*<ComplexPhraseQuery>*/();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = (ComplexPhraseQuery) iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#parse(String).mjava","sourceNew":"  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList/*<ComplexPhraseQuery>*/();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = (ComplexPhraseQuery) iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","sourceOld":"  public Query parse(String query) throws ParseException {\n    if (isPass2ResolvingPhrases) {\n      MultiTermQuery.RewriteMethod oldMethod = getMultiTermRewriteMethod();\n      try {\n        // Temporarily force BooleanQuery rewrite so that Parser will\n        // generate visible\n        // collection of terms which we can convert into SpanQueries.\n        // ConstantScoreRewrite mode produces an\n        // opaque ConstantScoreQuery object which cannot be interrogated for\n        // terms in the same way a BooleanQuery can.\n        // QueryParser is not guaranteed threadsafe anyway so this temporary\n        // state change should not\n        // present an issue\n        setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        return super.parse(query);\n      } finally {\n        setMultiTermRewriteMethod(oldMethod);\n      }\n    }\n\n    // First pass - parse the top-level query recording any PhraseQuerys\n    // which will need to be resolved\n    complexPhrases = new ArrayList/*<ComplexPhraseQuery>*/();\n    Query q = super.parse(query);\n\n    // Perform second pass, using this QueryParser to parse any nested\n    // PhraseQueries with different\n    // set of syntax restrictions (i.e. all fields must be same)\n    isPass2ResolvingPhrases = true;\n    try {\n      for (Iterator iterator = complexPhrases.iterator(); iterator.hasNext();) {\n        currentPhraseQuery = (ComplexPhraseQuery) iterator.next();\n        // in each phrase, now parse the contents between quotes as a\n        // separate parse operation\n        currentPhraseQuery.parsePhraseElements(this);\n      }\n    } finally {\n      isPass2ResolvingPhrases = false;\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ee777f940c2d15973e2ef162012a94e09648ffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["0ee777f940c2d15973e2ef162012a94e09648ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"0ee777f940c2d15973e2ef162012a94e09648ffa":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ee777f940c2d15973e2ef162012a94e09648ffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}