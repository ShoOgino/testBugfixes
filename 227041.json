{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.out.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.out.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.out.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea","29372a57b7e46d222a80429ad6b96413b7319eea","29372a57b7e46d222a80429ad6b96413b7319eea","a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.out.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.out.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.out.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.out.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.out.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.out.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f787671ca16d65e86976f99bd603595f757a91","date":1330045652,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.out.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.out.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.out.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.out.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.out.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.out.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217c5e3cedf564c6d370670858e1b1edab16fcac","date":1343114420,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToClient.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToClient.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToClient.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            SolrServer client = shardToClient.get(s).get(i);\n            ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(\n                client));\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#checkShardConsistency(boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#checkShardConsistency(boolean,boolean).mjava","sourceNew":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","sourceOld":"  protected void checkShardConsistency(boolean checkVsControl, boolean verbose)\n      throws Exception {\n    long docs = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    if (verbose) System.err.println(\"Control Docs:\" + docs);\n    \n    updateMappingsFromZk(jettys, clients);\n    \n    Set<String> theShards = shardToJetty.keySet();\n    String failMessage = null;\n    for (String shard : theShards) {\n      String shardFailMessage = checkShardConsistency(shard, verbose);\n      if (shardFailMessage != null && failMessage == null) {\n        failMessage = shardFailMessage;\n      }\n    }\n    \n    if (failMessage != null) {\n      fail(failMessage);\n    }\n    \n    if (checkVsControl) {\n      // now check that the right # are on each shard\n      theShards = shardToJetty.keySet();\n      int cnt = 0;\n      for (String s : theShards) {\n        int times = shardToJetty.get(s).size();\n        for (int i = 0; i < times; i++) {\n          try {\n            CloudJettyRunner cjetty = shardToJetty.get(s).get(i);\n            ZkNodeProps props = cjetty.info;\n            SolrServer client = cjetty.client.solrClient;\n            boolean active = props.get(ZkStateReader.STATE_PROP).equals(\n                ZkStateReader.ACTIVE);\n            if (active) {\n              SolrQuery query = new SolrQuery(\"*:*\");\n              query.set(\"distrib\", false);\n              long results = client.query(query).getResults().getNumFound();\n              if (verbose) System.err.println(new ZkCoreNodeProps(props)\n                  .getCoreUrl() + \" : \" + results);\n              if (verbose) System.err.println(\"shard:\"\n                  + props.get(ZkStateReader.SHARD_ID_PROP));\n              cnt += results;\n              break;\n            }\n          } catch (SolrServerException e) {\n            // if we have a problem, try the next one\n            if (i == times - 1) {\n              throw e;\n            }\n          }\n        }\n      }\n      \n      SolrQuery q = new SolrQuery(\"*:*\");\n      long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();\n      assertEquals(\n          \"adding up the # of docs on each shard does not match the control - cloud client returns:\"\n              + cloudClientDocs, docs, cnt);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","94f787671ca16d65e86976f99bd603595f757a91"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["94f787671ca16d65e86976f99bd603595f757a91","217c5e3cedf564c6d370670858e1b1edab16fcac"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"94f787671ca16d65e86976f99bd603595f757a91":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["94f787671ca16d65e86976f99bd603595f757a91","217c5e3cedf564c6d370670858e1b1edab16fcac"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["94f787671ca16d65e86976f99bd603595f757a91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["94f787671ca16d65e86976f99bd603595f757a91","217c5e3cedf564c6d370670858e1b1edab16fcac"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["217c5e3cedf564c6d370670858e1b1edab16fcac"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"94f787671ca16d65e86976f99bd603595f757a91":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","aba371508186796cc6151d8223a5b4e16d02e26e","217c5e3cedf564c6d370670858e1b1edab16fcac","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","94f787671ca16d65e86976f99bd603595f757a91","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}