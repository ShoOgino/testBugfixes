{"path":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMinRfOnRetries(NodeType).mjava","commits":[{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMinRfOnRetries(NodeType).mjava","pathOld":"/dev/null","sourceNew":"  private void testMinRfOnRetries(NodeType nodeType) throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      if (nodeType == NodeType.FORWARD) {\n        nodes.add(new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            if (retries.incrementAndGet() >= 3) {\n              streamingClients.setExp(null);\n            }\n            return super.checkRetry(err);\n          }\n        });\n      } else {\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            if (retries.incrementAndGet() >= 3) {\n              streamingClients.setExp(null);\n            }\n            return super.checkRetry(err);\n          }\n        });\n      }\n\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      RollupRequestReplicationTracker rollupReqTracker = new RollupRequestReplicationTracker(\"2\");\n      LeaderRequestReplicationTracker leaderReqTracker = new LeaderRequestReplicationTracker(\"shard1\", 2);\n\n      cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReqTracker, leaderReqTracker);\n      cmdDistrib.finish();\n      assertEquals(3, retries.get());\n      assertEquals(2, leaderReqTracker.getAchievedRf());// \"2\" here is because one would be the leader, that creates the instance of LeaderRequestReplicationTracker, the second one is the node\n\n      assertEquals(0, cmdDistrib.getErrors().size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43f5f8344e80b4bfb2069917069430266753d2f0","date":1538584815,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMinRfOnRetries(NodeType).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest#testMinRfOnRetries(NodeType).mjava","sourceNew":"  private void testMinRfOnRetries(NodeType nodeType) throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      if (nodeType == NodeType.FORWARD) {\n        nodes.add(new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            if (retries.incrementAndGet() >= 3) {\n              streamingClients.setExp(null);\n            }\n            return super.checkRetry(err);\n          }\n        });\n      } else {\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            if (retries.incrementAndGet() >= 3) {\n              streamingClients.setExp(null);\n            }\n            return super.checkRetry(err);\n          }\n        });\n      }\n\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      RollupRequestReplicationTracker rollupReqTracker = new RollupRequestReplicationTracker();\n      LeaderRequestReplicationTracker leaderReqTracker = new LeaderRequestReplicationTracker(\"shard1\");\n\n      cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReqTracker, leaderReqTracker);\n      cmdDistrib.finish();\n      assertEquals(3, retries.get());\n      assertEquals(2, leaderReqTracker.getAchievedRf());// \"2\" here is because one would be the leader, that creates the instance of LeaderRequestReplicationTracker, the second one is the node\n\n      assertEquals(0, cmdDistrib.getErrors().size());\n    }\n  }\n\n","sourceOld":"  private void testMinRfOnRetries(NodeType nodeType) throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.CONNECT_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      if (nodeType == NodeType.FORWARD) {\n        nodes.add(new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            if (retries.incrementAndGet() >= 3) {\n              streamingClients.setExp(null);\n            }\n            return super.checkRetry(err);\n          }\n        });\n      } else {\n        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            if (retries.incrementAndGet() >= 3) {\n              streamingClients.setExp(null);\n            }\n            return super.checkRetry(err);\n          }\n        });\n      }\n\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      RollupRequestReplicationTracker rollupReqTracker = new RollupRequestReplicationTracker(\"2\");\n      LeaderRequestReplicationTracker leaderReqTracker = new LeaderRequestReplicationTracker(\"shard1\", 2);\n\n      cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReqTracker, leaderReqTracker);\n      cmdDistrib.finish();\n      assertEquals(3, retries.get());\n      assertEquals(2, leaderReqTracker.getAchievedRf());// \"2\" here is because one would be the leader, that creates the instance of LeaderRequestReplicationTracker, the second one is the node\n\n      assertEquals(0, cmdDistrib.getErrors().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43f5f8344e80b4bfb2069917069430266753d2f0":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43f5f8344e80b4bfb2069917069430266753d2f0"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"43f5f8344e80b4bfb2069917069430266753d2f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["43f5f8344e80b4bfb2069917069430266753d2f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}