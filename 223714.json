{"path":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","commits":[{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","pathOld":"/dev/null","sourceNew":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    Scorer scorer = getScorer(softDeleteField, retentionQuery, wrappedReader);\n    if (scorer != null) {\n      FixedBitSet mutableBits;\n      if (liveDocs instanceof FixedBitSet) {\n        mutableBits = ((FixedBitSet) liveDocs).clone();\n      } else { // mainly if we have asserting codec\n        mutableBits = new FixedBitSet(liveDocs.length());\n        for (int i = 0; i < liveDocs.length(); i++) {\n          if (liveDocs.get(i)) {\n            mutableBits.set(i);\n          }\n        }\n      }\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (mutableBits.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, mutableBits, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb0130363fa13c53e4e78317c35b3b45a3089276","date":1523267438,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","sourceNew":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    Scorer scorer = getScorer(softDeleteField, retentionQuery, wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","sourceOld":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    Scorer scorer = getScorer(softDeleteField, retentionQuery, wrappedReader);\n    if (scorer != null) {\n      FixedBitSet mutableBits;\n      if (liveDocs instanceof FixedBitSet) {\n        mutableBits = ((FixedBitSet) liveDocs).clone();\n      } else { // mainly if we have asserting codec\n        mutableBits = new FixedBitSet(liveDocs.length());\n        for (int i = 0; i < liveDocs.length(); i++) {\n          if (liveDocs.get(i)) {\n            mutableBits.set(i);\n          }\n        }\n      }\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (mutableBits.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, mutableBits, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","sourceNew":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    Scorer scorer = getScorer(softDeleteField, retentionQuery, wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","sourceOld":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    Scorer scorer = getScorer(softDeleteField, retentionQuery, wrappedReader);\n    if (scorer != null) {\n      FixedBitSet mutableBits;\n      if (liveDocs instanceof FixedBitSet) {\n        mutableBits = ((FixedBitSet) liveDocs).clone();\n      } else { // mainly if we have asserting codec\n        mutableBits = new FixedBitSet(liveDocs.length());\n        for (int i = 0; i < liveDocs.length(); i++) {\n          if (liveDocs.get(i)) {\n            mutableBits.set(i);\n          }\n        }\n      }\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (mutableBits.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, mutableBits, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","sourceNew":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","sourceOld":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    Scorer scorer = getScorer(softDeleteField, retentionQuery, wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c652f4c2c731f462e41a528ed4f97245915206d5","date":1530728194,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","sourceNew":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = FilterCodecReader.wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return FilterCodecReader.wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","sourceOld":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","sourceNew":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = FilterCodecReader.wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return FilterCodecReader.wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","sourceOld":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","sourceNew":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = FilterCodecReader.wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return FilterCodecReader.wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","sourceOld":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f6c6c7e96b58779768d63037428c4164f48c8f7","date":1532682688,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesRetentionMergePolicy#applyRetentionQuery(String,Query,CodecReader).mjava","sourceNew":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = FilterCodecReader.wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = FixedBitSet.copyOf(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return FilterCodecReader.wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","sourceOld":"  // pkg private for testing\n  static CodecReader applyRetentionQuery(String softDeleteField, Query retentionQuery, CodecReader reader) throws IOException {\n    Bits liveDocs = reader.getLiveDocs();\n    if (liveDocs == null) { // no deletes - just keep going\n      return reader;\n    }\n    CodecReader wrappedReader = FilterCodecReader.wrapLiveDocs(reader, new Bits() { // only search deleted\n      @Override\n      public boolean get(int index) {\n        return liveDocs.get(index) == false;\n      }\n\n      @Override\n      public int length() {\n        return liveDocs.length();\n      }\n    }, reader.maxDoc() - reader.numDocs());\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(new DocValuesFieldExistsQuery(softDeleteField), BooleanClause.Occur.FILTER);\n    builder.add(retentionQuery, BooleanClause.Occur.FILTER);\n    Scorer scorer = getScorer(builder.build(), wrappedReader);\n    if (scorer != null) {\n      FixedBitSet cloneLiveDocs = cloneLiveDocs(liveDocs);\n      DocIdSetIterator iterator = scorer.iterator();\n      int numExtraLiveDocs = 0;\n      while (iterator.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        if (cloneLiveDocs.getAndSet(iterator.docID()) == false) {\n          // if we bring one back to live we need to account for it\n          numExtraLiveDocs++;\n        }\n      }\n      assert reader.numDocs() + numExtraLiveDocs <= reader.maxDoc() : \"numDocs: \" + reader.numDocs() + \" numExtraLiveDocs: \" + numExtraLiveDocs + \" maxDoc: \" + reader.maxDoc();\n      return FilterCodecReader.wrapLiveDocs(reader, cloneLiveDocs, reader.numDocs() + numExtraLiveDocs);\n    } else {\n      return reader;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["5ee0394b8176abd7c90a4be8c05465be1879db79","cb0130363fa13c53e4e78317c35b3b45a3089276"],"4f6c6c7e96b58779768d63037428c4164f48c8f7":["c652f4c2c731f462e41a528ed4f97245915206d5"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["36d13f271b6649357e07f71f7e46559479f69b5b","c652f4c2c731f462e41a528ed4f97245915206d5"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb0130363fa13c53e4e78317c35b3b45a3089276":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"36d13f271b6649357e07f71f7e46559479f69b5b":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"c652f4c2c731f462e41a528ed4f97245915206d5":["36d13f271b6649357e07f71f7e46559479f69b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f6c6c7e96b58779768d63037428c4164f48c8f7"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["36d13f271b6649357e07f71f7e46559479f69b5b","c652f4c2c731f462e41a528ed4f97245915206d5"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["36d13f271b6649357e07f71f7e46559479f69b5b"],"4f6c6c7e96b58779768d63037428c4164f48c8f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5ee0394b8176abd7c90a4be8c05465be1879db79":["d58e44159788900f4a2113b84463dc3fbbf80f20","cb0130363fa13c53e4e78317c35b3b45a3089276"],"cb0130363fa13c53e4e78317c35b3b45a3089276":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"36d13f271b6649357e07f71f7e46559479f69b5b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c652f4c2c731f462e41a528ed4f97245915206d5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c652f4c2c731f462e41a528ed4f97245915206d5":["4f6c6c7e96b58779768d63037428c4164f48c8f7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}