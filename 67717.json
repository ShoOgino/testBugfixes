{"path":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","commits":[{"id":"36f8536aad2e65f5a64d8784afd359db1b1f62d2","date":1074804556,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n\n    // test null reader\n    boolean iaeFlag = false;\n    try {\n      TokenStream ts = fa.tokenStream(\"dummy\", null);\n    } catch (IllegalArgumentException iae) {\n      iaeFlag = true;\n    }\n    assertEquals(iaeFlag, true);\n\n    // test null fieldname\n    iaeFlag = true;\n    try {\n      TokenStream ts = fa.tokenStream(null, new StringReader\n        (\"dummy\"));\n    } catch (IllegalArgumentException iae) {\n      iaeFlag = true;\n    }\n    assertEquals(iaeFlag, true);\n\n    assertAnalyzesTo(fa, \"\", new String[]{\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[]{\"chien\", \"chat\", \"cheval\"});\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[]{\"chien\", \"chat\", \"cheval\"});\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[]{\"chien\", \"chat\", \"cheval\"});\n\n    assertAnalyzesTo(fa, \"chien++\", new String[]{\"chien\"});\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[]{\"mot\", \"entreguillemet\"});\n\n    // let's do some french specific tests now\n\n    // 1. couldn't resist\n    // I would expect this to stay one term as in French the minus sign\n    // is often used for composing words\n    assertAnalyzesTo(\n      fa,\n      \"Jean-Fran̤ois\",\n      new String[]{\"jean\", \"fran̤ois\"});\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des �� cheval\",\n      new String[]{\"chien\", \"chat\", \"cheval\"});\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste ̩l̩ments captifs\",\n      new String[]{\n        \"lanc\",\n        \"chism\",\n        \"habit\",\n        \"chist\",\n        \"̩l̩ment\",\n        \"captif\"});\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[]{\"fin\", \"souffr\", \"rug\"});\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ��̢̦�����? anticonstitutionnellement Java++\",\n    new String[]{\n      \"c3po\",\n      \"aujourd'hui\",\n      \"oeuf\",\n      \"��̢̦�����?\",\n      \"anticonstitutionnel\",\n      \"jav\"});\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[]{\"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c83a2e572295a9d2b63506929926d0522f61d386"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a28f2a02242055cc5e2dde7ed01137cf7ea6e3c1","date":1074862174,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer();\n\t\n\t\t// test null reader\n\t\tboolean iaeFlag = false;\n\t\ttry {\n\t\t\tTokenStream ts = fa.tokenStream(\"dummy\", null);\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\t// test null fieldname\n\t\tiaeFlag = false;\n\t\ttry {\n\t\t\tTokenStream ts = fa.tokenStream(null, new StringReader(\"dummy\"));\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguillemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-Fran�ois\",\n\t\t\tnew String[] { \"jean\", \"fran�ois\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des � cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste �l�ments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habit\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"�l�ment\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ������ anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"������\",\n\t\t\t\t\"anticonstitutionnel\",\n\t\t\t\t\"jav\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","sourceOld":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n\n    // test null reader\n    boolean iaeFlag = false;\n    try {\n      TokenStream ts = fa.tokenStream(\"dummy\", null);\n    } catch (IllegalArgumentException iae) {\n      iaeFlag = true;\n    }\n    assertEquals(iaeFlag, true);\n\n    // test null fieldname\n    iaeFlag = true;\n    try {\n      TokenStream ts = fa.tokenStream(null, new StringReader\n        (\"dummy\"));\n    } catch (IllegalArgumentException iae) {\n      iaeFlag = true;\n    }\n    assertEquals(iaeFlag, true);\n\n    assertAnalyzesTo(fa, \"\", new String[]{\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[]{\"chien\", \"chat\", \"cheval\"});\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[]{\"chien\", \"chat\", \"cheval\"});\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[]{\"chien\", \"chat\", \"cheval\"});\n\n    assertAnalyzesTo(fa, \"chien++\", new String[]{\"chien\"});\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[]{\"mot\", \"entreguillemet\"});\n\n    // let's do some french specific tests now\n\n    // 1. couldn't resist\n    // I would expect this to stay one term as in French the minus sign\n    // is often used for composing words\n    assertAnalyzesTo(\n      fa,\n      \"Jean-Fran̤ois\",\n      new String[]{\"jean\", \"fran̤ois\"});\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des �� cheval\",\n      new String[]{\"chien\", \"chat\", \"cheval\"});\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste ̩l̩ments captifs\",\n      new String[]{\n        \"lanc\",\n        \"chism\",\n        \"habit\",\n        \"chist\",\n        \"̩l̩ment\",\n        \"captif\"});\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[]{\"fin\", \"souffr\", \"rug\"});\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ��̢̦�����? anticonstitutionnellement Java++\",\n    new String[]{\n      \"c3po\",\n      \"aujourd'hui\",\n      \"oeuf\",\n      \"��̢̦�����?\",\n      \"anticonstitutionnel\",\n      \"jav\"});\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[]{\"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n      }\n\n","bugFix":null,"bugIntro":["c83a2e572295a9d2b63506929926d0522f61d386"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b524b3b50016f5526103700269864467cf016e5c","date":1092780187,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer();\n\t\n\t\t// test null reader\n\t\tboolean iaeFlag = false;\n\t\ttry {\n\t\t\tTokenStream ts = fa.tokenStream(\"dummy\", null);\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\t// test null fieldname\n\t\tiaeFlag = false;\n\t\ttry {\n\t\t\tTokenStream ts = fa.tokenStream(null, new StringReader(\"dummy\"));\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguillemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-François\",\n\t\t\tnew String[] { \"jean\", \"françois\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des à cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste éléments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habit\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"élément\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"ïâöûàä\",\n\t\t\t\t\"anticonstitutionnel\",\n\t\t\t\t\"jav\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","sourceOld":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer();\n\t\n\t\t// test null reader\n\t\tboolean iaeFlag = false;\n\t\ttry {\n\t\t\tTokenStream ts = fa.tokenStream(\"dummy\", null);\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\t// test null fieldname\n\t\tiaeFlag = false;\n\t\ttry {\n\t\t\tTokenStream ts = fa.tokenStream(null, new StringReader(\"dummy\"));\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguillemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-Fran�ois\",\n\t\t\tnew String[] { \"jean\", \"fran�ois\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des � cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste �l�ments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habit\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"�l�ment\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ������ anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"������\",\n\t\t\t\t\"anticonstitutionnel\",\n\t\t\t\t\"jav\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc876d32607abc0047c0c7919922247efcfaf086","date":1092822863,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer();\n\t\n\t\t// test null reader\n\t\tboolean iaeFlag = false;\n\t\ttry {\n\t\t\tfa.tokenStream(\"dummy\", null);\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\t// test null fieldname\n\t\tiaeFlag = false;\n\t\ttry {\n\t\t\tfa.tokenStream(null, new StringReader(\"dummy\"));\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguillemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-François\",\n\t\t\tnew String[] { \"jean\", \"françois\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des à cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste éléments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habit\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"élément\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"ïâöûàä\",\n\t\t\t\t\"anticonstitutionnel\",\n\t\t\t\t\"jav\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","sourceOld":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer();\n\t\n\t\t// test null reader\n\t\tboolean iaeFlag = false;\n\t\ttry {\n\t\t\tTokenStream ts = fa.tokenStream(\"dummy\", null);\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\t// test null fieldname\n\t\tiaeFlag = false;\n\t\ttry {\n\t\t\tTokenStream ts = fa.tokenStream(null, new StringReader(\"dummy\"));\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguillemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-François\",\n\t\t\tnew String[] { \"jean\", \"françois\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des à cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste éléments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habit\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"élément\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"ïâöûàä\",\n\t\t\t\t\"anticonstitutionnel\",\n\t\t\t\t\"jav\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","bugFix":null,"bugIntro":["c83a2e572295a9d2b63506929926d0522f61d386"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"sandbox/contributions/analyzers/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer();\n\t\n\t\t// test null reader\n\t\tboolean iaeFlag = false;\n\t\ttry {\n\t\t\tfa.tokenStream(\"dummy\", null);\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\t// test null fieldname\n\t\tiaeFlag = false;\n\t\ttry {\n\t\t\tfa.tokenStream(null, new StringReader(\"dummy\"));\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguillemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-François\",\n\t\t\tnew String[] { \"jean\", \"françois\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des à cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste éléments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habit\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"élément\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"ïâöûàä\",\n\t\t\t\t\"anticonstitutionnel\",\n\t\t\t\t\"jav\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","sourceOld":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer();\n\t\n\t\t// test null reader\n\t\tboolean iaeFlag = false;\n\t\ttry {\n\t\t\tfa.tokenStream(\"dummy\", null);\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\t// test null fieldname\n\t\tiaeFlag = false;\n\t\ttry {\n\t\t\tfa.tokenStream(null, new StringReader(\"dummy\"));\n\t\t} catch (IllegalArgumentException iae) {\n\t\t\tiaeFlag = true;\n\t\t}\n\t\tassertEquals(iaeFlag, true);\n\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguillemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-François\",\n\t\t\tnew String[] { \"jean\", \"françois\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des à cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste éléments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habit\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"élément\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"ïâöûàä\",\n\t\t\t\t\"anticonstitutionnel\",\n\t\t\t\t\"jav\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b524b3b50016f5526103700269864467cf016e5c":["a28f2a02242055cc5e2dde7ed01137cf7ea6e3c1"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["cc876d32607abc0047c0c7919922247efcfaf086"],"cc876d32607abc0047c0c7919922247efcfaf086":["b524b3b50016f5526103700269864467cf016e5c"],"a28f2a02242055cc5e2dde7ed01137cf7ea6e3c1":["36f8536aad2e65f5a64d8784afd359db1b1f62d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36f8536aad2e65f5a64d8784afd359db1b1f62d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"b524b3b50016f5526103700269864467cf016e5c":["cc876d32607abc0047c0c7919922247efcfaf086"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a28f2a02242055cc5e2dde7ed01137cf7ea6e3c1":["b524b3b50016f5526103700269864467cf016e5c"],"cc876d32607abc0047c0c7919922247efcfaf086":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f8536aad2e65f5a64d8784afd359db1b1f62d2"],"36f8536aad2e65f5a64d8784afd359db1b1f62d2":["a28f2a02242055cc5e2dde7ed01137cf7ea6e3c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}