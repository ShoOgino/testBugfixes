{"path":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","commits":[{"id":"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","date":1328901155,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/BugReproAnalyzerTokenizer[TestSameTokenSamePosition]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\t\t\t\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\t\t\t\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\t\t\t\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\t\t\t\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["07972d15a5709171622bbb52bd91e9a35f1e3f26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\t\t\t\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\t\t\t\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\t\t\t\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (nextTokenIndex < TOKEN_COUNT) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/BugReproTokenStream[TestSameTokenSamePosition]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (nextTokenIndex < TOKEN_COUNT) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (nextTokenIndex < tokenCount) {\n      termAtt.setEmpty().append(terms[nextTokenIndex]);\n      offsetAtt.setOffset(starts[nextTokenIndex], ends[nextTokenIndex]);\n      posIncAtt.setPositionIncrement(incs[nextTokenIndex]);\n      nextTokenIndex++;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5de502b5478255493125e7e801411ba17a6682ec":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5de502b5478255493125e7e801411ba17a6682ec"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"5de502b5478255493125e7e801411ba17a6682ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}