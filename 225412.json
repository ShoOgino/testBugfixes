{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream#MergeStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream#MergeStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public MergeStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(2 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two streams but found %d (must be PushBackStream types)\",expression, streamExpressions.size()));\n    }\n    this.streamA = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    this.streamB = new PushBackStream(factory.constructStream(streamExpressions.get(1)));\n    \n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to merge on but didn't find one\",expression));\n    }\n    \n    // Merge is always done over equality, so always use an EqualTo comparator\n    this.comp = factory.constructComparator(((StreamExpressionValue)onExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream#MergeStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream#MergeStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public MergeStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(2 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two streams but found %d (must be PushBackStream types)\",expression, streamExpressions.size()));\n    }\n    this.streamA = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    this.streamB = new PushBackStream(factory.constructStream(streamExpressions.get(1)));\n    \n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to merge on but didn't find one\",expression));\n    }\n    \n    // Merge is always done over equality, so always use an EqualTo comparator\n    this.comp = factory.constructComparator(((StreamExpressionValue)onExpression.getParameter()).getValue(), StreamComparator.class);\n  }\n\n","sourceOld":"  public MergeStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, ExpressibleStream.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(2 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two streams but found %d (must be PushBackStream types)\",expression, streamExpressions.size()));\n    }\n    this.streamA = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    this.streamB = new PushBackStream(factory.constructStream(streamExpressions.get(1)));\n    \n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to merge on but didn't find one\",expression));\n    }\n    \n    // Merge is always done over equality, so always use an EqualTo comparator\n    this.comp = factory.constructComparator(((StreamExpressionValue)onExpression.getParameter()).getValue(), FieldComparator.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream#MergeStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream#MergeStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public MergeStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(2 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two streams but found %d (must be PushBackStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to merge on but didn't find one\",expression));\n    }\n    \n    init( factory.constructStream(streamExpressions.get(0)),\n          factory.constructStream(streamExpressions.get(1)),\n          factory.constructComparator(((StreamExpressionValue)onExpression.getParameter()).getValue(), FieldComparator.class)\n        );\n  }\n\n","sourceOld":"  public MergeStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(2 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two streams but found %d (must be PushBackStream types)\",expression, streamExpressions.size()));\n    }\n    this.streamA = new PushBackStream(factory.constructStream(streamExpressions.get(0)));\n    this.streamB = new PushBackStream(factory.constructStream(streamExpressions.get(1)));\n    \n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to merge on but didn't find one\",expression));\n    }\n    \n    // Merge is always done over equality, so always use an EqualTo comparator\n    this.comp = factory.constructComparator(((StreamExpressionValue)onExpression.getParameter()).getValue(), StreamComparator.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dab63e86bdbacdfab7b33cc35bd2ebd5785bce3","date":1446934136,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream#MergeStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream#MergeStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public MergeStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(streamExpressions.size() < 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least two streams but found %d (must be PushBackStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to merge on but didn't find one\",expression));\n    }\n    \n    TupleStream[] streams = new TupleStream[streamExpressions.size()];\n    for(int idx = 0; idx < streamExpressions.size(); ++idx){\n      streams[idx] = factory.constructStream(streamExpressions.get(idx));\n    }\n    \n    init( factory.constructComparator(((StreamExpressionValue)onExpression.getParameter()).getValue(), FieldComparator.class),\n          streams\n        );\n  }\n\n","sourceOld":"  public MergeStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter onExpression = factory.getNamedOperand(expression, \"on\");\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(2 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting two streams but found %d (must be PushBackStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(null == onExpression || !(onExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'on' parameter listing fields to merge on but didn't find one\",expression));\n    }\n    \n    init( factory.constructStream(streamExpressions.get(0)),\n          factory.constructStream(streamExpressions.get(1)),\n          factory.constructComparator(((StreamExpressionValue)onExpression.getParameter()).getValue(), FieldComparator.class)\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1dab63e86bdbacdfab7b33cc35bd2ebd5785bce3":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1dab63e86bdbacdfab7b33cc35bd2ebd5785bce3"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"1dab63e86bdbacdfab7b33cc35bd2ebd5785bce3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["1dab63e86bdbacdfab7b33cc35bd2ebd5785bce3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}