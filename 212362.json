{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","commits":[{"id":"71343daa30c2e8519a425ccb6904857b3beade77","date":1496141895,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNegativeConditions().mjava","sourceNew":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'replica':'<4','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 0, 'sysprop.fs': '!ssd', 'shard': '#EACH'},\" +//negative greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    Policy.Session session = policy.createSession(clusterDataProvider);\n    for (int i = 0; i < 3; i++) {\n      Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n      SolrRequest op = suggester\n          .hint(Hint.COLL, \"newColl\")\n          .hint(Hint.SHARD, \"shard1\")\n          .getOperation();\n      assertNotNull(op);\n      assertEquals(\"node3\", op.getParams().get(\"node\"));\n      session = suggester.getSession();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","71343daa30c2e8519a425ccb6904857b3beade77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71343daa30c2e8519a425ccb6904857b3beade77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","71343daa30c2e8519a425ccb6904857b3beade77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71343daa30c2e8519a425ccb6904857b3beade77":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}