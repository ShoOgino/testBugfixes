{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  \n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  \n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  \n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  \n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  \n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  \n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}