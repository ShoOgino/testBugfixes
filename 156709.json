{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testWildcard().mjava","commits":[{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~0.5\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^2\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term^2~\", null, \"term^2.0~0.5\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(0.5f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null);   // value > 1, throws exception\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n\t * lower-cased with propery parser configuration\n\t */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~0.5\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~0.5\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}