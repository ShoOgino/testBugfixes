{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,FieldCache.DoubleParser).mjava","commits":[{"id":"65eb076d345a794256daba691a2b366657c807e8","date":1245771732,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,FieldCache.DoubleParser).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,ExtendedFieldCache.DoubleParser).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final FieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = FieldCache.DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final ExtendedFieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = (parser==null)\n\t  ? ExtendedFieldCache.EXT_DEFAULT.getDoubles (reader, field)\n\t  : ExtendedFieldCache.EXT_DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,FieldCache.DoubleParser).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,FieldCache.DoubleParser).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final FieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = FieldCache.DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final FieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = FieldCache.DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,FieldCache.DoubleParser).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,FieldCache.DoubleParser).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final FieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = FieldCache.DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return Double.valueOf(fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final FieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = FieldCache.DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return new Double (fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorDouble(IndexReader,String,FieldCache.DoubleParser).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a comparator for sorting hits according to a field containing doubles.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing float values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorDouble(final IndexReader reader, final String fieldname, final FieldCache.DoubleParser parser)\n  throws IOException {\n    final String field = fieldname.intern();\n    final double[] fieldOrder = FieldCache.DEFAULT.getDoubles (reader, field, parser);\n    return new ScoreDocComparator () {\n\n      public final int compare (final ScoreDoc i, final ScoreDoc j) {\n        final double di = fieldOrder[i.doc];\n        final double dj = fieldOrder[j.doc];\n        if (di < dj) return -1;\n        if (di > dj) return 1;\n        return 0;\n      }\n\n      public Comparable sortValue (final ScoreDoc i) {\n        return Double.valueOf(fieldOrder[i.doc]);\n      }\n\n      public int sortType() {\n        return SortField.DOUBLE;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"65eb076d345a794256daba691a2b366657c807e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["65eb076d345a794256daba691a2b366657c807e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"65eb076d345a794256daba691a2b366657c807e8":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["65eb076d345a794256daba691a2b366657c807e8"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}