{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5","date":1344439048,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"bugIntro":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, disableCoord ? 1.0f : ((BooleanWeight)weight).coord(requiredScorers.size(), requiredScorers.size()), requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, requiredScorers.toArray(new Scorer[requiredScorers.size()])) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":null,"sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, requiredScorers.toArray(new Scorer[requiredScorers.size()])) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":null,"sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, requiredScorers.toArray(new Scorer[requiredScorers.size()])) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(boolean,List[Scorer]).mjava","sourceNew":null,"sourceOld":"  private Scorer countingConjunctionSumScorer(boolean disableCoord,\n                                              List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(weight, requiredScorers.toArray(new Scorer[requiredScorers.size()])) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"b7605579001505896d48b07160075a5c8b8e128e":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"b7605579001505896d48b07160075a5c8b8e128e":[],"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}