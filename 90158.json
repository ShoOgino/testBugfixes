{"path":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","commits":[{"id":"af87133b5bdb246b06c4321f36cd76d947357ab6","date":1482195253,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"/dev/null","sourceNew":"  public void testErrorChecks() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"/dev/null","sourceNew":"  public void testErrorChecks() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","sourceNew":"  public void testErrorChecks() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":"  public void testErrorChecks() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc","date":1512662150,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","sourceNew":"  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":"  public void testErrorChecks() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","bugFix":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","sourceNew":"  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":"  public void testErrorChecks() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b342321d8906f4b19f6f87ea33ea3fff12bffa7","date":1515547632,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","sourceNew":"  @Test\n  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":"  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","sourceNew":"  @Test\n  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":"  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b10ab715806383f3d7f9eece13c26772a9116022","date":1517176579,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","sourceNew":"  @Test\n  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":"  @Test\n  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () -> {\n      CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient());\n    });\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","sourceNew":"  @Test\n  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"testErrorChecks-collection\", 2, 2);\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 2));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":"  @Test\n  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 1));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","bugFix":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#testErrorChecks().mjava","sourceNew":"  @Test\n  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"testErrorChecks-collection\", 2, 2);\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 2));\n\n    ignoreException(\".\");\n\n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","sourceOld":"  @Test\n  public void testErrorChecks() throws Exception {\n    CollectionAdminRequest.createCollection(\"testErrorChecks-collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(\"testErrorChecks-collection\", 2, 2);\n    waitForState(\"Expected testErrorChecks-collection to be created with 2 shards and 1 replica\", \"testErrorChecks-collection\", clusterShape(2, 2));\n    \n    ignoreException(\".\");\n    \n    // Invalid Alias name\n    SolrException e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"test:alias\", \"testErrorChecks-collection\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n\n    // Target collection doesn't exists\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // One of the target collections doesn't exist\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    assertTrue(e.getMessage().contains(\"Can't create collection alias for collections='testErrorChecks-collection,doesnotexist', 'doesnotexist' is not an existing collection or alias\"));\n\n    // Valid\n    CollectionAdminRequest.createAlias(\"testalias\", \"testErrorChecks-collection\").process(cluster.getSolrClient());\n    // TODO dubious; remove?\n    CollectionAdminRequest.createAlias(\"testalias2\", \"testalias\").process(cluster.getSolrClient());\n\n    // Alias + invalid\n    e = expectThrows(SolrException.class, () ->\n        CollectionAdminRequest.createAlias(\"testalias3\", \"testalias2,doesnotexist\").process(cluster.getSolrClient()));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST, SolrException.ErrorCode.getErrorCode(e.code()));\n    unIgnoreException(\".\");\n\n    CollectionAdminRequest.deleteAlias(\"testalias\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteAlias(\"testalias2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"testErrorChecks-collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","4b342321d8906f4b19f6f87ea33ea3fff12bffa7"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af87133b5bdb246b06c4321f36cd76d947357ab6"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b10ab715806383f3d7f9eece13c26772a9116022"],"4b342321d8906f4b19f6f87ea33ea3fff12bffa7":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b10ab715806383f3d7f9eece13c26772a9116022":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b10ab715806383f3d7f9eece13c26772a9116022"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc","417142ff08fda9cf0b72d5133e63097a166c6458"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"4b342321d8906f4b19f6f87ea33ea3fff12bffa7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","af87133b5bdb246b06c4321f36cd76d947357ab6"],"f2f5f46d1d0ebd4c0522e96d55ee60f0b57fbecc":["417142ff08fda9cf0b72d5133e63097a166c6458"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b10ab715806383f3d7f9eece13c26772a9116022":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b94236357aaa22b76c10629851fe4e376e0cea82","4b342321d8906f4b19f6f87ea33ea3fff12bffa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}