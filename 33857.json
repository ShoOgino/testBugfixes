{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","commits":[{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Map[String,Object]).mjava","sourceNew":"  public static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  public static void toSolrInputDocument(String prefix, SolrInputDocument doc, Map<String, Object> map) {\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, (Map<String, Object>)entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Map[String,Object]).mjava","sourceNew":"  public static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  public static void toSolrInputDocument(String prefix, SolrInputDocument doc, Map<String, Object> map) {\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, (Map<String, Object>)entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Map[String,Object]).mjava","sourceNew":"  public static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  public static void toSolrInputDocument(String prefix, SolrInputDocument doc, Map<String, Object> map) {\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, (Map<String, Object>)entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","sourceNew":"  /**\n   * Fill in a SolrInputDocument with values from a converted metric, recursively.\n   * @param prefix prefix to add to generated field names, or null if none.\n   * @param doc document to fill\n   * @param o an instance of converted metric, either a Map or a flat Object\n   */\n  static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  public static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","sourceNew":"  /**\n   * Fill in a SolrInputDocument with values from a converted metric, recursively.\n   * @param prefix prefix to add to generated field names, or null if none.\n   * @param doc document to fill\n   * @param o an instance of converted metric, either a Map or a flat Object\n   */\n  static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  public static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","sourceNew":"  /**\n   * Fill in a SolrInputDocument with values from a converted metric, recursively.\n   * @param prefix prefix to add to generated field names, or null if none.\n   * @param doc document to fill\n   * @param o an instance of converted metric, either a Map or a flat Object\n   */\n  static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fill in a SolrInputDocument with values from a converted metric, recursively.\n   * @param prefix prefix to add to generated field names, or null if none.\n   * @param doc document to fill\n   * @param o an instance of converted metric, either a Map or a flat Object\n   */\n  static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocument(String,SolrInputDocument,Object).mjava","sourceNew":"  /**\n   * Fill in a SolrInputDocument with values from a converted metric, recursively.\n   * @param prefix prefix to add to generated field names, or null if none.\n   * @param doc document to fill\n   * @param o an instance of converted metric, either a Map or a flat Object\n   */\n  static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    final BiConsumer<Object, Object> consumer = (k, v) -> {\n      if ((v instanceof Map) || (v instanceof MapWriter) || (v instanceof IteratorWriter)) {\n        toSolrInputDocument(k.toString(), doc, v);\n      } else {\n        String key = prefix != null ? prefix + \".\" + k : k.toString();\n        doc.addField(key, v);\n      }\n    };\n    if (o instanceof MapWriter) {\n      @SuppressWarnings({\"unchecked\"})\n      MapWriter writer = (MapWriter) o;\n      writer._forEachEntry(consumer);\n    } else if (o instanceof Map) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> map = (Map<String, Object>) o;\n      for (Map.Entry<String, Object> entry : map.entrySet()) {\n        consumer.accept(entry.getKey(), entry.getValue());\n      }\n    } else if (o instanceof IteratorWriter) {\n      @SuppressWarnings({\"unchecked\"})\n      IteratorWriter writer = (IteratorWriter) o;\n      final String name = prefix != null ? prefix : \"value\";\n      try {\n        writer.writeIter(new IteratorWriter.ItemWriter() {\n          @Override\n          public IteratorWriter.ItemWriter add(Object o) throws IOException {\n            consumer.accept(name, o);\n            return this;\n          }\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(\"this should never happen\", e);\n      }\n    } else {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n    }\n  }\n\n","sourceOld":"  /**\n   * Fill in a SolrInputDocument with values from a converted metric, recursively.\n   * @param prefix prefix to add to generated field names, or null if none.\n   * @param doc document to fill\n   * @param o an instance of converted metric, either a Map or a flat Object\n   */\n  static void toSolrInputDocument(String prefix, SolrInputDocument doc, Object o) {\n    if (!(o instanceof Map)) {\n      String key = prefix != null ? prefix : VALUE;\n      doc.addField(key, o);\n      return;\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> map = (Map<String, Object>)o;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n      if (entry.getValue() instanceof Map) { // flatten recursively\n        toSolrInputDocument(entry.getKey(), doc, entry.getValue());\n      } else {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        doc.addField(key, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["816521ebaad5add9cb96bb88c577394e2938c40b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"816521ebaad5add9cb96bb88c577394e2938c40b":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}