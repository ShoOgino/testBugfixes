{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      long maxVersionIndex = maxVersion;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          maxVersionIndex = Math.max(maxVersionIndex, sub.maxVersion);\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Pair<BytesRef,Long>> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                      0, 0, true, false, Integer.MAX_VALUE,\n                                                                      FST_OUTPUTS, null, false,\n                                                                      PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), FST_OUTPUTS.newPair(new BytesRef(bytes, 0, bytes.length), Long.MAX_VALUE - maxVersionIndex));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<Pair<BytesRef,Long>> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<Pair<BytesRef,Long>> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      long maxVersionIndex = maxVersion;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          maxVersionIndex = Math.max(maxVersionIndex, sub.maxVersion);\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Pair<BytesRef,Long>> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                      0, 0, true, false, Integer.MAX_VALUE,\n                                                                      FST_OUTPUTS, null, false,\n                                                                      PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), FST_OUTPUTS.newPair(new BytesRef(bytes, 0, bytes.length), Long.MAX_VALUE - maxVersionIndex));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<Pair<BytesRef,Long>> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<Pair<BytesRef,Long>> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"/dev/null","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      long maxVersionIndex = maxVersion;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          maxVersionIndex = Math.max(maxVersionIndex, sub.maxVersion);\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Pair<BytesRef,Long>> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                      0, 0, true, false, Integer.MAX_VALUE,\n                                                                      FST_OUTPUTS, null, false,\n                                                                      PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), FST_OUTPUTS.newPair(new BytesRef(bytes, 0, bytes.length), Long.MAX_VALUE - maxVersionIndex));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<Pair<BytesRef,Long>> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<Pair<BytesRef,Long>> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream,IntsRef).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> blocks, RAMOutputStream scratchBytes, IntsRef scratchIntsRef) throws IOException {\n\n      assert (isFloor && blocks.size() > 1) || (isFloor == false && blocks.size() == 1): \"isFloor=\" + isFloor + \" blocks=\" + blocks;\n      assert this == blocks.get(0);\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      long maxVersionIndex = maxVersion;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(blocks.size()-1);\n        for (int i=1;i<blocks.size();i++) {\n          PendingBlock sub = blocks.get(i);\n          maxVersionIndex = Math.max(maxVersionIndex, sub.maxVersion);\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Pair<BytesRef,Long>> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                      0, 0, true, false, Integer.MAX_VALUE,\n                                                                      FST_OUTPUTS, false,\n                                                                      PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), FST_OUTPUTS.newPair(new BytesRef(bytes, 0, bytes.length), Long.MAX_VALUE - maxVersionIndex));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n      for(PendingBlock block : blocks) {\n        if (block.subIndices != null) {\n          for(FST<Pair<BytesRef,Long>> subIndex : block.subIndices) {\n            append(indexBuilder, subIndex, scratchIntsRef);\n          }\n          block.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n\n      assert subIndices == null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      long maxVersionIndex = maxVersion;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          maxVersionIndex = Math.max(maxVersionIndex, sub.maxVersion);\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final Builder<Pair<BytesRef,Long>> indexBuilder = new Builder<>(FST.INPUT_TYPE.BYTE1,\n                                                                      0, 0, true, false, Integer.MAX_VALUE,\n                                                                      FST_OUTPUTS, null, false,\n                                                                      PackedInts.COMPACT, true, 15);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(Util.toIntsRef(prefix, scratchIntsRef), FST_OUTPUTS.newPair(new BytesRef(bytes, 0, bytes.length), Long.MAX_VALUE - maxVersionIndex));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<Pair<BytesRef,Long>> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<Pair<BytesRef,Long>> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f838187609fee3a1afa5f162f93c796046242c84":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f838187609fee3a1afa5f162f93c796046242c84"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["f838187609fee3a1afa5f162f93c796046242c84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"f838187609fee3a1afa5f162f93c796046242c84":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}