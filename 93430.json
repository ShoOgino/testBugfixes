{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/ConcatFunction#createConcatFunction(String,String,TwoStringInStringOutLambda,AnalyticsValueStream[]).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/ConcatFunction#createConcatFunction(String,String,TwoStringInStringOutLambda,AnalyticsValueStream[]).mjava","pathOld":"/dev/null","sourceNew":"  private static StringValueStream createConcatFunction(String functionName, String uniqueName, TwoStringInStringOutLambda lambda, AnalyticsValueStream[] params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The \"+functionName+\" function requires parameters.\");\n    } else if (params.length == 1) {\n      if (params[0] instanceof StringValueStream) {\n        return LambdaFunction.createStringLambdaFunction(uniqueName, lambda, (StringValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"The \"+functionName+\" function requires that all parameters be string-castable.\");\n    } else if (params.length == 2) {\n      // If it is not a pair of a single valued and multi valued string, then it will be taken care of below\n      if (params[0] instanceof StringValueStream && params[1] instanceof StringValueStream\n          && !(params[0] instanceof StringValue && params[1] instanceof StringValue)) {\n        return LambdaFunction.createStringLambdaFunction(uniqueName, lambda, (StringValueStream)params[0], (StringValueStream)params[1]);\n      }\n    }\n    StringValue[] castedParams = new StringValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof StringValue) {\n        castedParams[i] = (StringValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"The \"+functionName+\" function requires that all parameters be string-castable, and if more than 2 parameters\"\n            + \" are provided then all must be single-valued.\");\n      }\n    }\n    return LambdaFunction.createStringLambdaFunction(uniqueName, lambda, castedParams, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}