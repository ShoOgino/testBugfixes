{"path":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","commits":[{"id":"1807cf7ff48453a48bc28608f557e16b6a1f7fa8","date":1464474872,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.useFastVectorHighlighter\", \"true\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.useFastVectorHighlighter\", \"true\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.useFastVectorHighlighter\", \"true\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.useFastVectorHighlighter\", \"true\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8868b7c4fbf215c41e7b4ea2cfc40d1970672910","date":1480034167,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.useFastVectorHighlighter\", \"true\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.useFastVectorHighlighter\", \"true\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.useFastVectorHighlighter\", \"true\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","pathOld":"solr/core/src/test/org/apache/solr/highlight/HighlighterTest#testAlternateSummaryWithHighlighting().mjava","sourceNew":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testAlternateSummaryWithHighlighting() {\n     //long document\n     assertU(adoc(\"tv_text\", \"keyword is only here, tv_text alternate field\",\n                  \"t_text\", \"a piece of text to be substituted\",\n                  \"other_t\", \"keyword\",\n                  \"id\", \"1\",\n                  \"foo_t\",\"hi\"));\n     assertU(commit());\n     assertU(optimize());\n\n    // Prove that hl.highlightAlternate is default true and respects maxAlternateFieldLength\n    HashMap<String,String> args = new HashMap<>();\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.fragsize\",\"0\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.simple.pre\", \"<simplepre>\");\n    args.put(\"hl.simple.post\", \"</simplepost>\");\n    args.put(\"hl.alternateField\", \"tv_text\");\n    args.put(\"hl.maxAlternateFieldLength\", \"39\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // Query on other field than hl or alternate. Still we get the hightlighted snippet from alternate\n    assertQ(\"Alternate summarization with highlighting, query other field\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text']\"\n            );\n\n    // With hl.requireFieldMatch, will not highlight but fall back to plain-text alternate\n    args.put(\"hl.requireFieldMatch\", \"true\");\n    sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting, requireFieldMatch\",\n            sumLRF.makeRequest(\"other_t:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only here, tv_text alternate']\"\n            );\n    args.put(\"hl.requireFieldMatch\", \"false\");\n\n\n    // Works with field specific params, overriding maxAlternateFieldLength to return everything\n    args.remove(\"hl.alternateField\");\n    args.put(\"f.t_text.hl.alternateField\", \"tv_text\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"0\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<simplepre>keyword</simplepost> is only here, tv_text alternate field']\"\n            );\n\n    // Prove fallback highlighting works also with FVH\n    args.put(\"hl.method\", \"fastVector\");\n    args.put(\"hl.tag.pre\", \"<fvhpre>\");\n    args.put(\"hl.tag.post\", \"</fvhpost>\");\n    args.put(\"f.t_text.hl.maxAlternateFieldLength\", \"18\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization with highlighting using FVH\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n        \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='<fvhpre>keyword</fvhpost> is only here']\"\n            );\n\n    // Prove it is possible to turn off highlighting of alternate field\n    args.put(\"hl.highlightAlternate\", \"false\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"Alternate summarization without highlighting\",\n            sumLRF.makeRequest(\"tv_text:keyword\"),\n            \"//lst[@name='highlighting']/lst[@name='1' and count(*)=1]\",\n            \"//lst[@name='highlighting']/lst[@name='1']/arr[@name='t_text']/str[.='keyword is only he']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1807cf7ff48453a48bc28608f557e16b6a1f7fa8"],"1807cf7ff48453a48bc28608f557e16b6a1f7fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","75babd1dfc2521603bfeb0968042e921d8c6c652"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["1807cf7ff48453a48bc28608f557e16b6a1f7fa8"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["1807cf7ff48453a48bc28608f557e16b6a1f7fa8","8868b7c4fbf215c41e7b4ea2cfc40d1970672910"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["75babd1dfc2521603bfeb0968042e921d8c6c652","28288370235ed02234a64753cdbf0c6ec096304a"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1807cf7ff48453a48bc28608f557e16b6a1f7fa8"],"28288370235ed02234a64753cdbf0c6ec096304a":["75babd1dfc2521603bfeb0968042e921d8c6c652","5ff704ef91e9ae30ca59babb23ece85720701b60"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1807cf7ff48453a48bc28608f557e16b6a1f7fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["75babd1dfc2521603bfeb0968042e921d8c6c652"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"1807cf7ff48453a48bc28608f557e16b6a1f7fa8":["da8a02bef7458089240404614139b53c9f875ec7","8868b7c4fbf215c41e7b4ea2cfc40d1970672910","75babd1dfc2521603bfeb0968042e921d8c6c652","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["727bb765ff2542275f6d31f67be18d7104bae148","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8a02bef7458089240404614139b53c9f875ec7","1807cf7ff48453a48bc28608f557e16b6a1f7fa8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"30c8e5574b55d57947e989443dfde611646530ee":[],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","727bb765ff2542275f6d31f67be18d7104bae148","30c8e5574b55d57947e989443dfde611646530ee","5b8ee93140fd0efef7e101786e3ed5160a700b5f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}