{"path":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","commits":[{"id":"32da05d97a45ece3cec1f9d79cf153e2e845d08c","date":1435709797,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","pathOld":"/dev/null","sourceNew":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    return null; // void\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","sourceNew":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    return null; // void\n  }\n\n","sourceOld":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    return null; // void\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","sourceNew":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    return null; // void\n  }\n\n","sourceOld":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    return null; // void\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","sourceNew":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    return null; // void\n  }\n\n","sourceOld":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    return null; // void\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReadOnlyIndex#doTestReadOnlyIndex().mjava","sourceNew":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits.value);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    return null; // void\n  }\n\n","sourceOld":"  private Void doTestReadOnlyIndex() throws Exception {\n    Directory dir = FSDirectory.open(indexPath); \n    IndexReader ireader = DirectoryReader.open(dir); \n    IndexSearcher isearcher = newSearcher(ireader);\n    \n    // borrows from TestDemo, but not important to keep in sync with demo\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    return null; // void\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","470eaac3a77cf637b62126a5408b178d7be93eb1"],"32da05d97a45ece3cec1f9d79cf153e2e845d08c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["470eaac3a77cf637b62126a5408b178d7be93eb1"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["32da05d97a45ece3cec1f9d79cf153e2e845d08c"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"32da05d97a45ece3cec1f9d79cf153e2e845d08c":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32da05d97a45ece3cec1f9d79cf153e2e845d08c"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}