{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","sourceNew":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","sourceOld":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","sourceNew":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","sourceOld":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","sourceNew":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","sourceOld":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","sourceNew":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","sourceOld":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<String>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","sourceNew":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<>();\n    ScoreDoc[] hits = searcher.search(tq, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","sourceOld":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<>();\n    ScoreDoc[] hits = searcher.search(tq, null, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dfca18b7bfce32a543487fd4b0c11595177e908","date":1435655762,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testNoFilter().mjava","sourceNew":null,"sourceOld":"  public void testNoFilter() throws Throwable {\n    HashSet<String> results = new HashSet<>();\n    ScoreDoc[] hits = searcher.search(tq, 1000).scoreDocs;\n    assertTrue(\"Default searching should have found some matches\", hits.length > 0);\n    boolean dupsFound = false;\n\n    for (ScoreDoc hit : hits) {\n      StoredDocument d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      if (!dupsFound)\n        dupsFound = results.contains(url);\n      results.add(url);\n    }\n    assertTrue(\"Default searching should have found duplicate urls\", dupsFound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d028314cced5858683a1bb4741423d0f934257b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4dfca18b7bfce32a543487fd4b0c11595177e908":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4dfca18b7bfce32a543487fd4b0c11595177e908"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"1d028314cced5858683a1bb4741423d0f934257b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["4dfca18b7bfce32a543487fd4b0c11595177e908"],"4dfca18b7bfce32a543487fd4b0c11595177e908":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}