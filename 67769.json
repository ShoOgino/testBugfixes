{"path":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    // Mix bits before folding in things like boost, since it could cancel the\n    // last element of clauses.  This particular mix also serves to\n    // differentiate SpanNearQuery hashcodes from others.\n    result ^= (result << 14) | (result >>> 19);  // reversible\n    result += Float.floatToRawIntBits(getBoost());\n    result += slop;\n    result ^= (inOrder ? 0x99AFD3BD : 0);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    // Mix bits before folding in things like boost, since it could cancel the\n    // last element of clauses.  This particular mix also serves to\n    // differentiate SpanNearQuery hashcodes from others.\n    result ^= (result << 14) | (result >>> 19);  // reversible\n    result += Float.floatToRawIntBits(getBoost());\n    result += slop;\n    result ^= (inOrder ? 0x99AFD3BD : 0);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanNearQuery#hashCode().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int hashCode() {\n    int result;\n    result = clauses.hashCode();\n    // Mix bits before folding in things like boost, since it could cancel the\n    // last element of clauses.  This particular mix also serves to\n    // differentiate SpanNearQuery hashcodes from others.\n    result ^= (result << 14) | (result >>> 19);  // reversible\n    result += Float.floatToRawIntBits(getBoost());\n    result += slop;\n    result ^= (inOrder ? 0x99AFD3BD : 0);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}