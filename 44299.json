{"path":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"/dev/null","sourceNew":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createFile(segment + \".frq\");\n      proxOutput = directory.createFile(segment + \".prx\");\n      termInfosWriter =\n\tnew TermInfosWriter(directory, segment, fieldInfos);\n      \n      mergeTermInfos();\n      \n    } finally {\n      if (freqOutput != null) \t\tfreqOutput.close();\n      if (proxOutput != null) \t\tproxOutput.close();\n      if (termInfosWriter != null) \ttermInfosWriter.close();\n      if (queue != null)\t\tqueue.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createFile(segment + \".frq\");\n      proxOutput = directory.createFile(segment + \".prx\");\n      termInfosWriter =\n        new TermInfosWriter(directory, segment, fieldInfos);\n      \n      mergeTermInfos();\n      \n    } finally {\n      if (freqOutput != null) \t\tfreqOutput.close();\n      if (proxOutput != null) \t\tproxOutput.close();\n      if (termInfosWriter != null) \ttermInfosWriter.close();\n      if (queue != null)\t\tqueue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createFile(segment + \".frq\");\n      proxOutput = directory.createFile(segment + \".prx\");\n      termInfosWriter =\n\tnew TermInfosWriter(directory, segment, fieldInfos);\n      \n      mergeTermInfos();\n      \n    } finally {\n      if (freqOutput != null) \t\tfreqOutput.close();\n      if (proxOutput != null) \t\tproxOutput.close();\n      if (termInfosWriter != null) \ttermInfosWriter.close();\n      if (queue != null)\t\tqueue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createFile(segment + \".frq\");\n      proxOutput = directory.createFile(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos);\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createFile(segment + \".frq\");\n      proxOutput = directory.createFile(segment + \".prx\");\n      termInfosWriter =\n        new TermInfosWriter(directory, segment, fieldInfos);\n      \n      mergeTermInfos();\n      \n    } finally {\n      if (freqOutput != null) \t\tfreqOutput.close();\n      if (proxOutput != null) \t\tproxOutput.close();\n      if (termInfosWriter != null) \ttermInfosWriter.close();\n      if (queue != null)\t\tqueue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5cf8ed8dfc080044944e2cabac618bc36199013","date":1082468878,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createFile(segment + \".frq\");\n      proxOutput = directory.createFile(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos);\n      skipInterval = termInfosWriter.skipInterval;\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createFile(segment + \".frq\");\n      proxOutput = directory.createFile(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos);\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dda77265180d41bf85c84c995e25eda7b8e1b74d","date":1096395352,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos);\n      skipInterval = termInfosWriter.skipInterval;\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createFile(segment + \".frq\");\n      proxOutput = directory.createFile(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos);\n      skipInterval = termInfosWriter.skipInterval;\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3afaca6e0770734b01e3bc663bec3ffa71b6f87b","date":1110394706,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos,\n                                  termIndexInterval);\n      skipInterval = termInfosWriter.skipInterval;\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos);\n      skipInterval = termInfosWriter.skipInterval;\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos,\n                                  termIndexInterval);\n      skipInterval = termInfosWriter.skipInterval;\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos,\n                                  termIndexInterval);\n      skipInterval = termInfosWriter.skipInterval;\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos,\n                                  termIndexInterval);\n      skipInterval = termInfosWriter.skipInterval;\n      maxSkipLevels = termInfosWriter.maxSkipLevels;\n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels, mergedDocs, freqOutput, proxOutput);\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos,\n                                  termIndexInterval);\n      skipInterval = termInfosWriter.skipInterval;\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      if (hasProx())\n        proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos,\n                                  termIndexInterval);\n      skipInterval = termInfosWriter.skipInterval;\n      maxSkipLevels = termInfosWriter.maxSkipLevels;\n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels, mergedDocs, freqOutput, proxOutput);\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos,\n                                  termIndexInterval);\n      skipInterval = termInfosWriter.skipInterval;\n      maxSkipLevels = termInfosWriter.maxSkipLevels;\n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels, mergedDocs, freqOutput, proxOutput);\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n\n    SegmentWriteState state = new SegmentWriteState(null, directory, segment, null, mergedDocs, 0, termIndexInterval);\n\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n\n    try {\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos(consumer);\n\n    } finally {\n      consumer.finish();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n    try {\n      freqOutput = directory.createOutput(segment + \".frq\");\n      if (hasProx())\n        proxOutput = directory.createOutput(segment + \".prx\");\n      termInfosWriter =\n              new TermInfosWriter(directory, segment, fieldInfos,\n                                  termIndexInterval);\n      skipInterval = termInfosWriter.skipInterval;\n      maxSkipLevels = termInfosWriter.maxSkipLevels;\n      skipListWriter = new DefaultSkipListWriter(skipInterval, maxSkipLevels, mergedDocs, freqOutput, proxOutput);\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos();\n\n    } finally {\n      if (freqOutput != null) freqOutput.close();\n      if (proxOutput != null) proxOutput.close();\n      if (termInfosWriter != null) termInfosWriter.close();\n      if (queue != null) queue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#mergeTerms().mjava","sourceNew":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n\n    SegmentWriteState state = new SegmentWriteState(null, directory, segment, null, mergedDocs, 0, termIndexInterval);\n\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n\n    try {\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos(consumer);\n\n    } finally {\n      consumer.finish();\n      if (queue != null) queue.close();\n    }\n  }\n\n","sourceOld":"  private final void mergeTerms() throws CorruptIndexException, IOException {\n\n    SegmentWriteState state = new SegmentWriteState(null, directory, segment, null, mergedDocs, 0, termIndexInterval);\n\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n\n    try {\n      queue = new SegmentMergeQueue(readers.size());\n\n      mergeTermInfos(consumer);\n\n    } finally {\n      consumer.finish();\n      if (queue != null) queue.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b54a9bc667895a2095a886184bf69a3179e63df":["3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"f5cf8ed8dfc080044944e2cabac618bc36199013":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["f5cf8ed8dfc080044944e2cabac618bc36199013"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3afaca6e0770734b01e3bc663bec3ffa71b6f87b":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["1b54a9bc667895a2095a886184bf69a3179e63df"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1b54a9bc667895a2095a886184bf69a3179e63df":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"f5cf8ed8dfc080044944e2cabac618bc36199013":["dda77265180d41bf85c84c995e25eda7b8e1b74d"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f5cf8ed8dfc080044944e2cabac618bc36199013"],"dda77265180d41bf85c84c995e25eda7b8e1b74d":["3afaca6e0770734b01e3bc663bec3ffa71b6f87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"3afaca6e0770734b01e3bc663bec3ffa71b6f87b":["1b54a9bc667895a2095a886184bf69a3179e63df"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}