{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteStatusTest#testDeleteStatusFlush().mjava","commits":[{"id":"e0b734049423191fc1079a874b216c07ad0722a0","date":1454966146,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteStatusTest#testDeleteStatusFlush().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeleteStatusFlush() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setConfigName(\"conf1\")\n        .setCollectionName(\"foo\")\n        .setAsyncId(\"foo\")\n        .setNumShards(1)\n        .setReplicationFactor(1)\n        .process(cloudClient);\n\n    create = new CollectionAdminRequest.Create();\n    create.setConfigName(\"conf1\")\n        .setCollectionName(\"bar\")\n        .setAsyncId(\"bar\")\n        .setNumShards(1)\n        .setReplicationFactor(1)\n        .process(cloudClient);\n\n    RequestStatusState state = getRequestStateAfterCompletion(\"foo\", 30, cloudClient);\n    assertEquals(RequestStatusState.COMPLETED, state);\n\n    state = getRequestStateAfterCompletion(\"bar\", 30, cloudClient);\n    assertEquals(RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.DeleteStatus deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    deleteStatus.setFlush(true)\n        .process(cloudClient);\n\n    assertEquals(RequestStatusState.NOT_FOUND, getRequestState(\"foo\", cloudClient));\n    assertEquals(RequestStatusState.NOT_FOUND, getRequestState(\"bar\", cloudClient));\n\n    deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    try {\n      deleteStatus.process(cloudClient);\n      fail(\"delete status should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"Either requestid or flush parameter must be specified.\"));\n    }\n\n    deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    try {\n      deleteStatus.setFlush(true)\n          .setRequestId(\"foo\")\n          .process(cloudClient);\n      fail(\"delete status should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"Both requestid and flush parameters can not be specified together.\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daed6b66edd950a7f2af9857df64b09acf3deacc","date":1457527865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteStatusTest#testDeleteStatusFlush().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteStatusTest#testDeleteStatusFlush().mjava","sourceNew":"  @Test\n  public void testDeleteStatusFlush() throws Exception {\n\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    String id1 = CollectionAdminRequest.createCollection(\"flush1\", \"conf1\", 1, 1).processAsync(client);\n    String id2 = CollectionAdminRequest.createCollection(\"flush2\", \"conf1\", 1, 1).processAsync(client);\n\n    assertEquals(RequestStatusState.COMPLETED, waitForRequestState(id1, client, MAX_WAIT_TIMEOUT));\n    assertEquals(RequestStatusState.COMPLETED, waitForRequestState(id2, client, MAX_WAIT_TIMEOUT));\n\n    CollectionAdminRequest.deleteAllAsyncIds().process(client);\n\n    assertEquals(RequestStatusState.NOT_FOUND,\n        CollectionAdminRequest.requestStatus(id1).process(client).getRequestStatus());\n    assertEquals(RequestStatusState.NOT_FOUND,\n        CollectionAdminRequest.requestStatus(id2).process(client).getRequestStatus());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteStatusFlush() throws Exception {\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n    create.setConfigName(\"conf1\")\n        .setCollectionName(\"foo\")\n        .setAsyncId(\"foo\")\n        .setNumShards(1)\n        .setReplicationFactor(1)\n        .process(cloudClient);\n\n    create = new CollectionAdminRequest.Create();\n    create.setConfigName(\"conf1\")\n        .setCollectionName(\"bar\")\n        .setAsyncId(\"bar\")\n        .setNumShards(1)\n        .setReplicationFactor(1)\n        .process(cloudClient);\n\n    RequestStatusState state = getRequestStateAfterCompletion(\"foo\", 30, cloudClient);\n    assertEquals(RequestStatusState.COMPLETED, state);\n\n    state = getRequestStateAfterCompletion(\"bar\", 30, cloudClient);\n    assertEquals(RequestStatusState.COMPLETED, state);\n\n    CollectionAdminRequest.DeleteStatus deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    deleteStatus.setFlush(true)\n        .process(cloudClient);\n\n    assertEquals(RequestStatusState.NOT_FOUND, getRequestState(\"foo\", cloudClient));\n    assertEquals(RequestStatusState.NOT_FOUND, getRequestState(\"bar\", cloudClient));\n\n    deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    try {\n      deleteStatus.process(cloudClient);\n      fail(\"delete status should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"Either requestid or flush parameter must be specified.\"));\n    }\n\n    deleteStatus = new CollectionAdminRequest.DeleteStatus();\n    try {\n      deleteStatus.setFlush(true)\n          .setRequestId(\"foo\")\n          .process(cloudClient);\n      fail(\"delete status should have failed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      assertTrue(e.getMessage().contains(\"Both requestid and flush parameters can not be specified together.\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0b734049423191fc1079a874b216c07ad0722a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["e0b734049423191fc1079a874b216c07ad0722a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["daed6b66edd950a7f2af9857df64b09acf3deacc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b734049423191fc1079a874b216c07ad0722a0"],"e0b734049423191fc1079a874b216c07ad0722a0":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}