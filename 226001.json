{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","commits":[{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,byte[]).mjava","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      AutoScaling.EventType eventType = cfg.eventType;\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, byte[] data) {\n    ZkNodeProps loaded = ZkNodeProps.load(data);\n    Map<String, Object> triggers = (Map<String, Object>) loaded.get(\"triggers\");\n\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      Map<String, Object> props = (Map<String, Object>) entry.getValue();\n      String event = (String) props.get(AutoScalingParams.EVENT);\n      AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(event.toUpperCase(Locale.ROOT));\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, props));\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      TriggerEventType eventType = cfg.event;\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      AutoScaling.EventType eventType = cfg.eventType;\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      TriggerEventType eventType = cfg.event;\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      TriggerEventType eventType = cfg.event;\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n    }\n    return triggerMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      TriggerEventType eventType = cfg.event;\n      String triggerName = entry.getKey();\n      try {\n        triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n      } catch (TriggerValidationException e) {\n        log.warn(\"Error in trigger '\" + triggerName + \"' configuration, trigger config ignored: \" + cfg, e);\n      }\n    }\n    return triggerMap;\n  }\n\n","sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      TriggerEventType eventType = cfg.event;\n      String triggerName = entry.getKey();\n      triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","sourceNew":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      TriggerEventType eventType = cfg.event;\n      String triggerName = entry.getKey();\n      try {\n        triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n      } catch (TriggerValidationException e) {\n        log.warn(\"Error in trigger '{}' configuration, trigger config ignored: {}\", triggerName, cfg, e);\n      }\n    }\n    return triggerMap;\n  }\n\n","sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      TriggerEventType eventType = cfg.event;\n      String triggerName = entry.getKey();\n      try {\n        triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n      } catch (TriggerValidationException e) {\n        log.warn(\"Error in trigger '\" + triggerName + \"' configuration, trigger config ignored: \" + cfg, e);\n      }\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#loadTriggers(AutoScaling.TriggerFactory,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  private static Map<String, AutoScaling.Trigger> loadTriggers(AutoScaling.TriggerFactory triggerFactory, AutoScalingConfig autoScalingConfig) {\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = autoScalingConfig.getTriggerConfigs();\n    if (triggers == null) {\n      return Collections.emptyMap();\n    }\n\n    Map<String, AutoScaling.Trigger> triggerMap = new HashMap<>(triggers.size());\n\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      AutoScalingConfig.TriggerConfig cfg = entry.getValue();\n      TriggerEventType eventType = cfg.event;\n      String triggerName = entry.getKey();\n      try {\n        triggerMap.put(triggerName, triggerFactory.create(eventType, triggerName, cfg.properties));\n      } catch (TriggerValidationException e) {\n        log.warn(\"Error in trigger '{}' configuration, trigger config ignored: {}\", triggerName, cfg, e);\n      }\n    }\n    return triggerMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"c5fd294da67452cd8d116692194908de00eb5209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e35f2dde06b35aa9904949a3a93fabd090371077":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c5fd294da67452cd8d116692194908de00eb5209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5fd294da67452cd8d116692194908de00eb5209":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c5fd294da67452cd8d116692194908de00eb5209","560c18d71dad43d675158783c3840f8c80d6d39c"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["e35f2dde06b35aa9904949a3a93fabd090371077"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}