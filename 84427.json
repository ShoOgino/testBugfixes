{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#minTest().mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#minTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void minTest() throws Exception { \n    String[] params = new String[] {\n        \"o.minn.s.int\", \"min(int_id)\",\n        \"o.minn.s.long\", \"min(long_ld)\",\n        \"o.minn.s.float\", \"min(float_fd)\",\n        \"o.minn.s.double\", \"min(double_dd)\",\n        \"o.minn.ff\", \"string_sd\",\n        \"o.minn.ff\", \"date_dtd\",\n\n        \"o.min.s.str\", \"min(string_sd)\",\n        \"o.min.s.date\", \"string(min(date_dtd))\",\n        \"o.min.ff\", \"int_id\",\n        \"o.min.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Integer> intDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"min\");\n    assertEquals(responseStr,intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"min\");\n    assertEquals(responseStr,intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"min\");\n    assertEquals(responseStr,longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"min\");\n    assertEquals(responseStr,longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"min\");\n    assertEquals(responseStr,floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"min\");\n    assertEquals(responseStr,floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"min\");\n    assertEquals(responseStr,doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"min\");\n    assertEquals(responseStr,doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getValueList(response, \"min\", \"fieldFacets\", \"int_id\", \"date\", false);\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"min\");\n    assertEquals(responseStr,dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getValueList(response, \"min\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"min\");\n    assertEquals(responseStr,dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getValueList(response, \"min\", \"fieldFacets\", \"int_id\", \"str\", false);\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"min\");\n    assertEquals(responseStr,stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getValueList(response, \"min\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"min\");\n    assertEquals(responseStr,stringLong,stringLongTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#minTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void minTest() throws Exception { \n    String[] params = new String[] {\n        \"o.minn.s.int\", \"min(int_id)\",\n        \"o.minn.s.long\", \"min(long_ld)\",\n        \"o.minn.s.float\", \"min(float_fd)\",\n        \"o.minn.s.double\", \"min(double_dd)\",\n        \"o.minn.ff\", \"string_sd\",\n        \"o.minn.ff\", \"date_dtd\",\n\n        \"o.min.s.str\", \"min(string_sd)\",\n        \"o.min.s.date\", \"string(min(date_dtd))\",\n        \"o.min.ff\", \"int_id\",\n        \"o.min.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Integer> intDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"min\");\n    assertEquals(responseStr,intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"min\");\n    assertEquals(responseStr,intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"min\");\n    assertEquals(responseStr,longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"min\");\n    assertEquals(responseStr,longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"min\");\n    assertEquals(responseStr,floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"min\");\n    assertEquals(responseStr,floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"min\");\n    assertEquals(responseStr,doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"min\");\n    assertEquals(responseStr,doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getValueList(response, \"min\", \"fieldFacets\", \"int_id\", \"date\", false);\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"min\");\n    assertEquals(responseStr,dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getValueList(response, \"min\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"min\");\n    assertEquals(responseStr,dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getValueList(response, \"min\", \"fieldFacets\", \"int_id\", \"str\", false);\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"min\");\n    assertEquals(responseStr,stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getValueList(response, \"min\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"min\");\n    assertEquals(responseStr,stringLong,stringLongTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#minTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void minTest() throws Exception { \n    String[] params = new String[] {\n        \"o.minn.s.int\", \"min(int_id)\",\n        \"o.minn.s.long\", \"min(long_ld)\",\n        \"o.minn.s.float\", \"min(float_fd)\",\n        \"o.minn.s.double\", \"min(double_dd)\",\n        \"o.minn.ff\", \"string_sd\",\n        \"o.minn.ff\", \"date_dtd\",\n\n        \"o.min.s.str\", \"min(string_sd)\",\n        \"o.min.s.date\", \"string(min(date_dtd))\",\n        \"o.min.ff\", \"int_id\",\n        \"o.min.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Integer> intDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"min\");\n    assertEquals(responseStr,intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"min\");\n    assertEquals(responseStr,intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"min\");\n    assertEquals(responseStr,longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"min\");\n    assertEquals(responseStr,longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"min\");\n    assertEquals(responseStr,floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"min\");\n    assertEquals(responseStr,floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"min\");\n    assertEquals(responseStr,doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"min\");\n    assertEquals(responseStr,doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getValueList(response, \"min\", \"fieldFacets\", \"int_id\", \"date\", false);\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"min\");\n    assertEquals(responseStr,dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getValueList(response, \"min\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"min\");\n    assertEquals(responseStr,dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getValueList(response, \"min\", \"fieldFacets\", \"int_id\", \"str\", false);\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"min\");\n    assertEquals(responseStr,stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getValueList(response, \"min\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"min\");\n    assertEquals(responseStr,stringLong,stringLongTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#minTest().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void minTest() throws Exception { \n    String[] params = new String[] {\n        \"o.minn.s.int\", \"min(int_id)\",\n        \"o.minn.s.long\", \"min(long_ld)\",\n        \"o.minn.s.float\", \"min(float_fd)\",\n        \"o.minn.s.double\", \"min(double_dd)\",\n        \"o.minn.ff\", \"string_sd\",\n        \"o.minn.ff\", \"date_dtd\",\n\n        \"o.min.s.str\", \"min(string_sd)\",\n        \"o.min.s.date\", \"string(min(date_dtd))\",\n        \"o.min.ff\", \"int_id\",\n        \"o.min.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Integer> intDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"min\");\n    assertEquals(responseStr,intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"min\");\n    assertEquals(responseStr,intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"min\");\n    assertEquals(responseStr,longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"min\");\n    assertEquals(responseStr,longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"min\");\n    assertEquals(responseStr,floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"min\");\n    assertEquals(responseStr,floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getValueList(response, \"minn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"min\");\n    assertEquals(responseStr,doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getValueList(response, \"minn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"min\");\n    assertEquals(responseStr,doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getValueList(response, \"min\", \"fieldFacets\", \"int_id\", \"date\", false);\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"min\");\n    assertEquals(responseStr,dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getValueList(response, \"min\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"min\");\n    assertEquals(responseStr,dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getValueList(response, \"min\", \"fieldFacets\", \"int_id\", \"str\", false);\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"min\");\n    assertEquals(responseStr,stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getValueList(response, \"min\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"min\");\n    assertEquals(responseStr,stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}