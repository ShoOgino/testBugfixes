{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(CategoryPath,CharBlockArray,int).mjava","commits":[{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(CategoryPath,CharBlockArray,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check whether the {@link CategoryPath} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(CategoryPath cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = (short) charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["95dac0f45251471041578dd8de89dfc7fbb28f8b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(CategoryPath,CharBlockArray,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check whether the {@link CategoryPath} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(CategoryPath cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = (short) charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95dac0f45251471041578dd8de89dfc7fbb28f8b","date":1370889677,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(CategoryPath,CharBlockArray,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(CategoryPath,CharBlockArray,int).mjava","sourceNew":"  /**\n   * Check whether the {@link CategoryPath} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(CategoryPath cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Check whether the {@link CategoryPath} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(CategoryPath cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = (short) charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","bugFix":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(FacetLabel,CharBlockArray,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(CategoryPath,CharBlockArray,int).mjava","sourceNew":"  /**\n   * Check whether the {@link FacetLabel} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(FacetLabel cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Check whether the {@link CategoryPath} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(CategoryPath cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CategoryPathUtils#equalsToSerialized(CategoryPath,CharBlockArray,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Check whether the {@link CategoryPath} is equal to the one serialized in\n   * {@link CharBlockArray}.\n   */\n  public static boolean equalsToSerialized(CategoryPath cp, CharBlockArray charBlockArray, int offset) {\n    int n = charBlockArray.charAt(offset++);\n    if (cp.length != n) {\n      return false;\n    }\n    if (cp.length == 0) {\n      return true;\n    }\n    \n    for (int i = 0; i < cp.length; i++) {\n      int len = charBlockArray.charAt(offset++);\n      if (len != cp.components[i].length()) {\n        return false;\n      }\n      if (!cp.components[i].equals(charBlockArray.subSequence(offset, offset + len))) {\n        return false;\n      }\n      offset += len;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95dac0f45251471041578dd8de89dfc7fbb28f8b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["95dac0f45251471041578dd8de89dfc7fbb28f8b","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["95dac0f45251471041578dd8de89dfc7fbb28f8b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","95dac0f45251471041578dd8de89dfc7fbb28f8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"95dac0f45251471041578dd8de89dfc7fbb28f8b":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}