{"path":"src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","commits":[{"id":"4f483a44e10befaaa6da11d433e2eb0f52829eec","date":1175273998,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(handler),req,rsp);\n    if (rsp.getException() != null) {\n      throw rsp.getException();\n    }\n\n    StringWriter sw = new StringWriter(32000);\n    QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n    responseWriter.write(sw,req,rsp);\n\n    req.close();\n\n    return sw.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868e0ed16bb29556f95c00e989da33ab5c9dfe56","date":1228568666,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    SolrQueryResponse rsp = queryAndResponse(handler, req);\n\n    StringWriter sw = new StringWriter(32000);\n    QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n    responseWriter.write(sw,req,rsp);\n\n    req.close();\n\n    return sw.toString();\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    core.execute(core.getRequestHandler(handler),req,rsp);\n    if (rsp.getException() != null) {\n      throw rsp.getException();\n    }\n\n    StringWriter sw = new StringWriter(32000);\n    QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n    responseWriter.write(sw,req,rsp);\n\n    req.close();\n\n    return sw.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#query(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    SolrQueryResponse rsp = queryAndResponse(handler, req);\n\n    StringWriter sw = new StringWriter(32000);\n    QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n    responseWriter.write(sw,req,rsp);\n\n    req.close();\n\n    return sw.toString();\n  }\n\n","sourceOld":"  /**\n   * Processes a \"query\" using a user constructed SolrQueryRequest\n   *\n   * @param handler the name of the request handler to process the request\n   * @param req the Query to process, will be closed.\n   * @return The XML response to the query\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String query(String handler, SolrQueryRequest req) throws IOException, Exception {\n    SolrQueryResponse rsp = queryAndResponse(handler, req);\n\n    StringWriter sw = new StringWriter(32000);\n    QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n    responseWriter.write(sw,req,rsp);\n\n    req.close();\n\n    return sw.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"ad94625fb8d088209f46650c8097196fec67f00c":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f483a44e10befaaa6da11d433e2eb0f52829eec":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"868e0ed16bb29556f95c00e989da33ab5c9dfe56":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"4f483a44e10befaaa6da11d433e2eb0f52829eec":["868e0ed16bb29556f95c00e989da33ab5c9dfe56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}