{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","commits":[{"id":"a47efa78e788c0e07f09493b2dc8e027f8dc6e67","date":1352956175,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore(\"get ST to use bigdecimal, also negatives are maybe not working yet!\")\n  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.getSource().getInt(0));\n    assertEquals(Long.MAX_VALUE, dv.getSource().getInt(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13b40d7b5a40b306d198a2c868823813753fc679","date":1352958277,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","sourceNew":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.getSource().getInt(0));\n    assertEquals(Long.MAX_VALUE, dv.getSource().getInt(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  @Ignore(\"get ST to use bigdecimal, also negatives are maybe not working yet!\")\n  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.getSource().getInt(0));\n    assertEquals(Long.MAX_VALUE, dv.getSource().getInt(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd329bd749496f6c58b586a6c0dd0dc8201206f","date":1353092226,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","sourceNew":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\", random().nextBoolean());\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.getSource().getInt(0));\n    assertEquals(Long.MAX_VALUE, dv.getSource().getInt(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","sourceNew":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\", random().nextBoolean());\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","sourceNew":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef","date":1358808656,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","sourceNew":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new LongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new LongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new PackedLongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","sourceNew":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new LongDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new LongDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testBigNumericRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBigRange().mjava","sourceNew":"  public void testBigNumericRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBigRange() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", Long.MIN_VALUE));\n    iwriter.addDocument(doc);\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"dv\", Long.MAX_VALUE));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    NumericDocValues dv = ireader.leaves().get(0).reader().getNumericDocValues(\"dv\");\n    assertEquals(Long.MIN_VALUE, dv.get(0));\n    assertEquals(Long.MAX_VALUE, dv.get(1));\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["13b40d7b5a40b306d198a2c868823813753fc679"],"a47efa78e788c0e07f09493b2dc8e027f8dc6e67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"13b40d7b5a40b306d198a2c868823813753fc679":["a47efa78e788c0e07f09493b2dc8e027f8dc6e67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"]},"commit2Childs":{"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a47efa78e788c0e07f09493b2dc8e027f8dc6e67","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a47efa78e788c0e07f09493b2dc8e027f8dc6e67":["13b40d7b5a40b306d198a2c868823813753fc679"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"13b40d7b5a40b306d198a2c868823813753fc679":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}