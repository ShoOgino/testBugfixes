{"path":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(AnalyticsParams.ANALYTICS,false)) {\n      rb.setNeedDocSet( true );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(AnalyticsParams.ANALYTICS,false)) {\n      rb.setNeedDocSet( true );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb._isOlapAnalytics = false;\n    rb.doAnalytics = false;\n    if (analyticsRequest != null) {\n      rb.doAnalytics = true;\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(analyticsRequest, new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(OldAnalyticsRequestConverter.convert(rb.req.getParams()), new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n      rb._isOlapAnalytics = true;\n      rb.doAnalytics = true;\n    }\n    \n    if (rb.doAnalytics) {\n      AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n      // Check to see if the request is distributed\n      if (rb.isDistrib) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(AnalyticsParams.ANALYTICS,false)) {\n      rb.setNeedDocSet( true );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb._isOlapAnalytics = false;\n    rb.doAnalytics = false;\n    if (analyticsRequest != null) {\n      rb.doAnalytics = true;\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(analyticsRequest, new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(OldAnalyticsRequestConverter.convert(rb.req.getParams()), new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n      rb._isOlapAnalytics = true;\n      rb.doAnalytics = true;\n    }\n    \n    if (rb.doAnalytics) {\n      AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n      // Check to see if the request is distributed\n      if (rb.isDistrib) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(AnalyticsParams.ANALYTICS,false)) {\n      rb.setNeedDocSet( true );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb._isOlapAnalytics = false;\n    rb.doAnalytics = false;\n    if (analyticsRequest != null) {\n      rb.doAnalytics = true;\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(analyticsRequest, new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(OldAnalyticsRequestConverter.convert(rb.req.getParams()), new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n      rb._isOlapAnalytics = true;\n      rb.doAnalytics = true;\n    }\n    \n    if (rb.doAnalytics) {\n      AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n      // Check to see if the request is distributed\n      if (rb.isDistrib) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    if (rb.req.getParams().getBool(AnalyticsParams.ANALYTICS,false)) {\n      rb.setNeedDocSet( true );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb._isOlapAnalytics = false;\n    rb.doAnalytics = false;\n    if (analyticsRequest != null) {\n      rb.doAnalytics = true;\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(analyticsRequest, new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(OldAnalyticsRequestConverter.convert(rb.req.getParams()), new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n      rb._isOlapAnalytics = true;\n      rb.doAnalytics = true;\n    }\n\n    if (rb.doAnalytics) {\n      AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n      // Check to see if the request is distributed\n      if (rb.isDistrib) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb._isOlapAnalytics = false;\n    rb.doAnalytics = false;\n    if (analyticsRequest != null) {\n      rb.doAnalytics = true;\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(analyticsRequest, new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(OldAnalyticsRequestConverter.convert(rb.req.getParams()), new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n      rb._isOlapAnalytics = true;\n      rb.doAnalytics = true;\n    }\n    \n    if (rb.doAnalytics) {\n      AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n      // Check to see if the request is distributed\n      if (rb.isDistrib) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e08bb61edd9d68a03a42f70b0001ceb136f122e","date":1564373911,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb.setOlapAnalytics(false);\n    rb.setAnalytics(false);\n    boolean isDistributed = rb.isDistributed();\n    if (analyticsRequest != null) {\n      rb.setAnalytics(true);\n      rb.setAnalyticsRequestManager(\n          AnalyticsRequestParser.parse(\n              analyticsRequest,\n              new ExpressionFactory(rb.req.getSchema()), isDistributed));\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb.setAnalyticsRequestManager(\n          AnalyticsRequestParser.parse(\n              OldAnalyticsRequestConverter.convert(rb.req.getParams()),\n              new ExpressionFactory(rb.req.getSchema()), isDistributed));\n      rb.setOlapAnalytics(true);\n      rb.setAnalytics(true);\n    }\n\n    if (rb.isAnalytics()) {\n      AnalyticsRequestManager reqManager = getAnalyticsRequestManager(rb);\n\n      // Check to see if the request is distributed\n      if (isDistributed) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb._isOlapAnalytics = false;\n    rb.doAnalytics = false;\n    if (analyticsRequest != null) {\n      rb.doAnalytics = true;\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(analyticsRequest, new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(OldAnalyticsRequestConverter.convert(rb.req.getParams()), new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n      rb._isOlapAnalytics = true;\n      rb.doAnalytics = true;\n    }\n\n    if (rb.doAnalytics) {\n      AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n      // Check to see if the request is distributed\n      if (rb.isDistrib) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/component/AnalyticsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb.setOlapAnalytics(false);\n    rb.setAnalytics(false);\n    boolean isDistributed = rb.isDistributed();\n    if (analyticsRequest != null) {\n      rb.setAnalytics(true);\n      rb.setAnalyticsRequestManager(\n          AnalyticsRequestParser.parse(\n              analyticsRequest,\n              new ExpressionFactory(rb.req.getSchema()), isDistributed));\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb.setAnalyticsRequestManager(\n          AnalyticsRequestParser.parse(\n              OldAnalyticsRequestConverter.convert(rb.req.getParams()),\n              new ExpressionFactory(rb.req.getSchema()), isDistributed));\n      rb.setOlapAnalytics(true);\n      rb.setAnalytics(true);\n    }\n\n    if (rb.isAnalytics()) {\n      AnalyticsRequestManager reqManager = getAnalyticsRequestManager(rb);\n\n      // Check to see if the request is distributed\n      if (isDistributed) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    // First check to see if there is an analytics request using the current format\n    String analyticsRequest = rb.req.getParams().get(AnalyticsRequestParser.analyticsParamName);\n    rb._isOlapAnalytics = false;\n    rb.doAnalytics = false;\n    if (analyticsRequest != null) {\n      rb.doAnalytics = true;\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(analyticsRequest, new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n    }\n    // If there is no request in the current format, check for the old olap-style format\n    else if (rb.req.getParams().getBool(OldAnalyticsParams.OLD_ANALYTICS,false)) {\n      rb._analyticsRequestManager = AnalyticsRequestParser.parse(OldAnalyticsRequestConverter.convert(rb.req.getParams()), new ExpressionFactory(rb.req.getSchema()), rb.isDistrib);\n      rb._isOlapAnalytics = true;\n      rb.doAnalytics = true;\n    }\n    \n    if (rb.doAnalytics) {\n      AnalyticsRequestManager reqManager = (AnalyticsRequestManager)rb._analyticsRequestManager;\n      // Check to see if the request is distributed\n      if (rb.isDistrib) {\n        reqManager.sendShards = true;\n        reqManager.shardStream = new AnalyticsShardRequestManager(rb.req.getParams(), reqManager);\n      } else {\n        reqManager.sendShards = false;\n        rb.setNeedDocSet( true );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"4e08bb61edd9d68a03a42f70b0001ceb136f122e":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","4e08bb61edd9d68a03a42f70b0001ceb136f122e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e08bb61edd9d68a03a42f70b0001ceb136f122e"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["4e08bb61edd9d68a03a42f70b0001ceb136f122e"],"4e08bb61edd9d68a03a42f70b0001ceb136f122e":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}