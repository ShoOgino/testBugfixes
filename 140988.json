{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","sourceNew":"  /** Returns {@code true} if the given {@code reader} is sorted by the specified {@code sort}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    if (reader instanceof SegmentReader) {\n      final SegmentReader segReader = (SegmentReader) reader;\n      final Map<String, String> diagnostics = segReader.getSegmentInfo().info.getDiagnostics();\n      if (diagnostics != null && sort.toString().equals(diagnostics.get(SORTER_ID_PROP))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the specified {@code sort}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    if (reader instanceof SegmentReader) {\n      final SegmentReader segReader = (SegmentReader) reader;\n      final Map<String, String> diagnostics = segReader.getSegmentInfo().info.getDiagnostics();\n      if (diagnostics != null && sort.toString().equals(diagnostics.get(SORTER_ID_PROP))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb141d31bad018fca450f2166f0981b8f4c16e89","date":1419362004,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","sourceNew":"  /** Returns {@code true} if the given {@code reader} is sorted by the specified {@code sort}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the specified {@code sort}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    if (reader instanceof SegmentReader) {\n      final SegmentReader segReader = (SegmentReader) reader;\n      final Map<String, String> diagnostics = segReader.getSegmentInfo().info.getDiagnostics();\n      if (diagnostics != null && sort.toString().equals(diagnostics.get(SORTER_ID_PROP))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17901785875f5d523c1f729cd7898d2ab907c69","date":1419959847,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","sourceNew":"  /** Returns {@code true} if the given {@code reader} is sorted by the\n   *  {@code sort} order of this {@link SortingMergePolicy}. */\n  public boolean isSorted(LeafReader reader) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the specified {@code sort}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","date":1435865633,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader).mjava","sourceNew":"  /** Returns {@code true} if the given {@code reader} is sorted by the\n   *  {@code sort} given. Typically the given {@code sort} would be the\n   *  {@link SortingMergePolicy#getSort()} order of a {@link SortingMergePolicy}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the\n   *  {@code sort} order of this {@link SortingMergePolicy}. */\n  public boolean isSorted(LeafReader reader) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","sourceNew":null,"sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the\n   *  {@code sort} given. Typically the given {@code sort} would be the\n   *  {@link SortingMergePolicy#getSort()} order of a {@link SortingMergePolicy}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","sourceNew":null,"sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the\n   *  {@code sort} given. Typically the given {@code sort} would be the\n   *  {@link SortingMergePolicy#getSort()} order of a {@link SortingMergePolicy}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","sourceNew":null,"sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the\n   *  {@code sort} given. Typically the given {@code sort} would be the\n   *  {@link SortingMergePolicy#getSort()} order of a {@link SortingMergePolicy}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","sourceNew":null,"sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the\n   *  {@code sort} given. Typically the given {@code sort} would be the\n   *  {@link SortingMergePolicy#getSort()} order of a {@link SortingMergePolicy}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy#isSorted(LeafReader,Sort).mjava","sourceNew":null,"sourceOld":"  /** Returns {@code true} if the given {@code reader} is sorted by the\n   *  {@code sort} given. Typically the given {@code sort} would be the\n   *  {@link SortingMergePolicy#getSort()} order of a {@link SortingMergePolicy}. */\n  public static boolean isSorted(LeafReader reader, Sort sort) {\n    String description = getSortDescription(reader);\n    if (description != null && description.equals(sort.toString())) {\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb141d31bad018fca450f2166f0981b8f4c16e89":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76"],"d17901785875f5d523c1f729cd7898d2ab907c69":["fb141d31bad018fca450f2166f0981b8f4c16e89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76":["d17901785875f5d523c1f729cd7898d2ab907c69"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"fb141d31bad018fca450f2166f0981b8f4c16e89":["d17901785875f5d523c1f729cd7898d2ab907c69"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"d17901785875f5d523c1f729cd7898d2ab907c69":["5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["fb141d31bad018fca450f2166f0981b8f4c16e89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"5732fca7cb88bd0841ccc6f8c8901b9cc1a7ce76":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}