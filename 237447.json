{"path":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"/dev/null","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == _TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(_TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(_TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[_TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.startsWith(\"int\")) {\n          val = (Integer) random().nextInt();\n        } else if (fieldName.startsWith(\"long\")) {\n          val = (Long) random().nextLong();\n        } else if (fieldName.startsWith(\"float\")) {\n          val = (Float) random().nextFloat() * random().nextInt(); break;\n        } else if (fieldName.startsWith(\"double\")) {\n          val = (Double) random().nextDouble() * random().nextInt(); break;\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.startsWith(\"int\")) {\n          val = (Integer) random().nextInt();\n        } else if (fieldName.startsWith(\"long\")) {\n          val = (Long) random().nextLong();\n        } else if (fieldName.startsWith(\"float\")) {\n          val = (Float) random().nextFloat() * random().nextInt(); break;\n        } else if (fieldName.startsWith(\"double\")) {\n          val = (Double) random().nextDouble() * random().nextInt(); break;\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  private static Object[] buildRandomSortObjects(SortSpec ss) {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == _TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(_TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(_TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[_TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.startsWith(\"int\")) {\n          val = (Integer) random().nextInt();\n        } else if (fieldName.startsWith(\"long\")) {\n          val = (Long) random().nextLong();\n        } else if (fieldName.startsWith(\"float\")) {\n          val = (Float) random().nextFloat() * random().nextInt(); break;\n        } else if (fieldName.startsWith(\"double\")) {\n          val = (Double) random().nextDouble() * random().nextInt(); break;\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd3693b696a64d987bf4b3a14399d2105f16b05e","date":1396054865,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.startsWith(\"bcd\")) {\n          if (fieldName.startsWith(\"bcd_long\")) {           // BCDLongField\n            val = Long.toString(random().nextLong());\n            val = sf.getType().toInternal((String)val);\n            val = sf.getType().unmarshalSortValue(val);\n          } else {                                          // BCDIntField & BCDStrField\n            val = Integer.toString(random().nextInt());\n            val = sf.getType().toInternal((String)val);\n            val = sf.getType().unmarshalSortValue(val);\n          }\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();                         // TrieIntField\n          if (fieldName.startsWith(\"legacy\")) {             // IntField\n            val = Integer.toString((Integer)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableIntField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();                        // TrieLongField\n          if (fieldName.startsWith(\"legacy\")) {             // LongField\n            val = Long.toString((Long)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableLongField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();  // TrieFloatField\n          if (fieldName.startsWith(\"legacy\")) {             // FloatField\n            val = Float.toString((Float)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableFloatField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt(); // TrieDoubleField\n          if (fieldName.startsWith(\"legacy\")) {             // DoubleField\n            val = Double.toString((Double)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableDoubleField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();                        // TrieDateField\n          if (fieldName.startsWith(\"legacy_date\")) {        // DateField\n            val = ((DateField)sf.getType()).toInternal(new Date((Long)val));\n            val = sf.getType().unmarshalSortValue(val);\n          }\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  private static Object[] buildRandomSortObjects(SortSpec ss) {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.startsWith(\"int\")) {\n          val = (Integer) random().nextInt();\n        } else if (fieldName.startsWith(\"long\")) {\n          val = (Long) random().nextLong();\n        } else if (fieldName.startsWith(\"float\")) {\n          val = (Float) random().nextFloat() * random().nextInt(); break;\n        } else if (fieldName.startsWith(\"double\")) {\n          val = (Double) random().nextDouble() * random().nextInt(); break;\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.startsWith(\"bcd\")) {\n          if (fieldName.startsWith(\"bcd_long\")) {           // BCDLongField\n            val = Long.toString(random().nextLong());\n            val = sf.getType().toInternal((String)val);\n            val = sf.getType().unmarshalSortValue(val);\n          } else {                                          // BCDIntField & BCDStrField\n            val = Integer.toString(random().nextInt());\n            val = sf.getType().toInternal((String)val);\n            val = sf.getType().unmarshalSortValue(val);\n          }\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();                         // TrieIntField\n          if (fieldName.startsWith(\"legacy\")) {             // IntField\n            val = Integer.toString((Integer)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableIntField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();                        // TrieLongField\n          if (fieldName.startsWith(\"legacy\")) {             // LongField\n            val = Long.toString((Long)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableLongField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();  // TrieFloatField\n          if (fieldName.startsWith(\"legacy\")) {             // FloatField\n            val = Float.toString((Float)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableFloatField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt(); // TrieDoubleField\n          if (fieldName.startsWith(\"legacy\")) {             // DoubleField\n            val = Double.toString((Double)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableDoubleField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();                        // TrieDateField\n          if (fieldName.startsWith(\"legacy_date\")) {        // DateField\n            val = ((DateField)sf.getType()).toInternal(new Date((Long)val));\n            val = sf.getType().unmarshalSortValue(val);\n          }\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  private static Object[] buildRandomSortObjects(SortSpec ss) {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.startsWith(\"int\")) {\n          val = (Integer) random().nextInt();\n        } else if (fieldName.startsWith(\"long\")) {\n          val = (Long) random().nextLong();\n        } else if (fieldName.startsWith(\"float\")) {\n          val = (Float) random().nextFloat() * random().nextInt(); break;\n        } else if (fieldName.startsWith(\"double\")) {\n          val = (Double) random().nextDouble() * random().nextInt(); break;\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();                         // TrieIntField\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();                        // TrieLongField\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();  // TrieFloatField\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt(); // TrieDoubleField\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();                        // TrieDateField\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.startsWith(\"bcd\")) {\n          if (fieldName.startsWith(\"bcd_long\")) {           // BCDLongField\n            val = Long.toString(random().nextLong());\n            val = sf.getType().toInternal((String)val);\n            val = sf.getType().unmarshalSortValue(val);\n          } else {                                          // BCDIntField & BCDStrField\n            val = Integer.toString(random().nextInt());\n            val = sf.getType().toInternal((String)val);\n            val = sf.getType().unmarshalSortValue(val);\n          }\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();                         // TrieIntField\n          if (fieldName.startsWith(\"legacy\")) {             // IntField\n            val = Integer.toString((Integer)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableIntField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();                        // TrieLongField\n          if (fieldName.startsWith(\"legacy\")) {             // LongField\n            val = Long.toString((Long)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableLongField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();  // TrieFloatField\n          if (fieldName.startsWith(\"legacy\")) {             // FloatField\n            val = Float.toString((Float)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableFloatField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt(); // TrieDoubleField\n          if (fieldName.startsWith(\"legacy\")) {             // DoubleField\n            val = Double.toString((Double)val);\n            if (fieldName.startsWith(\"legacy_sortable\")) {  // SortableDoubleField\n              val = sf.getType().unmarshalSortValue(val);\n            }\n          }\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();                        // TrieDateField\n          if (fieldName.startsWith(\"legacy_date\")) {        // DateField\n            val = ((DateField)sf.getType()).toInternal(new Date((Long)val));\n            val = sf.getType().unmarshalSortValue(val);\n          }\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa31759957c90bbd07c2fa553208a76b0e8dc518","date":1504624674,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt();\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();                         // TrieIntField\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();                        // TrieLongField\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();  // TrieFloatField\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt(); // TrieDoubleField\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();                        // TrieDateField\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt();\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();                         // TrieIntField\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();                        // TrieLongField\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();  // TrieFloatField\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt(); // TrieDoubleField\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();                        // TrieDateField\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt();\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();                         // TrieIntField\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();                        // TrieLongField\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();  // TrieFloatField\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt(); // TrieDoubleField\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();                        // TrieDateField\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/CursorMarkTest#buildRandomSortObjects(SortSpec).mjava","sourceNew":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt();\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  private static Object[] buildRandomSortObjects(SortSpec ss) throws IOException {\n    List<SchemaField> fields = ss.getSchemaFields();\n    assertNotNull(fields);\n    Object[] results = new Object[fields.size()];\n    for (int i = 0; i < results.length; i++) {\n      SchemaField sf = fields.get(i);\n      if (null == sf) {\n        // score or function\n        results[i] = (Float) random().nextFloat() * random().nextInt(); break;\n      } else if (0 == TestUtil.nextInt(random(), 0, 7)) {\n        // emulate missing value for doc\n        results[i] = null;\n      } else {\n        final String fieldName = sf.getName();\n        assertNotNull(fieldName);\n\n        // Note: In some cases we build a human readable version of the sort value and then \n        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.\n        // In other cases we just build the raw value to begin with because it's easier\n\n        Object val = null;\n        if (fieldName.equals(\"id\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomSimpleString(random()));\n        } else if (fieldName.startsWith(\"str\")) {\n          val = sf.getType().unmarshalSortValue(TestUtil.randomRealisticUnicodeString(random()));\n        } else if (fieldName.startsWith(\"bin\")) {\n          byte[] randBytes = new byte[TestUtil.nextInt(random(), 1, 50)];\n          random().nextBytes(randBytes);\n          val = new BytesRef(randBytes);\n        } else if (fieldName.contains(\"int\")) {\n          val = random().nextInt();                         // TrieIntField\n        } else if (fieldName.contains(\"long\")) {\n          val = random().nextLong();                        // TrieLongField\n        } else if (fieldName.contains(\"float\")) {\n          val = random().nextFloat() * random().nextInt();  // TrieFloatField\n        } else if (fieldName.contains(\"double\")) {\n          val = random().nextDouble() * random().nextInt(); // TrieDoubleField\n        } else if (fieldName.contains(\"date\")) {\n          val = random().nextLong();                        // TrieDateField\n        } else if (fieldName.startsWith(\"currency\")) {\n          val = random().nextDouble();\n        } else if (fieldName.startsWith(\"uuid\")) {\n          val = sf.getType().unmarshalSortValue(UUID.randomUUID().toString());\n        } else if (fieldName.startsWith(\"bool\")) {\n          val = sf.getType().unmarshalSortValue(random().nextBoolean() ? \"t\" : \"f\");\n        } else if (fieldName.startsWith(\"enum\")) {\n          val = random().nextInt(CursorPagingTest.SEVERITY_ENUM_VALUES.length);\n        } else if (fieldName.contains(\"collation\")) {\n          val = getRandomCollation(sf);\n        } else {\n          fail(\"fell through the rabbit hole, new field in schema? = \" + fieldName);\n        }\n        \n        results[i] = val;\n\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","cd3693b696a64d987bf4b3a14399d2105f16b05e"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["2106271e380c198349e0f6eac0395bb462913fab","aa31759957c90bbd07c2fa553208a76b0e8dc518"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["2106271e380c198349e0f6eac0395bb462913fab","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"aa31759957c90bbd07c2fa553208a76b0e8dc518":["2106271e380c198349e0f6eac0395bb462913fab"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["2106271e380c198349e0f6eac0395bb462913fab","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"2106271e380c198349e0f6eac0395bb462913fab":["cd3693b696a64d987bf4b3a14399d2105f16b05e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd3693b696a64d987bf4b3a14399d2105f16b05e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"aa31759957c90bbd07c2fa553208a76b0e8dc518":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5eb2511ababf862ea11e10761c70ee560cd84510","cd3693b696a64d987bf4b3a14399d2105f16b05e"],"2106271e380c198349e0f6eac0395bb462913fab":["b21283ed01203901a7257aa4b7f0a0899c86e56e","685bd38810c206c93e9058f3c2cfa9827c086c27","aa31759957c90bbd07c2fa553208a76b0e8dc518","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd3693b696a64d987bf4b3a14399d2105f16b05e":["5eb2511ababf862ea11e10761c70ee560cd84510","2106271e380c198349e0f6eac0395bb462913fab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}