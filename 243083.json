{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      if (format <= FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      if (format <= FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      final boolean checkCheckSum;\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        // nocommit 3.x needs normGens too ... we can push\n        // down to make this 3.x private????\n        Lucene3xSegmentInfosReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      // nocommit all 3.x indices have checksum right...????\n      // ie we added it during 2.x? i think so!\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      if (format <= FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"352763be0465236f8e2ac188aa1b761cb3e1c9ee","date":1337516554,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      final boolean checkCheckSum;\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          assert info.getDelCount() <= info.docCount;\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        // nocommit 3.x needs normGens too ... we can push\n        // down to make this 3.x private????\n        Lucene3xSegmentInfosReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      final boolean checkCheckSum;\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        // nocommit 3.x needs normGens too ... we can push\n        // down to make this 3.x private????\n        Lucene3xSegmentInfosReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      // nocommit all 3.x indices have checksum right...????\n      // ie we added it during 2.x? i think so!\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b2af6b2c05418fb9df466c739ed5b3a153eadde","date":1337520269,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      final boolean checkCheckSum;\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          assert info.getDelCount() <= info.docCount;\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        // nocommit 3.x needs normGens too ... we can push\n        // down to make this 3.x private????\n        Lucene3xSegmentInfosReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      final boolean checkCheckSum;\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          assert info.getDelCount() <= info.docCount;\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        // nocommit 3.x needs normGens too ... we can push\n        // down to make this 3.x private????\n        Lucene3xSegmentInfosReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b512a6470fbb93c320e0cc8519ec0fe94efa13e","date":1337522360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      final boolean checkCheckSum;\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          assert info.getDelCount() <= info.docCount;\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfosReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      final boolean checkCheckSum;\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          assert info.getDelCount() <= info.docCount;\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        // nocommit 3.x needs normGens too ... we can push\n        // down to make this 3.x private????\n        Lucene3xSegmentInfosReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ace9b78896617dcee984890f3300d45c539c1b15","date":1337655022,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          assert info.getDelCount() <= info.docCount;\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      final boolean checkCheckSum;\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          assert info.getDelCount() <= info.docCount;\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfosReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          long delGen = input.readLong();\n          int delCount = input.readInt();\n          assert delCount <= info.docCount;\n          add(new SegmentInfoPerCommit(info, delCount, delGen));\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfoPerCommit info : this) {\n          info.info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          info.setDelGen(input.readLong());\n          info.setDelCount(input.readInt());\n          assert info.getDelCount() <= info.docCount;\n          add(info);\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfo info : this) {\n          info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ee159418514037b0fa456cf8b5d6c91e2bf5557","date":1337721836,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfoFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          long delGen = input.readLong();\n          int delCount = input.readInt();\n          assert delCount <= info.docCount;\n          add(new SegmentInfoPerCommit(info, delCount, delGen));\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfoPerCommit info : this) {\n          info.info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfosFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          long delGen = input.readLong();\n          int delCount = input.readInt();\n          assert delCount <= info.docCount;\n          add(new SegmentInfoPerCommit(info, delCount, delGen));\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfoPerCommit info : this) {\n          info.info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfoFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          long delGen = input.readLong();\n          int delCount = input.readInt();\n          assert delCount <= info.getDocCount();\n          add(new SegmentInfoPerCommit(info, delCount, delGen));\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfoPerCommit info : this) {\n          info.info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfoFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          long delGen = input.readLong();\n          int delCount = input.readInt();\n          assert delCount <= info.docCount;\n          add(new SegmentInfoPerCommit(info, delCount, delGen));\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfoPerCommit info : this) {\n          info.info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfoFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          long delGen = input.readLong();\n          int delCount = input.readInt();\n          assert delCount <= info.getDocCount();\n          add(new SegmentInfoPerCommit(info, delCount, delGen));\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfoPerCommit info : this) {\n          info.info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(input, format,\n          FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      if (format <= FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      final int format = input.readInt();\n      if (format == CodecUtil.CODEC_MAGIC) {\n        // 4.0+\n        CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n        version = input.readLong();\n        counter = input.readInt();\n        int numSegments = input.readInt();\n        for(int seg=0;seg<numSegments;seg++) {\n          String segName = input.readString();\n          Codec codec = Codec.forName(input.readString());\n          //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n          SegmentInfo info = codec.segmentInfoFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n          info.setCodec(codec);\n          long delGen = input.readLong();\n          int delCount = input.readInt();\n          assert delCount <= info.getDocCount();\n          add(new SegmentInfoPerCommit(info, delCount, delGen));\n        }\n        userData = input.readStringStringMap();\n      } else {\n        Lucene3xSegmentInfoReader.readLegacyInfos(this, directory, input, format);\n        Codec codec = Codec.forName(\"Lucene3x\");\n        for (SegmentInfoPerCommit info : this) {\n          info.info.setCodec(codec);\n        }\n      }\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2edef7afebca00bf81a8bef95d44ea971ba309fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2edef7afebca00bf81a8bef95d44ea971ba309fa","date":1339101284,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfosReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5adcbe5a27941451fdb6194bcbff96c8630e14","date":1346419102,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","f4ac68b353fb5616cfc6067741970000e8ee39a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        assert delCount <= info.getDocCount();\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_45);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long docValuesGen = -1;\n        if (format >= VERSION_45) {\n          docValuesGen = input.readLong();\n        }\n        SegmentInfoPerCommit siPerCommit = new SegmentInfoPerCommit(info, delCount, delGen, docValuesGen);\n        if (format >= VERSION_45) {\n          int numUpdates = input.readInt();\n          for (int i = 0; i < numUpdates; i++) {\n            siPerCommit.setDocValuesGen(input.readInt(), input.readLong());\n          }\n          siPerCommit.addUpdatesFiles(input.readStringSet());\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_40);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for(int seg=0;seg<numSegments;seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        add(new SegmentInfoPerCommit(info, delCount, delGen));\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentInfoPerCommit siPerCommit = new SegmentInfoPerCommit(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          siPerCommit.addUpdatesFiles(input.readStringSet());\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_45);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long docValuesGen = -1;\n        if (format >= VERSION_45) {\n          docValuesGen = input.readLong();\n        }\n        SegmentInfoPerCommit siPerCommit = new SegmentInfoPerCommit(info, delCount, delGen, docValuesGen);\n        if (format >= VERSION_45) {\n          int numUpdates = input.readInt();\n          for (int i = 0; i < numUpdates; i++) {\n            siPerCommit.setDocValuesGen(input.readInt(), input.readLong());\n          }\n          siPerCommit.addUpdatesFiles(input.readStringSet());\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f13fb377f9b5df46af44bf90a2e507a884f2c30","date":1380476222,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentInfoPerCommit siPerCommit = new SegmentInfoPerCommit(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<Long,Set<String>>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentInfoPerCommit siPerCommit = new SegmentInfoPerCommit(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          siPerCommit.addUpdatesFiles(input.readStringSet());\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<Long,Set<String>>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentInfoPerCommit siPerCommit = new SegmentInfoPerCommit(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<Long,Set<String>>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<Long,Set<String>>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_48);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_48);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_46);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen) {\n        throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4ac68b353fb5616cfc6067741970000e8ee39a5","date":1397826520,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_48);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_48);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0567bdc5c86c94ced64201187cfcef2417d76dda","date":1400678298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_49);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_48);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","1f3b037cd083286b2af89f96e768f85dcd8072d6","2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_49);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_48);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_49);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_48);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen);\n        if (format >= VERSION_46) {\n          int numGensUpdatesFiles = input.readInt();\n          final Map<Long,Set<String>> genUpdatesFiles;\n          if (numGensUpdatesFiles == 0) {\n            genUpdatesFiles = Collections.emptyMap();\n          } else {\n            genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n            for (int i = 0; i < numGensUpdatesFiles; i++) {\n              genUpdatesFiles.put(input.readLong(), input.readStringSet());\n            }\n          }\n          siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3cc329405ce41b8ef462b4cd30611eca1567620","date":1408661910,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_410);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_410) {\n        id = input.readString();\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_49);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f35160e92057203e23664ebd12f99390d92cb62","date":1408662280,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_411);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_411) {\n        id = input.readString();\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_410);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_410) {\n        id = input.readString();\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_411);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_411) {\n        id = input.readString();\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_411);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments + \" (resource: \" + input + \")\");\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount() + \" (resource: \" + input + \")\");\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_411) {\n        id = input.readString();\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum mismatch in segments file (resource: \" + input + \")\");\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["6e5adcbe5a27941451fdb6194bcbff96c8630e14","1f3b037cd083286b2af89f96e768f85dcd8072d6","f4ac68b353fb5616cfc6067741970000e8ee39a5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","date":1411708843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_411);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_411) {\n        id = input.readString();\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_411);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_411) {\n        id = input.readString();\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":["4f35160e92057203e23664ebd12f99390d92cb62","e3cc329405ce41b8ef462b4cd30611eca1567620"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().getSegmentInfoReader().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#readCommit(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static final SegmentInfos readCommit(Directory directory, String segmentFileName) throws IOException {\n\n    long generation = generationFromSegmentsFileName(segmentFileName);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ)) {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      // 5.0+\n      byte id[] = null;\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        CodecUtil.checkIndexHeaderSuffix(input, Long.toString(generation, Character.MAX_RADIX));\n      }\n      \n      SegmentInfos infos = new SegmentInfos();\n      infos.id = id;\n      infos.generation = generation;\n      infos.lastGeneration = generation;\n      infos.version = input.readLong();\n      infos.counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        final byte segmentID[];\n        if (format >= VERSION_50) {\n          byte hasID = input.readByte();\n          if (hasID == 1) {\n            segmentID = new byte[StringHelper.ID_LENGTH];\n            input.readBytes(segmentID, 0, segmentID.length);\n          } else if (hasID == 0) {\n            segmentID = null; // 4.x segment, doesn't have an ID\n          } else {\n            throw new CorruptIndexException(\"invalid hasID byte, got: \" + hasID, input);\n          }\n        } else {\n          segmentID = null;\n        }\n        Codec codec = Codec.forName(input.readString());\n        SegmentInfo info = codec.segmentInfoFormat().read(directory, segName, segmentID, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        infos.add(siPerCommit);\n      }\n      infos.userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      return infos;\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#readCommit(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static final SegmentInfos readCommit(Directory directory, String segmentFileName) throws IOException {\n\n    long generation = generationFromSegmentsFileName(segmentFileName);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ)) {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      // 5.0+\n      byte id[] = null;\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        CodecUtil.checkIndexHeaderSuffix(input, Long.toString(generation, Character.MAX_RADIX));\n      }\n      \n      SegmentInfos infos = new SegmentInfos();\n      infos.id = id;\n      infos.generation = generation;\n      infos.lastGeneration = generation;\n      infos.version = input.readLong();\n      infos.counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        final byte segmentID[];\n        if (format >= VERSION_50) {\n          byte hasID = input.readByte();\n          if (hasID == 1) {\n            segmentID = new byte[StringHelper.ID_LENGTH];\n            input.readBytes(segmentID, 0, segmentID.length);\n          } else if (hasID == 0) {\n            segmentID = null; // 4.x segment, doesn't have an ID\n          } else {\n            throw new CorruptIndexException(\"invalid hasID byte, got: \" + hasID, input);\n          }\n        } else {\n          segmentID = null;\n        }\n        Codec codec = Codec.forName(input.readString());\n        SegmentInfo info = codec.segmentInfoFormat().read(directory, segName, segmentID, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        infos.add(siPerCommit);\n      }\n      infos.userData = input.readStringStringMap();\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      return infos;\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    ChecksumIndexInput input = directory.openChecksumInput(segmentFileName, IOContext.READ);\n    try {\n      // NOTE: as long as we want to throw indexformattooold (vs corruptindexexception), we need\n      // to read the magic ourselves.\n      int magic = input.readInt();\n      if (magic != CodecUtil.CODEC_MAGIC) {\n        throw new IndexFormatTooOldException(input, magic, CodecUtil.CODEC_MAGIC, CodecUtil.CODEC_MAGIC);\n      }\n      // 4.0+\n      int format = CodecUtil.checkHeaderNoMagic(input, \"segments\", VERSION_40, VERSION_50);\n      version = input.readLong();\n      counter = input.readInt();\n      int numSegments = input.readInt();\n      if (numSegments < 0) {\n        throw new CorruptIndexException(\"invalid segment count: \" + numSegments, input);\n      }\n      for (int seg = 0; seg < numSegments; seg++) {\n        String segName = input.readString();\n        Codec codec = Codec.forName(input.readString());\n        //System.out.println(\"SIS.read seg=\" + seg + \" codec=\" + codec);\n        SegmentInfo info = codec.segmentInfoFormat().read(directory, segName, IOContext.READ);\n        info.setCodec(codec);\n        long delGen = input.readLong();\n        int delCount = input.readInt();\n        if (delCount < 0 || delCount > info.getDocCount()) {\n          throw new CorruptIndexException(\"invalid deletion count: \" + delCount + \" vs docCount=\" + info.getDocCount(), input);\n        }\n        long fieldInfosGen = -1;\n        if (format >= VERSION_46) {\n          fieldInfosGen = input.readLong();\n        }\n        long dvGen = -1;\n        if (format >= VERSION_49) {\n          dvGen = input.readLong();\n        } else {\n          dvGen = fieldInfosGen;\n        }\n        SegmentCommitInfo siPerCommit = new SegmentCommitInfo(info, delCount, delGen, fieldInfosGen, dvGen);\n        if (format >= VERSION_46) {\n          if (format < VERSION_49) {\n            // Recorded per-generation files, which were buggy (see\n            // LUCENE-5636). We need to read and keep them so we continue to\n            // reference those files. Unfortunately it means that the files will\n            // be referenced even if the fields are updated again, until the\n            // segment is merged.\n            final int numGensUpdatesFiles = input.readInt();\n            final Map<Long,Set<String>> genUpdatesFiles;\n            if (numGensUpdatesFiles == 0) {\n              genUpdatesFiles = Collections.emptyMap();\n            } else {\n              genUpdatesFiles = new HashMap<>(numGensUpdatesFiles);\n              for (int i = 0; i < numGensUpdatesFiles; i++) {\n                genUpdatesFiles.put(input.readLong(), input.readStringSet());\n              }\n            }\n            siPerCommit.setGenUpdatesFiles(genUpdatesFiles);\n          } else {\n            siPerCommit.setFieldInfosFiles(input.readStringSet());\n            final Map<Integer,Set<String>> dvUpdateFiles;\n            final int numDVFields = input.readInt();\n            if (numDVFields == 0) {\n              dvUpdateFiles = Collections.emptyMap();\n            } else {\n              dvUpdateFiles = new HashMap<>(numDVFields);\n              for (int i = 0; i < numDVFields; i++) {\n                dvUpdateFiles.put(input.readInt(), input.readStringSet());\n              }\n            }\n            siPerCommit.setDocValuesUpdatesFiles(dvUpdateFiles);\n          }\n        }\n        add(siPerCommit);\n      }\n      userData = input.readStringStringMap();\n      if (format >= VERSION_50) {\n        id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n      }\n\n      if (format >= VERSION_48) {\n        CodecUtil.checkFooter(input);\n      } else {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen) {\n          throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(checksumThen) +  \n                                          \" actual=\" + Long.toHexString(checksumNow), input);\n        }\n        CodecUtil.checkEOF(input);\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","a5d957b3a23cce91c77a2c9971ecf0c9f99dd503"],"b7605579001505896d48b07160075a5c8b8e128e":["f4ac68b353fb5616cfc6067741970000e8ee39a5","0567bdc5c86c94ced64201187cfcef2417d76dda"],"4f35160e92057203e23664ebd12f99390d92cb62":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4356000e349e38c9fb48034695b7c309abd54557":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4ac68b353fb5616cfc6067741970000e8ee39a5":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["2edef7afebca00bf81a8bef95d44ea971ba309fa"],"ace9b78896617dcee984890f3300d45c539c1b15":["4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["9ee159418514037b0fa456cf8b5d6c91e2bf5557"],"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"55980207f1977bd1463465de1659b821347e2fa8":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["4356000e349e38c9fb48034695b7c309abd54557"],"2edef7afebca00bf81a8bef95d44ea971ba309fa":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["ace9b78896617dcee984890f3300d45c539c1b15"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["f4ac68b353fb5616cfc6067741970000e8ee39a5"],"8435160e9702b19398118ddf76b61c846612b6a4":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["55980207f1977bd1463465de1659b821347e2fa8"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["8435160e9702b19398118ddf76b61c846612b6a4"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["4f35160e92057203e23664ebd12f99390d92cb62"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2edef7afebca00bf81a8bef95d44ea971ba309fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["f4ac68b353fb5616cfc6067741970000e8ee39a5","0567bdc5c86c94ced64201187cfcef2417d76dda"],"9ee159418514037b0fa456cf8b5d6c91e2bf5557":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"]},"commit2Childs":{"1f3b037cd083286b2af89f96e768f85dcd8072d6":["f4ac68b353fb5616cfc6067741970000e8ee39a5","5eb2511ababf862ea11e10761c70ee560cd84510"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4356000e349e38c9fb48034695b7c309abd54557","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["5f6bd27530a2846413fe2d00030493c0e2d3a072","55980207f1977bd1463465de1659b821347e2fa8"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"b7605579001505896d48b07160075a5c8b8e128e":[],"4f35160e92057203e23664ebd12f99390d92cb62":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["2edef7afebca00bf81a8bef95d44ea971ba309fa"],"4356000e349e38c9fb48034695b7c309abd54557":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4ac68b353fb5616cfc6067741970000e8ee39a5":["b7605579001505896d48b07160075a5c8b8e128e","0567bdc5c86c94ced64201187cfcef2417d76dda","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d0d1f90e969803cc84174589b5e4a39b7935fecd","6e5adcbe5a27941451fdb6194bcbff96c8630e14","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ace9b78896617dcee984890f3300d45c539c1b15":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e072d0b1fc19e0533d8ce432eed245196bca6fde":["8435160e9702b19398118ddf76b61c846612b6a4"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1f3b037cd083286b2af89f96e768f85dcd8072d6","5eb2511ababf862ea11e10761c70ee560cd84510"],"55980207f1977bd1463465de1659b821347e2fa8":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"2edef7afebca00bf81a8bef95d44ea971ba309fa":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["9ee159418514037b0fa456cf8b5d6c91e2bf5557"],"0567bdc5c86c94ced64201187cfcef2417d76dda":["b7605579001505896d48b07160075a5c8b8e128e","e3cc329405ce41b8ef462b4cd30611eca1567620","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"8435160e9702b19398118ddf76b61c846612b6a4":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["e072d0b1fc19e0533d8ce432eed245196bca6fde","d0d1f90e969803cc84174589b5e4a39b7935fecd"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["4f35160e92057203e23664ebd12f99390d92cb62"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"9ee159418514037b0fa456cf8b5d6c91e2bf5557":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["ace9b78896617dcee984890f3300d45c539c1b15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","5eb2511ababf862ea11e10761c70ee560cd84510","d0d1f90e969803cc84174589b5e4a39b7935fecd","fe33227f6805edab2036cbb80645cc4e2d1fa424","a656b32c3aa151037a8c52e9b134acc3cbf482bc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}