{"path":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6b177184d12ea0f4978054530cfa34b667eb4af","date":1296120364,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt \n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708","add7d922e63099fbce8f0a1b31216df7ef5067f1"],"bugIntro":["a402a31d46de4a1611f5f0e3b2b0b69c9b84def9","d72889028c945ff17dbba53e91cf754d05f2b46b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt \n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt \n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> certain implementations may return a different value (each\n   * time) if called several times in a row with the same target.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@value #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a402a31d46de4a1611f5f0e3b2b0b69c9b84def9","date":1305632190,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt \n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708","c6b177184d12ea0f4978054530cfa34b667eb4af"],"bugIntro":["d72889028c945ff17dbba53e91cf754d05f2b46b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt \n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond the current whose document number is greater\n   * than or equal to <i>target</i>. Returns the current document number or\n   * {@link #NO_MORE_DOCS} if there are no more docs in the set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt \n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DocIdSetIterator#advance(int).mjava","sourceNew":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","sourceOld":"  /**\n   * Advances to the first beyond (see NOTE below) the current whose document\n   * number is greater than or equal to <i>target</i>. Returns the current\n   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n   * set.\n   * <p>\n   * Behaves as if written:\n   * \n   * <pre>\n   * int advance(int target) {\n   *   int doc;\n   *   while ((doc = nextDoc()) &lt; target) {\n   *   }\n   *   return doc;\n   * }\n   * </pre>\n   * \n   * Some implementations are considerably more efficient than that.\n   * <p>\n   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n   * not to advance beyond their current {@link #docID()}.\n   * <p>\n   * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n   * efficiency by some Scorers. If your implementation cannot efficiently\n   * determine that it should exhaust, it is recommended that you check for that\n   * value in each call to this method.\n   * <p>\n   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n   * method, as it may result in unpredicted behavior.\n   * <p>\n   * \n   * @since 2.9\n   */\n  public abstract int advance(int target) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c6b177184d12ea0f4978054530cfa34b667eb4af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","a402a31d46de4a1611f5f0e3b2b0b69c9b84def9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a402a31d46de4a1611f5f0e3b2b0b69c9b84def9"],"a402a31d46de4a1611f5f0e3b2b0b69c9b84def9":["c6b177184d12ea0f4978054530cfa34b667eb4af"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c6b177184d12ea0f4978054530cfa34b667eb4af","a402a31d46de4a1611f5f0e3b2b0b69c9b84def9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c6b177184d12ea0f4978054530cfa34b667eb4af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["9454a6510e2db155fb01faa5c049b06ece95fab9","c6b177184d12ea0f4978054530cfa34b667eb4af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c6b177184d12ea0f4978054530cfa34b667eb4af":["a402a31d46de4a1611f5f0e3b2b0b69c9b84def9","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a402a31d46de4a1611f5f0e3b2b0b69c9b84def9":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c6b177184d12ea0f4978054530cfa34b667eb4af","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}