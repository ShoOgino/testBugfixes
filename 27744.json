{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n        termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, new BytesRef(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, new BytesRef(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, new BytesRef(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, new BytesRef(bytes)),position);\n          } else {\n            pq.add(new Term(field, new BytesRef(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n        termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, new BytesRef(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, new BytesRef(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, new BytesRef(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, new BytesRef(bytes)),position);\n          } else {\n            pq.add(new Term(field, new BytesRef(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c9885566d6f83ba835be67d76ecbf214685052","date":1317096458,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new ParseException(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, new BytesRef(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, new BytesRef(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, new BytesRef(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, new BytesRef(bytes)),position);\n          } else {\n            pq.add(new Term(field, new BytesRef(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    boolean success = false;\n    try {\n      buffer.reset();\n      success = true;\n    } catch (IOException e) {\n      // success==false if we hit an exception\n    }\n    if (success) {\n      if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n        termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n      }\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, new BytesRef(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, new BytesRef(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, new BytesRef(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, new BytesRef(bytes)),position);\n          } else {\n            pq.add(new Term(field, new BytesRef(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new ParseException(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, new BytesRef(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, new BytesRef(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, new BytesRef(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, new BytesRef(bytes)),position);\n          } else {\n            pq.add(new Term(field, new BytesRef(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new ParseException(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, new BytesRef(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, new BytesRef(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, new BytesRef(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, new BytesRef(bytes)),position);\n          } else {\n            pq.add(new Term(field, new BytesRef(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new ParseException(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new ParseException(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, new BytesRef(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, new BytesRef(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, new BytesRef(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, new BytesRef(bytes)),position);\n          } else {\n            pq.add(new Term(field, new BytesRef(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["833eaf39eb6113cb67002b52c1416331abbc1570"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newFieldQuery(Analyzer,String,String,boolean).mjava","sourceNew":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new ParseException(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow\n   */\n  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText, boolean quoted)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.tokenStream(field, new StringReader(queryText));\n      source.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n    CachingTokenFilter buffer = new CachingTokenFilter(source);\n    TermToBytesRefAttribute termAtt = null;\n    PositionIncrementAttribute posIncrAtt = null;\n    int numTokens = 0;\n\n    try {\n      buffer.reset();\n    } catch (IOException e) {\n      throw new ParseException(\"Unable to initialize TokenStream to analyze query text\", e);\n    }\n\n    if (buffer.hasAttribute(TermToBytesRefAttribute.class)) {\n      termAtt = buffer.getAttribute(TermToBytesRefAttribute.class);\n    }\n    if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n      posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n    }\n\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    boolean hasMoreTokens = false;\n    if (termAtt != null) {\n      try {\n        hasMoreTokens = buffer.incrementToken();\n        while (hasMoreTokens) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt.getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n          hasMoreTokens = buffer.incrementToken();\n        }\n      } catch (IOException e) {\n        // ignore\n      }\n    }\n    try {\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close();\n    }\n    catch (IOException e) {\n      throw new ParseException(\"Cannot close TokenStream analyzing query text\", e);\n    }\n\n    BytesRef bytes = termAtt == null ? null : termAtt.getBytesRef();\n\n    if (numTokens == 0)\n      return null;\n    else if (numTokens == 1) {\n      try {\n        boolean hasNext = buffer.incrementToken();\n        assert hasNext == true;\n        termAtt.fillBytesRef();\n      } catch (IOException e) {\n        // safe to ignore, because we know the number of tokens\n      }\n      return newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n    } else {\n      if (severalTokensAtSamePosition || (!quoted && !autoGeneratePhraseQueries)) {\n        if (positionCount == 1 || (!quoted && !autoGeneratePhraseQueries)) {\n          // no phrase query:\n          BooleanQuery q = newBooleanQuery(positionCount == 1);\n\n          BooleanClause.Occur occur = positionCount > 1 && operator == AND_OPERATOR ?\n            BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n\n          for (int i = 0; i < numTokens; i++) {\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n            Query currentQuery = newTermQuery(\n                new Term(field, BytesRef.deepCopyOf(bytes)));\n            q.add(currentQuery, occur);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = newMultiPhraseQuery();\n          mpq.setSlop(phraseSlop);\n          List<Term> multiTerms = new ArrayList<Term>();\n          int position = -1;\n          for (int i = 0; i < numTokens; i++) {\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              termAtt.fillBytesRef();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n              if (enablePositionIncrements) {\n                mpq.add(multiTerms.toArray(new Term[0]),position);\n              } else {\n                mpq.add(multiTerms.toArray(new Term[0]));\n              }\n              multiTerms.clear();\n            }\n            position += positionIncrement;\n            multiTerms.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n          if (enablePositionIncrements) {\n            mpq.add(multiTerms.toArray(new Term[0]),position);\n          } else {\n            mpq.add(multiTerms.toArray(new Term[0]));\n          }\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery pq = newPhraseQuery();\n        pq.setSlop(phraseSlop);\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            termAtt.fillBytesRef();\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          if (enablePositionIncrements) {\n            position += positionIncrement;\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)),position);\n          } else {\n            pq.add(new Term(field, BytesRef.deepCopyOf(bytes)));\n          }\n        }\n        return pq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e6e919043fa85ee891123768dd655a98edbbf63c"],"60c9885566d6f83ba835be67d76ecbf214685052":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["60c9885566d6f83ba835be67d76ecbf214685052"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60c9885566d6f83ba835be67d76ecbf214685052":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["60c9885566d6f83ba835be67d76ecbf214685052"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"e6e919043fa85ee891123768dd655a98edbbf63c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["e6e919043fa85ee891123768dd655a98edbbf63c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}