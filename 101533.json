{"path":"src/java/org/apache/solr/request/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","commits":[{"id":"13baf5514709a27de4ff67151d35b715138d158d","date":1186803122,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/PythonWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    writer.write( needUnicode ? \"u'\" : \"'\");\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    writer.write( needUnicode ? \"u'\" : \"'\");\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c355d9286f784cff62d09cae2d0752fdacb156e","date":1192387134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    writer.write( needUnicode ? \"u'\" : \"'\");\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    if (needUnicode) {\n      writer.write('u');\n    }\n    writer.write('\\'');\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c355d9286f784cff62d09cae2d0752fdacb156e":["13baf5514709a27de4ff67151d35b715138d158d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13baf5514709a27de4ff67151d35b715138d158d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["1c355d9286f784cff62d09cae2d0752fdacb156e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1c355d9286f784cff62d09cae2d0752fdacb156e":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"13baf5514709a27de4ff67151d35b715138d158d":["1c355d9286f784cff62d09cae2d0752fdacb156e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["13baf5514709a27de4ff67151d35b715138d158d"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}