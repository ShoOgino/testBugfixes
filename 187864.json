{"path":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","commits":[{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCheck() {\n    Random rnd = random;\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageEstimator.IdentityHashSet<Object> us = new RamUsageEstimator.IdentityHashSet<Object>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","sourceNew":"  @Test\n  public void testCheck() {\n    Random rnd = random();\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageEstimator.IdentityHashSet<Object> us = new RamUsageEstimator.IdentityHashSet<Object>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","sourceOld":"  @Test\n  public void testCheck() {\n    Random rnd = random;\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageEstimator.IdentityHashSet<Object> us = new RamUsageEstimator.IdentityHashSet<Object>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","sourceNew":"  @Test\n  public void testCheck() {\n    Random rnd = random();\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageEstimator.IdentityHashSet<Object> us = new RamUsageEstimator.IdentityHashSet<>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","sourceOld":"  @Test\n  public void testCheck() {\n    Random rnd = random();\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageEstimator.IdentityHashSet<Object> us = new RamUsageEstimator.IdentityHashSet<Object>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","sourceNew":"  @Test\n  public void testCheck() {\n    Random rnd = random();\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageTester.IdentityHashSet<Object> us = new RamUsageTester.IdentityHashSet<>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","sourceOld":"  @Test\n  public void testCheck() {\n    Random rnd = random();\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageEstimator.IdentityHashSet<Object> us = new RamUsageEstimator.IdentityHashSet<>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","sourceNew":"  @Test\n  public void testCheck() {\n    Random rnd = random();\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageTester.IdentityHashSet<Object> us = new RamUsageTester.IdentityHashSet<>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","sourceOld":"  @Test\n  public void testCheck() {\n    Random rnd = random();\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageEstimator.IdentityHashSet<Object> us = new RamUsageEstimator.IdentityHashSet<>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8f3bf7eb63b67ff23cc48ab2aee7df2393f06f","date":1418292961,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestIdentityHashSet#testCheck().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCheck() {\n    Random rnd = random();\n    Set<Object> jdk = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    RamUsageTester.IdentityHashSet<Object> us = new RamUsageTester.IdentityHashSet<>();\n\n    int max = 100000;\n    int threshold = 256;\n    for (int i = 0; i < max; i++) {\n      // some of these will be interned and some will not so there will be collisions.\n      Integer v = rnd.nextInt(threshold);\n      \n      boolean e1 = jdk.contains(v);\n      boolean e2 = us.contains(v);\n      Assert.assertEquals(e1, e2);\n\n      e1 = jdk.add(v);\n      e2 = us.add(v);\n      Assert.assertEquals(e1, e2);\n    }\n    \n    Set<Object> collected = Collections.newSetFromMap(\n        new IdentityHashMap<Object,Boolean>());\n    for (Object o : us) {\n      collected.add(o);\n    }\n    \n    Assert.assertEquals(collected, jdk);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6b8f3bf7eb63b67ff23cc48ab2aee7df2393f06f":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b8f3bf7eb63b67ff23cc48ab2aee7df2393f06f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","6b8f3bf7eb63b67ff23cc48ab2aee7df2393f06f"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6b8f3bf7eb63b67ff23cc48ab2aee7df2393f06f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}