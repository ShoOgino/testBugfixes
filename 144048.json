{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","commits":[{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","pathOld":"/dev/null","sourceNew":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.QUIT)));\n    long timeout = System.currentTimeMillis()+5000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(!newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","pathOld":"/dev/null","sourceNew":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.QUIT)));\n    long timeout = System.currentTimeMillis()+5000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(!newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6762551dad139aaedf252c353553e7bdbf7daffe","date":1396779167,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","sourceNew":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.QUIT)));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.QUIT)));\n    long timeout = System.currentTimeMillis()+5000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(!newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","sourceNew":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.QUIT)));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","sourceNew":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b","date":1432801743,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand(CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","sourceNew":"  private void testQuitCommand(CloudSolrClient client) throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":"  private void testQuitCommand() throws Exception{\n    String collectionName = \"testOverseerQuit\";\n\n    createCollection(collectionName, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    SolrZkClient zk = client.getZkStateReader().getZkClient();\n    byte[] data = new byte[0];\n    data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) ZkStateReader.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    Overseer.getInQueue(zk).offer(ZkStateReader.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower())));\n    long timeout = System.currentTimeMillis()+10000;\n    String newLeader=null;\n    for(;System.currentTimeMillis() < timeout;){\n      newLeader = OverseerCollectionProcessor.getLeaderNode(zk);\n      if(newLeader!=null && !newLeader.equals(leader)) break;\n      Thread.sleep(100);\n    }\n    assertNotSame( \"Leader not changed yet\",newLeader,leader);\n\n\n\n    assertTrue(\"The old leader should have rejoined election \", OverseerCollectionProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQuitCommand() throws Exception {\n\n    SolrZkClient zk = zkClient();\n    byte[] data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    log.info(\"Current overseer: {}\", leader);\n    Overseer.getStateUpdateQueue(zk)\n        .offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower(),\n                                            \"id\", s)));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader = null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if (newLeader != null && !newLeader.equals(leader))\n        break;\n      Thread.sleep(100);\n    }\n    assertThat(\"Leader not changed yet\", newLeader, not(leader));\n\n    assertTrue(\"The old leader should have rejoined election\",\n        OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQuitCommand() throws Exception {\n\n    SolrZkClient zk = zkClient();\n    byte[] data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    log.info(\"Current overseer: {}\", leader);\n    Overseer.getStateUpdateQueue(zk)\n        .offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower(),\n                                            \"id\", s)));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader = null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if (newLeader != null && !newLeader.equals(leader))\n        break;\n      Thread.sleep(100);\n    }\n    assertThat(\"Leader not changed yet\", newLeader, not(leader));\n\n    assertTrue(\"The old leader should have rejoined election\",\n        OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42d6fc6d08217c412f5a576929068b6e678deaf6","date":1484847963,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testQuitCommand() throws Exception {\n\n    SolrZkClient zk = zkClient();\n    byte[] data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    log.info(\"Current overseer: {}\", leader);\n    Overseer.getStateUpdateQueue(zk)\n        .offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower(),\n                                            \"id\", s)));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader = null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if (newLeader != null && !newLeader.equals(leader))\n        break;\n      Thread.sleep(100);\n    }\n    assertThat(\"Leader not changed yet\", newLeader, not(leader));\n\n    assertTrue(\"The old leader should have rejoined election\",\n        OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest#testQuitCommand().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testQuitCommand() throws Exception {\n\n    SolrZkClient zk = zkClient();\n    byte[] data = zk.getData(\"/overseer_elect/leader\", null, new Stat(), true);\n    Map m = (Map) Utils.fromJSON(data);\n    String s = (String) m.get(\"id\");\n    String leader = LeaderElector.getNodeName(s);\n    log.info(\"Current overseer: {}\", leader);\n    Overseer.getStateUpdateQueue(zk)\n        .offer(Utils.toJSON(new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.QUIT.toLower(),\n                                            \"id\", s)));\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS);\n    String newLeader = null;\n    for(;! timeout.hasTimedOut();){\n      newLeader = OverseerCollectionConfigSetProcessor.getLeaderNode(zk);\n      if (newLeader != null && !newLeader.equals(leader))\n        break;\n      Thread.sleep(100);\n    }\n    assertThat(\"Leader not changed yet\", newLeader, not(leader));\n\n    assertTrue(\"The old leader should have rejoined election\",\n        OverseerCollectionConfigSetProcessor.getSortedOverseerNodeNames(zk).contains(leader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b15576cafd8b5d06857055c28f26912321937e3"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"5b15576cafd8b5d06857055c28f26912321937e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42d6fc6d08217c412f5a576929068b6e678deaf6":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"6762551dad139aaedf252c353553e7bdbf7daffe":["5b15576cafd8b5d06857055c28f26912321937e3"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["6762551dad139aaedf252c353553e7bdbf7daffe"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["f03e4bed5023ec3ef93a771b8888cae991cf448d","42d6fc6d08217c412f5a576929068b6e678deaf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42d6fc6d08217c412f5a576929068b6e678deaf6"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["42d6fc6d08217c412f5a576929068b6e678deaf6","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"5b15576cafd8b5d06857055c28f26912321937e3":["5eb2511ababf862ea11e10761c70ee560cd84510","6762551dad139aaedf252c353553e7bdbf7daffe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","5b15576cafd8b5d06857055c28f26912321937e3"],"42d6fc6d08217c412f5a576929068b6e678deaf6":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6762551dad139aaedf252c353553e7bdbf7daffe":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}