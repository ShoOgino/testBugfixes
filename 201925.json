{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int,float).mjava","commits":[{"id":"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3","date":1401710950,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize, float acceptableOverheadRatio) {\n    super(out, blockSize);\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    super(out, blockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedWriter#BlockPackedWriter(DataOutput,int,float).mjava","sourceNew":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize) {\n    super(out, blockSize);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   * @param blockSize the number of values of a single block, must be a power of 2\n   * @param acceptableOverheadRatio an acceptable overhead ratio per value\n   */\n  public BlockPackedWriter(DataOutput out, int blockSize, float acceptableOverheadRatio) {\n    super(out, blockSize);\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"]},"commit2Childs":{"d36ccb9a1c11aeb91962e89bda4a2e643c8629b3":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d36ccb9a1c11aeb91962e89bda4a2e643c8629b3"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}