{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,int).mjava","commits":[{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, needsFreqs);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","sourceOld":"    @Override\n    public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n      assert state == State.POSITIONED: \"docs(...) called on unpositioned TermsEnum\";\n\n      // TODO: should we give this thing a random to be super-evil,\n      // and randomly *not* unwrap?\n      if (reuse instanceof AssertingDocsEnum) {\n        reuse = ((AssertingDocsEnum) reuse).in;\n      }\n      DocsEnum docs = super.docs(liveDocs, reuse, flags);\n      return docs == null ? null : new AssertingDocsEnum(docs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"02331260bb246364779cb6f04919ca47900d01bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}