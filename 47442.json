{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6f565d9a71b415146d1d62050d268e573c4cb3","date":1541350911,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // create an alias named myalias\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      // request a collection that's part of an alias\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n\n      // status request on the alias itself\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", \"myalias\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      // SOLR-12938 - this should NOT cause an exception\n      rsp = client.request(request);\n\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertNotNull(collections.get(COLLECTION_NAME));\n\n      // status request on something neither an alias nor a collection itself\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", \"notAnAliasOrCollection\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      // SOLR-12938 - this should still cause an exception\n      try {\n        client.request(request);\n        fail(\"requesting status for 'notAnAliasOrCollection' should cause an exception from CLUSTERSTATUS\" );\n      } catch (RuntimeException e) {\n        // success\n      }\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusAliasTest().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // create an alias named myalias\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      // request a collection that's part of an alias\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n\n      // status request on the alias itself\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", \"myalias\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      // SOLR-12938 - this should NOT cause an exception\n      rsp = client.request(request);\n\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertNotNull(collections.get(COLLECTION_NAME));\n\n      // status request on something neither an alias nor a collection itself\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", \"notAnAliasOrCollection\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      // SOLR-12938 - this should still cause an exception\n      try {\n        client.request(request);\n        fail(\"requesting status for 'notAnAliasOrCollection' should cause an exception from CLUSTERSTATUS\" );\n      } catch (RuntimeException e) {\n        // success\n      }\n    }\n  }\n\n","sourceOld":"  private void clusterStatusAliasTest() throws Exception  {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // create an alias named myalias\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATEALIAS.toString());\n      params.set(\"name\", \"myalias\");\n      params.set(\"collections\", DEFAULT_COLLECTION + \",\" + COLLECTION_NAME);\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      client.request(request);\n\n      // request a collection that's part of an alias\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      Map<String, String> aliases = (Map<String, String>) cluster.get(\"aliases\");\n      assertNotNull(\"Aliases should not be null\", aliases);\n      assertEquals(\"Alias: myalias not found in cluster status\",\n          DEFAULT_COLLECTION + \",\" + COLLECTION_NAME, aliases.get(\"myalias\"));\n\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      List<String> collAlias = (List<String>) collection.get(\"aliases\");\n      assertEquals(\"Aliases not found\", Lists.newArrayList(\"myalias\"), collAlias);\n\n      // status request on the alias itself\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", \"myalias\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      // SOLR-12938 - this should NOT cause an exception\n      rsp = client.request(request);\n\n      cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertNotNull(collections.get(COLLECTION_NAME));\n\n      // status request on something neither an alias nor a collection itself\n      params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", \"notAnAliasOrCollection\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      // SOLR-12938 - this should still cause an exception\n      try {\n        client.request(request);\n        fail(\"requesting status for 'notAnAliasOrCollection' should cause an exception from CLUSTERSTATUS\" );\n      } catch (RuntimeException e) {\n        // success\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd6f565d9a71b415146d1d62050d268e573c4cb3":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["dd6f565d9a71b415146d1d62050d268e573c4cb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"dd6f565d9a71b415146d1d62050d268e573c4cb3":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"b94236357aaa22b76c10629851fe4e376e0cea82":["dd6f565d9a71b415146d1d62050d268e573c4cb3"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}