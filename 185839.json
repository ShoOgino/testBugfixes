{"path":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    NoSuchDirectoryException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      // we got NoSuchDirectoryException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchDirectoryException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchDirectoryException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    NoSuchDirectoryException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      // we got NoSuchDirectoryException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchDirectoryException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchDirectoryException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    NoSuchDirectoryException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      // we got NoSuchDirectoryException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchDirectoryException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchDirectoryException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<String>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    NoSuchDirectoryException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      // we got NoSuchDirectoryException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchDirectoryException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchDirectoryException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    NoSuchDirectoryException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException e) {\n      // we got NoSuchDirectoryException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchDirectoryException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchDirectoryException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"250dfa260b94f1754ee1b5819280aaaff8416405","date":1454769706,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3903dde7d803465e019a1aaf678febe1c763ec27","date":1560266875,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FileSwitchDirectory#listAll().mjava","sourceNew":"  @Override\n  public String[] listAll() throws IOException {\n    List<String> files = new ArrayList<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        String ext = getExtension(f);\n        // we should respect the extension here as well to ensure that we don't list a file that is already\n        // deleted or rather in the one of the directories pending deletions if both directories point\n        // to the same filesystem path. This is quite common for instance to use NIOFS as a primary\n        // and MMap as a secondary to only mmap files like docvalues or term dictionaries.\n        if (primaryExtensions.contains(ext)) {\n          files.add(f);\n        }\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        String ext = getExtension(f);\n        if (primaryExtensions.contains(ext) == false) {\n          files.add(f);\n        }\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public String[] listAll() throws IOException {\n    Set<String> files = new HashSet<>();\n    // LUCENE-3380: either or both of our dirs could be FSDirs,\n    // but if one underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is written to the other,\n    // in this case, we don't want to throw a NoSuchFileException\n    NoSuchFileException exc = null;\n    try {\n      for(String f : primaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      exc = e;\n    }\n    try {\n      for(String f : secondaryDir.listAll()) {\n        files.add(f);\n      }\n    } catch (NoSuchFileException e) {\n      // we got NoSuchFileException from both dirs\n      // rethrow the first.\n      if (exc != null) {\n        throw exc;\n      }\n      // we got NoSuchFileException from the secondary,\n      // and the primary is empty.\n      if (files.isEmpty()) {\n        throw e;\n      }\n    }\n    // we got NoSuchFileException from the primary,\n    // and the secondary is empty.\n    if (exc != null && files.isEmpty()) {\n      throw exc;\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"250dfa260b94f1754ee1b5819280aaaff8416405":["f4abec28b874149a7223e32cc7a01704c27790de"],"3903dde7d803465e019a1aaf678febe1c763ec27":["5a207d19eac354d649c3f0e2cce070017c78125e"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["f4abec28b874149a7223e32cc7a01704c27790de","5a207d19eac354d649c3f0e2cce070017c78125e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","250dfa260b94f1754ee1b5819280aaaff8416405"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3903dde7d803465e019a1aaf678febe1c763ec27"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f4abec28b874149a7223e32cc7a01704c27790de"],"250dfa260b94f1754ee1b5819280aaaff8416405":["5a207d19eac354d649c3f0e2cce070017c78125e"],"3903dde7d803465e019a1aaf678febe1c763ec27":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5a207d19eac354d649c3f0e2cce070017c78125e":["3903dde7d803465e019a1aaf678febe1c763ec27","dd75f58072bba84066e89d61bd7028de1bd5b632"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["250dfa260b94f1754ee1b5819280aaaff8416405","dd75f58072bba84066e89d61bd7028de1bd5b632","5a207d19eac354d649c3f0e2cce070017c78125e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}