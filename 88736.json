{"path":"lucene/src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Rewrites the wrapped query. */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query rewritten = query.rewrite(reader);\n    if (rewritten != query) {\n      FilteredQuery clone = (FilteredQuery)this.clone();\n      clone.query = rewritten;\n      return clone;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  /** Rewrites the wrapped query. */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query rewritten = query.rewrite(reader);\n    if (rewritten != query) {\n      FilteredQuery clone = (FilteredQuery)this.clone();\n      clone.query = rewritten;\n      return clone;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"586cf43028f4cae848088bc127a6e4d6773ce9aa","date":1323793944,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Rewrites the query. If the wrapped is an instance of\n   * {@link MatchAllDocsQuery} it returns a {@link ConstantScoreQuery}. Otherwise\n   * it returns a new {@code FilteredQuery} wrapping the rewritten query. */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final Query queryRewritten = query.rewrite(reader);\n    \n    if (queryRewritten instanceof MatchAllDocsQuery) {\n      // Special case: If the query is a MatchAllDocsQuery, we only\n      // return a CSQ(filter).\n      final Query rewritten = new ConstantScoreQuery(filter);\n      // Combine boost of MatchAllDocsQuery and the wrapped rewritten query:\n      rewritten.setBoost(this.getBoost() * queryRewritten.getBoost());\n      return rewritten;\n    }\n    \n    if (queryRewritten != query) {\n      // rewrite to a new FilteredQuery wrapping the rewritten query\n      final Query rewritten = new FilteredQuery(queryRewritten, filter);\n      rewritten.setBoost(this.getBoost());\n      return rewritten;\n    } else {\n      // nothing to rewrite, we are done!\n      return this;\n    }\n  }\n\n","sourceOld":"  /** Rewrites the wrapped query. */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query rewritten = query.rewrite(reader);\n    if (rewritten != query) {\n      FilteredQuery clone = (FilteredQuery)this.clone();\n      clone.query = rewritten;\n      return clone;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8249072f13ea4354ab7635c2d7a59cc682806dab","9eb3122482ef235fbee3d696501977399ec0af6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Rewrites the query. If the wrapped is an instance of\n   * {@link MatchAllDocsQuery} it returns a {@link ConstantScoreQuery}. Otherwise\n   * it returns a new {@code FilteredQuery} wrapping the rewritten query. */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final Query queryRewritten = query.rewrite(reader);\n    \n    if (queryRewritten instanceof MatchAllDocsQuery) {\n      // Special case: If the query is a MatchAllDocsQuery, we only\n      // return a CSQ(filter).\n      final Query rewritten = new ConstantScoreQuery(filter);\n      // Combine boost of MatchAllDocsQuery and the wrapped rewritten query:\n      rewritten.setBoost(this.getBoost() * queryRewritten.getBoost());\n      return rewritten;\n    }\n    \n    if (queryRewritten != query) {\n      // rewrite to a new FilteredQuery wrapping the rewritten query\n      final Query rewritten = new FilteredQuery(queryRewritten, filter);\n      rewritten.setBoost(this.getBoost());\n      return rewritten;\n    } else {\n      // nothing to rewrite, we are done!\n      return this;\n    }\n  }\n\n","sourceOld":"  /** Rewrites the wrapped query. */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    Query rewritten = query.rewrite(reader);\n    if (rewritten != query) {\n      FilteredQuery clone = (FilteredQuery)this.clone();\n      clone.query = rewritten;\n      return clone;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FilteredQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Rewrites the query. If the wrapped is an instance of\n   * {@link MatchAllDocsQuery} it returns a {@link ConstantScoreQuery}. Otherwise\n   * it returns a new {@code FilteredQuery} wrapping the rewritten query. */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final Query queryRewritten = query.rewrite(reader);\n    \n    if (queryRewritten instanceof MatchAllDocsQuery) {\n      // Special case: If the query is a MatchAllDocsQuery, we only\n      // return a CSQ(filter).\n      final Query rewritten = new ConstantScoreQuery(filter);\n      // Combine boost of MatchAllDocsQuery and the wrapped rewritten query:\n      rewritten.setBoost(this.getBoost() * queryRewritten.getBoost());\n      return rewritten;\n    }\n    \n    if (queryRewritten != query) {\n      // rewrite to a new FilteredQuery wrapping the rewritten query\n      final Query rewritten = new FilteredQuery(queryRewritten, filter);\n      rewritten.setBoost(this.getBoost());\n      return rewritten;\n    } else {\n      // nothing to rewrite, we are done!\n      return this;\n    }\n  }\n\n","sourceOld":"  /** Rewrites the query. If the wrapped is an instance of\n   * {@link MatchAllDocsQuery} it returns a {@link ConstantScoreQuery}. Otherwise\n   * it returns a new {@code FilteredQuery} wrapping the rewritten query. */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final Query queryRewritten = query.rewrite(reader);\n    \n    if (queryRewritten instanceof MatchAllDocsQuery) {\n      // Special case: If the query is a MatchAllDocsQuery, we only\n      // return a CSQ(filter).\n      final Query rewritten = new ConstantScoreQuery(filter);\n      // Combine boost of MatchAllDocsQuery and the wrapped rewritten query:\n      rewritten.setBoost(this.getBoost() * queryRewritten.getBoost());\n      return rewritten;\n    }\n    \n    if (queryRewritten != query) {\n      // rewrite to a new FilteredQuery wrapping the rewritten query\n      final Query rewritten = new FilteredQuery(queryRewritten, filter);\n      rewritten.setBoost(this.getBoost());\n      return rewritten;\n    } else {\n      // nothing to rewrite, we are done!\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":["9454a6510e2db155fb01faa5c049b06ece95fab9","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"586cf43028f4cae848088bc127a6e4d6773ce9aa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["586cf43028f4cae848088bc127a6e4d6773ce9aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"586cf43028f4cae848088bc127a6e4d6773ce9aa":["4ceb6a6c707ada1df8bde804e25c98668e699a18","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4ceb6a6c707ada1df8bde804e25c98668e699a18","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}