{"path":"backwards/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {\n    this(field, lowerTerm, upperTerm, includeLower, includeUpper, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {\n    this(field, lowerTerm, upperTerm, includeLower, includeUpper, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {\n    this(field, lowerTerm, upperTerm, includeLower, includeUpper, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}