{"path":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ee056ec8e953928ee49a691090634eed1fa4d6b","date":1274852580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33e4a95ed08968b85d84e9fba82424f1fd945fbb","date":1274878310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testStarParsing().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText, quoted);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["c7f8e68717c68517265937c911e1ce9f25750247"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["33e4a95ed08968b85d84e9fba82424f1fd945fbb","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"962d04139994fce5193143ef35615499a9a96d78":["5f4e87790277826a2aea119328600dfb07761f32","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"a3776dccca01c11e7046323cfad46a3b4a471233":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"c7f8e68717c68517265937c911e1ce9f25750247":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"5f4e87790277826a2aea119328600dfb07761f32":["962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5f4e87790277826a2aea119328600dfb07761f32","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}