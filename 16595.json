{"path":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","sourceNew":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n  */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException; \n\n","sourceOld":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n  */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException; \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","date":1370989568,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","sourceNew":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException; \n\n","sourceOld":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n  */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException; \n\n","bugFix":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","sourceNew":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException;\n\n","sourceOld":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException; \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","sourceNew":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException;\n\n","sourceOld":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException; \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","sourceNew":"  /** Returns a stream reading an existing file.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException;\n\n","sourceOld":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","sourceNew":"  /** Returns a stream reading an existing file.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException;\n\n","sourceOld":"  /** Returns a stream reading an existing file, with the\n   * specified read buffer size.  The particular Directory\n   * implementation may ignore the buffer size.  Currently\n   * the only Directory implementations that respect this\n   * parameter are {@link FSDirectory} and {@link\n   * CompoundFileDirectory}.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Directory#openInput(String,IOContext).mjava","sourceNew":"  /**\n   * Opens a stream for reading an existing file.\n   *\n   * This method must throw either {@link NoSuchFileException} or {@link FileNotFoundException}\n   * if {@code name} points to a non-existing file.\n   *\n   * @param name the name of an existing file.\n   * @throws IOException in case of I/O error\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException;\n\n","sourceOld":"  /** Returns a stream reading an existing file.\n   * <p>Throws {@link FileNotFoundException} or {@link NoSuchFileException}\n   * if the file does not exist.\n   */\n  public abstract IndexInput openInput(String name, IOContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"989d940c4bf402188f4f0ae13736836885227383":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["1f3b037cd083286b2af89f96e768f85dcd8072d6","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3adea0022cffaaa592081efed775a7b8bf86b51":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","989d940c4bf402188f4f0ae13736836885227383","9bb9a29a5e71a90295f175df8919802993142c9a"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"9bb9a29a5e71a90295f175df8919802993142c9a":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}