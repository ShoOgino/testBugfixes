{"path":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","commits":[{"id":"ff150a6da6c43f093044f7717b36fd565b99634d","date":1134001320,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   */\n  public final synchronized void deleteDocument(int docNum) throws IOException {\n    if(directoryOwner)\n      aquireWriteLock();\n    doDelete(docNum);\n    hasChanges = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df","0e5554d2be0131fc1ce32526016ce4dcc90650e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e5554d2be0131fc1ce32526016ce4dcc90650e4","date":1168279868,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   */\n  public final synchronized void deleteDocument(int docNum) throws IOException {\n    if(directoryOwner)\n      aquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   */\n  public final synchronized void deleteDocument(int docNum) throws IOException {\n    if(directoryOwner)\n      aquireWriteLock();\n    doDelete(docNum);\n    hasChanges = true;\n  }\n\n","bugFix":["ff150a6da6c43f093044f7717b36fd565b99634d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   */\n  public final synchronized void deleteDocument(int docNum) throws IOException {\n    if(directoryOwner)\n      aquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":["ff150a6da6c43f093044f7717b36fd565b99634d"],"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#deleteDocument(int).mjava","sourceNew":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","sourceOld":"  /** Deletes the document numbered <code>docNum</code>.  Once a document is\n   * deleted it will not appear in TermDocs or TermPostitions enumerations.\n   * Attempts to read its field with the {@link #document}\n   * method will result in an error.  The presence of this document may still be\n   * reflected in the {@link #docFreq} statistic, though\n   * this will be corrected eventually as the index is further modified.\n   *\n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized void deleteDocument(int docNum) throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doDelete(docNum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"5712975970a595c28f1988efd007e1b8a617a92f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"1b54a9bc667895a2095a886184bf69a3179e63df":["0e5554d2be0131fc1ce32526016ce4dcc90650e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff150a6da6c43f093044f7717b36fd565b99634d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e5554d2be0131fc1ce32526016ce4dcc90650e4":["ff150a6da6c43f093044f7717b36fd565b99634d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5712975970a595c28f1988efd007e1b8a617a92f"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["5712975970a595c28f1988efd007e1b8a617a92f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"5712975970a595c28f1988efd007e1b8a617a92f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff150a6da6c43f093044f7717b36fd565b99634d"],"ff150a6da6c43f093044f7717b36fd565b99634d":["0e5554d2be0131fc1ce32526016ce4dcc90650e4"],"0e5554d2be0131fc1ce32526016ce4dcc90650e4":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}