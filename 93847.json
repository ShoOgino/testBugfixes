{"path":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","commits":[{"id":"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","date":1378833548,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT().mjava","sourceNew":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getIndexReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  private void assertNRT() {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getIndexReader();\n      assertEquals(1, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f","date":1399997256,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","sourceNew":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getRawReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getIndexReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","sourceNew":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getRawReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getIndexReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","sourceNew":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getRawReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getIndexReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ab833f2b623042c834458d4cbcad05073a93793","date":1527625631,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","sourceNew":"  static void assertNRT(int maxDoc) throws IOException {\n    h.getCore().withSearcher(searcher -> {\n      DirectoryReader ir = searcher.getRawReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n      return null;\n    });\n  }\n\n","sourceOld":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getRawReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2138c838f1c8052d94d61eb1e205dce7fa6932ef","date":1527642223,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNRTOpen#assertNRT(int).mjava","sourceNew":"  static void assertNRT(int maxDoc) throws IOException {\n    h.getCore().withSearcher(searcher -> {\n      DirectoryReader ir = searcher.getRawReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n      return null;\n    });\n  }\n\n","sourceOld":"  static void assertNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getRawReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertTrue(\"expected NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4ab833f2b623042c834458d4cbcad05073a93793":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["93dd449115a9247533e44bab47e8429e5dccbc6d","4ab833f2b623042c834458d4cbcad05073a93793"]},"commit2Childs":{"e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","4ab833f2b623042c834458d4cbcad05073a93793","2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4ab833f2b623042c834458d4cbcad05073a93793":["2138c838f1c8052d94d61eb1e205dce7fa6932ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2138c838f1c8052d94d61eb1e205dce7fa6932ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}