{"path":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":null,"sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b61dd7a57cd877fdc056d71912c8813a4c2d4e6","date":1277932343,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        File fC = new File( core.getResourceLoader().getConfigDir(), f );\n        File fD = new File( core.getDataDir(), f );\n        if( fC.exists() == fD.exists() ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n              +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n        }\n        if( fC.exists() ) {\n          log.info( \"Loading QueryElevation from: \"+fC.getAbsolutePath() );\n          Config cfg = new Config( core.getResourceLoader(), f );\n          elevationCache.put(null, loadElevationMap( cfg ));\n        }\n        else {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = StringHelper.intern(sf.getName());\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["8b61dd7a57cd877fdc056d71912c8813a4c2d4e6"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["c220849f876de24a79f756f65b3eb045db59f63f"],"c26f00b574427b55127e869b935845554afde1fa":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","8b61dd7a57cd877fdc056d71912c8813a4c2d4e6"],"2553b00f699380c64959ccb27991289aae87be2e":["c220849f876de24a79f756f65b3eb045db59f63f","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c220849f876de24a79f756f65b3eb045db59f63f","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"8b61dd7a57cd877fdc056d71912c8813a4c2d4e6":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["8b61dd7a57cd877fdc056d71912c8813a4c2d4e6","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","8b61dd7a57cd877fdc056d71912c8813a4c2d4e6"],"c220849f876de24a79f756f65b3eb045db59f63f":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"8b61dd7a57cd877fdc056d71912c8813a4c2d4e6":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}