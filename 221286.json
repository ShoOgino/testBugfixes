{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","commits":[{"id":"9359ad4a5596673c3154ffa1133458f00e124234","date":1428012026,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomOrdinalsJoin() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy())\n    );\n    IndexIterationContext context = createContext(100, w, false, true);\n\n    w.forceMerge(1);\n\n    w.close();\n    IndexReader topLevelReader = DirectoryReader.open(dir);\n\n    SortedDocValues[] values = new SortedDocValues[topLevelReader.leaves().size()];\n    for (LeafReaderContext leadContext : topLevelReader.leaves()) {\n      values[leadContext.ord] = DocValues.getSorted(leadContext.reader(), \"join_field\");\n    }\n    context.ordinalMap = MultiDocValues.OrdinalMap.build(\n        topLevelReader.getCoreCacheKey(), values, PackedInts.DEFAULT\n    );\n    IndexSearcher indexSearcher = newSearcher(topLevelReader);\n\n    int r = random().nextInt(context.randomUniqueValues.length);\n    boolean from = context.randomFrom[r];\n    String randomValue = context.randomUniqueValues[r];\n    BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n    final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n    if (VERBOSE) {\n      System.out.println(\"actualQuery=\" + actualQuery);\n    }\n    final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n    if (VERBOSE) {\n      System.out.println(\"scoreMode=\" + scoreMode);\n    }\n\n    final Query joinQuery;\n    if (from) {\n      BooleanQuery fromQuery = new BooleanQuery();\n      fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n      fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n      Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n      joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n    } else {\n      BooleanQuery fromQuery = new BooleanQuery();\n      fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n      fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n      Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n      joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n    }\n    if (VERBOSE) {\n      System.out.println(\"joinQuery=\" + joinQuery);\n    }\n\n    final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n    final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n    indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n    assertBitSet(expectedResult, actualResult, indexSearcher);\n    TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n    TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n    assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    topLevelReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c8376c8b9c659015b6e2a23a8c7275ea203eeef3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomOrdinalsJoin() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy())\n    );\n    IndexIterationContext context = createContext(100, w, false, true);\n\n    w.forceMerge(1);\n\n    w.close();\n    IndexReader topLevelReader = DirectoryReader.open(dir);\n\n    SortedDocValues[] values = new SortedDocValues[topLevelReader.leaves().size()];\n    for (LeafReaderContext leadContext : topLevelReader.leaves()) {\n      values[leadContext.ord] = DocValues.getSorted(leadContext.reader(), \"join_field\");\n    }\n    context.ordinalMap = MultiDocValues.OrdinalMap.build(\n        topLevelReader.getCoreCacheKey(), values, PackedInts.DEFAULT\n    );\n    IndexSearcher indexSearcher = newSearcher(topLevelReader);\n\n    int r = random().nextInt(context.randomUniqueValues.length);\n    boolean from = context.randomFrom[r];\n    String randomValue = context.randomUniqueValues[r];\n    BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n    final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n    if (VERBOSE) {\n      System.out.println(\"actualQuery=\" + actualQuery);\n    }\n    final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n    if (VERBOSE) {\n      System.out.println(\"scoreMode=\" + scoreMode);\n    }\n\n    final Query joinQuery;\n    if (from) {\n      BooleanQuery fromQuery = new BooleanQuery();\n      fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n      fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n      Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n      joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n    } else {\n      BooleanQuery fromQuery = new BooleanQuery();\n      fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n      fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n      Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n      joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n    }\n    if (VERBOSE) {\n      System.out.println(\"joinQuery=\" + joinQuery);\n    }\n\n    final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n    final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n    indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n    assertBitSet(expectedResult, actualResult, indexSearcher);\n    TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n    TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n    assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    topLevelReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7065b7a1004439fcad981283f1fa7632142a5f47","date":1428399440,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","sourceNew":"  public void testRandomOrdinalsJoin() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n    );\n    IndexIterationContext context = createContext(512, w, false, true);\n    IndexReader topLevelReader = w.getReader();\n\n    SortedDocValues[] values = new SortedDocValues[topLevelReader.leaves().size()];\n    for (LeafReaderContext leadContext : topLevelReader.leaves()) {\n      values[leadContext.ord] = DocValues.getSorted(leadContext.reader(), \"join_field\");\n    }\n    context.ordinalMap = MultiDocValues.OrdinalMap.build(\n        topLevelReader.getCoreCacheKey(), values, PackedInts.DEFAULT\n    );\n\n    int searchIters = 10;\n    IndexSearcher indexSearcher = newSearcher(topLevelReader);\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery fromQuery = new BooleanQuery();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery fromQuery = new BooleanQuery();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n\n    w.close();\n    topLevelReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomOrdinalsJoin() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy())\n    );\n    IndexIterationContext context = createContext(100, w, false, true);\n\n    w.forceMerge(1);\n\n    w.close();\n    IndexReader topLevelReader = DirectoryReader.open(dir);\n\n    SortedDocValues[] values = new SortedDocValues[topLevelReader.leaves().size()];\n    for (LeafReaderContext leadContext : topLevelReader.leaves()) {\n      values[leadContext.ord] = DocValues.getSorted(leadContext.reader(), \"join_field\");\n    }\n    context.ordinalMap = MultiDocValues.OrdinalMap.build(\n        topLevelReader.getCoreCacheKey(), values, PackedInts.DEFAULT\n    );\n    IndexSearcher indexSearcher = newSearcher(topLevelReader);\n\n    int r = random().nextInt(context.randomUniqueValues.length);\n    boolean from = context.randomFrom[r];\n    String randomValue = context.randomUniqueValues[r];\n    BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n    final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n    if (VERBOSE) {\n      System.out.println(\"actualQuery=\" + actualQuery);\n    }\n    final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n    if (VERBOSE) {\n      System.out.println(\"scoreMode=\" + scoreMode);\n    }\n\n    final Query joinQuery;\n    if (from) {\n      BooleanQuery fromQuery = new BooleanQuery();\n      fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n      fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n      Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n      joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n    } else {\n      BooleanQuery fromQuery = new BooleanQuery();\n      fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n      fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n      Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n      joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n    }\n    if (VERBOSE) {\n      System.out.println(\"joinQuery=\" + joinQuery);\n    }\n\n    final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n    final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n    indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n    assertBitSet(expectedResult, actualResult, indexSearcher);\n    TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n    TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n    assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    topLevelReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["c8376c8b9c659015b6e2a23a8c7275ea203eeef3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8376c8b9c659015b6e2a23a8c7275ea203eeef3","date":1428508284,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","sourceNew":"  public void testRandomOrdinalsJoin() throws Exception {\n    IndexIterationContext context = createContext(512, false, true);\n    int searchIters = 10;\n    IndexSearcher indexSearcher = context.searcher;\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery fromQuery = new BooleanQuery();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery fromQuery = new BooleanQuery();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n    context.close();\n  }\n\n","sourceOld":"  public void testRandomOrdinalsJoin() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(\n        random(),\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false))\n    );\n    IndexIterationContext context = createContext(512, w, false, true);\n    IndexReader topLevelReader = w.getReader();\n\n    SortedDocValues[] values = new SortedDocValues[topLevelReader.leaves().size()];\n    for (LeafReaderContext leadContext : topLevelReader.leaves()) {\n      values[leadContext.ord] = DocValues.getSorted(leadContext.reader(), \"join_field\");\n    }\n    context.ordinalMap = MultiDocValues.OrdinalMap.build(\n        topLevelReader.getCoreCacheKey(), values, PackedInts.DEFAULT\n    );\n\n    int searchIters = 10;\n    IndexSearcher indexSearcher = newSearcher(topLevelReader);\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery fromQuery = new BooleanQuery();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery fromQuery = new BooleanQuery();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n\n    w.close();\n    topLevelReader.close();\n    dir.close();\n  }\n\n","bugFix":["7065b7a1004439fcad981283f1fa7632142a5f47","9359ad4a5596673c3154ffa1133458f00e124234"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","sourceNew":"  public void testRandomOrdinalsJoin() throws Exception {\n    IndexIterationContext context = createContext(512, false, true);\n    int searchIters = 10;\n    IndexSearcher indexSearcher = context.searcher;\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n    context.close();\n  }\n\n","sourceOld":"  public void testRandomOrdinalsJoin() throws Exception {\n    IndexIterationContext context = createContext(512, false, true);\n    int searchIters = 10;\n    IndexSearcher indexSearcher = context.searcher;\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery fromQuery = new BooleanQuery();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery fromQuery = new BooleanQuery();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery, toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n    context.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","sourceNew":"  public void testRandomOrdinalsJoin() throws Exception {\n    IndexIterationContext context = createContext(512, false, true);\n    int searchIters = 10;\n    IndexSearcher indexSearcher = context.searcher;\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10, Integer.MAX_VALUE);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n    context.close();\n  }\n\n","sourceOld":"  public void testRandomOrdinalsJoin() throws Exception {\n    IndexIterationContext context = createContext(512, false, true);\n    int searchIters = 10;\n    IndexSearcher indexSearcher = context.searcher;\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n    context.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#testRandomOrdinalsJoin().mjava","sourceNew":"  public void testRandomOrdinalsJoin() throws Exception {\n    IndexIterationContext context = createContext(128, false, true);\n    int searchIters = atLeast(1);\n    IndexSearcher indexSearcher = context.searcher;\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10, Integer.MAX_VALUE);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n    context.close();\n  }\n\n","sourceOld":"  public void testRandomOrdinalsJoin() throws Exception {\n    IndexIterationContext context = createContext(512, false, true);\n    int searchIters = 10;\n    IndexSearcher indexSearcher = context.searcher;\n    for (int i = 0; i < searchIters; i++) {\n      if (VERBOSE) {\n        System.out.println(\"search iter=\" + i);\n      }\n      int r = random().nextInt(context.randomUniqueValues.length);\n      boolean from = context.randomFrom[r];\n      String randomValue = context.randomUniqueValues[r];\n      BitSet expectedResult = createExpectedResult(randomValue, from, indexSearcher.getIndexReader(), context);\n\n      final Query actualQuery = new TermQuery(new Term(\"value\", randomValue));\n      if (VERBOSE) {\n        System.out.println(\"actualQuery=\" + actualQuery);\n      }\n      final ScoreMode scoreMode = ScoreMode.values()[random().nextInt(ScoreMode.values().length)];\n      if (VERBOSE) {\n        System.out.println(\"scoreMode=\" + scoreMode);\n      }\n\n      final Query joinQuery;\n      if (from) {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"from\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"to\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      } else {\n        BooleanQuery.Builder fromQuery = new BooleanQuery.Builder();\n        fromQuery.add(new TermQuery(new Term(\"type\", \"to\")), BooleanClause.Occur.FILTER);\n        fromQuery.add(actualQuery, BooleanClause.Occur.MUST);\n        Query toQuery = new TermQuery(new Term(\"type\", \"from\"));\n        joinQuery = JoinUtil.createJoinQuery(\"join_field\", fromQuery.build(), toQuery, indexSearcher, scoreMode, context.ordinalMap);\n      }\n      if (VERBOSE) {\n        System.out.println(\"joinQuery=\" + joinQuery);\n      }\n\n      final BitSet actualResult = new FixedBitSet(indexSearcher.getIndexReader().maxDoc());\n      final TopScoreDocCollector topScoreDocCollector = TopScoreDocCollector.create(10, Integer.MAX_VALUE);\n      indexSearcher.search(joinQuery, MultiCollector.wrap(new BitSetCollector(actualResult), topScoreDocCollector));\n      assertBitSet(expectedResult, actualResult, indexSearcher);\n      TopDocs expectedTopDocs = createExpectedTopDocs(randomValue, from, scoreMode, context);\n      TopDocs actualTopDocs = topScoreDocCollector.topDocs();\n      assertTopDocs(expectedTopDocs, actualTopDocs, scoreMode, indexSearcher, joinQuery);\n    }\n    context.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c8376c8b9c659015b6e2a23a8c7275ea203eeef3"],"9359ad4a5596673c3154ffa1133458f00e124234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9359ad4a5596673c3154ffa1133458f00e124234"],"7065b7a1004439fcad981283f1fa7632142a5f47":["9359ad4a5596673c3154ffa1133458f00e124234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c8376c8b9c659015b6e2a23a8c7275ea203eeef3":["7065b7a1004439fcad981283f1fa7632142a5f47"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"9359ad4a5596673c3154ffa1133458f00e124234":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","7065b7a1004439fcad981283f1fa7632142a5f47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9359ad4a5596673c3154ffa1133458f00e124234","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"7065b7a1004439fcad981283f1fa7632142a5f47":["c8376c8b9c659015b6e2a23a8c7275ea203eeef3"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"c8376c8b9c659015b6e2a23a8c7275ea203eeef3":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}