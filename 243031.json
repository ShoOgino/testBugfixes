{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16b25963ad38ed289ebf0f7af31269fa1ce80a11","date":1442083896,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getLiveDocs().andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getLiveDocs().andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getPositiveDocSet(matchAllDocsQuery).andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching a query. This method is cache-aware and attempts to retrieve the answer\n   * from the cache if possible. If the answer was not cached, it may have been inserted into the cache as a result of\n   * this call. This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery) query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery) query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query. If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query == absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer != null) {\n        if (positive) return absAnswer;\n        else return getLiveDocs().andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getLiveDocs().andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching a query.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query.  If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query==absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer!=null) {\n        if (positive) return absAnswer;\n        else return getLiveDocs().andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getLiveDocs().andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching a query. This method is cache-aware and attempts to retrieve the answer\n   * from the cache if possible. If the answer was not cached, it may have been inserted into the cache as a result of\n   * this call. This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery) query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery) query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query. If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query == absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer != null) {\n        if (positive) return absAnswer;\n        else return getLiveDocSet().andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getLiveDocSet().andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching a query. This method is cache-aware and attempts to retrieve the answer\n   * from the cache if possible. If the answer was not cached, it may have been inserted into the cache as a result of\n   * this call. This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(Query query) throws IOException {\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery) query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery) query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, null);\n      }\n    }\n\n    // Get the absolute value (positive version) of this query. If we\n    // get back the same reference, we know it's positive.\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = query == absQ;\n\n    if (filterCache != null) {\n      DocSet absAnswer = filterCache.get(absQ);\n      if (absAnswer != null) {\n        if (positive) return absAnswer;\n        else return getLiveDocs().andNot(absAnswer);\n      }\n    }\n\n    DocSet absAnswer = getDocSetNC(absQ, null);\n    DocSet answer = positive ? absAnswer : getLiveDocs().andNot(absAnswer);\n\n    if (filterCache != null) {\n      // cache negative queries as positive\n      filterCache.put(absQ, absAnswer);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["c26f00b574427b55127e869b935845554afde1fa"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"]},"commit2Childs":{"16b25963ad38ed289ebf0f7af31269fa1ce80a11":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["16b25963ad38ed289ebf0f7af31269fa1ce80a11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}