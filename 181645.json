{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","commits":[{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    protected void runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      // first, test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSet, true)) {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        File configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory())\n          throw new FileNotFoundException(\"Specified config \"+configSet+\n              \" not found in \"+configsetsDir.getAbsolutePath());\n\n        File confDir = new File(configSetDir,\"conf\");\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSet+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSet);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&configSet=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSet);\n\n      System.out.println(\"Creating new collection '\"+collectionName+\"' using command:\\n\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = getJson(createCollectionUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0756adb6d313af2483aeff7ffe674fb3bca1dc75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0756adb6d313af2483aeff7ffe674fb3bca1dc75","date":1416416611,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      // first, test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSet, true)) {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        File configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory())\n          throw new FileNotFoundException(\"Specified config \"+configSet+\n              \" not found in \"+configsetsDir.getAbsolutePath());\n\n        File confDir = new File(configSetDir,\"conf\");\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSet+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSet);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSet);\n\n      System.out.println(\"Creating new collection '\"+collectionName+\"' using command:\\n\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = getJson(createCollectionUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      // first, test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSet, true)) {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        File configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory())\n          throw new FileNotFoundException(\"Specified config \"+configSet+\n              \" not found in \"+configsetsDir.getAbsolutePath());\n\n        File confDir = new File(configSetDir,\"conf\");\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSet+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSet);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&configSet=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSet);\n\n      System.out.println(\"Creating new collection '\"+collectionName+\"' using command:\\n\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = getJson(createCollectionUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n    }\n\n","bugFix":["e25c332f157326faecb36f76173033c1284776a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb","date":1417043528,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","sourceNew":"    protected void runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      // first, test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSet, true)) {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        File configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory())\n          throw new FileNotFoundException(\"Specified config \"+configSet+\n              \" not found in \"+configsetsDir.getAbsolutePath());\n\n        File confDir = new File(configSetDir,\"conf\");\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSet+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSet);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSet);\n\n      System.out.println(\"Creating new collection '\"+collectionName+\"' using command:\\n\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = getJson(createCollectionUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      // first, test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSet, true)) {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        File configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory())\n          throw new FileNotFoundException(\"Specified config \"+configSet+\n              \" not found in \"+configsetsDir.getAbsolutePath());\n\n        File confDir = new File(configSetDir,\"conf\");\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSet+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSet);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSet);\n\n      System.out.println(\"Creating new collection '\"+collectionName+\"' using command:\\n\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = getJson(createCollectionUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","sourceNew":"    protected int runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      String configSetNameInZk = configSet;\n      File configSetDir = null;\n      // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n      File possibleConfigDir = new File(configSet);\n      if (possibleConfigDir.isDirectory()) {\n        configSetDir = possibleConfigDir;\n        configSetNameInZk = possibleConfigDir.getName();\n      } else {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory()) {\n          throw new FileNotFoundException(\"Specified config \" + configSet +\n              \" not found in \" + configsetsDir.getAbsolutePath());\n        }\n      }\n\n      File confDir = new File(configSetDir, \"conf\");\n      if (!confDir.isDirectory()) {\n        // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n        if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n          confDir = configSetDir;\n        } else {\n          System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n              \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          return 1;\n        }\n      }\n\n      // test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSetNameInZk, true)) {\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSetNameInZk+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSetNameInZk);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSetNameInZk);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","sourceOld":"    protected void runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      // first, test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSet, true)) {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        File configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory())\n          throw new FileNotFoundException(\"Specified config \"+configSet+\n              \" not found in \"+configsetsDir.getAbsolutePath());\n\n        File confDir = new File(configSetDir,\"conf\");\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSet+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSet);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSet);\n\n      System.out.println(\"Creating new collection '\"+collectionName+\"' using command:\\n\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = getJson(createCollectionUrl);\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrClient,CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.CreateCollectionTool#runCloudTool(CloudSolrServer,CommandLine).mjava","sourceNew":"    protected int runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      String configSetNameInZk = configSet;\n      File configSetDir = null;\n      // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n      File possibleConfigDir = new File(configSet);\n      if (possibleConfigDir.isDirectory()) {\n        configSetDir = possibleConfigDir;\n        configSetNameInZk = possibleConfigDir.getName();\n      } else {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory()) {\n          throw new FileNotFoundException(\"Specified config \" + configSet +\n              \" not found in \" + configsetsDir.getAbsolutePath());\n        }\n      }\n\n      File confDir = new File(configSetDir, \"conf\");\n      if (!confDir.isDirectory()) {\n        // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n        if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n          confDir = configSetDir;\n        } else {\n          System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n              \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          return 1;\n        }\n      }\n\n      // test to see if that config exists in ZK\n      if (!cloudSolrClient.getZkStateReader().getZkClient().exists(\"/configs/\"+configSetNameInZk, true)) {\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSetNameInZk+\" to ZooKeeper at \"+cloudSolrClient.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrClient.getZkStateReader().getZkClient(), confDir, configSetNameInZk);\n      }\n\n      String baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSetNameInZk);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","sourceOld":"    protected int runCloudTool(CloudSolrServer cloudSolrServer, CommandLine cli) throws Exception {\n      Set<String> liveNodes = cloudSolrServer.getZkStateReader().getClusterState().getLiveNodes();\n      if (liveNodes.isEmpty())\n        throw new IllegalStateException(\"No live nodes found! Cannot create a collection until \" +\n            \"there is at least 1 live node in the cluster.\");\n      String firstLiveNode = liveNodes.iterator().next();\n\n      // build a URL to create the collection\n      int numShards = optionAsInt(cli, \"shards\", 1);\n      int replicationFactor = optionAsInt(cli, \"replicationFactor\", 1);\n      int maxShardsPerNode = -1;\n\n      if (cli.hasOption(\"maxShardsPerNode\")) {\n        maxShardsPerNode = Integer.parseInt(cli.getOptionValue(\"maxShardsPerNode\"));\n      } else {\n        // need number of live nodes to determine maxShardsPerNode if it is not set\n        int numNodes = liveNodes.size();\n        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;\n      }\n\n      String configSet = cli.getOptionValue(\"config\", DEFAULT_CONFIG_SET);\n      String configSetNameInZk = configSet;\n      File configSetDir = null;\n      // we try to be flexible and allow the user to specify a configuration directory instead of a configset name\n      File possibleConfigDir = new File(configSet);\n      if (possibleConfigDir.isDirectory()) {\n        configSetDir = possibleConfigDir;\n        configSetNameInZk = possibleConfigDir.getName();\n      } else {\n        File configsetsDir = new File(cli.getOptionValue(\"configsetsDir\"));\n        if (!configsetsDir.isDirectory())\n          throw new FileNotFoundException(configsetsDir.getAbsolutePath()+\" not found!\");\n\n        // upload the configset if it exists\n        configSetDir = new File(configsetsDir, configSet);\n        if (!configSetDir.isDirectory()) {\n          throw new FileNotFoundException(\"Specified config \" + configSet +\n              \" not found in \" + configsetsDir.getAbsolutePath());\n        }\n      }\n\n      File confDir = new File(configSetDir, \"conf\");\n      if (!confDir.isDirectory()) {\n        // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it\n        if ((new File(configSetDir, \"solrconfig.xml\")).isFile()) {\n          confDir = configSetDir;\n        } else {\n          System.err.println(\"Specified configuration directory \"+configSetDir.getAbsolutePath()+\n              \" is invalid;\\nit should contain either conf sub-directory or solrconfig.xml\");\n          return 1;\n        }\n      }\n\n      // test to see if that config exists in ZK\n      if (!cloudSolrServer.getZkStateReader().getZkClient().exists(\"/configs/\"+configSetNameInZk, true)) {\n        System.out.println(\"Uploading \"+confDir.getAbsolutePath()+\n            \" for config \"+configSetNameInZk+\" to ZooKeeper at \"+cloudSolrServer.getZkHost());\n        ZkController.uploadConfigDir(cloudSolrServer.getZkStateReader().getZkClient(), confDir, configSetNameInZk);\n      }\n\n      String baseUrl = cloudSolrServer.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      String collectionName = cli.getOptionValue(\"name\");\n\n      // since creating a collection is a heavy-weight operation, check for existence first\n      String collectionListUrl = baseUrl+\"/admin/collections?action=list\";\n      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n        System.err.println(\"\\nCollection '\"+collectionName+\"' already exists!\");\n        System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        System.err.println();\n        return 1;\n      }\n\n      // doesn't seem to exist ... try to create\n      String createCollectionUrl =\n          String.format(Locale.ROOT,\n              \"%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s\",\n              baseUrl,\n              collectionName,\n              numShards,\n              replicationFactor,\n              maxShardsPerNode,\n              configSetNameInZk);\n\n      System.out.println(\"\\nCreating new collection '\"+collectionName+\"' using command:\\n\"+createCollectionUrl+\"\\n\");\n\n      Map<String,Object> json = null;\n      try {\n        json = getJson(createCollectionUrl);\n      } catch (SolrServerException sse) {\n        // check if already exists\n        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {\n          System.err.println(\"Collection '\"+collectionName+\"' already exists!\");\n          System.err.println(\"\\nChecked collection existence using Collections API command:\\n\"+collectionListUrl);\n        } else {\n          System.err.println(\"Failed to create collection '\"+collectionName+\"' due to: \"+sse.getMessage());\n        }\n        System.err.println();\n        return 1;\n      }\n\n      CharArr arr = new CharArr();\n      new JSONWriter(arr, 2).write(json);\n      System.out.println(arr.toString());\n      System.out.println();\n\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":["3d1db6f36874f1979916ccb702329fbb09602af8","0f506150a6ebd43fb2833cdf2713e2d1d5bddbd6","c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0756adb6d313af2483aeff7ffe674fb3bca1dc75":["e25c332f157326faecb36f76173033c1284776a5"],"209c0259a9b7087b2111411ec790d6557ef86307":["1b1713aa2c66e65f3f024e9c3c4876dfed130ceb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["209c0259a9b7087b2111411ec790d6557ef86307"],"e25c332f157326faecb36f76173033c1284776a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb":["0756adb6d313af2483aeff7ffe674fb3bca1dc75"]},"commit2Childs":{"0756adb6d313af2483aeff7ffe674fb3bca1dc75":["1b1713aa2c66e65f3f024e9c3c4876dfed130ceb"],"209c0259a9b7087b2111411ec790d6557ef86307":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e25c332f157326faecb36f76173033c1284776a5"],"e25c332f157326faecb36f76173033c1284776a5":["0756adb6d313af2483aeff7ffe674fb3bca1dc75"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b1713aa2c66e65f3f024e9c3c4876dfed130ceb":["209c0259a9b7087b2111411ec790d6557ef86307"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}