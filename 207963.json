{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"/dev/null","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}