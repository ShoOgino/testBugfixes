{"path":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#sortByTotalTermFreq(IndexReader,TermStats[]).mjava","commits":[{"id":"1513361122ebc5ddd6075f633cd77d2345611767","date":1273770174,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#sortByTotalTermFreq(IndexReader,TermStats[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Takes array of TermStats. For each term looks up the tf for each doc\n   * containing the term and stores the total in the output array of TermStats.\n   * Output array is sorted by highest total tf.\n   * \n   * @param reader\n   * @param terms\n   *          TermStats[]\n   * @return TermStats[]\n   * @throws Exception\n   */\n  \n  public static TermStats[] sortByTotalTermFreq(IndexReader reader, TermStats[] terms) throws Exception {\n    TermStats[] ts = new TermStats[terms.length]; // array for sorting\n    long totalTF;\n    for (int i = 0; i < terms.length; i++) {\n      totalTF = getTotalTermFreq(reader, terms[i].field, terms[i].termtext);\n      ts[i] = new TermStats(terms[i].field, terms[i].termtext, terms[i].docFreq, totalTF);\n    }\n    \n    Comparator<TermStats> c = new TotalTermFreqComparatorSortDescending();\n    Arrays.sort(ts, c);\n    \n    return ts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#sortByTotalTermFreq(IndexReader,TermStats[]).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#sortByTotalTermFreq(IndexReader,TermStats[]).mjava","sourceNew":"  /**\n   * Takes array of TermStats. For each term looks up the tf for each doc\n   * containing the term and stores the total in the output array of TermStats.\n   * Output array is sorted by highest total tf.\n   * \n   * @param reader\n   * @param terms\n   *          TermStats[]\n   * @return TermStats[]\n   * @throws Exception\n   */\n  \n  public static TermStats[] sortByTotalTermFreq(IndexReader reader, TermStats[] terms) throws Exception {\n    TermStats[] ts = new TermStats[terms.length]; // array for sorting\n    long totalTF;\n    for (int i = 0; i < terms.length; i++) {\n      totalTF = getTotalTermFreq(reader, terms[i].field, terms[i].termtext);\n      ts[i] = new TermStats(terms[i].field, terms[i].termtext, terms[i].docFreq, totalTF);\n    }\n    \n    Comparator<TermStats> c = new TotalTermFreqComparatorSortDescending();\n    Arrays.sort(ts, c);\n    \n    return ts;\n  }\n\n","sourceOld":"  /**\n   * Takes array of TermStats. For each term looks up the tf for each doc\n   * containing the term and stores the total in the output array of TermStats.\n   * Output array is sorted by highest total tf.\n   * \n   * @param reader\n   * @param terms\n   *          TermStats[]\n   * @return TermStats[]\n   * @throws Exception\n   */\n  \n  public static TermStats[] sortByTotalTermFreq(IndexReader reader, TermStats[] terms) throws Exception {\n    TermStats[] ts = new TermStats[terms.length]; // array for sorting\n    long totalTF;\n    for (int i = 0; i < terms.length; i++) {\n      totalTF = getTotalTermFreq(reader, terms[i].field, terms[i].termtext);\n      ts[i] = new TermStats(terms[i].field, terms[i].termtext, terms[i].docFreq, totalTF);\n    }\n    \n    Comparator<TermStats> c = new TotalTermFreqComparatorSortDescending();\n    Arrays.sort(ts, c);\n    \n    return ts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1513361122ebc5ddd6075f633cd77d2345611767"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1513361122ebc5ddd6075f633cd77d2345611767":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1513361122ebc5ddd6075f633cd77d2345611767"],"1513361122ebc5ddd6075f633cd77d2345611767":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}