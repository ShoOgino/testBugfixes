{"path":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","commits":[{"id":"7a62481aacca928b5c069e6f825ef49c7b6586d8","date":1333048447,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"/dev/null","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e48c7062c4c24d88c3c1f555eed560d979b8636","date":1333143551,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d536f8f18fa29e8630b3b32d498c7ce2cacfd3d4","date":1341570569,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, IOUtils.CHARSET_UTF_8));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, IOUtils.CHARSET_UTF_8));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, IOUtils.CHARSET_UTF_8));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, IOUtils.CHARSET_UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, IOUtils.CHARSET_UTF_8));\n      rates = new HashMap<String, Double>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, StandardCharsets.UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, IOUtils.CHARSET_UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, StandardCharsets.UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, IOUtils.CHARSET_UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, StandardCharsets.UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key {}\", key);\n              }\n              break;\n            } else {\n              if (log.isWarnEnabled()) {\n                log.warn(\"Expected key, got {}\", JSONParser.getEventString(ev));\n              }\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            if (log.isInfoEnabled()) {\n              log.info(\"Noggit UNKNOWN_EVENT_ID: {}\", JSONParser.getEventString(ev));\n            }\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, StandardCharsets.UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key \"+key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got \"+JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            log.info(\"Noggit UNKNOWN_EVENT_ID:\"+JSONParser.getEventString(ev));\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider.OpenExchangeRates#OpenExchangeRates(InputStream).mjava","sourceNew":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, StandardCharsets.UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key {}\", key);\n              }\n              break;\n            } else {\n              log.warn(\"Expected key, got {}\", JSONParser.getEventString(ev));\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            if (log.isInfoEnabled()) {\n              log.info(\"Noggit UNKNOWN_EVENT_ID: {}\", JSONParser.getEventString(ev));\n            }\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","sourceOld":"    public OpenExchangeRates(InputStream ratesStream) throws IOException {\n      parser = new JSONParser(new InputStreamReader(ratesStream, StandardCharsets.UTF_8));\n      rates = new HashMap<>();\n      \n      int ev;\n      do {\n        ev = parser.nextEvent();\n        switch( ev ) {\n          case JSONParser.STRING:\n            if( parser.wasKey() ) {\n              String key = parser.getString();\n              if(key.equals(\"disclaimer\")) {\n                parser.nextEvent();\n                disclaimer = parser.getString();\n              } else if(key.equals(\"license\")) {\n                parser.nextEvent();\n                license = parser.getString();\n              } else if(key.equals(\"timestamp\")) {\n                parser.nextEvent();\n                timestamp = parser.getLong();\n              } else if(key.equals(\"base\")) {\n                parser.nextEvent();\n                baseCurrency = parser.getString();\n              } else if(key.equals(\"rates\")) {\n                ev = parser.nextEvent();\n                assert(ev == JSONParser.OBJECT_START);\n                ev = parser.nextEvent();\n                while (ev != JSONParser.OBJECT_END) {\n                  String curr = parser.getString();\n                  ev = parser.nextEvent();\n                  Double rate = parser.getDouble();\n                  rates.put(curr, rate);\n                  ev = parser.nextEvent();                  \n                }\n              } else {\n                log.warn(\"Unknown key {}\", key);\n              }\n              break;\n            } else {\n              if (log.isWarnEnabled()) {\n                log.warn(\"Expected key, got {}\", JSONParser.getEventString(ev));\n              }\n              break;\n            }\n             \n          case JSONParser.OBJECT_END:\n          case JSONParser.OBJECT_START:\n          case JSONParser.EOF:\n            break;\n\n          default:\n            if (log.isInfoEnabled()) {\n              log.info(\"Noggit UNKNOWN_EVENT_ID: {}\", JSONParser.getEventString(ev));\n            }\n            break;\n        }\n      } while( ev != JSONParser.EOF);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d536f8f18fa29e8630b3b32d498c7ce2cacfd3d4":["2e48c7062c4c24d88c3c1f555eed560d979b8636"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d536f8f18fa29e8630b3b32d498c7ce2cacfd3d4"],"04e7f30683f53928b2fce016e6430c9795caff22":["2e48c7062c4c24d88c3c1f555eed560d979b8636","d536f8f18fa29e8630b3b32d498c7ce2cacfd3d4"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2e48c7062c4c24d88c3c1f555eed560d979b8636","d536f8f18fa29e8630b3b32d498c7ce2cacfd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["9df8125ba9193a2e2e285ed92157810b1952a244"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2e48c7062c4c24d88c3c1f555eed560d979b8636":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"9df8125ba9193a2e2e285ed92157810b1952a244":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"d536f8f18fa29e8630b3b32d498c7ce2cacfd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"04e7f30683f53928b2fce016e6430c9795caff22":[],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["2e48c7062c4c24d88c3c1f555eed560d979b8636"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e48c7062c4c24d88c3c1f555eed560d979b8636":["d536f8f18fa29e8630b3b32d498c7ce2cacfd3d4","04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","04e7f30683f53928b2fce016e6430c9795caff22","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}