{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#fixupPendingList().mjava","commits":[{"id":"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4","date":1449124064,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#fixupPendingList().mjava","pathOld":"/dev/null","sourceNew":"  // Sort pending tokens, and set position increment values.\n  private void fixupPendingList() {\n    // Sort for removing same tokens.\n    // USER token should be ahead from normal one.\n    Collections.sort(pending,\n                     new Comparator<Token>() {\n                       @Override\n                       public int compare(Token a, Token b) {\n                         int aOff = a.getOffset();\n                         int bOff = b.getOffset();\n                         if (aOff != bOff) {\n                           return aOff - bOff;\n                         }\n                         int aLen = a.getLength();\n                         int bLen = b.getLength();\n                         if (aLen != bLen) {\n                           return aLen - bLen;\n                         }\n                         // order of Type is KNOWN, UNKNOWN, USER,\n                         // so we use reversed comparison here.\n                         return b.getType().ordinal() - a.getType().ordinal();\n                       }\n                     });\n\n    // Remove same token.\n    for (int i = 1; i < pending.size(); ++i) {\n      Token a = pending.get(i - 1);\n      Token b = pending.get(i);\n      if (a.getOffset() == b.getOffset() && a.getLength() == b.getLength()) {\n        pending.remove(i);\n        // It is important to decrement \"i\" here, because a next may be removed.\n        --i;\n      }\n    }\n\n    // offset=>position map\n    HashMap<Integer, Integer> map = new HashMap<>();\n    for (Token t : pending) {\n      map.put(t.getOffset(), 0);\n      map.put(t.getOffset() + t.getLength(), 0);\n    }\n\n    // Get uniqe and sorted list of all edge position of tokens.\n    Integer[] offsets = map.keySet().toArray(new Integer[0]);\n    Arrays.sort(offsets);\n\n    // setup all value of map.  It specify N-th position from begin.\n    for (int i = 0; i < offsets.length; ++i) {\n      map.put(offsets[i], i);\n    }\n\n    // We got all position length now.\n    for (Token t : pending) {\n      t.setPositionLength(map.get(t.getOffset() + t.getLength()) - map.get(t.getOffset()));\n    }\n\n    // Make PENDING to be reversed order to fit its usage.\n    // If you would like to speedup, you can try reversed order sort\n    // at first of this function.\n    Collections.reverse(pending);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}