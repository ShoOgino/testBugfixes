{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,File,String,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,File,String,String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,File,String,String).mjava","sourceNew":"  /** Run a vocabulary test against two data files inside a zip file */\n  public static void assertVocabulary(Analyzer a, File zipFile, String voc, String out)\n  throws IOException {\n    ZipFile zip = new ZipFile(zipFile);\n    InputStream v = zip.getInputStream(zip.getEntry(voc));\n    InputStream o = zip.getInputStream(zip.getEntry(out));\n    assertVocabulary(a, v, o);\n    v.close();\n    o.close();\n    zip.close();\n  }\n\n","sourceOld":"  /** Run a vocabulary test against two data files inside a zip file */\n  public static void assertVocabulary(Analyzer a, File zipFile, String voc, String out)\n  throws IOException {\n    ZipFile zip = new ZipFile(zipFile);\n    InputStream v = zip.getInputStream(zip.getEntry(voc));\n    InputStream o = zip.getInputStream(zip.getEntry(out));\n    assertVocabulary(a, v, o);\n    v.close();\n    o.close();\n    zip.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,Path,String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/VocabularyAssert#assertVocabulary(Analyzer,File,String,String).mjava","sourceNew":"  /** Run a vocabulary test against two data files inside a zip file */\n  public static void assertVocabulary(Analyzer a, Path zipFile, String voc, String out) throws IOException {\n    ZipFile zip = new ZipFile(zipFile.toFile());\n    InputStream v = zip.getInputStream(zip.getEntry(voc));\n    InputStream o = zip.getInputStream(zip.getEntry(out));\n    assertVocabulary(a, v, o);\n    v.close();\n    o.close();\n    zip.close();\n  }\n\n","sourceOld":"  /** Run a vocabulary test against two data files inside a zip file */\n  public static void assertVocabulary(Analyzer a, File zipFile, String voc, String out)\n  throws IOException {\n    ZipFile zip = new ZipFile(zipFile);\n    InputStream v = zip.getInputStream(zip.getEntry(voc));\n    InputStream o = zip.getInputStream(zip.getEntry(out));\n    assertVocabulary(a, v, o);\n    v.close();\n    o.close();\n    zip.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}