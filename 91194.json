{"path":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#getCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],FacetDebugInfo).mjava","commits":[{"id":"862ed062e72c1c01ecd8593b17804ac02b69cf0e","date":1486641184,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#getCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  public static NamedList<Integer> getCounts(SolrIndexSearcher searcher, DocSet docs, String fieldName, int offset, int limit, int mincount, boolean missing, String sort, String prefix, Predicate<BytesRef> termFilter, FacetDebugInfo fdebug) throws IOException {\n    SchemaField schemaField = searcher.getSchema().getField(fieldName);\n    FieldType ft = schemaField.getType();\n    NamedList<Integer> res = new NamedList<>();\n    \n    // TODO: remove multiValuedFieldCache(), check dv type / uninversion type?\n    final boolean multiValued = schemaField.multiValued() || ft.multiValuedFieldCache();\n\n    final SortedSetDocValues si; // for term lookups only\n    OrdinalMap ordinalMap = null; // for mapping per-segment ords to global ones\n    if (multiValued) {\n      si = searcher.getSlowAtomicReader().getSortedSetDocValues(fieldName);\n      if (si instanceof MultiDocValues.MultiSortedSetDocValues) {\n        ordinalMap = ((MultiSortedSetDocValues)si).mapping;\n      }\n    } else {\n      SortedDocValues single = searcher.getSlowAtomicReader().getSortedDocValues(fieldName);\n      si = single == null ? null : DocValues.singleton(single);\n      if (single instanceof MultiDocValues.MultiSortedDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedDocValues)single).mapping;\n      }\n    }\n    if (si == null) {\n      return finalize(res, searcher, schemaField, docs, -1, missing);\n    }\n    if (si.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"Currently this faceting method is limited to \" + Integer.MAX_VALUE + \" unique terms\");\n    }\n\n    final BytesRefBuilder prefixRef;\n    if (prefix == null) {\n      prefixRef = null;\n    } else if (prefix.length()==0) {\n      prefix = null;\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n    \n    int startTermIndex, endTermIndex;\n    if (prefix!=null) {\n      startTermIndex = (int) si.lookupTerm(prefixRef.get());\n      if (startTermIndex<0) startTermIndex=-startTermIndex-1;\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      endTermIndex = (int) si.lookupTerm(prefixRef.get());\n      assert endTermIndex < 0;\n      endTermIndex = -endTermIndex-1;\n    } else {\n      startTermIndex=-1;\n      endTermIndex=(int) si.getValueCount();\n    }\n\n    final int nTerms=endTermIndex-startTermIndex;\n    int missingCount = -1; \n    final CharsRefBuilder charsRef = new CharsRefBuilder();\n    if (nTerms>0 && docs.size() >= mincount) {\n\n      // count collection array only needs to be as big as the number of terms we are\n      // going to collect counts for.\n      final int[] counts = new int[nTerms];\n      if (fdebug != null) {\n        fdebug.putInfoItem(\"numBuckets\", nTerms);\n      }\n\n      Filter filter = docs.getTopFilter();\n      List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n      for (int subIndex = 0; subIndex < leaves.size(); subIndex++) {\n        LeafReaderContext leaf = leaves.get(subIndex);\n        DocIdSet dis = filter.getDocIdSet(leaf, null); // solr docsets already exclude any deleted docs\n        DocIdSetIterator disi = null;\n        if (dis != null) {\n          disi = dis.iterator();\n        }\n        if (disi != null) {\n          if (multiValued) {\n            SortedSetDocValues sub = leaf.reader().getSortedSetDocValues(fieldName);\n            if (sub == null) {\n              sub = DocValues.emptySortedSet();\n            }\n            final SortedDocValues singleton = DocValues.unwrapSingleton(sub);\n            if (singleton != null) {\n              // some codecs may optimize SORTED_SET storage for single-valued fields\n              accumSingle(counts, startTermIndex, singleton, disi, subIndex, ordinalMap);\n            } else {\n              accumMulti(counts, startTermIndex, sub, disi, subIndex, ordinalMap);\n            }\n          } else {\n            SortedDocValues sub = leaf.reader().getSortedDocValues(fieldName);\n            if (sub == null) {\n              sub = DocValues.emptySorted();\n            }\n            accumSingle(counts, startTermIndex, sub, disi, subIndex, ordinalMap);\n          }\n        }\n      }\n\n      if (startTermIndex == -1) {\n        missingCount = counts[0];\n      }\n\n      // IDEA: we could also maintain a count of \"other\"... everything that fell outside\n      // of the top 'N'\n\n      int off=offset;\n      int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n      if (sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        int maxsize = limit>0 ? offset+limit : Integer.MAX_VALUE-1;\n        maxsize = Math.min(maxsize, nTerms);\n        LongPriorityQueue queue = new LongPriorityQueue(Math.min(maxsize,1000), maxsize, Long.MIN_VALUE);\n\n        int min=mincount-1;  // the smallest value in the top 'N' values\n        for (int i=(startTermIndex==-1)?1:0; i<nTerms; i++) {\n          int c = counts[i];\n          if (c>min) {\n            // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n            // index order, so we already know that the keys are ordered.  This can be very\n            // important if a lot of the counts are repeated (like zero counts would be).\n\n            if (termFilter != null) {\n              final BytesRef term = si.lookupOrd(startTermIndex+i);\n              if (!termFilter.test(term)) {\n                continue;\n              }\n            }\n\n            // smaller term numbers sort higher, so subtract the term number instead\n            long pair = (((long)c)<<32) + (Integer.MAX_VALUE - i);\n            boolean displaced = queue.insert(pair);\n            if (displaced) min=(int)(queue.top() >>> 32);\n          }\n        }\n\n        // if we are deep paging, we don't have to order the highest \"offset\" counts.\n        int collectCount = Math.max(0, queue.size() - off);\n        assert collectCount <= lim;\n\n        // the start and end indexes of our list \"sorted\" (starting with the highest value)\n        int sortedIdxStart = queue.size() - (collectCount - 1);\n        int sortedIdxEnd = queue.size() + 1;\n        final long[] sorted = queue.sort(collectCount);\n\n        for (int i=sortedIdxStart; i<sortedIdxEnd; i++) {\n          long pair = sorted[i];\n          int c = (int)(pair >>> 32);\n          int tnum = Integer.MAX_VALUE - (int)pair;\n          final BytesRef term = si.lookupOrd(startTermIndex+tnum);\n          ft.indexedToReadable(term, charsRef);\n          res.add(charsRef.toString(), c);\n        }\n      \n      } else {\n        // add results in index order\n        int i=(startTermIndex==-1)?1:0;\n        if (mincount<=0 && termFilter == null) {\n          // if mincount<=0 and we're not examining the values for the term filter, then\n          // we won't discard any terms and we know exactly where to start.\n          i+=off;\n          off=0;\n        }\n\n        for (; i<nTerms; i++) {          \n          int c = counts[i];\n          if (c<mincount) continue;\n          BytesRef term = null;\n          if (termFilter != null) {\n            term = si.lookupOrd(startTermIndex+i);\n            if (!termFilter.test(term)) {\n              continue;\n            }\n          }\n          if (--off>=0) continue;\n          if (--lim<0) break;\n          if (term == null) {\n            term = si.lookupOrd(startTermIndex+i);\n          }\n          ft.indexedToReadable(term, charsRef);\n          res.add(charsRef.toString(), c);\n        }\n      }\n    }\n    \n    return finalize(res, searcher, schemaField, docs, missingCount, missing);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7679cc7d5b465ec8936979698cedf5fdbd71c95c","date":1566227764,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#getCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],FacetDebugInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/DocValuesFacets#getCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String,Predicate[BytesRef],FacetDebugInfo).mjava","sourceNew":"  public static NamedList<Integer> getCounts(SolrIndexSearcher searcher, DocSet docs, String fieldName, int offset, int limit, int mincount, boolean missing, String sort, String prefix, Predicate<BytesRef> termFilter, FacetDebugInfo fdebug) throws IOException {\n    SchemaField schemaField = searcher.getSchema().getField(fieldName);\n    FieldType ft = schemaField.getType();\n    NamedList<Integer> res = new NamedList<>();\n    \n    // TODO: remove multiValuedFieldCache(), check dv type / uninversion type?\n    final boolean multiValued = schemaField.multiValued() || ft.multiValuedFieldCache();\n\n    final SortedSetDocValues si; // for term lookups only\n    OrdinalMap ordinalMap = null; // for mapping per-segment ords to global ones\n    if (multiValued) {\n      si = searcher.getSlowAtomicReader().getSortedSetDocValues(fieldName);\n      if (si instanceof MultiDocValues.MultiSortedSetDocValues) {\n        ordinalMap = ((MultiSortedSetDocValues)si).mapping;\n      }\n    } else {\n      SortedDocValues single = searcher.getSlowAtomicReader().getSortedDocValues(fieldName);\n      si = single == null ? null : DocValues.singleton(single);\n      if (single instanceof MultiDocValues.MultiSortedDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedDocValues)single).mapping;\n      }\n    }\n    if (si == null) {\n      return finalize(res, searcher, schemaField, docs, -1, missing);\n    }\n    if (si.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"Currently this faceting method is limited to \" + Integer.MAX_VALUE + \" unique terms\");\n    }\n\n    final BytesRefBuilder prefixRef;\n    if (prefix == null) {\n      prefixRef = null;\n    } else if (prefix.length()==0) {\n      prefix = null;\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n    \n    int startTermIndex, endTermIndex;\n    if (prefix!=null) {\n      startTermIndex = (int) si.lookupTerm(prefixRef.get());\n      if (startTermIndex<0) startTermIndex=-startTermIndex-1;\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      endTermIndex = (int) si.lookupTerm(prefixRef.get());\n      assert endTermIndex < 0;\n      endTermIndex = -endTermIndex-1;\n    } else {\n      startTermIndex=-1;\n      endTermIndex=(int) si.getValueCount();\n    }\n\n    final int nTerms=endTermIndex-startTermIndex;\n    int missingCount = -1; \n    final CharsRefBuilder charsRef = new CharsRefBuilder();\n    if (nTerms>0 && docs.size() >= mincount) {\n\n      // count collection array only needs to be as big as the number of terms we are\n      // going to collect counts for.\n      final int[] counts = new int[nTerms];\n      if (fdebug != null) {\n        fdebug.putInfoItem(\"numBuckets\", nTerms);\n      }\n\n      Filter filter = docs.getTopFilter();\n      List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n      for (int subIndex = 0; subIndex < leaves.size(); subIndex++) {\n        LeafReaderContext leaf = leaves.get(subIndex);\n        DocIdSet dis = filter.getDocIdSet(leaf, null); // solr docsets already exclude any deleted docs\n        DocIdSetIterator disi = null;\n        if (dis != null) {\n          disi = dis.iterator();\n        }\n        if (disi != null) {\n          if (multiValued) {\n            SortedSetDocValues sub = leaf.reader().getSortedSetDocValues(fieldName);\n            if (sub == null) {\n              sub = DocValues.emptySortedSet();\n            }\n            final SortedDocValues singleton = DocValues.unwrapSingleton(sub);\n            if (singleton != null) {\n              // some codecs may optimize SORTED_SET storage for single-valued fields\n              accumSingle(counts, startTermIndex, singleton, disi, subIndex, ordinalMap);\n            } else {\n              accumMulti(counts, startTermIndex, sub, disi, subIndex, ordinalMap);\n            }\n          } else {\n            SortedDocValues sub = leaf.reader().getSortedDocValues(fieldName);\n            if (sub == null) {\n              sub = DocValues.emptySorted();\n            }\n            accumSingle(counts, startTermIndex, sub, disi, subIndex, ordinalMap);\n          }\n        }\n      }\n\n      if (startTermIndex == -1) {\n        missingCount = counts[0];\n      }\n\n      // IDEA: we could also maintain a count of \"other\"... everything that fell outside\n      // of the top 'N'\n\n      if (limit == 0) {\n        return finalize(res, searcher, schemaField, docs, missingCount, missing);\n      }\n\n      int off=offset;\n      int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n      if (sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        int maxsize = limit>0 ? offset+limit : Integer.MAX_VALUE-1;\n        maxsize = Math.min(maxsize, nTerms);\n        LongPriorityQueue queue = new LongPriorityQueue(Math.min(maxsize,1000), maxsize, Long.MIN_VALUE);\n\n        int min=mincount-1;  // the smallest value in the top 'N' values\n        for (int i=(startTermIndex==-1)?1:0; i<nTerms; i++) {\n          int c = counts[i];\n          if (c>min) {\n            // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n            // index order, so we already know that the keys are ordered.  This can be very\n            // important if a lot of the counts are repeated (like zero counts would be).\n\n            if (termFilter != null) {\n              final BytesRef term = si.lookupOrd(startTermIndex+i);\n              if (!termFilter.test(term)) {\n                continue;\n              }\n            }\n\n            // smaller term numbers sort higher, so subtract the term number instead\n            long pair = (((long)c)<<32) + (Integer.MAX_VALUE - i);\n            boolean displaced = queue.insert(pair);\n            if (displaced) min=(int)(queue.top() >>> 32);\n          }\n        }\n\n        // if we are deep paging, we don't have to order the highest \"offset\" counts.\n        int collectCount = Math.max(0, queue.size() - off);\n        assert collectCount <= lim;\n\n        // the start and end indexes of our list \"sorted\" (starting with the highest value)\n        int sortedIdxStart = queue.size() - (collectCount - 1);\n        int sortedIdxEnd = queue.size() + 1;\n        final long[] sorted = queue.sort(collectCount);\n\n        for (int i=sortedIdxStart; i<sortedIdxEnd; i++) {\n          long pair = sorted[i];\n          int c = (int)(pair >>> 32);\n          int tnum = Integer.MAX_VALUE - (int)pair;\n          final BytesRef term = si.lookupOrd(startTermIndex+tnum);\n          ft.indexedToReadable(term, charsRef);\n          res.add(charsRef.toString(), c);\n        }\n      \n      } else {\n        // add results in index order\n        int i=(startTermIndex==-1)?1:0;\n        if (mincount<=0 && termFilter == null) {\n          // if mincount<=0 and we're not examining the values for the term filter, then\n          // we won't discard any terms and we know exactly where to start.\n          i+=off;\n          off=0;\n        }\n\n        for (; i<nTerms; i++) {          \n          int c = counts[i];\n          if (c<mincount) continue;\n          BytesRef term = null;\n          if (termFilter != null) {\n            term = si.lookupOrd(startTermIndex+i);\n            if (!termFilter.test(term)) {\n              continue;\n            }\n          }\n          if (--off>=0) continue;\n          if (--lim<0) break;\n          if (term == null) {\n            term = si.lookupOrd(startTermIndex+i);\n          }\n          ft.indexedToReadable(term, charsRef);\n          res.add(charsRef.toString(), c);\n        }\n      }\n    }\n    \n    return finalize(res, searcher, schemaField, docs, missingCount, missing);\n  }\n\n","sourceOld":"  public static NamedList<Integer> getCounts(SolrIndexSearcher searcher, DocSet docs, String fieldName, int offset, int limit, int mincount, boolean missing, String sort, String prefix, Predicate<BytesRef> termFilter, FacetDebugInfo fdebug) throws IOException {\n    SchemaField schemaField = searcher.getSchema().getField(fieldName);\n    FieldType ft = schemaField.getType();\n    NamedList<Integer> res = new NamedList<>();\n    \n    // TODO: remove multiValuedFieldCache(), check dv type / uninversion type?\n    final boolean multiValued = schemaField.multiValued() || ft.multiValuedFieldCache();\n\n    final SortedSetDocValues si; // for term lookups only\n    OrdinalMap ordinalMap = null; // for mapping per-segment ords to global ones\n    if (multiValued) {\n      si = searcher.getSlowAtomicReader().getSortedSetDocValues(fieldName);\n      if (si instanceof MultiDocValues.MultiSortedSetDocValues) {\n        ordinalMap = ((MultiSortedSetDocValues)si).mapping;\n      }\n    } else {\n      SortedDocValues single = searcher.getSlowAtomicReader().getSortedDocValues(fieldName);\n      si = single == null ? null : DocValues.singleton(single);\n      if (single instanceof MultiDocValues.MultiSortedDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedDocValues)single).mapping;\n      }\n    }\n    if (si == null) {\n      return finalize(res, searcher, schemaField, docs, -1, missing);\n    }\n    if (si.getValueCount() >= Integer.MAX_VALUE) {\n      throw new UnsupportedOperationException(\"Currently this faceting method is limited to \" + Integer.MAX_VALUE + \" unique terms\");\n    }\n\n    final BytesRefBuilder prefixRef;\n    if (prefix == null) {\n      prefixRef = null;\n    } else if (prefix.length()==0) {\n      prefix = null;\n      prefixRef = null;\n    } else {\n      prefixRef = new BytesRefBuilder();\n      prefixRef.copyChars(prefix);\n    }\n    \n    int startTermIndex, endTermIndex;\n    if (prefix!=null) {\n      startTermIndex = (int) si.lookupTerm(prefixRef.get());\n      if (startTermIndex<0) startTermIndex=-startTermIndex-1;\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      endTermIndex = (int) si.lookupTerm(prefixRef.get());\n      assert endTermIndex < 0;\n      endTermIndex = -endTermIndex-1;\n    } else {\n      startTermIndex=-1;\n      endTermIndex=(int) si.getValueCount();\n    }\n\n    final int nTerms=endTermIndex-startTermIndex;\n    int missingCount = -1; \n    final CharsRefBuilder charsRef = new CharsRefBuilder();\n    if (nTerms>0 && docs.size() >= mincount) {\n\n      // count collection array only needs to be as big as the number of terms we are\n      // going to collect counts for.\n      final int[] counts = new int[nTerms];\n      if (fdebug != null) {\n        fdebug.putInfoItem(\"numBuckets\", nTerms);\n      }\n\n      Filter filter = docs.getTopFilter();\n      List<LeafReaderContext> leaves = searcher.getTopReaderContext().leaves();\n      for (int subIndex = 0; subIndex < leaves.size(); subIndex++) {\n        LeafReaderContext leaf = leaves.get(subIndex);\n        DocIdSet dis = filter.getDocIdSet(leaf, null); // solr docsets already exclude any deleted docs\n        DocIdSetIterator disi = null;\n        if (dis != null) {\n          disi = dis.iterator();\n        }\n        if (disi != null) {\n          if (multiValued) {\n            SortedSetDocValues sub = leaf.reader().getSortedSetDocValues(fieldName);\n            if (sub == null) {\n              sub = DocValues.emptySortedSet();\n            }\n            final SortedDocValues singleton = DocValues.unwrapSingleton(sub);\n            if (singleton != null) {\n              // some codecs may optimize SORTED_SET storage for single-valued fields\n              accumSingle(counts, startTermIndex, singleton, disi, subIndex, ordinalMap);\n            } else {\n              accumMulti(counts, startTermIndex, sub, disi, subIndex, ordinalMap);\n            }\n          } else {\n            SortedDocValues sub = leaf.reader().getSortedDocValues(fieldName);\n            if (sub == null) {\n              sub = DocValues.emptySorted();\n            }\n            accumSingle(counts, startTermIndex, sub, disi, subIndex, ordinalMap);\n          }\n        }\n      }\n\n      if (startTermIndex == -1) {\n        missingCount = counts[0];\n      }\n\n      // IDEA: we could also maintain a count of \"other\"... everything that fell outside\n      // of the top 'N'\n\n      int off=offset;\n      int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n      if (sort.equals(FacetParams.FACET_SORT_COUNT) || sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        int maxsize = limit>0 ? offset+limit : Integer.MAX_VALUE-1;\n        maxsize = Math.min(maxsize, nTerms);\n        LongPriorityQueue queue = new LongPriorityQueue(Math.min(maxsize,1000), maxsize, Long.MIN_VALUE);\n\n        int min=mincount-1;  // the smallest value in the top 'N' values\n        for (int i=(startTermIndex==-1)?1:0; i<nTerms; i++) {\n          int c = counts[i];\n          if (c>min) {\n            // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n            // index order, so we already know that the keys are ordered.  This can be very\n            // important if a lot of the counts are repeated (like zero counts would be).\n\n            if (termFilter != null) {\n              final BytesRef term = si.lookupOrd(startTermIndex+i);\n              if (!termFilter.test(term)) {\n                continue;\n              }\n            }\n\n            // smaller term numbers sort higher, so subtract the term number instead\n            long pair = (((long)c)<<32) + (Integer.MAX_VALUE - i);\n            boolean displaced = queue.insert(pair);\n            if (displaced) min=(int)(queue.top() >>> 32);\n          }\n        }\n\n        // if we are deep paging, we don't have to order the highest \"offset\" counts.\n        int collectCount = Math.max(0, queue.size() - off);\n        assert collectCount <= lim;\n\n        // the start and end indexes of our list \"sorted\" (starting with the highest value)\n        int sortedIdxStart = queue.size() - (collectCount - 1);\n        int sortedIdxEnd = queue.size() + 1;\n        final long[] sorted = queue.sort(collectCount);\n\n        for (int i=sortedIdxStart; i<sortedIdxEnd; i++) {\n          long pair = sorted[i];\n          int c = (int)(pair >>> 32);\n          int tnum = Integer.MAX_VALUE - (int)pair;\n          final BytesRef term = si.lookupOrd(startTermIndex+tnum);\n          ft.indexedToReadable(term, charsRef);\n          res.add(charsRef.toString(), c);\n        }\n      \n      } else {\n        // add results in index order\n        int i=(startTermIndex==-1)?1:0;\n        if (mincount<=0 && termFilter == null) {\n          // if mincount<=0 and we're not examining the values for the term filter, then\n          // we won't discard any terms and we know exactly where to start.\n          i+=off;\n          off=0;\n        }\n\n        for (; i<nTerms; i++) {          \n          int c = counts[i];\n          if (c<mincount) continue;\n          BytesRef term = null;\n          if (termFilter != null) {\n            term = si.lookupOrd(startTermIndex+i);\n            if (!termFilter.test(term)) {\n              continue;\n            }\n          }\n          if (--off>=0) continue;\n          if (--lim<0) break;\n          if (term == null) {\n            term = si.lookupOrd(startTermIndex+i);\n          }\n          ft.indexedToReadable(term, charsRef);\n          res.add(charsRef.toString(), c);\n        }\n      }\n    }\n    \n    return finalize(res, searcher, schemaField, docs, missingCount, missing);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7679cc7d5b465ec8936979698cedf5fdbd71c95c":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7679cc7d5b465ec8936979698cedf5fdbd71c95c"]},"commit2Childs":{"862ed062e72c1c01ecd8593b17804ac02b69cf0e":["7679cc7d5b465ec8936979698cedf5fdbd71c95c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["862ed062e72c1c01ecd8593b17804ac02b69cf0e"],"7679cc7d5b465ec8936979698cedf5fdbd71c95c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}