{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","commits":[{"id":"417003906b2e5a3c80420ffe968890cd3da3e8fd","date":1402983907,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"/dev/null","sourceNew":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertTrue(\"Unexpected exception message\", exception.getValue().contains(\"Server refused connection\"));\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","date":1402998114,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"/dev/null","sourceNew":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertTrue(\"Unexpected exception message\", exception.getValue().contains(\"Server refused connection\"));\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6088f380b716d92e0a23669c911d025d12423a7e","date":1403027047,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertTrue(\"Unexpected exception message\", exception.getValue().contains(\"Server refused connection\"));\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ff95350490d916b88063ed58a164da68943b08","date":1403027429,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertTrue(\"Unexpected exception message\", exception.getValue().contains(\"Server refused connection\"));\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b038ad0480d5e81e058bf9fafb2dd85399985d","date":1450812495,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(\"partialResults\"));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n    try {\n      ignoreException(\"Server refused connection\");\n      // verify that the request would fail if shards.tolerant=false\n      collection1.query(query);\n      fail(\"Expecting exception\");\n    } catch (SolrException e) {\n      //expected\n    }\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc78b7d15e7b8627fa6d1b946da3a39f0225508d","date":1576086705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = DEAD_HOST_1;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = DEAD_HOST_1;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = \"[ff01::0083]:3334\";\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testTolerantSearch().mjava","sourceNew":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = DEAD_HOST_1;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack =\n            (((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","sourceOld":"  public void testTolerantSearch() throws SolrServerException, IOException {\n    String badShard = DEAD_HOST_1;\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"true\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2 + \",\" + badShard);\n\n    // verify that the request would fail if shards.tolerant=false\n    ignoreException(\"Server refused connection\");\n    expectThrows(SolrException.class, () -> collection1.query(query));\n\n    query.set(ShardParams.SHARDS_TOLERANT, \"true\");\n    QueryResponse response = collection1.query(query);\n    assertTrue((Boolean)response.getResponseHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));\n    @SuppressWarnings(\"unchecked\")\n    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)\n        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get(\"track\")).get(\"EXECUTE_QUERY\")).get(badShard);\n    assertEquals(\"Unexpected response size for shard\", 1, badShardTrack.size());\n    Entry<String, String> exception = badShardTrack.iterator().next();\n    assertEquals(\"Expected key 'Exception' not found\", \"Exception\", exception.getKey());\n    assertNotNull(\"Exception message should not be null\", exception.getValue());\n    unIgnoreException(\"Server refused connection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","93ff95350490d916b88063ed58a164da68943b08"],"6088f380b716d92e0a23669c911d025d12423a7e":["417003906b2e5a3c80420ffe968890cd3da3e8fd"],"f8061ddd97f3352007d927dae445884a6f3d857b":["83b038ad0480d5e81e058bf9fafb2dd85399985d","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"e98520789adb1d5ad05afb4956eca0944a929688":["bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"df724d84dab24a0cc54bec95a8680867adc7f171":["d1a307447328c95a00248512b40d7a5ff12ecd6a","bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["93ff95350490d916b88063ed58a164da68943b08","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","417003906b2e5a3c80420ffe968890cd3da3e8fd"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["93ff95350490d916b88063ed58a164da68943b08"],"417003906b2e5a3c80420ffe968890cd3da3e8fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["83b038ad0480d5e81e058bf9fafb2dd85399985d","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"93ff95350490d916b88063ed58a164da68943b08":["6088f380b716d92e0a23669c911d025d12423a7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"6088f380b716d92e0a23669c911d025d12423a7e":["93ff95350490d916b88063ed58a164da68943b08"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"f6d0aee18c1653f7ee634fa8830abdb001dcfe1b":["e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["83b038ad0480d5e81e058bf9fafb2dd85399985d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"417003906b2e5a3c80420ffe968890cd3da3e8fd":["6088f380b716d92e0a23669c911d025d12423a7e","f6d0aee18c1653f7ee634fa8830abdb001dcfe1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6d0aee18c1653f7ee634fa8830abdb001dcfe1b","417003906b2e5a3c80420ffe968890cd3da3e8fd"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","df724d84dab24a0cc54bec95a8680867adc7f171","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","bc78b7d15e7b8627fa6d1b946da3a39f0225508d"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"93ff95350490d916b88063ed58a164da68943b08":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"bc78b7d15e7b8627fa6d1b946da3a39f0225508d":["e98520789adb1d5ad05afb4956eca0944a929688","df724d84dab24a0cc54bec95a8680867adc7f171"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","f8061ddd97f3352007d927dae445884a6f3d857b","df724d84dab24a0cc54bec95a8680867adc7f171","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}