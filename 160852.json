{"path":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","commits":[{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load core configuration for core \" + dcore.getName(), e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28fc571bd8818afd7de714d775f89b3db6f6686c","date":1406137810,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Could not load conf for core \" + dcore.getName() + \n                              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load core configuration for core \" + dcore.getName(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Could not load conf for core \" + dcore.getName() + \n                              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Could not load conf for core \" + dcore.getName() + \n                              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Could not load conf for core \" + dcore.getName() + \n                              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":["28fc571bd8818afd7de714d775f89b3db6f6686c","2d4e985daefcb892b529223b478c47985fc3c483"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties);\n    }\n    catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Could not load conf for core \" + dcore.getName() + \n                              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      NamedList flags = getConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      NamedList flags = getConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","date":1576143009,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      NamedList flags = getConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      NamedList flags = getConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      NamedList flags = getConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      NamedList flags = getConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSetService#loadConfigSet(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSetService#getConfig(CoreDescriptor).mjava","sourceNew":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet loadConfigSet(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      NamedList properties = loadConfigSetProperties(dcore, coreLoader);\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList flags = loadConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configSetName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Load the ConfigSet for a core\n   * @param dcore the core's CoreDescriptor\n   * @return a ConfigSet\n   */\n  public final ConfigSet getConfig(CoreDescriptor dcore) {\n\n    SolrResourceLoader coreLoader = createCoreResourceLoader(dcore);\n\n    try {\n\n      // ConfigSet properties are loaded from ConfigSetProperties.DEFAULT_FILENAME file.\n      // ConfigSet flags are loaded from the metadata of the ZK node of the configset.\n      NamedList properties = createConfigSetProperties(dcore, coreLoader);\n      NamedList flags = getConfigSetFlags(dcore, coreLoader);\n\n      boolean trusted =\n          (coreLoader instanceof ZkSolrResourceLoader\n              && flags != null\n              && flags.get(\"trusted\") != null\n              && !flags.getBooleanArg(\"trusted\")\n              ) ? false: true;\n\n      SolrConfig solrConfig = createSolrConfig(dcore, coreLoader, trusted);\n      IndexSchema schema = createIndexSchema(dcore, solrConfig);\n      return new ConfigSet(configName(dcore), solrConfig, schema, properties, trusted);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not load conf for core \" + dcore.getName() +\n              \": \" + e.getMessage(), e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6466e433d7f5218e77c8115ed28176855fc3c143":["28fc571bd8818afd7de714d775f89b3db6f6686c"],"df724d84dab24a0cc54bec95a8680867adc7f171":["917e62f3497c83634a13edd833e8e21dd6cc6496","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["6466e433d7f5218e77c8115ed28176855fc3c143"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"28fc571bd8818afd7de714d775f89b3db6f6686c":["2d4e985daefcb892b529223b478c47985fc3c483"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["6466e433d7f5218e77c8115ed28176855fc3c143","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"2d4e985daefcb892b529223b478c47985fc3c483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3732e34f27916e98704736cc6924a34fffca249a":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e4fb176991e13ab85dfe62dceeb287dde115745"]},"commit2Childs":{"6466e433d7f5218e77c8115ed28176855fc3c143":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"917e62f3497c83634a13edd833e8e21dd6cc6496":["df724d84dab24a0cc54bec95a8680867adc7f171","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["917e62f3497c83634a13edd833e8e21dd6cc6496","9856095f7afb5a607bf5e65077615ed91273508c","3732e34f27916e98704736cc6924a34fffca249a"],"28fc571bd8818afd7de714d775f89b3db6f6686c":["6466e433d7f5218e77c8115ed28176855fc3c143"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d4e985daefcb892b529223b478c47985fc3c483"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"2d4e985daefcb892b529223b478c47985fc3c483":["28fc571bd8818afd7de714d775f89b3db6f6686c"],"3732e34f27916e98704736cc6924a34fffca249a":[],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["df724d84dab24a0cc54bec95a8680867adc7f171","3e4fb176991e13ab85dfe62dceeb287dde115745"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","9856095f7afb5a607bf5e65077615ed91273508c","3732e34f27916e98704736cc6924a34fffca249a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}