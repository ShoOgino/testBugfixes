{"path":"lucene/core/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs#common(Object,Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs#common(Object,Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs#common(Object,Object).mjava","sourceNew":"  @Override\n  public Long common(Object _output1, Object _output2) {\n    assert valid(_output1, false);\n    assert valid(_output2, false);\n    final Long output1 = (Long) _output1;\n    final Long output2 = (Long) _output2;\n    if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {\n      return NO_OUTPUT;\n    } else if (doShare) {\n      assert output1 > 0;\n      assert output2 > 0;\n      return Math.min(output1, output2);\n    } else if (output1.equals(output2)) {\n      return output1;\n    } else {\n      return NO_OUTPUT;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Long common(Object _output1, Object _output2) {\n    assert valid(_output1, false);\n    assert valid(_output2, false);\n    final Long output1 = (Long) _output1;\n    final Long output2 = (Long) _output2;\n    if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {\n      return NO_OUTPUT;\n    } else if (doShare) {\n      assert output1 > 0;\n      assert output2 > 0;\n      return Math.min(output1, output2);\n    } else if (output1.equals(output2)) {\n      return output1;\n    } else {\n      return NO_OUTPUT;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs#common(Object,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/UpToTwoPositiveIntOutputs#common(Object,Object).mjava","sourceNew":"  @Override\n  public Long common(Object _output1, Object _output2) {\n    assert valid(_output1, false);\n    assert valid(_output2, false);\n    final Long output1 = (Long) _output1;\n    final Long output2 = (Long) _output2;\n    if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {\n      return NO_OUTPUT;\n    } else if (doShare) {\n      assert output1 > 0;\n      assert output2 > 0;\n      return Math.min(output1, output2);\n    } else if (output1.equals(output2)) {\n      return output1;\n    } else {\n      return NO_OUTPUT;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Long common(Object _output1, Object _output2) {\n    assert valid(_output1, false);\n    assert valid(_output2, false);\n    final Long output1 = (Long) _output1;\n    final Long output2 = (Long) _output2;\n    if (output1 == NO_OUTPUT || output2 == NO_OUTPUT) {\n      return NO_OUTPUT;\n    } else if (doShare) {\n      assert output1 > 0;\n      assert output2 > 0;\n      return Math.min(output1, output2);\n    } else if (output1.equals(output2)) {\n      return output1;\n    } else {\n      return NO_OUTPUT;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}