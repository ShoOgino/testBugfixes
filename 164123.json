{"path":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"/dev/null","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 3 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(50 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer());\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (flushControl.peakNetBytes > (long)(iwc.getRAMBufferSizeMB() * 1024d * 1024d * 2d)) {\n        assertTrue(\"should be unhealthy here numThreads: \" + numThreads[i],\n            docsWriter.healthiness.wasStalled);\n      }\n\n      if (numThreads[i] == 1) { // single thread could be unhealthy is a single\n                                // doc is very large?!\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      } else {\n        if (docsWriter.healthiness.wasStalled) {\n          // TODO maybe this assumtion is too strickt\n          assertTrue(\" we should have blocked here numThreads: \"\n              + numThreads[i], docsWriter.healthiness.hasBlocked());\n        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","d19974432be9aed28ee7dca73bdf01d139e763a9","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 3 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(50 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (flushControl.peakNetBytes > (long)(iwc.getRAMBufferSizeMB() * 1024d * 1024d * 2d)) {\n        assertTrue(\"should be unhealthy here numThreads: \" + numThreads[i],\n            docsWriter.healthiness.wasStalled);\n      }\n\n      if (numThreads[i] == 1) { // single thread could be unhealthy is a single\n                                // doc is very large?!\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      } else {\n        if (docsWriter.healthiness.wasStalled) {\n          // TODO maybe this assumtion is too strickt\n          assertTrue(\" we should have blocked here numThreads: \"\n              + numThreads[i], docsWriter.healthiness.hasBlocked());\n        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 3 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(50 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer());\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (flushControl.peakNetBytes > (long)(iwc.getRAMBufferSizeMB() * 1024d * 1024d * 2d)) {\n        assertTrue(\"should be unhealthy here numThreads: \" + numThreads[i],\n            docsWriter.healthiness.wasStalled);\n      }\n\n      if (numThreads[i] == 1) { // single thread could be unhealthy is a single\n                                // doc is very large?!\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      } else {\n        if (docsWriter.healthiness.wasStalled) {\n          // TODO maybe this assumtion is too strickt\n          assertTrue(\" we should have blocked here numThreads: \"\n              + numThreads[i], docsWriter.healthiness.hasBlocked());\n        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6b82b67f1e74368827f65f1158e98931e4ee78e","date":1302781200,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      } else {\n        if (docsWriter.healthiness.wasStalled) {\n          // TODO maybe this assumtion is too strickt\n          assertTrue(\" we should have blocked here numThreads: \"\n              + numThreads[i], docsWriter.healthiness.hasBlocked());\n        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 3 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(50 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (flushControl.peakNetBytes > (long)(iwc.getRAMBufferSizeMB() * 1024d * 1024d * 2d)) {\n        assertTrue(\"should be unhealthy here numThreads: \" + numThreads[i],\n            docsWriter.healthiness.wasStalled);\n      }\n\n      if (numThreads[i] == 1) { // single thread could be unhealthy is a single\n                                // doc is very large?!\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      } else {\n        if (docsWriter.healthiness.wasStalled) {\n          // TODO maybe this assumtion is too strickt\n          assertTrue(\" we should have blocked here numThreads: \"\n              + numThreads[i], docsWriter.healthiness.hasBlocked());\n        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d664ebc931641803683b25fbe4a073e2991984c","date":1302853311,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n        // this assumption is too strict in this test\n//      } else {\n//        if (docsWriter.healthiness.wasStalled) {\n//          // TODO maybe this assumtion is too strickt\n//          assertTrue(\" we should have blocked here numThreads: \"\n//              + numThreads[i], docsWriter.healthiness.hasBlocked());\n//        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      } else {\n        if (docsWriter.healthiness.wasStalled) {\n          // TODO maybe this assumtion is too strickt\n          assertTrue(\" we should have blocked here numThreads: \"\n              + numThreads[i], docsWriter.healthiness.hasBlocked());\n        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"/dev/null","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n        // this assumption is too strict in this test\n//      } else {\n//        if (docsWriter.healthiness.wasStalled) {\n//          // TODO maybe this assumtion is too strickt\n//          assertTrue(\" we should have blocked here numThreads: \"\n//              + numThreads[i], docsWriter.healthiness.hasBlocked());\n//        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b48631cad04355b1145531265cf87a095299e14","date":1304320797,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n        // this assumption is too strict in this test\n//      } else {\n//        if (docsWriter.healthiness.wasStalled) {\n//          // TODO maybe this assumtion is too strickt\n//          assertTrue(\" we should have blocked here numThreads: \"\n//              + numThreads[i], docsWriter.healthiness.hasBlocked());\n//        }\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"/dev/null","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf46d950a2020ee31dbae60879a0b0a519224524","date":1305045957,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottledIndexOutput(new ThrottledIndexOutput(ThrottledIndexOutput\n          .mBitsToBytes(40 + random.nextInt(10)), 5 + random.nextInt(5), null));\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testStallControl().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#testHealthyness().mjava","sourceNew":"  public void testStallControl() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n      \n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.flushControl.stallControl.hasBlocked());\n      }\n      if (docsWriter.flushControl.peakNetBytes > (2.d * iwc.getRAMBufferSizeMB() * 1024.d * 1024.d)) {\n        assertTrue(docsWriter.flushControl.stallControl.wasStalled);\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testHealthyness() throws InterruptedException,\n      CorruptIndexException, LockObtainFailedException, IOException {\n\n    int[] numThreads = new int[] { 4 + random.nextInt(8), 1 };\n    final int numDocumentsToIndex = 50 + random.nextInt(50);\n    for (int i = 0; i < numThreads.length; i++) {\n      AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n      MockDirectoryWrapper dir = newDirectory();\n      // mock a very slow harddisk here so that flushing is very slow\n      dir.setThrottling(MockDirectoryWrapper.Throttling.ALWAYS);\n      IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random));\n      iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      FlushPolicy flushPolicy = new FlushByRamOrCountsPolicy();\n      iwc.setFlushPolicy(flushPolicy);\n\n      DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n          numThreads[i]== 1 ? 1 : 2);\n      iwc.setIndexerThreadPool(threadPool);\n      // with such a small ram buffer we should be stalled quiet quickly\n      iwc.setRAMBufferSizeMB(0.25);\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      IndexThread[] threads = new IndexThread[numThreads[i]];\n      for (int x = 0; x < threads.length; x++) {\n        threads[x] = new IndexThread(numDocs, numThreads[i], writer,\n            lineDocFile, false);\n        threads[x].start();\n      }\n\n      for (int x = 0; x < threads.length; x++) {\n        threads[x].join();\n      }\n      DocumentsWriter docsWriter = writer.getDocsWriter();\n      assertNotNull(docsWriter);\n      DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n      assertEquals(\" all flushes must be due\", 0, flushControl.flushBytes());\n      assertEquals(numDocumentsToIndex, writer.numDocs());\n      assertEquals(numDocumentsToIndex, writer.maxDoc());\n      if (numThreads[i] == 1) {\n        assertFalse(\n            \"single thread must not stall\",\n            docsWriter.healthiness.wasStalled);\n        assertFalse(\n            \"single thread must not block numThreads: \" + numThreads[i],\n            docsWriter.healthiness.hasBlocked());\n      }\n      assertActiveBytesAfter(flushControl);\n      writer.close(true);\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d664ebc931641803683b25fbe4a073e2991984c":["a6b82b67f1e74368827f65f1158e98931e4ee78e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b48631cad04355b1145531265cf87a095299e14"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d664ebc931641803683b25fbe4a073e2991984c"],"3b48631cad04355b1145531265cf87a095299e14":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"962d04139994fce5193143ef35615499a9a96d78":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf46d950a2020ee31dbae60879a0b0a519224524":["3b48631cad04355b1145531265cf87a095299e14"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["cf46d950a2020ee31dbae60879a0b0a519224524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cf46d950a2020ee31dbae60879a0b0a519224524"],"a6b82b67f1e74368827f65f1158e98931e4ee78e":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32f306edd62f81390a6e263e8b913f089f3e98a1"]},"commit2Childs":{"9d664ebc931641803683b25fbe4a073e2991984c":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3b48631cad04355b1145531265cf87a095299e14"],"3b48631cad04355b1145531265cf87a095299e14":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cf46d950a2020ee31dbae60879a0b0a519224524"],"962d04139994fce5193143ef35615499a9a96d78":["a6b82b67f1e74368827f65f1158e98931e4ee78e"],"cf46d950a2020ee31dbae60879a0b0a519224524":["32f306edd62f81390a6e263e8b913f089f3e98a1","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["962d04139994fce5193143ef35615499a9a96d78"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a6b82b67f1e74368827f65f1158e98931e4ee78e":["9d664ebc931641803683b25fbe4a073e2991984c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}