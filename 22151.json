{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","commits":[{"id":"733e01764d06768700a194141bccb026ff24bb29","date":1357643774,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    values.offset = off;\n    values.length = count;\n    off += count;\n    ord += count;\n    return values;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    values.offset = off;\n    values.length = count;\n    off += count;\n    ord += count;\n    return values;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","sourceNew":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","sourceOld":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    values.offset = off;\n    values.length = count;\n    off += count;\n    ord += count;\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","sourceNew":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","sourceOld":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    values.offset = off;\n    values.length = count;\n    off += count;\n    ord += count;\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","sourceNew":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","sourceOld":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","sourceNew":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","sourceOld":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["733e01764d06768700a194141bccb026ff24bb29"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["eda61b1e90b490cc5837200e04c02639a0d272c7","37b84753dc1f66eba4973779932885fe42cde001"],"733e01764d06768700a194141bccb026ff24bb29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["4e6354dd7c71fe122926fc53d7d29f715b1283db","eda61b1e90b490cc5837200e04c02639a0d272c7"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","733e01764d06768700a194141bccb026ff24bb29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"eda61b1e90b490cc5837200e04c02639a0d272c7":["d4d69c535930b5cce125cff868d40f6373dc27d4","07155cdd910937cdf6877e48884d5782845c8b8b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"733e01764d06768700a194141bccb026ff24bb29":["eda61b1e90b490cc5837200e04c02639a0d272c7","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"37b84753dc1f66eba4973779932885fe42cde001":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["733e01764d06768700a194141bccb026ff24bb29","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"07155cdd910937cdf6877e48884d5782845c8b8b":["37b84753dc1f66eba4973779932885fe42cde001"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}