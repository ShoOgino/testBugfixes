{"path":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","commits":[{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}. \n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}. \n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}. \n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a43de547e9e1c752b466705f36e4d25d1b7fcb5","date":1458228327,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code Math#nextUp(lowerValue)}\n   * or {@code Math.nextDown(upperValue)}.\n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","sourceOld":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}. \n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","bugFix":null,"bugIntro":["438db4300385bd0008ea7dca4759c7a38629e604"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"438db4300385bd0008ea7dca4759c7a38629e604","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@link #nextUp(float) nextUp(lowerValue)}\n   * or {@link #nextUp(float) nextDown(upperValue)}.\n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","sourceOld":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code Math#nextUp(lowerValue)}\n   * or {@code Math.nextDown(upperValue)}.\n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","bugFix":["4a43de547e9e1c752b466705f36e4d25d1b7fcb5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FloatPoint#newRangeQuery(String,float,float).mjava","sourceNew":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@link #nextUp(float) nextUp(lowerValue)}\n   * or {@link #nextUp(float) nextDown(upperValue)}.\n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","sourceOld":"  /** \n   * Create a range query for float values.\n   * <p>\n   * This is for simple one-dimension ranges, for multidimensional ranges use\n   * {@link #newRangeQuery(String, float[], float[])} instead.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting {@code lowerValue = Float.NEGATIVE_INFINITY} or {@code upperValue = Float.POSITIVE_INFINITY}.\n   * <p> Ranges are inclusive. For exclusive ranges, pass {@code Math#nextUp(lowerValue)}\n   * or {@code Math.nextDown(upperValue)}.\n   * <p>\n   * Range comparisons are consistent with {@link Float#compareTo(Float)}.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range (inclusive).\n   * @param upperValue upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null.\n   * @return a query matching documents within this range.\n   */\n  public static Query newRangeQuery(String field, float lowerValue, float upperValue) {\n    return newRangeQuery(field, new float[] { lowerValue }, new float[] { upperValue });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a43de547e9e1c752b466705f36e4d25d1b7fcb5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"438db4300385bd0008ea7dca4759c7a38629e604":["4a43de547e9e1c752b466705f36e4d25d1b7fcb5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c422e924212367b334b4938f1fd3e44438e88c40"],"c422e924212367b334b4938f1fd3e44438e88c40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438db4300385bd0008ea7dca4759c7a38629e604"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4a43de547e9e1c752b466705f36e4d25d1b7fcb5","438db4300385bd0008ea7dca4759c7a38629e604"]},"commit2Childs":{"4a43de547e9e1c752b466705f36e4d25d1b7fcb5":["438db4300385bd0008ea7dca4759c7a38629e604","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"438db4300385bd0008ea7dca4759c7a38629e604":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4a43de547e9e1c752b466705f36e4d25d1b7fcb5"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}