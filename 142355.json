{"path":"backwards/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"/dev/null","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer());\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer());\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer());\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}