{"path":"solr/contrib/ltr/src/java/org/apache/solr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd","3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e","date":1478891880,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2459db523605752a3affcf444fb717d625904488","date":1478970978,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"2459db523605752a3affcf444fb717d625904488":["9720b151fde2073f4e401450f4574e5f31c2d0ff","eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["2459db523605752a3affcf444fb717d625904488"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e":["2459db523605752a3affcf444fb717d625904488","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2459db523605752a3affcf444fb717d625904488":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2459db523605752a3affcf444fb717d625904488","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}