{"path":"src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","commits":[{"id":"fe8ae1ed027200f075b0de9f264776fa32c4862f","date":1207066219,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","pathOld":"src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","sourceNew":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe8ae1ed027200f075b0de9f264776fa32c4862f":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fe8ae1ed027200f075b0de9f264776fa32c4862f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}