{"path":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#toString().mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#toString().mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    //I'm deliberately making this look basic and not fully detailed with class name & misc fields.\n    //Add distance in degrees, which is easier to recognize, and earth radius agnostic.\n    String dStr = String.format(\"%.1f\",distance);\n    if (ctx.isGeo()) {\n      double distDEG = ctx.getDistCalc().distanceToDegrees(distance);\n      dStr += String.format(\"=%.1f\\u00B0\",distDEG);\n    }\n    return \"Circle(\" + point + \",d=\" + dStr + ')';\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    //I'm deliberately making this look basic and not fully detailed with class name & misc fields.\n    //Add distance in degrees, which is easier to recognize, and earth radius agnostic.\n    String dStr = String.format(\"%.1f\",distance);\n    if (ctx.isGeo()) {\n      double distDEG = ctx.getDistCalc().distanceToDegrees(distance);\n      dStr += String.format(\"=%.1f\\u00B0\",distDEG);\n    }\n    return \"Circle(\" + point + \",d=\" + dStr + ')';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#toString().mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/shape/simple/GeoCircleImpl#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    //I'm deliberately making this look basic and not fully detailed with class name & misc fields.\n    //Add distance in degrees, which is easier to recognize, and earth radius agnostic.\n    String dStr = String.format(\"%.1f\",distance);\n    if (ctx.isGeo()) {\n      double distDEG = ctx.getDistCalc().distanceToDegrees(distance);\n      dStr += String.format(\"=%.1f\\u00B0\",distDEG);\n    }\n    return \"Circle(\" + point + \",d=\" + dStr + ')';\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    //I'm deliberately making this look basic and not fully detailed with class name & misc fields.\n    //Add distance in degrees, which is easier to recognize, and earth radius agnostic.\n    String dStr = String.format(\"%.1f\",distance);\n    if (ctx.isGeo()) {\n      double distDEG = ctx.getDistCalc().distanceToDegrees(distance);\n      dStr += String.format(\"=%.1f\\u00B0\",distDEG);\n    }\n    return \"Circle(\" + point + \",d=\" + dStr + ')';\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}