{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","commits":[{"id":"db505911df79fefd49f29212e44226b35e9e02e1","date":1496414878,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = 0;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n    return num.doubleValue();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = 0;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n    return num.doubleValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null)  {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#parseDouble(String,Object).mjava","sourceNew":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","sourceOld":"  public static Double parseDouble(String name, Object val) {\n    if (val == null) return null;\n    if (val instanceof Double) return (Double) val;\n    Number num = null;\n    if (val instanceof String) {\n      try {\n        num = Double.parseDouble((String) val);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(name + \": \" + val + \"not a valid number\", e);\n      }\n\n    } else if (val instanceof Number) {\n      num = (Number) val;\n    }\n\n    if (num != null) {\n      return num.doubleValue();\n    }\n    throw new RuntimeException(name + \": \" + val + \"not a valid number\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db505911df79fefd49f29212e44226b35e9e02e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["db505911df79fefd49f29212e44226b35e9e02e1"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","db505911df79fefd49f29212e44226b35e9e02e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db505911df79fefd49f29212e44226b35e9e02e1":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}