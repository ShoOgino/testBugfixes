{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f607a0a2e930f55385c7a24afb68ef661ef7e3ee","date":1530823671,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","sourceOld":"  @Test\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","date":1532119025,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","sourceNew":"  @Test\n// commented 20-July-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"accb6371832b400c702fc3098d9712b8ba2e204f","date":1543676293,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","sourceNew":"  @Test\n// commented 20-July-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(15000));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","sourceOld":"  @Test\n// commented 20-July-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(true));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62179a72dc4babc5bfb628588fe8d3569207915d","date":1543690978,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","sourceNew":"  @Test\n// commented 20-July-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(15000); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(15000));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","sourceOld":"  @Test\n// commented 20-July-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(true); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(15000));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistributedQueue#testDistributedQueue().mjava","sourceNew":null,"sourceOld":"  @Test\n// commented 20-July-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testDistributedQueue() throws Exception {\n    String dqZNode = \"/distqueue/test1\";\n    byte[] data = \"hello world\".getBytes(UTF8);\n\n    DistributedQueue dq = makeDistributedQueue(dqZNode);\n\n    // basic ops\n    assertNull(dq.poll());\n    try {\n      dq.remove();\n      fail(\"NoSuchElementException expected\");\n    } catch (NoSuchElementException expected) {\n      // expected\n    }\n\n    dq.offer(data);\n    assertArrayEquals(dq.peek(500), data);\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    assertArrayEquals(dq.take(), data); // waits for data\n    assertNull(dq.poll());\n\n    dq.offer(data);\n    dq.peek(15000); // wait until data is definitely there before calling remove\n    assertArrayEquals(dq.remove(), data);\n    assertNull(dq.poll());\n\n    // should block until the background thread makes the offer\n    (new QueueChangerThread(dq, 1000)).start();\n    assertNotNull(dq.peek(15000));\n    assertNotNull(dq.remove());\n    assertNull(dq.poll());\n\n    // timeout scenario ... background thread won't offer until long after the peek times out\n    QueueChangerThread qct = new QueueChangerThread(dq, 1000);\n    qct.start();\n    assertNull(dq.peek(500));\n    qct.join();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","f607a0a2e930f55385c7a24afb68ef661ef7e3ee"],"3f504512a03d978990cbff30db0522b354e846db":["62179a72dc4babc5bfb628588fe8d3569207915d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["f607a0a2e930f55385c7a24afb68ef661ef7e3ee"],"f607a0a2e930f55385c7a24afb68ef661ef7e3ee":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"accb6371832b400c702fc3098d9712b8ba2e204f":["15600ceffc7023bfa1f532afbf1854e7f8c4e6d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"62179a72dc4babc5bfb628588fe8d3569207915d":["accb6371832b400c702fc3098d9712b8ba2e204f"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","f607a0a2e930f55385c7a24afb68ef661ef7e3ee"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"15600ceffc7023bfa1f532afbf1854e7f8c4e6d3":["accb6371832b400c702fc3098d9712b8ba2e204f"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f607a0a2e930f55385c7a24afb68ef661ef7e3ee","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f607a0a2e930f55385c7a24afb68ef661ef7e3ee":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","15600ceffc7023bfa1f532afbf1854e7f8c4e6d3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"accb6371832b400c702fc3098d9712b8ba2e204f":["62179a72dc4babc5bfb628588fe8d3569207915d"],"62179a72dc4babc5bfb628588fe8d3569207915d":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}