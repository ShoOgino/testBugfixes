{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    defaults.put(\"int\", new Integer(0));\n    defaults.put(\"long\", new Long(0));\n    defaults.put(\"float\", new Float(0));\n    defaults.put(\"double\", new Double(0));\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    defaults.put(\"int\", new Integer(0));\n    defaults.put(\"long\", new Long(0));\n    defaults.put(\"float\", new Float(0));\n    defaults.put(\"double\", new Double(0));\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    defaults.put(\"int\", new Integer(0));\n    defaults.put(\"long\", new Long(0));\n    defaults.put(\"float\", new Float(0));\n    defaults.put(\"double\", new Double(0));\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    defaults.put(\"int\", new Integer(0));\n    defaults.put(\"long\", new Long(0));\n    defaults.put(\"float\", new Float(0));\n    defaults.put(\"double\", new Double(0));\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n\n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n\n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n\n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n\n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n\n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n\n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n\n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n\n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n\n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n\n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n\n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n\n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n\n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n\n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n\n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n\n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n\n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n\n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n\n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n\n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n\n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n\n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n\n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n\n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n\n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n\n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n\n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n\n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n\n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n\n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n\n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n\n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n\n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n\n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n\n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n\n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n\n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n\n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n\n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n\n    defaults.put(\"int\", 0);\n    defaults.put(\"long\", 0L);\n    defaults.put(\"float\", (float) 0);\n    defaults.put(\"double\", (double) 0);\n    defaults.put(\"date\", \"1800-12-31T23:59:59Z\");\n    defaults.put(\"string\", \"str0\");\n\n    //INT\n    intDateTestStart = new ArrayList<>();\n    intDateTestMissing = new ArrayList<>();\n    intStringTestStart = new ArrayList<>();\n    intStringTestMissing = new ArrayList<>();\n    \n    //LONG\n    longDateTestStart = new ArrayList<>();\n    longDateTestMissing = new ArrayList<>();\n    longStringTestStart = new ArrayList<>();\n    longStringTestMissing = new ArrayList<>();\n    \n    //FLOAT\n    floatDateTestStart = new ArrayList<>();\n    floatDateTestMissing = new ArrayList<>();\n    floatStringTestStart = new ArrayList<>();\n    floatStringTestMissing = new ArrayList<>();\n    \n    //DOUBLE\n    doubleDateTestStart = new ArrayList<>();\n    doubleDateTestMissing = new ArrayList<>();\n    doubleStringTestStart = new ArrayList<>();\n    doubleStringTestMissing = new ArrayList<>();\n    \n    //DATE\n    dateIntTestStart = new ArrayList<>();\n    dateIntTestMissing = new ArrayList<>();\n    dateLongTestStart = new ArrayList<>();\n    dateLongTestMissing = new ArrayList<>();\n    \n    //String\n    stringIntTestStart = new ArrayList<>();\n    stringIntTestMissing = new ArrayList<>();\n    stringLongTestStart = new ArrayList<>();\n    stringLongTestMissing = new ArrayList<>();\n    \n    //Multi-Valued\n    multiLongTestStart = new ArrayList<>();\n    multiLongTestMissing = new ArrayList<>();\n    multiStringTestStart = new ArrayList<>();\n    multiStringTestMissing = new ArrayList<>();\n    multiDateTestStart = new ArrayList<>();\n    multiDateTestMissing = new ArrayList<>();\n    \n    boolean multiCanHaveDuplicates = Boolean.getBoolean(NUMERIC_POINTS_SYSPROP);\n\n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT;\n      long l = j%LONG;\n      long lm = j%LONGM;\n      float f = j%FLOAT;\n      double d = j%DOUBLE;\n      int dt = j%DATE;\n      int dtm = j%DATEM;\n      int s = j%STRING;\n      int sm = j%STRINGM;\n      \n\n      List<String> fields = new ArrayList<>();\n      fields.add(\"id\"); fields.add(\"1000\"+j);\n      \n      if( i != 0 ) {\n        fields.add(\"int_id\"); fields.add(\"\" + i);\n      }\n      if( l != 0l ) {\n        fields.add(\"long_ld\"); fields.add(\"\" + l);\n        fields.add(\"long_ldm\"); fields.add(\"\" + l);\n      }\n      if( lm != 0l ) {\n        fields.add(\"long_ldm\"); fields.add(\"\" + lm);\n      }\n      if( f != 0.0f ) {\n        fields.add(\"float_fd\"); fields.add(\"\" + f);\n      }\n      if( d != 0.0d ) {\n        fields.add(\"double_dd\"); fields.add(\"\" + d);\n      }\n      if( dt != 0 ) {\n        fields.add(\"date_dtd\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n        fields.add(\"date_dtdm\"); fields.add((1800+dt) + \"-12-31T23:59:59Z\");\n      }\n      if ( dtm != 0 ) {\n        fields.add(\"date_dtdm\"); fields.add((1800+dtm) + \"-12-31T23:59:59Z\");\n      }\n      if ( s != 0 ) {\n        fields.add(\"string_sd\"); fields.add(\"str\" + s);\n        fields.add(\"string_sdm\"); fields.add(\"str\" + s);\n      }\n      if ( sm != 0 ) {\n        fields.add(\"string_sdm\"); fields.add(\"str\" + sm);\n      }\n      assertU(adoc(fields.toArray(new String[0])));\n      \n      if( dt != 0 ) {\n        //Dates\n        if ( j-DATE < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intDateTestMissing.add(0l);\n          } else {\n            intDateTestMissing.add(1l);\n          }\n          intDateTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longDateTestMissing.add(0l);\n          } else {\n            longDateTestMissing.add(1l);\n          }\n          longDateTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if ( f != 0.0f ) {\n            list3.add(f);\n            floatDateTestMissing.add(0l);\n          } else {\n            floatDateTestMissing.add(1l);\n            \n          }\n          floatDateTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleDateTestMissing.add(0l);\n          } else {\n            doubleDateTestMissing.add(1l);\n          }\n          doubleDateTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n            \n          }\n          multiDateTestStart.add(list5);\n        } else {\n          if( i != 0 ) intDateTestStart.get(dt-1).add(i); else increment(intDateTestMissing,dt-1);\n          if( l != 0l ) longDateTestStart.get(dt-1).add(l); else increment(longDateTestMissing,dt-1);\n          if( f != 0.0f ) floatDateTestStart.get(dt-1).add(f); else increment(floatDateTestMissing,dt-1);\n          if( d != 0.0d ) doubleDateTestStart.get(dt-1).add(d); else increment(doubleDateTestMissing,dt-1);\n          if( i != 0 ) multiDateTestStart.get(dt-1).add(i); else increment(multiDateTestMissing,dt-1);\n        }\n      }\n      \n      if ( dtm != 0 ) {\n        if ( j-DATEM < 0 && dtm != dt ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiDateTestMissing.add(0l);\n          } else {\n            multiDateTestMissing.add(1l);\n          }\n          multiDateTestStart.add(list1);\n        } else if ( dtm != dt || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiDateTestStart.get(dtm-1).add(i); else increment(multiDateTestMissing,dtm-1);\n        }\n      }\n      \n      if( s != 0 ){\n        //Strings\n        if ( j-STRING < 0 ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            intStringTestMissing.add(0l);\n          } else {\n            intStringTestMissing.add(1l);\n          }\n          intStringTestStart.add(list1);\n          ArrayList<Long> list2 = new ArrayList<>();\n          if( l != 0l ) {\n            list2.add(l);\n            longStringTestMissing.add(0l);\n          } else {\n            longStringTestMissing.add(1l);\n          }\n          longStringTestStart.add(list2);\n          ArrayList<Float> list3 = new ArrayList<>();\n          if( f != 0.0f ){\n            list3.add(f);\n            floatStringTestMissing.add(0l);\n          } else {\n            floatStringTestMissing.add(1l);\n          }\n          floatStringTestStart.add(list3);\n          ArrayList<Double> list4 = new ArrayList<>();\n          if( d != 0.0d ) {\n            list4.add(d);\n            doubleStringTestMissing.add(0l);\n          } else {\n            doubleStringTestMissing.add(1l);\n          }\n          doubleStringTestStart.add(list4);\n          ArrayList<Integer> list5 = new ArrayList<>();\n          if( i != 0 ) {\n            list5.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list5);\n        } else {\n          if( i != 0 ) intStringTestStart.get(s-1).add(i); else increment(intStringTestMissing,s-1);\n          if( l != 0l ) longStringTestStart.get(s-1).add(l); else increment(longStringTestMissing,s-1);\n          if( f != 0.0f ) floatStringTestStart.get(s-1).add(f); else increment(floatStringTestMissing,s-1);\n          if( d != 0.0d ) doubleStringTestStart.get(s-1).add(d); else increment(doubleStringTestMissing,s-1);\n          if( i != 0 ) multiStringTestStart.get(s-1).add(i); else increment(multiStringTestMissing,s-1);\n        }\n      }\n      \n      //Strings\n      if( sm != 0 ){\n        if ( j-STRINGM < 0 && sm != s ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ){\n            list1.add(i);\n            multiStringTestMissing.add(0l);\n          } else {\n            multiStringTestMissing.add(1l);\n          }\n          multiStringTestStart.add(list1);\n        } else if ( sm != s ) {\n          if( i != 0 ) multiStringTestStart.get(sm-1).add(i); else increment(multiStringTestMissing,sm-1);\n        }\n      }\n      \n      //Int\n      if( i != 0 ) {\n        if ( j-INT < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateIntTestMissing.add(0l);\n          } else {\n            dateIntTestMissing.add(1l);\n          }\n          dateIntTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringIntTestMissing.add(0l);\n          } else {\n            stringIntTestMissing.add(1l);\n          }\n          stringIntTestStart.add(list2);\n        } else {\n          if( dt != 0 ) dateIntTestStart.get(i-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateIntTestMissing,i-1);\n          if( s != 0 ) stringIntTestStart.get(i-1).add(\"str\"+s); else increment(stringIntTestMissing,i-1);\n        }\n      }\n      \n      //Long\n      if( l != 0 ) {\n        if ( j-LONG < 0 ) {\n          ArrayList<String> list1 = new ArrayList<>();\n          if( dt != 0 ){\n            list1.add((1800+dt) + \"-12-31T23:59:59Z\");\n            dateLongTestMissing.add(0l);\n          } else {\n            dateLongTestMissing.add(1l);\n          }\n          dateLongTestStart.add(list1);\n          ArrayList<String> list2 = new ArrayList<>();\n          if( s != 0 ) {\n            list2.add(\"str\"+s);\n            stringLongTestMissing.add(0l);\n          } else {\n            stringLongTestMissing.add(1l);\n          }\n          stringLongTestStart.add(list2);\n          ArrayList<Integer> list3 = new ArrayList<>();\n          if( i != 0 ) {\n            list3.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list3);\n        } else {\n          if( dt != 0 ) dateLongTestStart.get((int)l-1).add((1800+dt) + \"-12-31T23:59:59Z\"); else increment(dateLongTestMissing,(int)l-1);\n          if( s != 0 ) stringLongTestStart.get((int)l-1).add(\"str\"+s); else increment(stringLongTestMissing,(int)l-1);\n          if( i != 0 ) multiLongTestStart.get((int)l-1).add(i); else increment(multiLongTestMissing,(int)l-1);\n        }\n      }\n      \n      //Long\n      if( lm != 0 ) {\n        if ( j-LONGM < 0 && lm != l ) {\n          ArrayList<Integer> list1 = new ArrayList<>();\n          if( i != 0 ) {\n            list1.add(i);\n            multiLongTestMissing.add(0l);\n          } else {\n            multiLongTestMissing.add(1l);\n          }\n          multiLongTestStart.add(list1);\n        } else if ( lm != l || multiCanHaveDuplicates ) {\n          if( i != 0 ) multiLongTestStart.get((int)lm-1).add(i); else increment( multiLongTestMissing,(int)lm-1);\n        }\n      }\n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit());\n    String[] reqFacetParamas = fileToStringArr(LegacyFieldFacetTest.class, fileName);\n    String[] reqParamas = new String[reqFacetParamas.length + 2];\n    System.arraycopy(reqFacetParamas, 0, reqParamas, 0, reqFacetParamas.length);\n    reqParamas[reqFacetParamas.length] = \"solr\";\n    reqParamas[reqFacetParamas.length+1] = \"asc\";\n    setResponse(h.query(request(reqFacetParamas)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["3bd4c6955956e76c96eb12dfe64108ed03522983","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["3bd4c6955956e76c96eb12dfe64108ed03522983","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["628903f37b6c442da0d390db1c6af9a0e74d41a7","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["1e4e64b7199d2f2a17be7f3926c7532553910dce","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}