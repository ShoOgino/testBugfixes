{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  /** returns an address instance for variable-length binary values.\n   *  @lucene.internal */\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values.\n   *  @lucene.internal */\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values.\n   *  @lucene.internal */\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1","date":1402428035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values.\n   *  @lucene.internal */\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values.\n   *  @lucene.internal */\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":["db1893644d5f20456c9524b28e826293d767db65"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae889c32f4f301251f60804d7082a520e0594c6","date":1402924441,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values.\n   *  @lucene.internal */\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values.\n   *  @lucene.internal */\n  protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#getAddressInstance(IndexInput,FieldInfo,BinaryEntry).mjava","sourceNew":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","sourceOld":"  /** returns an address instance for variable-length binary values. */\n  private MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldInfo field, BinaryEntry bytes) throws IOException {\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        addrInstance = MonotonicBlockPackedReader.of(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count+1, false);\n        addressInstances.put(field.number, addrInstance);\n        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      addresses = addrInstance;\n    }\n    return addresses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db1893644d5f20456c9524b28e826293d767db65":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["6ae889c32f4f301251f60804d7082a520e0594c6"],"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1":["db1893644d5f20456c9524b28e826293d767db65"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ae889c32f4f301251f60804d7082a520e0594c6":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1","6ae889c32f4f301251f60804d7082a520e0594c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["6ae889c32f4f301251f60804d7082a520e0594c6","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"db1893644d5f20456c9524b28e826293d767db65":["2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"2ffc57bc5131bbdc981a8ebf5d8d99af0cb65dc1":["6ae889c32f4f301251f60804d7082a520e0594c6","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["db1893644d5f20456c9524b28e826293d767db65"],"6ae889c32f4f301251f60804d7082a520e0594c6":["4cc45c615dbb82bf79d5f9550286098367874fbf","c6f080a2ab37c464dd98db173f6cbf10dc74f211","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}