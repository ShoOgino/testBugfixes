{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n    \n    // Create a rangeFacetAccumulator for each range and \n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      \n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n    \n    // Create a rangeFacetAccumulator for each range and \n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      \n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n    \n    // Create a rangeFacetAccumulator for each range and \n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      \n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n\n    // Create a rangeFacetAccumulator for each range and\n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n    \n    // Create a rangeFacetAccumulator for each range and \n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      \n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n\n    // Create a rangeFacetAccumulator for each range and\n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n    \n    // Create a rangeFacetAccumulator for each range and \n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      \n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","date":1586897159,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/facet/RangeFacet#createFacetValueExecuters(Filter,SolrQueryRequest,Consumer[FacetValueQueryExecuter]).mjava","sourceNew":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n\n    // Create a rangeFacetAccumulator for each range and\n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = QueryUtils.combineQueryAndFilter(q, filter);\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {\n    // Computes the end points of the ranges in the rangeFacet\n    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);\n    final SchemaField sf = field;\n\n    // Create a rangeFacetAccumulator for each range and\n    // collect the documents for that range.\n    for (FacetRange range : rec.getRanges()) {\n      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);\n      // The searcher sends docIds to the RangeFacetAccumulator which forwards\n      // them to <code>collectRange()</code> in this class for collection.\n      Query rangeQuery = new BooleanQuery.Builder()\n          .add(q, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n\n      ReductionDataCollection dataCol = collectionManager.newDataCollection();\n      reductionData.put(range.toString(), dataCol);\n      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"]},"commit2Childs":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e4e64b7199d2f2a17be7f3926c7532553910dce":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}