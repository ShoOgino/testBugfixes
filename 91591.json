{"path":"contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","commits":[{"id":"74be754ec3ab6906922b673bf951696c442123b2","date":1135778260,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    return searcher.search(query).length();\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    return searcher.search(query).length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c17fa33b8cd4b405520d79d66068f22b39f92ef1","date":1249062064,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query).length();\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    return searcher.search(query).length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query).length();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestRegexQuery#spanRegexQueryNrHits(String,String,int,boolean).mjava","sourceNew":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","sourceOld":"  private int  spanRegexQueryNrHits(String regex1, String regex2, int slop, boolean ordered) throws Exception {\n    SpanRegexQuery srq1 = new SpanRegexQuery( newTerm(regex1));\n    SpanRegexQuery srq2 = new SpanRegexQuery( newTerm(regex2));\n    SpanNearQuery query = new SpanNearQuery( new SpanQuery[]{srq1, srq2}, slop, ordered);\n    \n    return searcher.search(query, null, 1000).totalHits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c17fa33b8cd4b405520d79d66068f22b39f92ef1":["74be754ec3ab6906922b673bf951696c442123b2"],"74be754ec3ab6906922b673bf951696c442123b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["c17fa33b8cd4b405520d79d66068f22b39f92ef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"c17fa33b8cd4b405520d79d66068f22b39f92ef1":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"74be754ec3ab6906922b673bf951696c442123b2":["c17fa33b8cd4b405520d79d66068f22b39f92ef1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74be754ec3ab6906922b673bf951696c442123b2"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}