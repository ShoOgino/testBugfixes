{"path":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","pathOld":"backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer()) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer()) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testStarParsing().mjava","sourceNew":null,"sourceOld":"  public void testStarParsing() throws Exception {\n    final int[] type = new int[1];\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new WhitespaceAnalyzer()) {\n      @Override\n      protected Query getWildcardQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=1;\n        return new TermQuery(new Term(field,termStr));\n      }\n      @Override\n      protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n        // override error checking of superclass\n        type[0]=2;        \n        return new TermQuery(new Term(field,termStr));\n      }\n\n      @Override\n      protected Query getFieldQuery(String field, String queryText) throws ParseException {\n        type[0]=3;\n        return super.getFieldQuery(field, queryText);\n      }\n    };\n\n    TermQuery tq;\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n\n    tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    assertEquals(\"zoo\",tq.getTerm().text());\n    assertEquals(2,type[0]);\n    assertEquals(tq.getBoost(),2,0);\n\n    tq = (TermQuery)qp.parse(\"foo:*\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be a valid prefix query in the future too\n\n    tq = (TermQuery)qp.parse(\"foo:*^2\");\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n    assertEquals(tq.getBoost(),2,0);    \n\n    tq = (TermQuery)qp.parse(\"*:foo\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"foo\",tq.getTerm().text());\n    assertEquals(3,type[0]);\n\n    tq = (TermQuery)qp.parse(\"*:*\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);  // could be handled as a prefix query in the future\n\n     tq = (TermQuery)qp.parse(\"(*:*)\");\n    assertEquals(\"*\",tq.getTerm().field());\n    assertEquals(\"*\",tq.getTerm().text());\n    assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}