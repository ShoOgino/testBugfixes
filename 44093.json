{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","commits":[{"id":"77d6144bb77983c683128c11b708057809173cff","date":1317852535,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3a23c50842ff5508c8cf403efde22f0255055700"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_ignoreCase().mjava","sourceNew":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n  }\n\n","sourceOld":"  @Test\n  public void testStem_ignoreCase() throws IOException, ParseException {\n    List<HunspellStemmer.Stem> stems;\n    createStemmer(true);\n\n    stems = stemmer.stem(\"apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"APACHE\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n\n    stems = stemmer.stem(\"Apache\");\n    assertEquals(1, stems.size());\n    assertEquals(\"apach\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Foos\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n    \n    stems = stemmer.stem(\"Food\");\n    assertEquals(1, stems.size());\n    assertEquals(\"foo\", stems.get(0).getStemString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77d6144bb77983c683128c11b708057809173cff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77d6144bb77983c683128c11b708057809173cff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77d6144bb77983c683128c11b708057809173cff"],"77d6144bb77983c683128c11b708057809173cff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}