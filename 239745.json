{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","sourceNew":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    InputStreamReader isr = new InputStreamReader(getClass().getResourceAsStream(\"data.txt\"), \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n  }\n\n","sourceOld":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    InputStreamReader isr = new InputStreamReader(getClass().getResourceAsStream(\"data.txt\"), \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/de/TestGermanStemFilter#testStemming().mjava","sourceNew":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    InputStreamReader isr = new InputStreamReader(getClass().getResourceAsStream(\"data.txt\"), \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n  }\n\n","sourceOld":"  public void testStemming() throws Exception {\n    Tokenizer tokenizer = new KeywordTokenizer(new StringReader(\"\"));\n    TokenFilter filter = new GermanStemFilter(new LowerCaseFilter(TEST_VERSION_CURRENT, tokenizer));\n    // read test cases from external file:\n    InputStreamReader isr = new InputStreamReader(getClass().getResourceAsStream(\"data.txt\"), \"iso-8859-1\");\n    BufferedReader breader = new BufferedReader(isr);\n    while(true) {\n      String line = breader.readLine();\n      if (line == null)\n        break;\n      line = line.trim();\n      if (line.startsWith(\"#\") || line.equals(\"\"))\n        continue;    // ignore comments and empty lines\n      String[] parts = line.split(\";\");\n      //System.out.println(parts[0] + \" -- \" + parts[1]);\n      tokenizer.reset(new StringReader(parts[0]));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] { parts[1] });\n    }\n    breader.close();\n    isr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}