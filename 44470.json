{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int,int).mjava","commits":[{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish(FieldInfos fis, int numDocs) throws IOException {\n          assert numDocs == numDocsWritten;\n          // nocommit: hopefully indexwriter is responsible for \"filling\" like it does stored fields!\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6295f14d43685811599f8a8f02a63d75ec6bd8fe","date":1353248103,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes\n          SimpleTextUtil.write(data, value);\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f176b7bac2a187d69335c079b1f923449fb2881f","date":1353257308,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int,int).mjava","sourceNew":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength, final int numDocs) throws IOException {\n      writeFieldEntry(field);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f176b7bac2a187d69335c079b1f923449fb2881f":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["f176b7bac2a187d69335c079b1f923449fb2881f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce73f585d17f53055185a19beb46db23d76e0ad9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f176b7bac2a187d69335c079b1f923449fb2881f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f176b7bac2a187d69335c079b1f923449fb2881f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}