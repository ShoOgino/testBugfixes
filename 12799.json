{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","commits":[{"id":"4768021ba34ebadac4585e912bccd53d943cfb40","date":1362142240,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    StoredDocument doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    StoredDocument doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<Term>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    StoredDocument doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    StoredDocument doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    q.extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    StoredDocument doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    StoredDocument doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 0.3f, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 0.3f, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, ScoreMode.COMPLETE, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, ScoreMode.COMPLETE, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, true, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/FuzzyLikeThisQueryTest#testNonExistingField().mjava","sourceNew":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    q.visit(QueryVisitor.termCollector(queryTerms));\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","sourceOld":"  // LUCENE-4809\n  public void testNonExistingField() throws Throwable {\n    FuzzyLikeThisQuery flt = new FuzzyLikeThisQuery(10, analyzer);\n    flt.addTerms(\"jonathin smoth\", \"name\", 2, 1);\n    flt.addTerms(\"jonathin smoth\", \"this field does not exist\", 2, 1);\n    // don't fail here just because the field doesn't exits\n    Query q = flt.rewrite(searcher.getIndexReader());\n    HashSet<Term> queryTerms = new HashSet<>();\n    searcher.createWeight(q, ScoreMode.COMPLETE, 1f).extractTerms(queryTerms);\n    assertTrue(\"Should have variant jonathan\", queryTerms.contains(new Term(\"name\", \"jonathan\")));\n    assertTrue(\"Should have variant smith\", queryTerms.contains(new Term(\"name\", \"smith\")));\n    TopDocs topDocs = searcher.search(flt, 1);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertTrue(\"score docs must match 1 doc\", (sd != null) && (sd.length > 0));\n    Document doc = searcher.doc(sd[0].doc);\n    assertEquals(\"Should match most similar when using 2 words\", \"2\", doc.get(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4768021ba34ebadac4585e912bccd53d943cfb40"],"05c52ac194342b760b830342ee8423fcf00e54d0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["417142ff08fda9cf0b72d5133e63097a166c6458"],"89424def13674ea17829b41c5883c54ecc31a132":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"],"417142ff08fda9cf0b72d5133e63097a166c6458":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","9fc47cb7b4346802411bb432f501ed0673d7119e"],"4768021ba34ebadac4585e912bccd53d943cfb40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","89424def13674ea17829b41c5883c54ecc31a132"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["05c52ac194342b760b830342ee8423fcf00e54d0"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["05c52ac194342b760b830342ee8423fcf00e54d0"],"05c52ac194342b760b830342ee8423fcf00e54d0":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4768021ba34ebadac4585e912bccd53d943cfb40":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4768021ba34ebadac4585e912bccd53d943cfb40"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["b9c5c0e8e826d8fd169840564bcf8606cf81d15b","89424def13674ea17829b41c5883c54ecc31a132","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}