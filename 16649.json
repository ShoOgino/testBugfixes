{"path":"src/java/org/apache/solr/common/SolrInputField#addValue(Object,Float).mjava","commits":[{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrInputField#addValue(Object,Float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, Float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    if( b != null ) {\n      boost *= b.floatValue();\n    }\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["974ef146a791a4fadf1226b30089cd7ad7d2983f","974ef146a791a4fadf1226b30089cd7ad7d2983f","974ef146a791a4fadf1226b30089cd7ad7d2983f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a51897f565610bcb8cd260561430de517d3de46","date":1183391823,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrInputField#addValue(Object,float).mjava","pathOld":"src/java/org/apache/solr/common/SolrInputField#addValue(Object,Float).mjava","sourceNew":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    boost *= b;\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","sourceOld":"  /**\n   * Add values to a field.  if the added value is a collection, each value\n   * will be added individually\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void addValue(Object v, Float b) {\n    if( value == null ) {\n      setValue(v, b);\n      return;\n    }\n    \n    // The lucene API and solr XML field specification make it possible to set boosts\n    // on multi-value fields even though lucene indexing does not support this.\n    // To keep behavior consistent with what happens in the lucene index, we accumulate\n    // the product of all boosts specified for this field.\n    if( b != null ) {\n      boost *= b.floatValue();\n    }\n    \n    Collection<Object> vals = null;\n    if( value instanceof Collection ) {\n      vals = (Collection<Object>)value;\n    }\n    else {\n      vals = new ArrayList<Object>( 3 );\n      vals.add( value );\n      value = vals;\n    }\n    \n    // Add the new values to a collection\n    if( v instanceof Iterable ) {\n      for( Object o : (Iterable<Object>)v ) {\n        vals.add( o );\n      }\n    }\n    else if( v instanceof Object[] ) {\n      for( Object o : (Object[])v ) {\n        vals.add( o );\n      }\n    }\n    else {\n      vals.add( v );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9a51897f565610bcb8cd260561430de517d3de46":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["9a51897f565610bcb8cd260561430de517d3de46"],"9a51897f565610bcb8cd260561430de517d3de46":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9a51897f565610bcb8cd260561430de517d3de46","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}