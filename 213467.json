{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmakr timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.debug(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61655e38c2bbf0c3157cece14985b14dde2899af","date":1445352399,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.debug(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmakr timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.debug(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.debug(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.debug(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.debug(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc","date":1507866341,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // check what's there in target before sending further\n      printDocsFromTargetForAdditionalDebugging();\n\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        //additional logging\n        List entry = (List) o;\n        log.info(\"cdcr: current tlog entry in replicator: \" + entry);\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786","date":1508967813,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // check what's there in target before sending further\n      printDocsFromTargetForAdditionalDebugging();\n\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        //additional logging\n        List entry = (List) o;\n        log.info(\"cdcr: current tlog entry in replicator: \" + entry);\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isTargetCluster(o)) {\n          continue;\n        }\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isTargetCluster(o)) {\n          continue;\n        }\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isTargetCluster(o)) {\n          continue;\n        }\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isTargetCluster(o)) {\n          continue;\n        }\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isTargetCluster(o)) {\n          continue;\n        }\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n      }\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isTargetCluster(o)) {\n          continue;\n        }\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicator#run().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void run() {\n    CdcrUpdateLog.CdcrLogReader logReader = state.getLogReader();\n    CdcrUpdateLog.CdcrLogReader subReader = null;\n    if (logReader == null) {\n      log.warn(\"Log reader for target {} is not initialised, it will be ignored.\", state.getTargetCollection());\n      return;\n    }\n\n    try {\n      // create update request\n      UpdateRequest req = new UpdateRequest();\n      // Add the param to indicate the {@link CdcrUpdateProcessor} to keep the provided version number\n      req.setParam(CdcrUpdateProcessor.CDCR_UPDATE, \"\");\n\n      // Start the benchmark timer\n      state.getBenchmarkTimer().start();\n\n      long counter = 0;\n      subReader = logReader.getSubReader();\n\n      for (int i = 0; i < batchSize; i++) {\n        Object o = subReader.next();\n        if (o == null) break; // we have reached the end of the update logs, we should close the batch\n\n        if (isTargetCluster(o)) {\n          continue;\n        }\n\n        if (isDelete(o)) {\n\n          /*\n          * Deletes are sent one at a time.\n          */\n\n          // First send out current batch of SolrInputDocument, the non-deletes.\n          List<SolrInputDocument> docs = req.getDocuments();\n\n          if (docs != null && docs.size() > 0) {\n            subReader.resetToLastPosition(); // Push back the delete for now.\n            this.sendRequest(req); // Send the batch update request\n            logReader.forwardSeek(subReader); // Advance the main reader to just before the delete.\n            o = subReader.next(); // Read the delete again\n            counter += docs.size();\n            req.clear();\n          }\n\n          // Process Delete\n          this.processUpdate(o, req);\n          this.sendRequest(req);\n          logReader.forwardSeek(subReader);\n          counter++;\n          req.clear();\n\n        } else {\n\n          this.processUpdate(o, req);\n\n        }\n      }\n\n      //Send the final batch out.\n      List<SolrInputDocument> docs = req.getDocuments();\n\n      if ((docs != null && docs.size() > 0)) {\n        this.sendRequest(req);\n        counter += docs.size();\n      }\n\n      // we might have read a single commit operation and reached the end of the update logs\n      logReader.forwardSeek(subReader);\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Forwarded {} updates to target {}\", counter, state.getTargetCollection());\n      }\n    } catch (Exception e) {\n      // report error and update error stats\n      this.handleException(e);\n    } finally {\n      // stop the benchmark timer\n      state.getBenchmarkTimer().stop();\n      // ensure that the subreader is closed and the associated pointer is removed\n      if (subReader != null) subReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"61655e38c2bbf0c3157cece14985b14dde2899af":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["61655e38c2bbf0c3157cece14985b14dde2899af"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["61655e38c2bbf0c3157cece14985b14dde2899af","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["61655e38c2bbf0c3157cece14985b14dde2899af","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"61655e38c2bbf0c3157cece14985b14dde2899af":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"86290366cefc1b9d4eced13b430858c4a4c0421d":["61655e38c2bbf0c3157cece14985b14dde2899af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}