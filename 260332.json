{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link LongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link NumericDocValues} over the values found in documents in the given\n   * field. If the field was indexed as {@link NumericDocValuesField}, it simply\n   * uses {@link org.apache.lucene.index.LeafReader#getNumericDocValues(String)} to read the values.\n   * Otherwise, it checks the internal cache for an appropriate entry, and if\n   * none is found, reads the terms/points in <code>field</code> as longs and returns\n   * an array of size <code>reader.maxDoc()</code> of the value each document\n   * has in the given field.\n   * \n   * @param reader\n   *          Used to get field values.\n   * @param field\n   *          Which field contains the longs.\n   * @param parser\n   *          Computes long for string values. May be {@code null} if the\n   *          requested field was indexed as {@link NumericDocValuesField} or\n   *          {@link org.apache.lucene.document.LegacyLongField}.\n   * @param setDocsWithField\n   *          If true then {@link #getDocsWithField} will also be computed and\n   *          stored in the FieldCache.\n   * @return The values in the given field for each document.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"770342641f7b505eaa8dccdc666158bff2419109":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["770342641f7b505eaa8dccdc666158bff2419109"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}