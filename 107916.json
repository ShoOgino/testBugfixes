{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","commits":[{"id":"fdc91c6aee685b616507b9e44fcc69315b8a9e6c","date":1384275771,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery bq = new BooleanQuery(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      PrefixQuery prefix = new PrefixQuery(new Term(entry.getKey(), text));\n      prefix.setBoost(entry.getValue());\n      bq.add(prefix, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","sourceNew":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      PrefixQuery prefix = new PrefixQuery(new Term(entry.getKey(), text));\n      prefix.setBoost(entry.getValue());\n      bq.add(prefix, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","sourceOld":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery bq = new BooleanQuery(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      PrefixQuery prefix = new PrefixQuery(new Term(entry.getKey(), text));\n      prefix.setBoost(entry.getValue());\n      bq.add(prefix, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","sourceNew":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      Query q = new PrefixQuery(new Term(entry.getKey(), text));\n      float boost = entry.getValue();\n      if (boost != 1f) {\n        q = new BoostQuery(q, boost);\n      }\n      bq.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","sourceOld":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      PrefixQuery prefix = new PrefixQuery(new Term(entry.getKey(), text));\n      prefix.setBoost(entry.getValue());\n      bq.add(prefix, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","sourceNew":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      Query q = new PrefixQuery(new Term(entry.getKey(), text));\n      float boost = entry.getValue();\n      if (boost != 1f) {\n        q = new BoostQuery(q, boost);\n      }\n      bq.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","sourceOld":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      Query q = new PrefixQuery(new Term(entry.getKey(), text));\n      float boost = entry.getValue();\n      if (boost != 1f) {\n        q = new BoostQuery(q, boost);\n      }\n      bq.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","sourceNew":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      final String fieldName = entry.getKey();\n      final BytesRef term = getAnalyzer().normalize(fieldName, text);\n      Query q = new PrefixQuery(new Term(fieldName, term));\n      float boost = entry.getValue();\n      if (boost != 1f) {\n        q = new BoostQuery(q, boost);\n      }\n      bq.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","sourceOld":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      Query q = new PrefixQuery(new Term(entry.getKey(), text));\n      float boost = entry.getValue();\n      if (boost != 1f) {\n        q = new BoostQuery(q, boost);\n      }\n      bq.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser#newPrefixQuery(String).mjava","sourceNew":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      final String fieldName = entry.getKey();\n      final BytesRef term = getAnalyzer().normalize(fieldName, text);\n      Query q = new PrefixQuery(new Term(fieldName, term));\n      float boost = entry.getValue();\n      if (boost != 1f) {\n        q = new BoostQuery(q, boost);\n      }\n      bq.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","sourceOld":"  /**\n   * Factory method to generate a prefix query.\n   */\n  protected Query newPrefixQuery(String text) {\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(true);\n    for (Map.Entry<String,Float> entry : weights.entrySet()) {\n      Query q = new PrefixQuery(new Term(entry.getKey(), text));\n      float boost = entry.getValue();\n      if (boost != 1f) {\n        q = new BoostQuery(q, boost);\n      }\n      bq.add(q, BooleanClause.Occur.SHOULD);\n    }\n    return simplify(bq.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c8a0e442f7b61f811680273b25da95994a724466":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"ea4107f60b9f95623c16025c9c247412ff809092":["c8a0e442f7b61f811680273b25da95994a724466"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdc91c6aee685b616507b9e44fcc69315b8a9e6c"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8a0e442f7b61f811680273b25da95994a724466":["ea4107f60b9f95623c16025c9c247412ff809092"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fdc91c6aee685b616507b9e44fcc69315b8a9e6c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}