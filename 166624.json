{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\r\n  QueryNode q;\r\n  Token fieldToken=null, boost=null;\r\n  boolean group = false;\r\n    if (jj_2_1(2)) {\r\n      fieldToken = jj_consume_token(TERM);\r\n      jj_consume_token(COLON);\r\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\r\n    } else {\r\n      ;\r\n    }\r\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r\n    case QUOTED:\r\n    case TERM:\r\n    case RANGEIN_START:\r\n    case RANGEEX_START:\r\n    case NUMBER:\r\n      q = Term(field);\r\n      break;\r\n    case LPAREN:\r\n      jj_consume_token(LPAREN);\r\n      q = Query(field);\r\n      jj_consume_token(RPAREN);\r\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r\n      case CARAT:\r\n        jj_consume_token(CARAT);\r\n        boost = jj_consume_token(NUMBER);\r\n        break;\r\n      default:\r\n        jj_la1[7] = jj_gen;\r\n        ;\r\n      }\r\n                                                                 group=true;\r\n      break;\r\n    default:\r\n      jj_la1[8] = jj_gen;\r\n      jj_consume_token(-1);\r\n      throw new ParseException();\r\n    }\r\n      if (boost != null) {\r\n                  float f = (float)1.0;\r\n                  try {\r\n                    f = Float.valueOf(boost.image).floatValue();\r\n                    // avoid boosting null queries, such as those caused by stop words\r\n                if (q != null) {\r\n                        q = new BoostQueryNode(q, f);\r\n                }\r\n                  } catch (Exception ignored) {\r\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\r\n             * boost number is invalid)\r\n             */\r\n                  }\r\n      }\r\n      if (group) { q = new GroupQueryNode(q);}\r\n      {if (true) return q;}\r\n    throw new Error(\"Missing return statement in function\");\r\n  }\r\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\r\n  QueryNode q;\r\n  Token fieldToken=null, boost=null;\r\n  boolean group = false;\r\n    if (jj_2_1(2)) {\r\n      fieldToken = jj_consume_token(TERM);\r\n      jj_consume_token(COLON);\r\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\r\n    } else {\r\n      ;\r\n    }\r\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r\n    case QUOTED:\r\n    case TERM:\r\n    case RANGEIN_START:\r\n    case RANGEEX_START:\r\n    case NUMBER:\r\n      q = Term(field);\r\n      break;\r\n    case LPAREN:\r\n      jj_consume_token(LPAREN);\r\n      q = Query(field);\r\n      jj_consume_token(RPAREN);\r\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r\n      case CARAT:\r\n        jj_consume_token(CARAT);\r\n        boost = jj_consume_token(NUMBER);\r\n        break;\r\n      default:\r\n        jj_la1[7] = jj_gen;\r\n        ;\r\n      }\r\n                                                                 group=true;\r\n      break;\r\n    default:\r\n      jj_la1[8] = jj_gen;\r\n      jj_consume_token(-1);\r\n      throw new ParseException();\r\n    }\r\n      if (boost != null) {\r\n                  float f = (float)1.0;\r\n                  try {\r\n                    f = Float.valueOf(boost.image).floatValue();\r\n                    // avoid boosting null queries, such as those caused by stop words\r\n                if (q != null) {\r\n                        q = new BoostQueryNode(q, f);\r\n                }\r\n                  } catch (Exception ignored) {\r\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\r\n             * boost number is invalid)\r\n             */\r\n                  }\r\n      }\r\n      if (group) { q = new GroupQueryNode(q);}\r\n      {if (true) return q;}\r\n    throw new Error(\"Missing return statement in function\");\r\n  }\r\n\n","bugFix":null,"bugIntro":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case REGEXPTERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":["e91b7614171e0a6a82351457c2870d2a0124ba9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case REGEXPTERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case REGEXPTERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case REGEXPTERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","d94d6afa51157e490fc169e192a154ffc4cdad0b"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["d94d6afa51157e490fc169e192a154ffc4cdad0b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}