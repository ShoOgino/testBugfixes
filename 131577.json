{"path":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#lookup(List[String],int,Map[String,String],Set[String]).mjava","sourceNew":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","sourceOld":"    /**\n     *\n     * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'\n     * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'\n     * @param templateVariables The mapping of template variable to its value\n     * @param availableSubPaths If not null , available sub paths will be returned in this set\n     */\n    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {\n      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));\n      if (pathSegments.size() < index + 1) {\n        findAvailableChildren(\"\", availableSubPaths);\n        return obj;\n      }\n      String piece = pathSegments.get(index);\n      if (children == null) return null;\n      Node n = children.get(piece);\n      if (n == null && !reserved.contains(piece)) n = children.get(\"\");\n      if (n == null) return null;\n      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}