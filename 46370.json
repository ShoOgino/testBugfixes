{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","commits":[{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton a = new Automaton();\n    a.initial = convert(\n        builder.complete(), \n        new IdentityHashMap<State,org.apache.lucene.util.automaton.State>());\n    a.deterministic = true;\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of strings.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton a = new Automaton();\n    a.initial = convert(builder.complete(), new IdentityHashMap<State,org.apache.lucene.util.automaton.State>());\n    a.deterministic = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton a = new Automaton();\n    a.initial = convert(\n        builder.complete(), \n        new IdentityHashMap<State,org.apache.lucene.util.automaton.State>());\n    a.deterministic = true;\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton a = new Automaton();\n    a.initial = convert(\n        builder.complete(), \n        new IdentityHashMap<State,org.apache.lucene.util.automaton.State>());\n    a.deterministic = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight#build(Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton.Builder a = new Automaton.Builder();\n    convert(a,\n        builder.complete(), \n        new IdentityHashMap<State,Integer>());\n\n    return a.finish();\n  }\n\n","sourceOld":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static LightAutomaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilderLight builder = new DaciukMihovAutomatonBuilderLight();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    LightAutomaton.Builder a = new LightAutomaton.Builder();\n    convert(a,\n        builder.complete(), \n        new IdentityHashMap<State,Integer>());\n\n    return a.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton.Builder a = new Automaton.Builder();\n    convert(a,\n        builder.complete(), \n        new IdentityHashMap<State,Integer>());\n\n    return a.finish();\n  }\n\n","sourceOld":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton a = new Automaton();\n    a.initial = convert(\n        builder.complete(), \n        new IdentityHashMap<State,org.apache.lucene.util.automaton.State>());\n    a.deterministic = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#build(Collection[BytesRef]).mjava","sourceNew":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    char[] chars = new char[0];\n    CharsRef ref = new CharsRef();\n    for (BytesRef b : input) {\n      chars = ArrayUtil.grow(chars, b.length);\n      final int len = UnicodeUtil.UTF8toUTF16(b, chars);\n      ref.chars = chars;\n      ref.length = len;\n      builder.add(ref);\n    }\n    \n    Automaton.Builder a = new Automaton.Builder();\n    convert(a,\n        builder.complete(), \n        new IdentityHashMap<State,Integer>());\n\n    return a.finish();\n  }\n\n","sourceOld":"  /**\n   * Build a minimal, deterministic automaton from a sorted list of {@link BytesRef} representing\n   * strings in UTF-8. These strings must be binary-sorted.\n   */\n  public static Automaton build(Collection<BytesRef> input) {\n    final DaciukMihovAutomatonBuilder builder = new DaciukMihovAutomatonBuilder();\n    \n    CharsRef scratch = new CharsRef();\n    for (BytesRef b : input) {\n      UnicodeUtil.UTF8toUTF16(b, scratch);\n      builder.add(scratch);\n    }\n    \n    Automaton.Builder a = new Automaton.Builder();\n    convert(a,\n        builder.complete(), \n        new IdentityHashMap<State,Integer>());\n\n    return a.finish();\n  }\n\n","bugFix":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}