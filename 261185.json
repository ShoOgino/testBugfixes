{"path":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#seekTLog(long).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#seekTLog(long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Seeks the tlog associated to the target version by using the updates log index,\n     * and initialises the log reader to the start of the tlog. Returns true if it was able\n     * to seek the corresponding tlog, false if the <i>targetVersion</i> is lower than the\n     * oldest known entry (which probably indicates a gap).<br>\n     * <p>\n     * <b>NOTE:</b> This method might modify the tlog queue by removing tlogs that are older\n     * than the target version.\n     */\n    private boolean seekTLog(long targetVersion) {\n      // if the target version is lower than the oldest known entry, we have probably a gap.\n      if (targetVersion < ((CdcrTransactionLog) tlogs.peekLast()).startVersion) {\n        return false;\n      }\n\n      // closes existing reader before performing seek and possibly modifying the queue;\n      tlogReader.close();\n\n      // iterates over the queue and removes old tlogs\n      TransactionLog last = null;\n      while (tlogs.size() > 1) {\n        if (((CdcrTransactionLog) tlogs.peekLast()).startVersion >= targetVersion) {\n          break;\n        }\n        last = tlogs.pollLast();\n      }\n\n      // the last tlog removed is the one we look for, add it back to the queue\n      if (last != null) tlogs.addLast(last);\n\n      currentTlog = tlogs.peekLast();\n      tlogReader = currentTlog.getReader(0);\n      pointer.set(currentTlog.tlogFile);\n      numRecordsReadInCurrentTlog = 0;\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#seekTLog(long).mjava","sourceNew":null,"sourceOld":"    /**\n     * Seeks the tlog associated to the target version by using the updates log index,\n     * and initialises the log reader to the start of the tlog. Returns true if it was able\n     * to seek the corresponding tlog, false if the <i>targetVersion</i> is lower than the\n     * oldest known entry (which probably indicates a gap).<br>\n     * <p>\n     * <b>NOTE:</b> This method might modify the tlog queue by removing tlogs that are older\n     * than the target version.\n     */\n    private boolean seekTLog(long targetVersion) {\n      // if the target version is lower than the oldest known entry, we have probably a gap.\n      if (targetVersion < ((CdcrTransactionLog) tlogs.peekLast()).startVersion) {\n        return false;\n      }\n\n      // closes existing reader before performing seek and possibly modifying the queue;\n      tlogReader.close();\n\n      // iterates over the queue and removes old tlogs\n      TransactionLog last = null;\n      while (tlogs.size() > 1) {\n        if (((CdcrTransactionLog) tlogs.peekLast()).startVersion >= targetVersion) {\n          break;\n        }\n        last = tlogs.pollLast();\n      }\n\n      // the last tlog removed is the one we look for, add it back to the queue\n      if (last != null) tlogs.addLast(last);\n\n      currentTlog = tlogs.peekLast();\n      tlogReader = currentTlog.getReader(0);\n      pointer.set(currentTlog.tlogFile);\n      numRecordsReadInCurrentTlog = 0;\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}