{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","commits":[{"id":"7fe833105c61e37b761ef49bb83a3064c720d437","date":1327401646,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new PatternReplaceCharFilter(Pattern.compile(\"a\"), \"b\", CharReader.get(reader));\n      }\n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new PatternReplaceCharFilter(Pattern.compile(\"a\"), \"b\", CharReader.get(reader));\n      }\n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new PatternReplaceCharFilter(Pattern.compile(\"a\"), \"b\", CharReader.get(reader));\n      }\n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47777586dd4c026834be0b2cc454d527cf8884b3","date":1330348390,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000*RANDOM_MULTIPLIER, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new PatternReplaceCharFilter(Pattern.compile(\"a\"), \"b\", CharReader.get(reader));\n      }\n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":["04abe89b744825e182fbffd81659a81c15ecf80a","56584ae6fa4912e4dd6e818a7da3799cf807234f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ef906aa4fc142bf547403c048d0957e11462df7","date":1330375824,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000*RANDOM_MULTIPLIER, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    for (int i = 0; i < numPatterns; i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000*RANDOM_MULTIPLIER, true); // only ascii\n    }\n  }\n\n","bugFix":null,"bugIntro":["04abe89b744825e182fbffd81659a81c15ecf80a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"94485df2fde30eb614716fc9ef3c5ed5ce0ed642","date":1330416282,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000*RANDOM_MULTIPLIER, true); // only ascii\n    }\n  }\n\n","bugFix":null,"bugIntro":["aeeb58ba4b71c097f081c7005b5ce0213e609984"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25521189ffacd1f9f6369b952e233758a5bd37fe","date":1330416938,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      long s = System.currentTimeMillis();\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, true); // only ascii\n      System.out.println((System.currentTimeMillis() - s) / 1000.0 + \" > \" + p);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, true); // only ascii\n    }\n  }\n\n","bugFix":null,"bugIntro":["aeeb58ba4b71c097f081c7005b5ce0213e609984"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aeeb58ba4b71c097f081c7005b5ce0213e609984","date":1330457165,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      long s = System.currentTimeMillis();\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, true); // only ascii\n      System.out.println((System.currentTimeMillis() - s) / 1000.0 + \" > \" + p);\n    }\n  }\n\n","bugFix":["25521189ffacd1f9f6369b952e233758a5bd37fe","94485df2fde30eb614716fc9ef3c5ed5ce0ed642"],"bugIntro":["04abe89b744825e182fbffd81659a81c15ecf80a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new PatternReplaceCharFilter(Pattern.compile(\"a\"), \"b\", CharReader.get(reader));\n      }\n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternReplaceCharFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numPatterns = atLeast(100);\n    long start = System.currentTimeMillis();\n    long maxTime = 1000 * 2;\n    Random random = new Random(random().nextLong());\n    for (int i = 0; i < numPatterns && start + maxTime > System.currentTimeMillis(); i++) {\n      final Pattern p = randomPattern();\n      final String replacement = _TestUtil.randomSimpleString(random);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }\n\n        @Override\n        protected Reader initReader(Reader reader) {\n          return new PatternReplaceCharFilter(p, replacement, CharReader.get(reader));\n        }\n      };\n      checkRandomData(random, a, 1000 * RANDOM_MULTIPLIER, \n          /* max input length. don't make it longer -- exponential processing\n           * time for certain patterns. */ 40, true); // only ascii\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7fe833105c61e37b761ef49bb83a3064c720d437","aeeb58ba4b71c097f081c7005b5ce0213e609984"],"94485df2fde30eb614716fc9ef3c5ed5ce0ed642":["9ef906aa4fc142bf547403c048d0957e11462df7"],"aeeb58ba4b71c097f081c7005b5ce0213e609984":["25521189ffacd1f9f6369b952e233758a5bd37fe"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fe833105c61e37b761ef49bb83a3064c720d437"],"9ef906aa4fc142bf547403c048d0957e11462df7":["47777586dd4c026834be0b2cc454d527cf8884b3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7fe833105c61e37b761ef49bb83a3064c720d437"],"47777586dd4c026834be0b2cc454d527cf8884b3":["7fe833105c61e37b761ef49bb83a3064c720d437"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["aeeb58ba4b71c097f081c7005b5ce0213e609984"],"25521189ffacd1f9f6369b952e233758a5bd37fe":["94485df2fde30eb614716fc9ef3c5ed5ce0ed642"],"7fe833105c61e37b761ef49bb83a3064c720d437":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"94485df2fde30eb614716fc9ef3c5ed5ce0ed642":["25521189ffacd1f9f6369b952e233758a5bd37fe"],"aeeb58ba4b71c097f081c7005b5ce0213e609984":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"9ef906aa4fc142bf547403c048d0957e11462df7":["94485df2fde30eb614716fc9ef3c5ed5ce0ed642"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","7fe833105c61e37b761ef49bb83a3064c720d437"],"47777586dd4c026834be0b2cc454d527cf8884b3":["9ef906aa4fc142bf547403c048d0957e11462df7"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7fe833105c61e37b761ef49bb83a3064c720d437":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","47777586dd4c026834be0b2cc454d527cf8884b3"],"25521189ffacd1f9f6369b952e233758a5bd37fe":["aeeb58ba4b71c097f081c7005b5ce0213e609984"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}