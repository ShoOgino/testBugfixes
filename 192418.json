{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","pathOld":"/dev/null","sourceNew":"  private Similarity.SimScorer buildSimScorer(IndexSearcher searcher, float boost) throws IOException {\n    Set<Term> terms = new HashSet<>();\n    intervalsSource.extractTerms(field, terms);\n    TermStatistics[] termStats = new TermStatistics[terms.size()];\n    int termUpTo = 0;\n    for (Term term : terms) {\n      TermStatistics termStatistics = searcher.termStatistics(term, TermStates.build(searcher.getTopReaderContext(), term, true));\n      if (termStatistics != null) {\n        termStats[termUpTo++] = termStatistics;\n      }\n    }\n    if (termUpTo == 0) {\n      return null;\n    }\n    CollectionStatistics collectionStats = searcher.collectionStatistics(field);\n    return searcher.getSimilarity().scorer(boost, collectionStats, Arrays.copyOf(termStats, termUpTo));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","sourceNew":"  private Similarity.SimScorer buildSimScorer(IndexSearcher searcher, float boost) throws IOException {\n    Set<Term> terms = new HashSet<>();\n    intervalsSource.extractTerms(field, terms);\n    TermStatistics[] termStats = new TermStatistics[terms.size()];\n    int termUpTo = 0;\n    for (Term term : terms) {\n      TermStatistics termStatistics = searcher.termStatistics(term, TermStates.build(searcher.getTopReaderContext(), term, true));\n      if (termStatistics != null) {\n        termStats[termUpTo++] = termStatistics;\n      }\n    }\n    if (termUpTo == 0) {\n      return null;\n    }\n    CollectionStatistics collectionStats = searcher.collectionStatistics(field);\n    return searcher.getSimilarity().scorer(boost, collectionStats, ArrayUtil.copyOfSubArray(termStats, 0, termUpTo));\n  }\n\n","sourceOld":"  private Similarity.SimScorer buildSimScorer(IndexSearcher searcher, float boost) throws IOException {\n    Set<Term> terms = new HashSet<>();\n    intervalsSource.extractTerms(field, terms);\n    TermStatistics[] termStats = new TermStatistics[terms.size()];\n    int termUpTo = 0;\n    for (Term term : terms) {\n      TermStatistics termStatistics = searcher.termStatistics(term, TermStates.build(searcher.getTopReaderContext(), term, true));\n      if (termStatistics != null) {\n        termStats[termUpTo++] = termStatistics;\n      }\n    }\n    if (termUpTo == 0) {\n      return null;\n    }\n    CollectionStatistics collectionStats = searcher.collectionStatistics(field);\n    return searcher.getSimilarity().scorer(boost, collectionStats, Arrays.copyOf(termStats, termUpTo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","sourceNew":"  private Similarity.SimScorer buildSimScorer(IndexSearcher searcher, float boost) throws IOException {\n    Set<Term> terms = new HashSet<>();\n    intervalsSource.extractTerms(field, terms);\n    TermStatistics[] termStats = new TermStatistics[terms.size()];\n    int termUpTo = 0;\n    for (Term term : terms) {\n      TermStatistics termStatistics = searcher.termStatistics(term, TermStates.build(searcher.getTopReaderContext(), term, true));\n      if (termStatistics != null) {\n        termStats[termUpTo++] = termStatistics;\n      }\n    }\n    if (termUpTo == 0) {\n      return null;\n    }\n    CollectionStatistics collectionStats = searcher.collectionStatistics(field);\n    return searcher.getSimilarity().scorer(boost, collectionStats, ArrayUtil.copyOfSubArray(termStats, 0, termUpTo));\n  }\n\n","sourceOld":"  private Similarity.SimScorer buildSimScorer(IndexSearcher searcher, float boost) throws IOException {\n    Set<Term> terms = new HashSet<>();\n    intervalsSource.extractTerms(field, terms);\n    TermStatistics[] termStats = new TermStatistics[terms.size()];\n    int termUpTo = 0;\n    for (Term term : terms) {\n      TermStatistics termStatistics = searcher.termStatistics(term, TermStates.build(searcher.getTopReaderContext(), term, true));\n      if (termStatistics != null) {\n        termStats[termUpTo++] = termStatistics;\n      }\n    }\n    if (termUpTo == 0) {\n      return null;\n    }\n    CollectionStatistics collectionStats = searcher.collectionStatistics(field);\n    return searcher.getSimilarity().scorer(boost, collectionStats, Arrays.copyOf(termStats, termUpTo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","sourceNew":"  private Similarity.SimScorer buildSimScorer(IndexSearcher searcher, float boost) throws IOException {\n    Set<Term> terms = new HashSet<>();\n    intervalsSource.extractTerms(field, terms);\n    TermStatistics[] termStats = new TermStatistics[terms.size()];\n    int termUpTo = 0;\n    for (Term term : terms) {\n      TermStatistics termStatistics = searcher.termStatistics(term, TermStates.build(searcher.getTopReaderContext(), term, true));\n      if (termStatistics != null) {\n        termStats[termUpTo++] = termStatistics;\n      }\n    }\n    if (termUpTo == 0) {\n      return null;\n    }\n    CollectionStatistics collectionStats = searcher.collectionStatistics(field);\n    return searcher.getSimilarity().scorer(boost, collectionStats, ArrayUtil.copyOfSubArray(termStats, 0, termUpTo));\n  }\n\n","sourceOld":"  private Similarity.SimScorer buildSimScorer(IndexSearcher searcher, float boost) throws IOException {\n    Set<Term> terms = new HashSet<>();\n    intervalsSource.extractTerms(field, terms);\n    TermStatistics[] termStats = new TermStatistics[terms.size()];\n    int termUpTo = 0;\n    for (Term term : terms) {\n      TermStatistics termStatistics = searcher.termStatistics(term, TermStates.build(searcher.getTopReaderContext(), term, true));\n      if (termStatistics != null) {\n        termStats[termUpTo++] = termStatistics;\n      }\n    }\n    if (termUpTo == 0) {\n      return null;\n    }\n    CollectionStatistics collectionStats = searcher.collectionStatistics(field);\n    return searcher.getSimilarity().scorer(boost, collectionStats, Arrays.copyOf(termStats, termUpTo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"362cb5d910af28f1dadaddc4c7670d7d166b23c2","date":1547647156,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery#buildSimScorer(IndexSearcher,float).mjava","sourceNew":null,"sourceOld":"  private Similarity.SimScorer buildSimScorer(IndexSearcher searcher, float boost) throws IOException {\n    Set<Term> terms = new HashSet<>();\n    intervalsSource.extractTerms(field, terms);\n    TermStatistics[] termStats = new TermStatistics[terms.size()];\n    int termUpTo = 0;\n    for (Term term : terms) {\n      TermStatistics termStatistics = searcher.termStatistics(term, TermStates.build(searcher.getTopReaderContext(), term, true));\n      if (termStatistics != null) {\n        termStats[termUpTo++] = termStatistics;\n      }\n    }\n    if (termUpTo == 0) {\n      return null;\n    }\n    CollectionStatistics collectionStats = searcher.collectionStatistics(field);\n    return searcher.getSimilarity().scorer(boost, collectionStats, ArrayUtil.copyOfSubArray(termStats, 0, termUpTo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["361b1afc99f68598c73d37074aec089c9c951586","9798d0818e7a880546802b509792d3f3d57babd2"],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["9798d0818e7a880546802b509792d3f3d57babd2"],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9798d0818e7a880546802b509792d3f3d57babd2":["361b1afc99f68598c73d37074aec089c9c951586"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["361b1afc99f68598c73d37074aec089c9c951586","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"361b1afc99f68598c73d37074aec089c9c951586":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","362cb5d910af28f1dadaddc4c7670d7d166b23c2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}